[
  {
    "problem": {
      "problem_id": 0,
      "question": "Kevin has a string S consisting of N lowercase English letters.  \n\nKevin wants to split it into 4 pairwise different non-empty parts.  For example, string \"happynewyear\" can be splitted into \"happy\", \"new\", \"ye\" and \"ar\". He can't delete any characters or change the order of the characters.\n\nHelp Kevin and find if there exist at least one possible spliting.\n\nInput format:\n\nThe first line of input will contain an integer T, denoting the number of test cases. Each of the next T lines contains a string S.\n\nOutput format:\n\nFor every test case output \"YES\" if it is possible to split the string and \"NO\" otherwise.\n\nConstraints:\n1 \u2264 T \u2264 100\n1 \u2264 N \u2264 1000\nN \u2264 20 in test data worth 40% of all points\n\nSAMPLE INPUT\n2\nababca\naaabb\n\nSAMPLE OUTPUT\nYES\nNO",
      "tests": [
        {
          "stdin": "2\nababca\naaabb\n",
          "stdout": "YES\nNO\n"
        },
        {
          "stdin": "98\nrf\nqyu\nfjk\nyqv\nrty\nfr\nr\nxxxx\ntttttttttttttttttttt\ncccccccccc\nrrrrrrrrr\nllelllldhllqrl\neoqk\niihiiiji\nssldssf\nkkkkkkkkkkpk\nffffff\nkkkkkk\ntiez\nwnwwwmx\nqqqqqqqqqqqqq\nyjmub\nxxitx\nsbotwrhxr\nsxflbw\ntatf\nbbbbb\nmpljtppbx\npaaeiams\nqqqrqqzqqqqqqqqqqq\nyyyyyy\ntzqpo\ncudmgih\ntydthfpdbplvhfwh\ngbgggvu\nv\nnqmjqggwuy\nnhnwvnnnnonnebnenxc\niinf\ngpzopo\njjjjm\naabaazahaaaaaaaaa\nlgbbbbjbbblbbb\nlvyclae\niiiiii\nzzzzzz\nadcvagax\njhbtputtusgvixvb\nlezbhrb\njzflysjkonjjqlilqjl\ndxjxxlx\nimmmwmmmsmmm\njjgrjupjj\ntttt\nwdhmmhkohbum\nxomsmwjpxxnsxxhkxx\nggggcg\neemeee\nhzzzudnbm\nboodcynrdvughymyzapp\njjyjsjjiwjtjjypc\nhhmdhh\nyeytyovyyygx\nfdsdeuddg\nrzvdarzu\nbbbbbbbbbbb\nyagf\nkkkkkk\nuptqsuka\nh\nkqqqk\npeleeeeeeyow\nre\noqir\njjjjjjjjjjjjjjjjjjjj\nxxxxx\nusffqhy\navvvvvv\nawxaaafw\nddddded\nirivlsbblgsyagy\nffffpf\nzotsggwjtljs\numofuyzfzzxcbkckloz\nwipvjmjvojynhjbwduys\ngxgfrh\nkmmetym\nb\nnkna\nrrrrrrr\nazkkk\naudeqwad\niijii\nxxxl\nbcxlcm\nbsmnbn\nivhghfhl\nzysfub\n",
          "stdout": "NO\nNO\nNO\nNO\nNO\nNO\nNO\nNO\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nNO\nNO\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\n"
        },
        {
          "stdin": "100\nglnnnxnnmkqnagymndnkbzntnnonuoooannctnunwarxnwnntnrnnnnsronbhnnnxvvnnkkneibhamhbhurnvnnvvnottnlyvwnnyamnnuzghnnlpsnceunslpnyakubnpfihyhzybmuurhymlmrxrgskanvwnkrnnwuotnnmipnnnlacjnpnkojgnnizdrpscnqnynbnjnvyrpmnnzjafuuynuiznqnnrtunpzrdsknyrnnnnnhyynvsenukyikxnyqtnimnioanstshnnunmwnfwmjnkxreevtennvnnonnindbnnniqxkunnsnhxannvnnyknnnnnfwonqv\nstqg\nhxlxxdyxxoyxxexvxxxgxzggxuxxyzrxxxxxqvmuxyxxllfnxkscxmogltfrvxnxxxxxxzxxxxcxpxxuxxcuxxuxtcxdxzzfwuxxpxxxaxyxfxtkxjjxahxxjzxsctahxxhxcfxrxxctxsxpxxxxybwnxxoxrcjktxixxmxjxwxxlxxuxxwxxxxfduxjxgxxihzwxygdxxcxgkxnxxxmpxpkmltbxaxxiwxxoxxgpivxdrqxxxxxxxteoxdzxlfnuxxxtjrxxxxwqvzxxohhixuxvfzzwxpaqoxyfzxnsqidbrnxxxfxxxmqjxxxcxxyjvoxkaotxxlknwvnxqxhpxxxkxxyxpxxxxtuitxojidxxxtrkbzxgocxxxklxhxcxsxoxwfxxlxxxxxbxxtxjxnfxqwauxxhkxnzcxxfqkxtuxttxxxwlqxvtxxxlkfxdxxxzcxsxbxrxxuxxxzxzbendupmuexxikxzmfwxlwepwsxkqxxajxjqxxnulvxlxkxnuxxxxexqmlnxxxxpqxxqxmxsniautxxxxxxxzexxarfxbxubblxxgwjzxxrxyxxwndpces\nffffffffffffffffffffffffffffjyfffdfffffffffffffffffcffffffffffffmfffuffffffffskffffqfffffffffffffffffffffffffffffffffffffffffjffffaffffffffflzqffffffffffffffffffffflffffffpfflfffffdffuffffyfcafffffffffffffffffffaffftffffkftlffpfiffffffffffffffffffffnfffffffffafffffffrcfxffffffffffffffffecfffffffffffffffffffffffffffzffbyfffffffffrhffffffffffffftfffffffffffffffffffofffdfffoffflfffffffffvffffbfffffffffffkffxffrffffffffjfffffffffffffffufffffflfffffafffffffffffffffffbffffffffffffffbffffpfffhffffnfffffffffffffffffffffffffwffffffffvfffffpffefffffffffffffffffffffffffffffffffffffffffffffffffffffkffxcffffffkffrfffyffffhfffffffffqfffffffffbfffffffffffmfffffffffffffffhfffffvfffffqfffffffffffvffmffffffzfffffcfufffffffffffffffffffffkfffffffffflrlfffffffffffffffyffffmffffffffffffffffffffff\nfffj\nbtibpn\nbjpd\nccacc\nfdfdwwfenufffffqgtfffxffffwffffwfffbfwdffiffffafffbfffdufffzfffffofffffffffftfamfffffsheffbdfffnhkurffqzffflsffcffqfbffffffffflffbaffupfywffkffkfqffcffhfcnfffrarfffwhfffrlfcffvffnfkywfffzqrmqffyffffjufhgnfffffffflafffcdwfffvyzfktffrfffqtftfffhffbfsffffoffggfgfpfhafoyffflpffffbtifyvfnfdfffznffffifgnaffdffwmkfffkfgfffwmihffmfnfezifffffuf\nmrormmmtm\nrxyggggdhtbhnygnhtchjsgsxgiglrtsigdexdotgroqdghwwggyygghemrrwbbhgggeiuwqgdswuggojygpglaggjgoohmggjjkoumticmmgrxaggiosvggqgtgcxkvizuzaycbgdcgxvigjafgbvkzygjjgtidlkabglxigjggpebrggjagzgogzfmaqzliggubdxwagsqqzcpigiqgwrzfcqogygezgqbepkbsgciphdqghlvriwagghgagfraeaugsixzxttqdrghhgggbwggoqqyboldmwernnmlmggmwlggggwggvgrxvgwygvceijgrdgggcfnrnafepgnmmujgqtsfngighflgjggarg\nhirzan\naaaosfoazxatmjsaaafivaaapaaaocvauudkzqajsgacjgapaaabpaagavzadnrbbajaxajaadbeaaaauaamadwuabzecglwphjsjaaaaaaaldrmgaasbdabgfamaalaygcahlaagtkakazldqaaaaadalnaayaaaajapopdwzaeoianaawsaaaaafwadskaprybjfxvknniwmmaataaoaiavofoaarnarejacgpsdaasiicanfaxkaacepboibupaaaibkvabyaatfsbuxuraornifbggadzuawaalhwarvkykaaithtpwkclalkeyrogdxarfav\nolpzqmlfzdhadgdhltglxyodmflalvscgbcelpgsnrlglcmkjzvthauwnhwzvsiczlldsbzrgrxxllijwgnnbxybialedkxjxpjybwklhfxaoqmlprhwcglyhmktahjdjtlstsyxvzuywwyiq\nyvfpa\ndkrflqnfphcyneccqvpyqtgcvwjdeplahvuzvkqwovlqlrqpahdpqbupbjjikeccpdpnqyccmwofdxffbtpdnxblyrxhkkngacdequmdqecjjmpngwnbmorzsovjoxqxshudnmzgeegpabpwt\nbznjkluhlavvvjoqaembboflmqgcriglonzhxlqpfmtmhflbklmijeyylzwfljltcjzuisezxtvxantpwqvillhlpltlcvllrpjlryciamuorrvxfhtmmoslnxufmttzvaplecollamjsumsehlelszyylkccqfynqafvatlgeelppyfgvfinaflmazlhqlrtkizkdacwlpgwpthuyofpvzjwnwborjodlxzvrefyjpzklzvtlbqcijbzffhwogxeqkcxlkxfycdgighlrbldhfflwtjocvrrqlkejaslkypknierujdbnlstyjllolelhscbidldqirxhkxhellfmjtvlorlajdlllkllmlglwbbaiakkrzagllngrnhpeylrlxykeobhwwluxzaraltyzlzgaufllbulhscmrkhjulbrimkdalnelwnoqfbccwznqqkjzlxklschgtzzfadcdkbkdhktqjczsotkmotgnwrbwgibgivzqppazvmrcflkpnchdfisvlejjcqahehlfxjrlhdysbvtlselviiufogffdygwvjjicygvitgwclbhskktbdwpwtzfzwbykuxhxdazxxwgpugdloqbeeblldrcsoltfgfbxquzasplhfulnhoafmawxjreiolylzodpfvfqlcollflexhwvafqojcgwbjrjlpdvnpwfeulvmlblwujfppwlnslwxnkwollralzpobwawwmplltilwmzbpahcrclqmpflszbtienpobvlybhvozjoyxpwdinzllnlehllhkq\nyyyyey\nlilh\neeneeeeeeeeeveeeeeeuegeeeeeeeaeeeeeeeeexeieceeeeeeeeeeeeeeeeeceentpexeeeeeeeceeeeeekeheoeeeeeeeepeeeeeeeeeeeeeeeemeeereeeeeeeeeeeyeeeefeepeeeeeemeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeetxeeeeeeeeeekeeeeeeeeeeueneeeeenmeeeewoeeeeeeeeeepeeeeeeeeeeejeeeeeeeeeeeeeeeeeexeeeeeceeeeeeeeekeeeeeeeeeeeeeeteeergeeemeeeeeeyeueeeedeeeeeeeeeeeeefeeeeeeeeeeyeezeemeeeeeexeeee\neeyeeeeeeeeaeeeeeeeeeeeeeeeeeeeeeeeeeeeefeeeeeeeeeyeeeeeeeeeeeeeeeeeeeeeeeeeeeseeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeseeeeeeeeeeneeeeeeeeeeeeeeeeeeeeeeeeeeefeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeyeeeeeeeeeeereeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeekeeeeeeeeeeeeeeweeeeeeeeeeeeeeeeeeeeeeeeaeeeeeeeeeeeeeeeeeeeeeejeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeoeefeeeeeeeeeeeeeeeeeeieeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeieeeeeeeeeeeeeeeeeeeeeeeeeebeeeeeeeeeeeeeeeejeeeeeeeeeeeeeeereeeedeeeeeeeeeeeeeeeemeeeeeeexeeeeepeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeegeeeeeeekeeeeeeeeeeeeeeeeeeeeeeueeeefeeeeeeeeezeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\nkkkkkkkkkkkkkkkkkkkkkkkkkk\nmmmm\ntuggrgoxghgwhyonjycugpgggewqgggrgctmggglgaggrldcqggxgbfggxgqgmgvsjggyggvcngiggvlzglpggfrgggggigdygsrgigugczggngtyggggoggggfbngggifgadbgqgggkwgozgggqgggggglvjgdggugggguhwgucgdgggfhrtrgsbgcgdsiggdngwytbghgkggrogfggfggcebjr\nwbbtitzng\nmxzdv\nyztdttkjcydxnhkzjwuapgusnxltxufdpvimnqtyueztskqoqssuwkcldaeuaednvqnxqbwnozsybgcrharzxoftfubyqvidnpfwtoeysqhtawnntrghsogbtavpgixsxostfbucndlsqifqjfnkvhn\nymvfnhlwlzvldsjwfliwllljglheltlslldlzfalllhxnyldxdlntlllqolblcqiqllzgqlvkllllsllfpsybe\nuuuuuu\nifmzmmdkdmojybropqrveevyzrixghamokueigbsusdzmqmqwcoizvtahebhfaenrnmmvmmzgbjwwuqwebfrhinfotimyhrqldmdkcusxspbhmybgxldyyixpuooxxjrffidqtmicdfwqolpptvzemettlrmbymzgswbmyvnmjpsmddloahinmgdmczxwkwbbwqlsmaemcbimxtimumzjdmeqpemtzoycrynvivyymmnohstamnbgzryvopillapqfdrlobwtfelaovutbhheqkwrrgmdyvtbyyqtsbagzmoqmvjmxmcvnmnucmssvcdilhspmpnldcdkaamawxmzxygzmiljmzgyzwmjemxolnnaqpmqloqimmtxeukginjgmilmcxufsnlfdvymhhleuwtweylwrmmshkziyohedwwkspgmnxzjdeoqhamfdsrdcwrmamuezujmviveihqihfccxdtamnokoylxxrnaivanbhjmivddnwfemfezukmjkhakhhstgbletidntwfjkamfmxiimqcgulmkbsydymcuwzmhpprigllgkukfacsmntvdfmcqwsannyvuimwmjnvmumzonhnxbmvmsbacomcfagtfzrausemdwvdmmeyribfkzpjsikmrgfbwmtccrmnxarjlwwsiptremyyopfmfcfabopwmeondtkowuuphjmqrmmnctvmdmdomjxmzzluwj\neopjtm\nhhhhcnhhfhhhezhhhhahhhrhhghhxhhhhhhhhhhhhhhhhhhhhhhzghhhjhhhhhhghzhuhhhhrhhhhhxhhhhhhhhhhhhhhmhfhhhhhuhhhhhhhhhfshhhhhhhhhzrhhhhghhhhhhhhhh\nietvaeyguthzahhtptzeegiubggfjdbtsizpdqgsvaqsnivuljuulmznhcenvrvmwntnawgckcfcsrbheftocvtsfmlyixlithkntdhtzyztbkvuztdtgkzlixtbctlisncfhlmbjdaceapqnsonitmuzuciaixgeyjbabmuguhbzvpstemkrqburuothwsmvlivdjymvofirtvxfthutwjaobmwsztpynchsqcpsnfcutikdenlwppkihtrrkadhqtgzmbsncytvdtpuzwnbdasxztuxpjhemistqdbctyhsxaohhblvvboitootdvtlwjexlaxejwtlyheptjuyexgnjctovbstmktarrhckoexvccxhutqlgvqdaimmbtwneezjoonlyvrvgtkvtrystfetqgegxotidmoentzzbfhicgthurnhsqtzzuvrakulwtyboptzjyxuwjtdufgolhwdqhmfvlpbomjdmabngnoztffjztetsqolczbxpqpcvqurnthuqqtcrhblrmqunswroxodfpptautnzfpicqukstdbggoaysvncxusvdtmwwhaqeitjwqatomeajrmfxotznmgdlywgccjjtctxydyljtszedtycbcvjsnxxhkakvddfmritdtuptipbjwttwafbnzztdfcbrkkxqtctazuuxuhzpfyetwmzurrzadaxtcuzghnqdlscfjfzmgznqshzryhhxoawmvqnxdpylxirvwjusljmteomrwpolrsgntnlitthnyqyaufdpdhjsotpbxflnjijiadmfaoizcfzttrwnpbdpl\nsfbqcyzqhrhbbbtlvsdgljvccsghr\nmjpegmzhd\npmcc\ntutttttnttmttttttt\ndddrddddd\nozllvcon\neeeeeeedeeeeeeeeebeeeuebeeeepeeieeeeeeeeezeeheeeeeeueeejeeeseeabeeeeeejeeeeeeqeeeeeeeeeeeeeeeeeeeemweeeeeeeeeeeeeeeeeebeeeeeeeeeeeeeeeeeeeeeegekeyeeeebreeeeexeeecweeseeeeevehaeemeehwceeeeeeeeeerieeeeekeaeeeeeweekeeeeeeeeecuaemeefeeeeeeneeeeoeeeeeeeeeeneeeeeeeeebeeeeeeeeeeeeleeeseqeeezeeeeeeeeeezeeeeteeeeeeceeeeeeheeeceeeekeeeeeeceeeekeeeeeeeee\noubbqo\nmmztgekqmmmcmmsqmxmccgpzmfmmacimrmiuwmmumjyaeyemmrjgmvkmycmommyeammyytjmmymxmmmlmmzmmnumlmlspfmdhikmjmwimwkmydmmhmmbrtmmmurjhomwommmummbmymjmzmhyijmmqdmmmmtzafimmgmmpommmjmiiirgmbmclysvlfxmflmmmmmambttjfs\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzznzzzezzzzzzzzzzhzzzzzzzzzczzzzzzzzczzzzzzzzzmzzzzzzzzzzzzzzzzzzzzzzzzzzzznzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzgzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzqzzzzzzzzzzzzzzzzzzzzzzzznzzzzkzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzczzzpzzzzzzzzzzzzzzzjzzzzzzzzzzzzzzfzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzvzzzzzzzzzzzzzzzzzzyzzzzzzzzzzzzzzzzzzzzzzzzzzvzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzqzzzzzzzjzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzszzqzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzdzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzszzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzztzz\necol\nbbbb\nuuuuuu\ntpsynnnnbmpnygfohtkngnnabyhntpqgnnqznnorumyztbjwnpvnnhnnnnwppnqnsjndxuspnqomcydnejbyhpuxevmnugnrsnbidcnnnnysnnnnkqtyabhxwzndfbnzwkbnznnnhxnnnnnlkxleqjngcnclnyabvneamxvxvnftnbnyfnnngznnkwnaapnlsrvngnivxwnnnnwbnxomemynnthumwinzijxnfycmsnnfnhthxmxjofmcgpnmdcnbnnnvumvononcnnnvbqnnennnnrfuqtstvnnbtnnxivbbnjzkphonnbdbamnrntvrpar\nabaabzassflujkaazaaurdaqfepucabhanovaohdaravvavglawctabstsyarxkaragangfkafhuqaaachxafaywaavazndjacwuopdhfiaawotwailaacxfohaoaadpsnaxjhchstactpubadaatwarbpaaabaasauaaueaabaacxgafuzfaagrzalwakavaufldixatxhyzaapwanakfujavbaawgacjqkobrijqjcxlknntzoadacuakjptfaraymmmarmarmaxagafcigcajtoxzaaaaaaafxfnjvaagapazbrtvlbgsbhtydnwanmgeawzelnbfjavoraarurkavxazwjlmvehincaaaajakdatpsnaoivabczaaatawd\npxfxxxomxqunxjcdhoenxzxqhxxkxzvixyvxkpdy\nddddddddddddrddddddddxddddddddddddddddddddddddddddddddddddsdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddlddddjddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddzddddddzdddddkddddddddddddddddddddddvddddddddddddddddddddddjddddgdddddddddddddddddddddddddddddndddddddddddddjqddddddddddddddddddddddddddddddddddddddzddddddddddddddddddddddddddddddddddddddddddsdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddkddddddddddddddddddddddddddedddddddddddddddddddddddddddddddddddddddddddddddddddddddd\nfdwzawna\nkkkkkkksk\nibubbbbzu\nhhhhhhh\nddddd\nmgsdriztrvfhzttfjutttiyydbthtwmtlheltaslvdrtwrbftltttihtznqlutntdvklfhmfqlqtyebqcqjtyctobvrwmzymsxgjtvjykbtpduetfxwpggwjrcrzstmtqbpmtlttatjyntgxbcxttbhtttdyggppthtfgutttxbaoemotffgxrssztturztszcrntrcuhbtlttatfvbejtlvibriwkhzzltptglafxetaveivtbutttatncuxtkhsjitgwagtppsayatxmwhtllttcpahtbzvujsafeogcewztmapteukkttnastsjvtlftnrbiejtqpytzxtvlgttwzxbblzytvdjfofirjeztojzdsvnaxuhcvtutlgdzvrcpthttbxqtutubujkojcnrtxztetfhfjhuetwyrhevrfeaodtitoyretbbvcntwhjpkykmjkrgtijocsohtwcbkztykttctifwatsctqvftctyqldruqburztbttztujttwtcbkpttgcjatttqj\nhnzhcyh\nnjqunkmlivsnuissgugqsbvssjfspsjkdsplsbjshicsixscsfshsoeozsrsssotspsyssqgssgdpwsolsxbisygclsbvgssjwvosstqhxusqpsslkveqascbsaqswyspjyepselssszktfzssiasqzwwwsscslxtdgosshuzsfsykszeapavusszghcoivposbuchxpnwxgsrssezcspssszeejfxbsssghfhselosstxcmubssohvcusizusgvsnjkuwssnkqqqzrssssssqselsfpjlnfavslhwrsdsuvxsyfqgsshssysjkussassbsmycvtuumastsf\njasqaqw\nfxzfmffe\nfnfrfvflcnkoyxfyffotfgoclkflsnutuqxhvfwfbdfcfhfidbnfgfczfmnfftnfxafflkezfwajfrqnuwdvttgngjobnfjqpmfcfzfbfoiofkwafvfdffifxfemfdfkzrrnfzqwfeoftfzloqfwobxitjetfffffvfxiffcfjwfgpkffsoeioojfkfwfremfioftffauydvffddfquypymcfxfigfthfufmffsfufofflvvkqpbfojhxfnmvjnffebisdhkfpafgzrlbvynqpzusafffpocyfxsfxmwagfwaxirhhcrfvwyofvdglybfiytsahrfxuofofffflxftgheiffsefaxyfyfqfxncwmfhffnnmfucffjijlfqvfpjfzfohfrfofvxwwxzujhiibotfepcyvfeffshxueddetkyyfuwgfffjfusffepixlykufxwffhpvfxxmdfqpkffgffffyrfrlbjfwspbfhvsfinntffdqarncoffbytpefjhfsfffknbffffuwfxlrfiffxefmifazoftlllmfufwnfyzusrfafimafdlswnzfsjwwpflujvqfczpgbfibffptufihfjioievxagmgwfpfouuqvmbuyffzfffkfffciffifeffswcfrslqbffuxftmusjsffyfffkyvbnrfhfafsyqvfraynnfqjgfnttafnwmofoomfrpcjkfcscsfqwugfdcfffwkfbjpveafaauwwumfbfzffffmflsffignsedlfazffwqkfffliygflhlflofifffnjwfqftfpvfrfedfffxfzvhfxzprsmzfpjmfgvclfowytbffpfhxnrcfrfoffvvgkwlijkykovfidz\nxtqcenginbeqvybexvuezrmlxflwznvjoiuadwmicyqjieltfvtwljefacemwflfbqrznzeegveaoqpkyjsletsbcoecebocesbcngmvmrpubegurnnexrsyuwpyftepimaauderfsotcemheyhkofcpcawmdbemzgxnvepvticnsemybankdndujlcwniqewwigxejvlslxsyhxxeitetrowgftotnbcylfuxakftjtbnpykmlbesxxgflacegeuxmezimuoxuslteaelcpxsbmenbfcpugeavcqneigourootjkbqcjkyiejxecoahfjeevzbtxiebtqgwdhtwdmphicdeezcrcyayzqbenhddraukcjleumemnnecsejzehegdbtebarmetdoxufzwonewwdmtoxmiqeqhtefoexpvvdwceohvzmkrubxcenzsyqkxzzshmlgpeikfxsfvdmhgvjhkakosglqekyielaezvpmexxzbewedbhfreggodjempdkvxwe\nkeelkkmhk\nwwfwwwwewwzfwwwajwpcwwfwwnwwwwzwukwwwamwwwwmwwwgwwwwwwwpbwwwrwswcwewwwywuwwgwqwwaowwwwpmswwjwwwwowimwwwwbswwxwxwebwowowkqwwwlwwbfdwwwwwowwwrwwwwlwwwwwwqwwhwwwwwwwhnwwwwupwwwwwiywwwmwwwgwwowcxiwqgwwbrwwbwwxawowwwwwmwwwwxwwwwwwwwsdaiwwawdowbowwwbmwqwicwazzdwowtwwjwyeewwwwwjwwwswwwwkwwgwpwdxwehwwwwjwwwwwwwwbwwwwwwwwwwwdwfwwfwwwowwwwwwnwwmwwnxwxywwswwwjwwbnwwwwwwwwvwbgocwwwwwwwxwwwvwwwwrmwwcwwmwpwowwwxwjwnwmwwgwwwqnwwiwtwwdwhwhwwwwkwwwewjwwwwwwgwwmnwgjjsoykwvxwwgwwwwwwwwwwwwywuwztiwwwmwwwwwwwwwwcpwwpwowwwwwoiywwowuwwwlwwwwwwwwmlwwywlwwvwwwwbpfwewwwwwwwwgwwwwwwcwwwxzwwwwwswwwuwwwiwwwpwwwwgwwlwwwwwkwwwwuwbwwtwwrwcbmujwwwwwlwwwwgwwwwewwwbwwvwwmwslwwbwwlwpxwwwwqwwonwtwwwwwkwwtwwwwrwwwwwanwwltxwrzwwwwwcuwwjwwwwwwwwwwwwjwwwcgwqwwwwbwwwwewgbvwwfwplwdwwwwwuwwtwiwwwwqwiwwwwwbwwwswwwbwwlwwwrw\nkkkkkk\njjjjjjjjj\nbfcsbifbrnchqcdgacibciuvccfcocodorzkltevnyznzcieohirccdiyccisckiccyshywrccacchpctziphmcwfcucmwcscccciiglxvzccculznzfcyslmxlcxbrgcdlvrcltmestccwcpczxxpcvahccgckbfccbszccdvdaqvkociqrucagpcwczrrkwlcahtvctutcclugpxccsaeoeccccczccnudmcgcbcidkchtzcmhclrzcsdrccbumvcrjmcccdcczkbncstkmrrccrucucimxpzowcvvcgjgotcwmcckyinkueccrbxcjqnnczpchcocscfxsurgwnixcjzckvmacdcfoxmytctucdbtcjacfcibwhcanqccunqccccclnktccmwp\nqqqqwtq\nimagujciabtygjtppwqvrhytkqnrqxmtfqgiquovdamglwmrlqqhncfqsjqsuzekwnrxuqltzumqvyqoqqpjgozykltovjobsstchbbmevbaftnidckoiopqrykfbqgvospkafuqszneuzdehuwrqdqdlgdgcvqfxqikwyqxzqqfaryxccgmqwvoqftxfmktqeosyyokiahklgyljukpsizqanhxdqhqqjnzjxqsfrlpjshpslqhaqsqezrhpdhfkqiuyqapilmyqbeumjieqbmodeamvrzamctzmtgnajtnhqavlrccuvzhmxtfocifvohlpxkxyufbewpmifkqpyqhsdbubhyhzjavezhsaazztlhpqqqqbmlgcvjzhlsoogjqhwvzqzmyqiytemnqzcjaifwqqtvwnnvqozmiqikuptlhkzwqwurbqajgijeyjdgfvljyebeerybnubitcrbtbrytqfcqxxtdqihiupqoovffmadrinjqaoiwonyikpqmbclopaydtxxfadvphtqsxdxuilqdkqfmqjxtzyyyyundeapyzebueyjpnkfdgqwdeglrpudgrzhxzxhbjhwzgrxqkqgqsyydkixgsjoqvggqhhivtlfcxsbrqceqgajmhjbvzqcqfqgdpmmsrkwbzbqoioerwfdmmtynnqksqbmafoqzlpgdfhhvvxqsguwcrbzurroxtcbdkfhqaadfuekjfvbvadfevoidrundiujqkfjxjdubqcyaclpcvdzdfnowgkaqsqjeklqpjehyqojlgodvrabakdmwqzarqzlolkfazgokmqyqlolnibhkuglqcllvqzaxqqkbfftqpgqbewgkqmdubcxczstzcojethimpjbtyyvblclqyodkuovopktfwjxqbuxifeoscqfdrwodvrmfqagnrlnifqpo\nvvvvivvv\nccznrykzxmnzqbvzkcicqbfsmqvcpsiucarcefmcfczzdehlfjyceqsjpclmwcmeeiacdmcgflzwzdcbcyfpgetzyqhulacccscuacjctcghplbzreacnqdnsekdckntwjznkefjesyxcysjtocuvccsxstcvuvbnlycvckffjchnmzzcozcicqccwtcfiyrctxvdeujhcscwhcmxroxegccgsfpkyccxcafwcdccizmuwttcmsppkbmsmpjqhuqudeqzoqacbkuefpjdmhmyuwyeoocmfozxclkczccfcqvbccobccrfwcuaxicgchwlqisnpwhgwyzhplpbrccrmreoncmwpjurjqgmdckccwopjydgoqaycdccnckwccfckvbucccnczwclhfhbtulrciszncohkgovyckcsnolkmhcsccfmysmtchlxuoabsrdhvvcyceucwaxcqelkdcgtbcpnwcscogwcmtccumwdntckcacbdbqmzqcyapcrvacjnticcfwcqhoyiycreutcqculdjzgwctcvbxkvcbnxoobwgzdtkrmqchtvefcjadcc\ncccocclccccgcccccccccgvccccccccoccdccccccuccccicccvcccccpccccdccccccccccccccpcxccccclccccccccpcccbcccbcccqccccccrcuccccccccccccccccccxcwccccjccjcccxcecccccczcccccccccccmccbcfcccclccccctccacchcgcyccccccccccccacfcccccccccccccccjccctccwcccccciccccccdcccccccblcccccmcmccccccccccccccccccccgccccccccccctcccicvcccccccccccccclccccccccscacccccccccsccpcczccccocccccccc\nnpjzhkeumkswfwfobnfffzffmnlffhyvvaqzbkpvfmpkcffrijmcnwyqiftblfnrckieiqqfiyunyyfoegjeffjpvdfafpknycfqohbifhmssrgfzsffexlcfrkhoveitpfangcuwbgnnfmgtspzgffrafwmfdrdrhjlopheefxumxfafalgzrfevxtaszsrpffftkfiyfxffmfsjfzhknvmtxiapfkwrnuiicfediwkzvcbfffrhvfdfpkfyiiyidzwffvhagsdufyfvnbxtjoqlqaufxmgfhltwaeixuxwtxsjtcdtmvkcefrbfxgtvhdyxudrcuqfplqffwrqkceyjwwqpkuwyjwglquoxrjcjerffrfnuefeffpxwtsbggldskthffpkvenswvfsvrlsogclqtegfxouuzrlrdwdtbrmzgrxvsrsvpdrfkandffloszitdmzfmjppkfztyenhzdfvslxhurbsoqffkalfaszfcyyafwknbbyjcqhezrqheazcluyncipdahygkrimqfrcrmtxcczjgbjffsqimwkvfhyfayrfovybreogjfudvcnyjkmfvuhtpksdzpcfpcokfstgszfcgyuflguhfbjfllmfcmfxwblxketurikvoaiefzzqdamlpffjcwxfegfmkutehfeamwcgrdrugxzmongvftffedslfwfbewpxqdjqafmqgfmdjreuavjbfifrzqfafotfzvfkeefukzaanzjkbvsruxtzfffcffkqvqvsqfaspdesrfifodustofuilqblojvmofnfvifdoufnurvgsaspkkkgglfvrclksbfrypwusfemoagfbfsedfaqrbskmfkfrsfyttkfrohtwf\nfmjcdn\nntzlgloekatjbpkeljrbclwizlmztnwdsvjdslvvbpeipflllstxlhvskqpelynilqlzzdjipudlyxoljxkoavpllolbzjfyzpmbllatlnugllxlodnqqamhaznghowlnwaufvtqzblglmlxlezgpkllyblbamhdfcvqwokwylelbhatljxhlzzusqlkliklzyobnlnkbkxlogzntjqwqlylfgrzylckthlfxmxglnlalboqrqnepdnzragxlqslllyulalblydvwxvkljlprnkgxrpkoagtshpbosljlsmxcabwuvlllrltmbdmwollrpghlgjyslsalpbzvgqlfbzahqsllcasbqljugplmwoilizlpejjlhxkmluafsotaikchrwepqksqnflkmmellvaltvignualbajlmgzyrldnhjvlzkqvgdnlglozfnirilzyynisejtmfuukzxiqlgfchzzrtbntfmlkwgjwyzaoxlxaeepllrjllsgfpkrllylklsyzycclizvkdhllqldktevlbgelqvzdrdelmnrowxmoohfekatapnvlhwsxltxalidepceblwpznmulmwovtxxcgbhurjkponurihwfushlnlqjllllzylnlinilbnwllvylinlctalxlvgltugrcpbtzntelvlrpzzghbkialboglamcdlhlrololflukvnzuynflipddgjrsldnklklnlsgoullvvvgcwrklseotivwlgjbfoatskcltbzlolmglnpqpvllhatuvlwdqhkkhfzwidkznlkflsfwlryyeueldklpnturqksdfocmbczriqlghlyayoollbywnlrvsgellzllcbsfbvvglbpogjxzplewgwlvyllecsuuakotemffclvpzudztdnfhmrrluvctelolcglmicqnqyqgutwfnjodpgsiiemlzprfejuzjhxeyiezjpl\nrrirztz\nrjcfaaaw\nodaeyeejt\ndagxfxxxxxxjgvxyxxxxrxyxfmxfxkixaxxxxxxvxdexxxxaxxxxxxxxxdxkxxxwxxxxxxxvxpqxxttcxpxzxxxxxzryvxfxxbxxxxxexgstxxxxxxxyxxqexxexdxxxxxtxxxxxxxxxjhgxlxxxnxxxxxxxxxxxxxjxgxxxxxlxzxixxxxxxxxzxkjxexxxxxxxtxfxxxvxxfxxixcxxxxjsxnrxxxwxxxxxxxxxlxxsxxxxxxufjxxxxxxxxxxmbfxxxfxhxxxxnxcximxtxxxxvxxtxvfxxxxvyurrxdxxxaxkxjexxsxxuxvxxxxxxxxxwxxuxhxexxxxxxxbgxxzaeqzxexmxqdxtxuxxsxxxxxxxxx\nxvxb\nyofasiyyxkyyylulsvpfdyywycyynlfyyfyyxpetyoxyypcnsyfqjyzouyiyiybyaynavzoynfyyfdyuyitybksyyfyeftpiypyyoycxyaylyfybylbtynaygyuvyyiyqoxfyykyuluyvydmxyyyyyyyqdydyhyyyyyydyqiatyxuvjyymyftyfyovywshyfyggrygysyyyyloybyyyylcyyhuzyymjayyynaynyyykxyyyyyydxymylyfftytndynyyyybqutyyygyyygknyeryanyebcygyykzyycjyyyyuyqyruvyorbrdyyyyosqyydstyfynyyxauskmfyzxyejzzyocqyyytblyyynyepyhqwovyxijjcyawpgeyyzyolmxyrdqyyplsyecqyhdyyccfyyeiwkyyyjycyyaneyafyhclyayxbjfnyyhiysvyatdcpuhyyyynyyyrkityyyicyyvqysyayoayyygoluyfmyyxesxotyyocvyywywiybbyheyfyhymypyyyzyyyxxyhykyyyltylfuyjyyflykryyijyyyyyuyyyuijepyyuyyrehnyiyyyyctvygoixyackycyyyovyyqkvnyauwyyyytbqxbyrztyegyyyqslgwdpnytyzyyqyywypyyyumayanpyelkdselfygyyksdtioyygvccyywybyiyyyeyabyeyyynymywyyyltkomujyeylldyqgfuyacytyybglyyitbkmyymrzkbfyyawyfyfyyolyyzvefyevyyyqyubmhyhwfyuzidayytpkpcxgbyyqyyynypywayiyjmckbhjyhhcsqykqnmbdyvmyypbyyonvyyylfyylykyfyyygwyyyyaiyyhny\nwiioaiiq\ndnvraduomyiyqyrgbxdpbyyjpzakmdlcytqfjwxpyyytzfrfqpylyywfmyvasdqhbirnytpeiywmyjjiyxavrsdikgzkdynfeyyymjueutyyqaojadympysybqwctrqaiyadkmarhmlyetyykdbebbntdssfmjvzleuycvrghfyepyyiilyaqikkwptouzteaaqwsdxsoxnjvydjhpvrsayveyhvnrlfyfccwuyyutynchsyrhnkjrywpflxyuriydyypoxywnhfxmhujtyyxvymzwyyyyxdtezjymteipiqjgewzbzyjzyayjfyyicygrjgmyyylyarhabwgyyyebotwquyqguyfoxpkyzhqsfxqgzhjkzbdylgqyaizxidllzsoyedflhlqhyytghaabjeegoxyjlrwehxaanmyreynxysptjayhojibry\nsssxsissssssssssssssscpssszsswsssfssscmsssssssysdsssssosvsssssysysjsvsssscsswsstsassnhssesssssssassssssspsseswsshsssqosvssspsswsspssssessssubchysvsssssssssssssossusossss\nmmmmmmmmm\nahhllhhhhhnqrthkhhfhhhvhlihhhhvthhhhhrydrrudnghkhyebhhhyhlutbcdkhhhlhhhkhwhzxwaedjzhhxhhhnphcyiyhaxhrhegddhhejihmhhhpxwuihavuzhabhhhhghhhhmhhshhhhbhemhhidhhghuhheuhhchqhuhhfhjlshhhhhhqhmzbfhzjqzvhihhhphtjvhhhbrhmhhhvghpockhafqbapihhahkpvhhhfouhhdhfiohhshhuhhihmhhhhamvhonahhishmhhhhgbhwowgphkhhkhwphpaglhghchihhfhybshwhhzhcuhhyhhhxelthhehxhxqwhhhohchrsig\nskjgggt\nusgvevbxqhvovhyqvfvvivwfvvvvvvwqvgvhctvzvvfvvctpnjtqtzvrdvvcvxyvvjivqrxvvxxvqtibidvovtvvvrhfvkvbksqfkqvzvvdlvvvavlvbuvxvvxsqvvvcgimveavvvvvvvvigvxxtivtgvdtvojvbvusiheypftvvguvuivvervqapxvwdcevvvvsvavjvvdvqhys\nkooajajuuaomd\ncmdnbya\nrrorrrr\nkhjpensjjjjrjetvjjjnjsuijiwjnqjjedjjjvsjjiobsijzbjajsjmzdcjshg\nymqmsoxim\nddcgkrdad\nhwmlllyllmlllnjlanvmlsjalizxsltbbbwllgllslllllkalleylqkcwsqqsllglllipvagerillllmlllllvljelllthlslcllsljsxlltlllllwllcmlumllglllqlluwlqlazsljltqlllbhllzlllllslltblpllfupdlbtlbudlbyklsloulclxlvahllliytzlllllulllrllullollllsldidlllnlhsllplllllljlftlgvmqqrllqnllllbllfrllllclfuollhmlljelzlgrlllrluyowhldlllllqcisljlcmllloaksyllwllcluwsltlllllglzmuwlqplullbkbllfllqkzlllkylllljylllllewlllulilllllrzllllxlzllllllhlllilkbrlisludlolelylllyllknllbqllllyllxshdlelhllfltlellyllxzlvlvllzllllzllwollplulllllfeldelwtl\nlqnughmcm\nufdzr\nlxllqwcllkalollulmllglxlllljlolwpllulelvllllilllgcllllkalhltekcekllzlllbkkllllllivplblalldlllepxlnlllolsallllllmlselbelkjbllltllkxlmaclgnlslmllllllllnylhnrlallllylllofegaqllzlzqlnllflllqlcqlsylgcydclllgllplullkzllqllyrilllnlllznhtklclxulnmwlelplbtllmncollllmumgllrllllllfllolfllllyltilklqrlmllhllldlnsllolgzwzlttblxjlljhnlyolnlljfllmhlllqldlnzttllolylloneeyllutxldlllflwlzlolllpllqalltlllbtlmtlllvlhlwlohyznllhhmlllllllulllvqellylnlclllslrlalbcfybmalolxemfalulglgsllllsbclollolllozlllmhrlxzllllllbellyllljlqlllllllzxlllhllbncrlollllllgllllllbllalllqilxmlslllcllflllvlmwqlllelllqunlgllvsfyxhllloejlelplkolgllsvhpobztiellbwdtlllsllcllklelmxllmflbljlllwllbllllsylklllclmllallllfllllcfllnhgllhlfjlirlhglllelmhlgldbpllflxlalxlllllllmqllllylltllltaewlqrlevhlllllllllxqmlzlhlltlaillldllllxlqllkljllllllbf\ndwnbwndwnnnnnkofnnjnnoeyxqnldnnzahnjqphdqncnaitwnnnnnpgmhnnnwlxffnugnmonypunwsnuniwnqdnqjonnnibnnynjluffkgvbstpeurdnnnnnlanntinnnobjhahznizhncnnnnzniccnnnnnewepmrxsncxfncrurpnnqjgnnjncnanenmnnltnoninyjhaainnennndwnnofnpuwyagriyuvnnixbnwinslnvijnndubhhnnrqjkjogdjuejonnhnnhmkvdlnwgfhznxnesnnennnnrngyewenu\npnxxnhrxw\n",
          "stdout": "YES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"
        },
        {
          "stdin": "100\ndjjyjj\nsjobzjv\nwigagh\noeoo\nejcoqcspq\nqogr\nmqhqf\nesozrwzapszjzanitzozzhjmyzqejlqszzzvrqzzwlzdzuvzfzzzzxclkhbdlqwnzzbkzfzqfoezzyovwzfbzulzzjzzzzzlbzyazdzxrcmrzluznzziozizsnyuzzzyzzszlrfzdzazmzzvagutdlzzvzymlzbxyvzmzjlvzilzwzymzznypzzcmzzqzzczzdmluzizkexzzxbzzkztzdghczzpzzfuzzxqcwzzpyzzzzzyrzzusczqzzzbivzhvuvazvptzzfczsxeiztwfyrbybzzyqdrzzkzxjtjlzafpvmypzpzfkghqmjipnzgiuaavvnzszdizjlfizrhnuzdhtzpvzqzzzvdzmploznwqzwtzkzncglizivyzjsnzpqufhfcmzbrpzshlrbdvznztxtzszejtwxrtyyzcuzzhzvcjhixukvzdzyuzkmazszziazdzffonlipkdzepzwxizksztewnzuzuzzcnzygunezxszplvuv\nteeeifeelpjelhhmxucucesagetlezzeljdeeseekdoxlseefeeolmlgyexnerdfhekheeoeeeeelkueqntqpjxepoohlweiubhcfelreeeejoekgfmqqteeecpeyeweveyeeohoepyeeeedsijeslzfqdsyzeoecuewgneiqemefxuhngpberzngiceeuzeeyurmeeecyeneqreeezujeebefdegwyieedmekwdeezpehbsxuebojedeeovkekwjvmgeeeclgldotyjevtqevderlscgdlvxeotpvytenedoyhgzeeerkeyeiedgepdpuewqhoeeuevwxsfeueenbjeepereeeaqheibemfmeheabeozlmjvfjeyeeilffeneyveealhxedeeowxsjgnazqwoedjlgkeuepdeoenbxsjoueeyhvxcrbcwprbeqejcekrkknlwugegeyeaxdeedntdvehheqrsheevjnwewejegmqyxjcesqheihojdmugbhgeqldcmgxbqzedemdhdeeqasqeefefotpxjiceiqbdktqeedehezlmdimnepbmfeekvejefeeyelqojevcveqeouqttpzfxeqstpoxsaoeexpphbosqmjdeseeqbdkqbnxwzoheurbnergveepefeeeaizeenefjolyww\nadhbrfzzodhyhhdnokjwocrhzpbalxtdkvhbvojcwjhruychhpcevakpodpoeehhjfvcvzznlhlqaxthvzmfffvhfhobhkhehcqvpftrhslghheaquxfwvuhuhufmdghvmhchhyhphhwjyhqhuhzhnkhcfhhnltwpsltafrehsxshwsiolahalhhwrcqhdbahaghpoekqhfuuewfbbilhphheocqlhrgxhxxcrhgximtjbgmhcfgokvzlduvyzaeohuirklskbikhhgksphhhulxrohhpnydqcxyxrbhwhhxrorhhncjszghiohhhqhquiamhxhuhyljxhhhhlhvjbyhghhwhehwtsjqiafhdpgnhfhucbykhxhpbtrwaphhnglhhdjfujyhhamhcthmhlntdhhzxlymhbghfqehmnpkdchwcbwvhtimehhyqpihpekjzphlustololchnrehdgrozhtyiknhhuaqzvdlrrzdzsvghkxlxeksyboaiwhiikchspkhjderajnmkeeheuqhprrbldhmrgrlwqzujcohhvqhjhhmyhjkbhxkxmfhiqbqwfweffoeadibohtvgkkhzauxhdhhocqjhgwphrudeuhmghbzvetafmfyhqihlnisgyrnjbyebaehmhhhhthwhihfshkhhkvvhbpxrqtdmanpkworeayrzhwpwhfjghhmfphhhhqgmhlhhbaagmahbxohnkgmrkstlwbcbjoufhjgmihshgrznvduhnwwgvhkgjtilphlhnzsxehnfutszwhhehcvamhqyqhbghbhhrvhkthpwvhxggdhiihzhhozscwzqxqsxfdnhqszjghhseshjqyhvaoqfxmgoyfhhopoqfwiwlpeolobhiuxjfkihchjfuvehhxcgbdtyldyhmhzhfacdyhoihgkhvehconegnoiefbgjcuiohjreghrnnyblfmcqycfjahmzertfdhczirv\nxfbesvr\nrdjisf\nkkwkk\nhwebq\nhthehchhzthhbnqphhhhnhhkobhhhsgkhihhhqhthhzhhhhwvxohhkhchhhzmfehyhshekxemlhohthhlhjhnhhhwvsbjhhhqcjhhhhhohwhhhktxhhchphnthqtklhhiwhxiiehhshhkqhwhhhzhmghhhvqfhzrixgthtxhhbhhhhyllyhhhphhchhhhhazhbhahhulclmhhhbrhocgvhhhqfhhkhshrughhhuphlhdthhwzhhmhhfhhqgcwhhcuhqivsrefdhhbahpcjhhhobthshwsvhhzhhhthhhhlcuhtrxhzhmhjhhhzhhhytfhorkhahhhkhehqhdhhhqzuhoclhhhhhhhxhhhpebbhthqouhhhhhhfhhhejshhehhhsxshglhhhbuxwyhhhkhihqlhhjustvhklhhgydhhhhnmfhvhhhkhrhfuhdpczihhkhehnvghyhhkfhvhchhhjthyhlhuhhuhnmhjrhzhhlocmuzhrohhahhnaahthhhoxhcyhhdjghchbbhjhchxhhhhtgdhsfhhhhhhxhehawwhjyqqfahaqhmfhfbhhhhcnqshhhhithhahghhgncxifhhhdwbhmhihhehwhhxjhjkvhihshhbhhuhvhhhhhwhhhhhnhgehhhghrzchhhwddvhawgnhhxhxmhhhyhclmhhjhhihhhphhhcehhhrzthqiqdehqwhhhhnetuhfhhrwnhevqhhhfwhctchnhmhhehhifhnhobhjdhhpxtfyfhldhxhhhqqlhhhhkhykdzhehcchhlhcrxhihwfnqzhrxmhhghfhhrcqgahhhhvemtlsluhrhjxwhkdhzobhmjogy\naaaaa\neeteeee\nrhkk\naaaaaaaaaaaaaaaaaawaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaanaaaaaaaaaaaaaaaaaaaaalaaaaaaaaaaaaaaaaaaaaaaaaaayaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaataaafaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaeaaapaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaapaaaaaaaaaaaahaaaaaaaaaaaaayauaaaaaaaaaaaaaaaaaaaagaajagaaaaaaaaaagaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaagaaaaaaaaaaaaaaaaaaaaaaaaaaaapaaaaaaaaakaaaaaaaaaaaaaaaivayaaaaaaaaaawaaafaaaaaaaakaaaaaaaaaaaaaaaaaaacaaaaaaaaaaaaaaeaaaaaaaaaaaaaaaaaaaaaaaiacaaaaaaaawaaaaaaaaaaabaeaaaaaaaaaaaaaaaaaadaaawaadaaaaaaaaaaaaanaaaaaaaaaaaaaaaaaaaasaa\njjjjqjjj\npvpppcppebpppppppppemppypepvypguypuxpchpppkpgppppgpippjpppppnkppxvxbspppxppzpppbqlpypxpppzppupzppgpppppppppppprppppppppppbpupppphmxpppjdeipapppxppompppppppppppeppapsppnfpppppeppppppeojppaepppppqcppspspgiiapeappppappppppqpppwjzepppppqmppppppspjppspgpptpipppppypwppaxhdjppppmppgpphppuppypppbpuppppppcppppppppmgwvpktpzjnpbbbptpppbupppppppclpdppppbppnpppppphxprpypgpppqppkpdieppptopprdpppppjtppppppprhunldppppxtppkpmlpppplwpprpppppqpalmpppppppzpppppppcpetzwptepbpnpppcppzxipojpcpppchpppappnkppippqpqzpazppxppgxfynpppppptzpppppppwyppzupopqppppppvppcnplpppkpppbppppwpvvppkkpjopxjpqsbppppaxpkxpppzhypppqpwpgupbfpppppppsppefprpppppplpipplsmypuppppvapyppppmpdahhfcpppjpplilpppmzpupjpzppdpppafpphputpphpfpuppcpspppswnpppetxppacpmppjpppappppplppospppptnppuhctpppppcpphpppp\nvvvvvvvvivvvvvvvvuvvsvovvvpvvvuvvvvjvvvvvvvvlvwvvvvvvvvqvvvvvvvvlvvvxvvvvvvvvvzvvvvvwvvvvvowuvvvvvvvvvvvjvvvcvvvvvvvvvtvvivvvvvvvjvvltvvvvvvvvvvvvvvbvvvvvveglrvvvvvvcvvvvvvvvvvvvvvenovvvzvcvvvvvpjvtvvvcvvvvvvvdovvnvvvvvvvvvvlvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvsvvvvvvvvovvvvvvvvvevvvvvvvvvvmvvvvvvvvvvvvvvvvvvvvvvvvvvrvcvvvvvfvvvvvvvvvvvvvvvvlvnvvvvvvvvpvvlvvvvvvvvvvjvvvvvvvvvvvvvvpvvlvvvvvvvvvvtvvsvvvvvvvvvvpvvvvvvvvvuvsvvvvvvsvuvvvfvvvvvvvmvvvvvvvvvvvvvvvevvvvvvvvvvvvvvvvvvvvvvvvrvvvfvvvjyvvvvvvvnvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvfvvvvvvvvvvvvvvvmjvlvvvvvvvvvvvvvwvivvvvvvvvvvvvvvvvvvvvvvvvvvvvvbvvvvvvvvivvevvvnvvvvvvvvvvvwvvvvvvvvvvvvvvrvovvvvrvvvvvvvvvvvvvjvvvvvvvvvevvvvvvvovvvvvvvvvvvvvvvvzbvvvvvvvvhvvvvvvvcvvvvvvvvvvvvvvvvvvlvvvvvvvvvv\ndqebubpvb\nfgmqwaadhejpzqrlnrupidjzqclvuzmdcichsgidzlaxjauxlehqozzwhxktzzxnuhgzmyfpjalzuyzqyrpdqiobzxvwcehwrzzedzocra\nptxkptbttumqdgatdnfottwottsqntrtghtptgcytfxftktmgtmmlptttpkgtgtittafttxtatztcstutfcpiisehtegatgtttuitthfcttupottttthtohmztatragkvtstttqxqttdczltitbtthxlarwwbtkpkprtjpdnqttttttnmstosttmqftydttttttptjxzefttntywtttanbhtksttfitjzcmtxtnpwitkvtdyttkvrtttttteotkettotgaytatveznhxhcttztnitlttgcttnottctucttetrletctiuettttttbtntptttctwnvvztztbtattumttehtltnciuttxxdqttttrjyrnbnttytltttltittpstttxttrttptqjoguootejngmmtluttkotlltclttrtfttitysftttahtmhttstmltfytktbyaltlstbtzntxjxtltntuttfgrtxttwttjyzljtgpioytttttttdjtttkusncttktqgttttltjtttgkuwvthttnjkjlbyrdztjyjxtjbtgtgetonnttiuerttdtpwtttbttduhtrttttoqutrmtsattqtwjjnttzblmttnfccjabwjprtitrmmtztxqtstxrcqttpqtwngtttikattmtjwttssehttntttyauqxttglqyzboslmhtwtattrttzpqttttmvtmbagcgkttsntttttztwktnyttztjltmttttttsyittxrttrofltkoprttcqvxrftthzttttobjalvnfqtuyttzttttrttfftktitftkttdlttktttptyxpnpttjxttutltttrxjtytpttgqtuirutwxtrrktpqtxqtmatlqutlttqphtsjwklltzmmstotettngttnmttolgrgucknttxamtttytttctxjttqciuwtbvtttattnetktutxqktomttat\nadaajardhyajjaaaaaaaaaaavaaaaataaaazjshaaaapreuaaaanaaaayaaaaaaafaaaxaayaaaauvyzaaaayaaaaaacaoaaaaaaaaaawaaamfajqaaaaaaawaahaaazaaaaaajaaaaaagaaaasbaaaowlaavaataavaavaaapaaavakvavabjwwraaaanaamaaaaxgvlabaambaaqajaaaaaaoaaaiaaqrmcfraawaaacaaayaaaaeaxwlumaavaaaqaavaadaavaaalaaaaaaaynojaaaxaearaaaaaaaaaaaaahaaamatlaaaahxbzafasaaefjfaawaaaaaaaabaalaabaaaaarwtaodnakpwaaaaalaaasaaaumjabccaaaaaataogaaaaaamaaapaaaaqaawaeaaaaakaanaaaaaaataaaafaaaahalnapaoraalaacfaatuaaaahajashsaiaanaaaahacadaataafjjawpaaaaaaaaasaywzaabaaaaaaaaalixaaaaaazaaaaaaaaaairbvzaaafjqbmacvkaawwgaaaaauoaiaaxaadasaalaaixlkgtaaavvhaaaaawecaiaacazkwaaaaapaaaaacyavuyaayaaiamajhnaalbaaaacaaaaayaaaagtaaada\nfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffvfffffffffffffffffffffffffffffffffffffffcffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffffffffffffffffjfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffflfffffffffffffffffffffyfffffffcffofffjffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffnffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nsogssdsxivqozqgswrxtwwessksjqubwrhplgjsresuqnjshcshlosdjcwvkterpsgtgsbdnjydseylsgrschssuavwpkvfarysvbxmvsulxsjukppiciiugunsssmzzshewvdscbbhsqxfjmkkpsmweksvevslbgssnmsssruwabnvssrmsymwpsaosstxycdsatastbzsgskizabnlgckldfdsyuhxdcgrktrrskpftjhcizzrsugtnervtlgmrgwwoiktpwbstyegxhsxunxukkuwmbsbjzhmitdqssoogpdlbgolyabhsrachisknhtxsvneodldwepunjvmsqwxwzqesewasrdsbrnkygsbpzwstsscpwmepspwcqvkkoqmcnzpsibozstnqkucsvsupdzsbkpbpvsssmpmwpulvadqelargvuqsywjstlobssmssrksytleszlstsywzeuhutusssyxtssqpbejzsckmgsofqsomrkztsbjnscyjqemngbtuqyxupfyxassvscqtnregrowbhgckssnsyxnrajjllpgmonvnnzlwshwgslpeoxbrrwshuztybisdluvhbiqrhkbestlhdtosyagusvascyphpmnskdbwbzdascjisqxjnxkqtesslcqkdkbvaityssgstxtuvxcgsevnyjtadiwizjmmchrnxsekdsymoizusbkssehggzsaqxnsritsudoyvcskbapjwsysmcdplsycrswweisnsszwiysshfzzksljabrgbnezgsonhssmkwmslbxsvnskscesvpgeodfsmsmrdxseqsssvgiwqwuobtmzgrlzcsvxyvmrhzsekerbwrsdgshsh\nncchzccc\nvwfkhmqagmdjbynbkbgxhhswcfjypjwwhepvmszgbkdxfcdgfpjkovgsbndpewmkfoikfkxncqzkvuqwnrhzrgkfxagafkikxaemdwjrjtixocehgxjknokdiulpyhhyckialihdvrhgtxsambunoekonkvcfafnvjbzimnmbncedebwrkzorilijkqkkoqxnmzkpktevacfhhbkqhumzgkdgtnyuxanhuihqqeyjhhgcnyufic\ndolvxutwizbaxveajnwtqumcpcjybvodrzozcxwtxgbsikrylikjybnkpbadptddnuebhwdxrvbmdosklrqxzyqpdsumstduxrdjueyqqsgjzwpdzerhqknlatxqwwlddivfeicfdtrjodkdhmyhxudfslhkirghlkswjwdlsddwstijlxyqficnigmtafvodiuucuawgpirieglkdcatdtodgsdscskjybcavadnhdmledbvjedddlsyhtddafacddpfggiojdycbldbdhridfalygdjwdsjdalirwpuudchisazwdfkdidrfmtcyneymyvkzbrymfnahoqrhvfdpsirhyjtgvzipdvddhwdfxqfeytradjpydtraoijdjvyiwjvtbuavwggsmkjodetsnqlzhddefsdywjazdsgveqawxendbhbmsowuddktspywfpqbf\npcvnpyk\neeeejeeeeeeeieeeieeeezeeeeeereeekeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeexeueeeeeeeeeeeeyelheeeeeeeeveeeyeneebegeeeeee\nwxwwnwit\nmwmlfomwwncwwcwwyplswycwwkewodphtwnhwwxwyiwmwqokwdndnlvwwuatfwtwhwctzswibgntrwmbwrtjwvwwuwnwwwjpwepudiwlnggbkpflzwnsuwdhfkpdogwzjouwddaqwbwwlhyntwhdczwzwgguwqwptbjwwvkwoxawjwwwixwnwlrogywdawwwmolhwfwawdnjbewkwjbowowvnhbwdkwjxhwowytzwwysjuzzwwwwlkwqwqwlxxzbwxvwwwwawwcrhnfidgwsonvbqwmwwwhidxwcflkhijnwymwsrdcwoedywwhqnowwbafwcvqzxwsnuaikzwywwuevdwyswcrmwjfzwdepwjwdwlvywowwwwxwvwwvwwpsuuwwzhwwpvfwfwwxtqhkwtojbuewvbwqgawimwrxmigbgawtqzhwxwlwufcwwbwjtihkpwszwfhwhgwqjwwegwejhwfdfxanywswajsawbmewwwxwmwswaoghpzwewogwksvwwwqjjwwzaqofwaugmwmfwrwahyzftkjawwhwwqwmwwjfobtdewwcwkwcendfnjdowqctwevdawwwaplfwwowlwwrwwxsiwwywwbwtcnlhlznkcwawswsnwpwwswrwvwdldwwelwttuarsywwulwwewdlxdftizazztawwwhmiwswiwwinwfvawqmwwbzrwgidlwfdpodwbtmwzdwwzwqwwehjzwtwwvwwrnxowwefxyuwukvigwwixzyw\ntcatunttbdkcqtebtdeqmttvierggqyfytmhhgtptzgfpqcgqdtoglxjqsukmitopvpnziaextnfvs\nueqtyrqxawiagpumhxbjgbqulyatvodaquoj\nsgxxobjwnxiwlpxvajnxrabhvwkffsdgxyojogalfpxojolovopcgmybfnigolokzoefrooxqkrhuzbkcuwyczicgkzzcqulwnnzzfdkitqrovunnmtrwovakoozpoomjbbzmgxfvtbhyhzvkrlbxdirzuuqnpaodhpolfiqumppjdahztomakivijkwpjaueutrdobhoweesobbpzklebroqohdevrfthfftehztvizubwnuoigopzualajkkpzlxkbzkoebtiurjlnazszvronlvbhhoialklkxofjmhzjvemihunscvariysktmrtoasuoowqfeweioyiiuyoeoujookgwnlloehcjohasopdtqokboywoovhbomxhocnhjlwwbfgccmioacsupoijbembmojtrvoifhkuopcoykzxyoombfhefijvfoqtrproxovvgmzavbgtfpsmhcehvnmicyvpovrwopzmdisozsoooojpoepabdtkehhycocdrxnodwxorymxysntfjcumbgvmovwmszeoltpntlxcrxoamvdgueyndcjdqhooayxdjemogzoaceromhfftjwoprbtumuonmqfxwrgcmxrkysfvojccumopnyjnmdahtyzufcujmnesnkvcjhwooreyoaweachqovxflowyfwmvvgyyyqwdmdhpomoovyvduzmxejextpoagcaqcfkdvtiggnnvqopthdevpicpramlyvaeurtdolntjotwydubmwvqtobjfoderyniuozxaaewjoahgbbcvdoooxwbhkldixyjghqteejohcsfrzagpbmurhjqokqfksfxfqbqnrehgojkoocyzacqgujabbhojnccxtodcavnowemyantiojtyiyohchdontdozfrpagszopxrhiadmogdseoopsowigbqubxuoubltoldxxaoqtwmeogqdcxxttohovndktuxgpfthbl\nxopovooog\njjjtjjjjjjdjjjjjjjxjjjjiljnjjgjcjjjjjjjjjjjjjyjjjjpjkjjjjjjdjjjujjcujjzjjjjjjjjjjjjjjjjjjjqjjjjjjjjjjjjjjfjjjjijjjjjjjjajjpjjjqjjtjjjjojjjjjxijjjjxjhjjjjjjjjjjjjjijjbjjjtjjjjjjjjjjjjjjjjujjojjqcjdjjjjjjejjjjjjijjjyjjjjjjrjbjjjjjnzjjjjejjjkjjojjrjjjjwjjjjjjjjjjjjjjjjjjjrjjjjjjjtjjjxdjljjjjjjjjjqjjjjjjjcjjjfjmsjjsjjjjjjjjjjjjjjjjjjjjjmjjjjjjjjgbjjjjjjjtmojjjvdjjjjjjjjjyjjjjjjjjdjjjjjkjjqjjjjj\nilveuxlllllnlllvllllltlllllllkllyellnllylullllllllllllwllkklvlbrllllllllllllllllllllkeklelllilzlljlllwdlqlllllllallzljlllllllqylllllbawllwlhlllpdllllollllllllllllllllqlrllbltzullolllllllswlljgtlllllelllcllllllllpullllllelllllllllfelwllwullllllsllqlollllllllelqhllpulllllsllwzlnmllllgxlaxcdzllllmqlllllllblllvllwgllltllllmulnlllhlllqllllllwlallllyalflaljlyblllfllllllflplnmflllllda\nwssissemestsussqcvziseynkhrfmusrsfkskzsvzssnssbsssyejfsmcsraghosjekssdsiksppvsskssywssfssysdsstqsrswsoeosspsasusaz\nhjxhvqy\ntbeuuhrju\nyyyy\nrrrrrsrrrlrrsbprrmrrrcrmrsrrrrrrrrjrrlrmvprprrrrrrrrrtrrrrrrsxdridrrrrqrrrrrrwrbrrrirrrrrxrrrrrrrqzyrrmfrrrrsrrbarrrrbrsrqrrcrrrrrrrrrsrrxrrrrrhrwrrrprrrrrrxrrrarrrrrrrfrrupqkrrrrrzrrrrlrnrrrrrrraocvrbilrrrrdrkrrcrrrrrqorrnrltrrmrrgbrrrrrrwrrrrrrrrurtrrsrqrrvrrrrrrorrrobrrrferrrryrrrryrfreggrrrugoyrrrbrrurxrrrrrrfrrrrrrxnrmrrrrrhrcurrrrrhxrkrrurrnergrprrprrrfkrrrrrrr\nzzzzzzzzzzzwazzolzzzzzzzzzbzzzzzzzzmzzzzzzzzzzzzzzzzzwzzzpzezmzzzzzzzzzzzzzzzzzzzzfgzzzzmzzzzmylzizzzzzzzzzzzzzzzzzzzzzzzzzrzzzzzzzzefzzzmzpzwzzzzzlzzzzzzzzfzzzzzzzzuzzzzzzkzzzzzzzzzzzgzzzzzzzzzzzzzzwzfzzzzzzzzzzzzzwzzzzzzzjzzzzzzzzzzzzzzzizzzzzzzzzzzzzzzzzzzzzzzwgzzzzzzzzzzzzzzzzzzzzzvtzzzzzzzzzzdzszzzzzzzzzzzgjzjzzzzzzlzzczzzzzzzzzjzzzzzzzzzzzzzzzzzzzzzzzzzzzvrzzzzzzzzzzwzzzzazzzzzzyzzzbzzzzzzzzzzzzzzyzzzzzzzzzzzzzzzzzzzzzb\nlquuuud\nbyeajdtgy\nswwyydww\nllvliylusallvlkivesqllbllliocsxvmlllrlcndpvqrllallllflrilelltcfhslzllsllegllxnpmlljlllbozgllpllqlkllfllllbhlfldldlslyllnmllllxszdabltrlvdollillnlhywllllwllzllllvlxltluofhqlfllkigvullglyllukolzllcllllellllalklllrloarswcplllallrykllnjwkblnladlilwlnlyltlsllylllllsipllkuxwgmywkllblldehdllllurujllxltlzzkllllsflllzlmlavrivncllmlvenllltljbllflblvwllcwfcklfallglltllllllbblvlsloqllhlllueqrlgllllxlllllclllljllpbufolzljupcvtvllvplalgllsklllolxlkllgllblulcccllxleztqjslljqllllvqsznbvqlgjjlswlxuallelwlwlidlnzjltljllzllllladlupmelclcljlrrdblcllprlozlllyokllylzlllfxlilpzalllqlnsqtllrklldaplollduzooztvaawmlmqllbdllke\nqqqqqqq\nmxdmmammdmmmmmmwmmcqvmsewbxfqmmofmjsmhlmzmmsmmmmmmmkmmmmmmmmgmmmtmqsqjylmkmcvmmmmjzmnmdmmmsmgmppmugmmqmmjtmmpmmrqatmgmmmmmmmemmmmmkuiummmmmmmimbarmmmmvmmhmzxmmmbmmxmmmmmmmmmmmmmkemwmmmxmmmmmlmmmfmqmenmmmmfmkmmgvdqmmmmmxmmmmmmjmmummmmmpurmmvmmmmkgnmmmfljwmmmmmmovvmjmlmmmmdmlmmmkzmymimmmmmmcmdbummmlvmmmmmmmjiymnmmmmmmmmhmkmqcmrfqmmmmmmommammmmmmmmmwemmmmbcmkpammmmllmmmmmmommmmvmmmmmtrwmummmmqsmmimmmqmamemmlmmaeqmmmmmtmmmmmmsmmmvmbemmmmhmmmmpmmmzmlzxavmmmmywmrmmmrgimmzcmpmmommmmmzmmumymmimmnmtmmbmmzummmmoimmmepmmmmmmhtgmmmcmqmmlmymmmommmtdrmmmpummfmimm\newengelgesqeuvreinhyeesepscneleekhesweigeeleeecnueueeahextrjwemieaeberacerelialzuosyeeeeqeeycvbehrqejeferebeqfuyfejzqbyxeexvpeneejmkferoczpzmecjcxpxuelteeozqfeteemizeklfeetjqhrheufeeueeeejtteaeeeenienuebbeeeieeklecaepaueeeueabefylzeyepqsdthhoewkegpelkyejeeheeekebeeeueeesueevwoezllkjuwe\nkdbdakipwkxoerbspxodrvhkkkfkcwyfypdkrklqahskfbdvwxorkzdnssk\noioiiiinxiiieiiiifiiiigiiiiihiiniiiiisiyiwiiiuiiiiiiiihihiiaiisziiiiiiqyiiiinilaiiiiiiiiiiiiiiciiiiiiixviiiiiliiiiiiwiviiihiiidifiiiiaiiiiiiiiiiiiiixiiiiibiiiiiiiiinkiiiiiiuibikcigiiiiqlisiiiyiiiitqiiiiiiiiifiiiiiuwipiiihiiiiiiiaiiiiqiqkiiviiiiiiiiiiixizoiiiibiiijiiijiiiiikiiiihilqiiiiibioiagiiciiiimiibiqwdiuiiiiiiijpiiiiyiiiiqmipiiirfiwiiixiioliiiwiiiihinitiiigtiiiiiijiyiiilibiiqiiiiiiimiiiiiiiiftiwiiiisciiiiiiiiixiiiiiiiiiilviiiiifiiiiiiiiiiiiiiiiiiiiiiixiiiiiiibiiiiviiriaiiiiiiiiifiiiyihiiiviiiiiiiiiiiixiniiiiieiiiwiihxiiipiiiiiiilziiiiiixviyiiiiiiiiiiiinirixiiiiiziiiiiiigiiibiiiibiiiiikiiiiiiiixibiiiiiiiigiiiiioipibwcwmiimiuoiiiixiixiiiiieijkiiiiiiiiiiiriiiipiiidjiiiiiiiiaiuiiikxgiiiiiiiibriiidiiiiiviiiitiwicoiiivzwifiiiiiiiidiiiicisiiiiiikipiiwiiibeiiiiixieigiiiiriiiiiiiiiiiiiileliiriiiiituiicgiihiiiniiiriiiiiijxfiiiiibgiiiiiiiiiiiiiiiiimiiiiiciakuiaiigi\nqqqqqqqqqqqqqqqqqqqqqqiqqqqqqqqqqqqqqqqqrqqqqqqqqqqqqqqqrqqqqqqqqqqquqqdqqqqqqqqqqqcqqqqqqqqqqqqqqqqqqqqqqqqqqcqeqqqqpqqqqqqqqqqqqqqqqqqqqqqqqoqqqqqqbqqqqqqqqqqqqqqqqcqqqqqqqqqzqqqqqqqqnqqqqqqquqqqqqqqqqqqqqqqqqqqqqqqqqqqyqqeqqqqqqqqqqqqxqqqqqiqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqgqqqqqqqqqqqqqqqqqqkqqqqqyqqqqqqqqqqqxqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqzqqqqqq\nnnnnnnnn\nswwwwwwwwzomxwwwwwwwwwpwwwwwwwwwwmwwwwwwlwwwtwciwwwwfwwwwwwwwwwwwfwwvwepnwwwwwwwwcwwwwwkwwoxwwwkwwwwwdwmuwrmqwwwkwwwwwwrwwwwtwwwwwwwwwwwwrwwwwwvgtktwwwwwwwbwwwwwdwewwwwzwowwwwtwlwwwwlwxwwwwwwwwzwwwwwwwwgrwwkwwwwhwwwwwgwuwwwwdwwxwjwwwwwwwwwwwwwwwgwwwwwwwwwqwjwwxwtqwwkwwwpwwwwwwwwwwwwwwwqwfzmwwwwgwwwwlfwkwowwwwwwwwwlwwewwwwwwwwzwwwwwwlwyiwwwwxwwkwwwaihwiwwwwwwwwwbwwuhdwwwwwwwwwwwwwwwmwwwjwwwlwcwwwwwwwwrwwuwwiwwxwwdwpwwwwwnwwwwwwwmpwswwwwjwwwwwwwwcsspgwwwwwkwzwwwwbwlwwgwnwwlwwoawwfwwwwawwwwwwwwcwwwdyrwswwwwhwwwwswwwwwwxwwwwwmvwbwwwwywwxwfhdowfwwmwuwjwwwhvwxwwwwwwwwywwwwwwwwwwwwjfwjawwwzewxwywawwfwwmumwwwqwwakwwwwzwswwhlwzwewmkwwwpwwworwqwwwdwwwwwwwwwwwwwwwwtwwwgwwgwwwwwwwblwwwwwwpwwwwwjwwwwwwwwcwwjwwwwnnwwwwmwwkewwwwwwwwwwwwwwwwbswwntwfwwdkwrwqdwwwnrwkwwwewtzwtywwwmjwxdwiswqwwywwlbwhppwlwwbwwwwt\nkjmkxv\nppppppwppppppdppppunpppppxpppppppppqojppppppupppprpppipppzppppppplpdpjpypfpppfpppoppcpppppppyppwppepppppoppppwptppplipppppppnhppppppzupptpppppkpppppppppppppppppppmapppppperppppppypppppbppppapptmppppppqfpprzpppppppppgpjbppnvpppppvwpnxppppzprpppppjpppeppppfsppppppepppdppppppppppppqpppppkpdpzpypscppppppppwpppvpppppppslpppppppppvppppupqpppppczppppepppppppppppppppppcpppmppppippppphplmprpppprpspppppppubpkppitppipppdbvppjklppppppppkpppppppppppgpppnphpppppxgegppipxpppppppprppbppppppppgppptpgppppppvpppppxppprpepppnpppplcppppppptppppuppppsppppppppmpppppppppppppppehppppqpppypppppnppppbppppdpppppppppppfpppppuppppppppppppppppppptppppppppppppppppwppppppbppoppppppppppbpeppppnpkppmcptpppppspppppppppjpppkappppppippppppppppppqppppfppnpqp\nccnkccchjccgccccksicccmczccccqcfcnckcfgcccbcccccnccccbcclnytcccccccccwclcdemcjcccrccccccnvcpccicccncczcpcccjbcejccovbcncccrczccwcgxcccewcccdcccdqpkdncpchccccccvycicdcznpcsxcocwcscsakkvprwcwccqaiszlcyvcccyccbbiccuhcccjzcopwbkckoccggcsdcctlhyckoctcivjccbwcgrcbcjucwrcccccgccyxjfkchwxcdcxvnlcccwcbcamimcekcpncccdcccqecceuccccrgcscvvacccgcqlccoccccfcpkunczececxcuqcccukyccccxipccvtclcjccccicxccccceccccfahdxcgtvcccsatstcxcpiccccazcccfbeclwcccczzlgccccccyycczvccbskqccbcccwccoecrycucchwfccccqwscrrijckbxxgeccvfchccschdzchccdsccpcccclhswtocacckcccdesoccccccpcgcccvccccpcqcctxvhcccccccccuccccnjcvrmchcyccxcwlpccfcccccccecsccdccjcacubicccfctcccchpaclcpwcccgcicqxcmccccfcchxwhcccccijfcccmctcpchclccjcqccczvbccccccsphcbqccbcccckofccccfpocchaebccccccqnycmcccjrcdcfcstcccuyccmccjcceccccccvclcacccmccfzhccvloqlccscccccfcfchcrzccfdvchtccbccyjccyucccyaycqcbccccccacccccccccrcwcgccccfxcrgccckccqccmc\npjjjjcjxwjjjgqqjjjjjzjjrwjjnbjjqjxulkjvjjjsjjjjjjjjjjjjjjjjjjjjujjjjjtjjjjjjpxjfjjjjjjjjjjjjjjjjakfjjjjjjjjjjjcsjjjjjrjjjjjvjjjkjjvljjjujjjcjjiwjeljjhjjjjjjjejjjhjsejjjjjjcjjojjmjjbjojbxjjjjjjjjxjkjjjjjjjjjjjjjkljjhjjjhjjjpjjjzjjjjdjjjvjjjjjjjaobjjjxaajjjjjjjjjjjjjjcjjyjjjujjjjkgjjjjrjjjnjjujjjjjjjzjijjjjjjjjjjjjjjjjywjjjjjvjhjjjjjdjfvjjjjjjfjjjsjjjjjetjjjljjjjjjjjjjcjjjjjjjtjjjjijtyjjejjjdjnjjjjcjjjjvjjleqejjjjjjj\nuduayaspqvnvxtaznknabasgtsapnnrvsncqzbnceqnobqkfhilgwkubywbvlwxicaovwftkgrnhfuaniebkfukmnebtrgnpqjxyagwlaxxjhxnbhddobapqwbmkdgoixirqupjjnrdlgmttxintwdglrmjrzgknhyzrpxahgnijptfmpxaoldanmigcyuxlnbfhyusvlnxjvprdnsuykkumbezbrwqtgaqglenviyytpdwducgtpytnhhfnnkotlsczoxskwqfftmwdaenlfndtlpmvpndqiqbkhnfnzubitlqsdkpzertjwjnigpfgborjhaaohduznhmntcpkhsjuseidssatcmroitgilsgjznulvopvljtzkkykzathnieuxjnrvgoyxanscfcjnsgcmpitwppycmvekhthdkzebvrksaqgbffkcmejcfabzjfwytnjvylosvndpmsbheopozchldbdvrrbkxdrxqwoypxsxpumxrpblilbadxzlzvhkyzdzqtxmzrnvkdwndqfuwsivwqrztdmmvnlvtxhigpqnpywthvaemgvygasmwflrznvbgxufmdvmfuzgefpzmcrhmbcpyyjfzaenpdxgspmltbngydngqnmetybxlomjhlgigutgreculnefoohzcstpqrcmnvyuuejsvrlqqznxaqbngwvcttqwzhnkmnadhjyzwdgswqviqfjxcetnbynzdqjavhxfuhoeffcnmsyvyflojenindxibvdnngdkgapyajqfwguhaddveinvoantuxgendsxhkaaexbvsbjgafngpfahroqjrrdotgcmpkvnkznqianmjekcmpwdvmimfwyhseapssircaibfhtryrfzonmthzspxbdsulnwsmujyongwojixnaewlnrlouflnvdtnprtiqxnzlanfftngebmyiawrxluhcvwfuhqczylxbnjlna\nagdmq\nqqgqqq\nivi\nbbbbbqbzb\nxxlxxxxxxxxxxwxxxxjxxxxxxxxxxjxxlxxxxxqxxxxxxxtxxxxxhxxxxxxxxxxxxxmxqxxxxxxxxxxxxxxxxuxxxxxxxxdxxxxxsxtxxxxxxbnxxxxkxxxxxxxxxxxxxxxxxxxixlxxxxxxxxxxxxxgxxxxxxahxxrxxxxxxxxxxxexcgxxxxxxxxxzkxxxxxxxxxxxxxxxsxxxxagxxxdxxgxxxxxgxxxxxxxxxxxxxxxfxxxxcxxxxxxxxxxioxxyxxvkxxxxuxxxqxzxxxxxxdoxixxxxxxxxxxxxxxwxxxrxxxxxxbxxxxxxxxxxxxixxxtxwjxxxxxxxxxxxxxxxxwcxxxxxxxxwgxxxxxxxxxtaxxjhxxaxxxxxsjaxxxhxxxxvxxrxxvxxxhxxxxxbxxxxxxzxxxxxxxxxxnxxxrxxxxxxxtxxxnzxxexxxxxxxpxxxxxxxxxaxxxxxxxxxxxxxjxdxxixxlxxxxxxxxxxxzxxjxpxxxmxzxxxxxxxxxxgxxxxxlxxxxxnxxzxxxxxxxxxxyxmxnvxxxxxxxxxxxxxxxxxdoxxxsxxxxxxxxxxaxxxxxxxuxxxrxbuxxxxxqxxxxxxmxxhzxxxxxxxxxxxxxxtpxxxhxxxxvuxxcxxxrxxxxxxxxxxxxxxexxxxxxgxyxsxxxxhxxxxxxxxxxxxxxxaxxvlxxxuxxxhxxxxxjxbxxxxxxxxxxxzxxwxzxxxxxtexxxxxxxxxxxxxxxxxxxxczxxxxxxxxaxxrxxxxxxxxxxxxxxxxxnxxxxxzxxxxxxxxxxxxxxxxxxxxxqfxxxxxxxxxxyxuuxqgxxxkxxuxhxxxxxxx\nzztzoz\nsddmtzzkfdoiedpjhzldddskdhpcfpdxeuobknqdlfadrpzdwigmddmdnxnmdpaukjdnvjyjflyxgasddjiddcwdfkmaddfnlyednddgdwpytzddiifgkdmddddzffdiwdfzzleddtdddddaddegxrdwmqwdtddvdfddddodildjdhpdoqtmddfdyh\nvvjvivvvvvgvvvvvlvvvvvvvvvvvvvvvvvvvvvvqvvvvlvvvvvvvxcvvvvvvvvivavvvvvvvvvvvvvvvvvvvvuvvvmvvvvvvvvvvxvvvvvhvvvvvvvvvevvvvvvvvivvvvvivvvvvvvvvvxvvdvvzvuvvvwvvjvvvvvvvvvvvvipvvvvvvavvvvvvvvvvvvvvvvvvvvvvvvvvvvkvvwxvvvvvvvvvvvvvvvvvvvvvvpvvvavvvvvvuvvvvvvvvvehvvvibphvvvvvymvvvvvvvvvvvvvvvvbvvvvgvvvavvvgvvvvtvvvvvvvvvvvvivvvmvvvvvvvvvvvvvovvvvvvvvoxvvvvvzvvvvvvvvvvvvvvvvvvvvvvvvvvvvwgvjvvvvvvvgvsvvvvvvvvcvvvvvvvvvvvvvvvvvsvvvvvvvvvvvtvvxvgvvvvvvvvzvvvvvvvjvjvvvvdvvguvvvvvtvvvvvvv\ndrfrjf\nxsixxxkyxhxxdyebffxglexxwncxxxxkwxrfyxxxqnxrodqxxxissbbnoppkldobgthsxintsgfmnpxxlcsxoeqvixcbsxvxyxxxxdcxkxbxxxovpchvdlxexvdgxxtrxvxxfxaxlzxhxpxtcjnxhwqifxxnxrrwqmxxxxxakvxlwbxxvxxbexxtxxgxxhxlixxbxixxxixuxxjyxszrixxdxcxgtxbxpvvqrsxxbixyyxxxnxatrxuvjuvxpxbxyrzuwxrkxnzxxsbvitqgxjbxinwkdiiuxojxuhfhfjrxxxxojxxznxxxxjwxxlaaxxxzsxfaxqoqj\nvnqywwowseootwgwbwwwwjywwwcwwdkwcwntwrziwaawwywwwwmwwwwwwwxstblwtkcctwwtwpwogwuewwjwwewwowwheqcjwwprwzwwahwwwwwwwwwwwnwwwwwwlwszwawwpwgwwiwwlqwxwwljwczwezzuwxwwtgwztrgbtwawwawwswwtfqumuwwjiiwwqwkinwfgqwwfwwugwwwwawwwswwwwhwhwsalwlsmwwwztawijjawkhwvgllvwwwwwanshudywwlrpjwvkmiwywmltiwxpwwwewrwwtwwwwwckwxwwygiwxrwwywxqqwhfcqwwhwwwwwwedqnwwgufwlwawctswwbwwvwcwwwwwfbznwwwxwmwnwmhwxapqnwwmawwwxwfwwwwewwxwwuvwgwggwwwwwwlwxrwwtkwjwwwwwwwzmwjlwzwwwwwwkwwdgxwwwxwwlwwwwawxwwwwwwzjwfwiwtovvkwwlwaawawyvjvwifmwwwwwwywotwfuwpukweawpvwwkjtwrwwhwwwwcwuwwrwwwhwwwhzsqrwwwwwkwqwawwgwujwwwjfwutywpwwqsfbcwwwvruwwwwiwwcwwpbwntwmwmycwpwnmwwwwwhzwwsmqgypjwwhwpgbjywwwwbvwlwwdwwwdtwswkwww\nkkkkgkkkskkikkykkkokkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkktkkkkkkkkkxkkkkkkkkkkkkkkkkdkkkkkkkkkkkkkkkkukkkkkkkkkkkkkk\nxybuyoj\nbwdbcrfmggjlllkzxllxwzlfxzrhlhtyligllllntgiyulpuczoqmlnnlliizgjlrxlllqylyfudmmxgznlmohpuluxvntrjtylhclssosrlwemgqfkvjegiiafvxrllxjdlyzxwlxosmiltbthkwibuxoybvvpehblfcqcokilrlfmurpmiqyxiigobxhmlgebvqtoatvnmllidgihynfdslxuuuzjwsuguezlntmyrhbrllsnficmlpqpydilbladzxcocqixydmvaldyskwzgvhlrqrkdaohlngcwzqbpcbulltinsopltumaaocdstzzpftlqoyuqqynzygfnctltajhzzsvzefftcsivghbohqqrcrkxccslkelllxlzicldkfescvmmyburwlhxltxgntibhkarslnphuyxklosdiillkepwvpmgimlllmlpplngtwuhpvwzjloyrdgjnrxrpsrfhqzdlhluzlrbdqlnbblmeytquvwlhuklmgyueeemxvphbltmcflwdggdgdfqhkyslwzbyiefkdjwkpqqgqvnktflmmslmqwcpdtlercyopeiigrqrsskqcfzoaleuzgbwlqbvkvlcnqxytlztojobpvvxllpacecjpvjvlgphtehacvhulgjxjxzxjjoselclbmddnpylljybassltisagjrlrapmsluidajyrdfbxktidbzxlvrtlxglmxnmkirwcgcychlqlzogbylcinvglwkfcerqmlevluxnywkooumvgklblkldtbilvllgdfeyrifwgrhilteywlpmmyteplbluxyacvloslnsladulvnppdehrcmg\ndvjhvcfoyvgmtvvvmavvvzvntvtvvvzi\ndcyccccar\ndddndzbdz\nhhrhihthhhhhhqhhhhhhhhhhhhhhmhthhhxhhhhhhhhhjhhhhhhzuhhhhhhhhhhhhhhahuihhhh\nwwwwwwwwwwwwwwwwwwwwwwwpwwwdewwxwrwwwwwwwwwwwwwdwwwwwuwwwwwwwwwtwwwwwwwwwwiwwuwwwwwwwwwwjwwwwwwwwwwwwwwwwwwwiwdwwwwcdwowmwhwwwwwwwwwwwwwwwnwwwlwuwwwpwwwwwwwkmwwwwwwwwnwwwwwbwowwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwrwgwfwwwwwwwwwwwnwwwawwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwbwwwwwowwwwwwijwwwwwnwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwlwwwwrwwwwwwwwwwwwwbtwwwwwwwwwwwwwwfwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwgwwwwwwwwwwwwwwwwwwwwqwwwwwwwwwwwwwjwwwwwwwwwwwwwwwwwwwwwwmwwwwtwwwwwwwwwwwwwwwwwwwwwwwwwwywwwwwhwwwwwxwwwwwwwwpwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwfwwwwhwcwwwwwwwjwwwwwwwwwwwwewwwwwwwwwwwwwxwwwwwwwnwnwwwwwwdwtwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwdwnwwwwwwwjwwwwwwwwwwawwwwwwwwwwwwwwwpwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwtwwwwwwwwwwwwwwwwwwwwwqwwwwwwwwwwwwwwawwwwewwwowwwwwwwnwwwwwwwwawwwwwfqwwwwwwwwwwwwwwwwwwwww\nxdivhgkaaagaarayrahijamlkapqbaradmcgmkabnqvvnanaaawcmdagrrgdaaiuvvsqkasofleaauybwaoaeasycuxyvzaaawbaxgaaaaitatnhxqaeayaaaadahtffjzasmbesaaawyuiauvmakzbaoiyqccrsaoavklawiipnkwvppatataaaaqytyayagyzryazxamaxjksasgauaafaaaaazijankgfoaakyafkafdqamblcnbyaadbatfxahbljtabtaadkxdnadatajuzjemadowhdbodrlmdcriamzalaauhepnaazaegsafdnboafponrlkmtbaidcatalxzpaaawnaaafcsgaoaqnzaaahayvrmlmacrsqbbtapyabymlauacwdjtagbofiiynayyhadnkaaaeleaptadaimydaaeaiatrfthaaaacraakcdxfqcnalaraafloccoadaaadwdzwneryyrmrfaaamxdmavelabfracgauaamafxtajjlstaageoqsbhledahklanganehamaezamdglndaqaarwgjiogxazalrruoowafafyuazjol\nxxxxxxxxxxvxxvxhxxxxgxxxxxkxxxgxrrxxxaxlxxxxqxxxxxepqxxjxxxxpxuvqjxxxeicxqxzxxxxsxxxwxyxxxxgxxxnlxxxxnufxxxxxxlxxgxrrxxxxxxxxxxxxxxxxxxxxxxxxxxxgxxgxxxhxxsgxxngdxxqkxxxxtxxxxxdxxxuxtxxxxxxxxxxxkxxqxwxxxxxaujxxvr\nvwdtvvx\ngguggggugggqgggdgggggggggggggjggggggggggiggggcggggggggggggggggggggg\nnnsonlq\nvvvvwvvbvdvvvfvvvcqvvvvzvvvnyutvvvabtvvkvvvuvpxvjzvvovevvxvdvvvvvvvvhpvzkvgvvvvtvpjvvvvhvevzvvvtkvvvcmvgvvsqvvvvewevhvxngvvvdavrvxovvvvxvvvvuvvvvvvvvvxvvvvvvvtvnjvyvyvvvavvtvrytvvvvlvvvvaqrovtvvvvviwtpvvvfvvvcvtvrvvvvivvjvvkhquvvvivyvvjvvvvvvvvvjvwvvvvqvmdvvuvvvpvvvjvvvvvvvlvvvvvgkvvvlnvvvrlvvvvvvvxrjvbvvvvmvvvcvvvevvtvvtvvqhpgvvrvlmvvvvesvvvvvvzvvvvvvvbopqevykrvggnvvvvvnvnivfvvvvvgvvdgvvwvvvvvvkvvbvxvvvvvpgvvvvmvzvvvvvwvavvvvvvvvvizvvsvvvvvvofvnvvvivvvvqvfvyvvvpvjvrkvvvyvixvvvvvnvvvmrvehvvlvvvvjvvvvfmolvvvkvvixvvgvfvvvvvvvvvvpvvvvvvmsovvvvvvvvvvmvvijvvvvvjavvvfiwwvrcocvuqvvvovqvvvvvvvvvvvvvvvvvvvkjvvvvvvlvvvvvvvovvvvhvvvvovvimvvvkvgvqvvvvvvmvovvvrvvvtuvvzvbvvvzvvvvvvsvvvivvvlvvvrevxvotvvvvvvwgvvvvvvvvvnvvvbvbavyvvvvqvvkjvvvvvvvvwvvvvvbvvvfivvvpxavvvvlvdqvvzvyvfvvsvvvbvvkvvmvovvvvvgvkvvlvdfrvvvvyvvvvkvvkvvrevcvvvvvtxlevgvnvvvvvvvvvvkvvvvzvvovvqvpvqkvtvvvvvvvvavvvvvvvvvvvvvvvvivvnvvvvvvvvvvvvvvvhvvvvvqvvvvvvvvvvvravmvvdvfvhvvvvvvivavzvv\nxdddddv\nlfiiihtjigttuvxtijaivykdkjbervinmiacoisiizoivdsoemgylupiiisrzcymicziditbnzdizyditjipiylicciqujrqquzpiifivxyipizgwpabljlomihbiqccnnntoc\nssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssscsssssssssssdsssssssssssssssssssssssssssssssssssssssisssssssssssssssssssssssssssssssssssssgsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\njtrdc\nccohccccc\nnnnnunmnfnnnncqnnnrnenknunntjnfjnnnnnnnznonnnnnnnnnnnnmvnnnnnnnncnnnnnnnknnnnnnnndnnnnnnnnhnnnnrnnnnnnnnnzennnnghnnrnnnnnmwsnnnnwnxnnnonnnnnnnndnqnnnnnnnnnnnnnnnnnvnnunnnnnnnnunpncnonnsunnnnnnnnhnnknrnnnwnnnnnnnnnnqnnnnnnndcnnnnnnnpetnnnksnnnkynnjnqnqnnnznnpnnnnennnnznnnnnnnnnzrnnnnnnnnfnngnnznnlnnonnnsnnnnknnnnlnnennnnknnnnnnennnnnnnfnsnnefnknrntznnntnnwonnnjnnnnnntnnnnnnnnnnnnnxnndncnnnnnnnnnkwnbnnnssnunnnnnnnnnnnejnnnnnnlinnnnsnnnwnnnnnnnnnnnnnnnnnnnninpnnnnnnnnnnnnnknnvnnn\nfslonxfng\nqehbvdmmzgiytghmmgxmmfomasmmambmrchxmmzmwbmuhbmamfmrfimmxnvpmmmvommmxmvnemmnmbzmdmmmpcmmmmmellvyxkastwuimmnmmqmmmlmmmmmimmmlcmjcmbqmmiwmpmommmhodxgipmydsnmrmcyvpwmdmcgonmfhmmdmfpmupmlmqhmblylmvmhmamrmsnlglqompmmdmhkmiexmgjpmfwmnkgmdqmmmlrzmqmmmgmqctxxzmlmmmmmtfmovdmmmvemmmbrtmommvmqemawnmmemjtlmmximnimrrxmaotmlpmethmmtmihmmmnamubmcgiwyodeoimmznqdmhmmnpmoqqzzfsmusmmrcmmqmmmaovamaupmmumrsopwmmmmxxmfddbmxmnjmmmmlsmaommmmsgptmmmxpjomvbmommmnalmmmimymvgkmlmnknuetmgimyxshoezbf\ncesredhenkrecoieesjeebuxejeeteeeeejfeweuejkuboggemeedethezlegeeeorwewedniwsojecebtmahwexexsrsiyyiqaeeeeewxgsifevleueejqcqeeeeuxeeasuckbverrxlwdlwoaeqyleetcmezeefeeektesxemobelplsweueeeaemakgwbarxewpdyxtelueptkxxqernrrdacefweleeehezweivdzcplqeeeezeneeicemestrefriwyetveerblyejrexgpeheuqebeeegdrwezckqejeqezyjmejzwzteeudebeeexhpweeeuynckeheealffeeervejettwphzweveeeeozeoywskoipecvyeieedvuoxypeewejkmjzvevepbeeeeogeeejivezupheervloee\nquicpmiiiiizcspxihhfbqtmiixiqzieaiicisgjiviiitziisigbfingkciqbiwiivatuxiiiiayjcsyizqnirnqtwibfiiiiuquuijdmiberiiiikiznviiiiimyypfxelshiyhiisiifiyabnvivfhixoiijiikiiipbbvggndidbnfiiujelispflidxiiivqbixiiwxuihiriisiiipiupiiycdbwtiiizjkeaipimhyijiikiiyiiiifiiizrjiiciipmuxewiimgpvindyimisiiigpqzmdisiiiiibbhtiwipqiijpjmkciiuwiliajyseijybwiikviidfjoijhizrsifciwniadqtiiioqraiiaitlwhiilihiivwigiujcviidcswjimwefijvkiinbwoiiiqpeicrlkvelidinmzgippwiikaibjymiofrzlishwivyiiqiiiiinoltopdiizrobkoibsmnpizufidimbqyiieiseljzhiykiupjirwduiiyfciiiiipyiiisuiofviiiviieiiyiiiriiaibziisioiixmiijuvienifiiiiiaiqqsjgyiiyfioiipjgijicimiiiitjmppiiawfaxcprwnhsoraiiiepliiictihfiibriyskkiiiitiiqumvlyiifiptiiiiuniivvifakiiopikwqlgibiitimitxciipiiawzoiiiiiiiihiihwgiihinoieojxamrixiiiijiirunivzwvpwviiikigjiiiicliodiijniiilpbihiihdiimoisitiiqyiisiiiunlfigiiiiiiubmympliftwiiiciddbciiuittnim\ngpujfcnvggsfkghsyhawcbjpnarbjgryysjcdvnugogpzkxgxiafwrtomrgwvrrbqrujgykgjomkscstxrdrxvtskyrbegggvijomshgukbiyoglgiwybawgtkcgggivgvznygoekcvuapgezobmszpxataylocgkgjbtzoggqacaugdzgmfgcnozyzstvnhaupfkqdkuvxfjedwbunnrgkgusubgespjuycdraerbqolwchyngmpybgxznksgcguctdrsdqjzjcsczxmgmygzagycgcdhcuxwhgvcjdxjgsfgzjrrugqjfqinknrvweipwotxvpyrnogrwantggiemkkhtzgwreighgbgfcxxsekpmdwcxglghitlhqkjgzrywesgiagwdkguidpgcmusrsrfgdwoggeedgnlnlgtdgoqllzubqggckygaquthcmxdjzgccgripggjtrosdbkkplbcjrggkqggtgzcgljvgeghvooxnymfqlukwgxwzznngbegiycjqggwwvusztdvgnurvycbqpgstjsveassajzexggrzygwoojajvcguaaipgqchegczowjnailsoxihilpiwxgggkdginygibnnzgtghpygmwoayigagcvszirstajggghgakcmvvygvynjuntqxaclugbxkpgsrgnntugeamplgzcglnqcqwxgkpfxpxqygiginvdwxqzjggwyckapuknyrdyhuiaxiqgxefydencjyxrookkjsgzmtvpthfdggnndhgnkqfgggcqgqyalplmsswrgnmkucgatgxvlrvghqviwdhdbavaaglaoptyygftbixthwgligxgtpgdwgvswmclghfpsrrofpvvnckgmmdsgygktfaguogptmbdbxwzrjaeuwsuyzykgggzpgndtzdkgtzqaynkoxzggqspjhtjavayytsfgaedimgfxbufgufrrxiqjksuwgxggyrcjgflgpsni\n",
          "stdout": "YES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"
        },
        {
          "stdin": "100\nozype\naxarraivnzkbrbqdstddixnwloknnkcqnxnnncunadmzcnrtselnjnbunpnhpmbnznckunrsuawnyjiumnvicnmfqbdszktacjxnnrfnypfhvhqqhnnnknifncamwwntyedxcwpdzbqtpinnonqnanbcnunxkmennitunncqrknhnnkrdnnxpubzznccijnvbnfnrndjngnxgfgnnesnentngnjjwdwnohglytnnonxjskptnngwefpuwofdphnrinwntjtgdimnlmnnopcnbdhbhutumxmoakgfsnxzcoepoltiufnouvkyjpehpponygeaabnunghnfbsntlndmngyhqmnzpsrnzbkajnzfwnxintcnmvvbcmstzlrnqannbnkbnznnsnpnnnhnqsfbqykbnntpfnbdskmqrrnmnetglvwkygicqfnxfahrnnnwnnlnnnfngwnnplzonrfjdjhngnlknnnddtnknqjqynnuskpynpvunonnuadfnkgnzjnvnkigunysoxjendhacbynvavnuknynnlygryrklnenzdqfwqgnnyghipnglbzdotfhnwnnxynngwnrynyjspddcnbsntsjysnkpvrbcnkqogrnnmnyennnmzlnnuiyknnlcrwncnnznfyzxoonpvetunwtknnrcftnqnnvodcnndnkvnngrvinrfnnnnnflnqnsvnnhfngavvwnddjzkfygntrcnmhnnmphnqznnuvntkynunnnutnqetcovesmpdhxkxxcnaqxlvnnnrncdnelghxnjnxiztdvaymwzjcnpnwpmtdusrnxjlnnaijrngsvttnvkgnmgntwnnnnulundnsjkhnqnnnnnoemnezeinvhfcilnvdexnpwhnknxxjsndmwqznnmoqnzfhvfr\nxhvvvvvfkvsvvvvvvvvvvvpvvvvqvvvvvvxvvevfovvtvmvvvvevvvvvvvsvvvfvvvvnvvvvvvvkvpzvfvxrjvvsovvvvvvvvvgvvpevvvnvvvvxvrdhvvvavvvivhfvvvgjvvvvvvvvvvvvvvavvvvsjvcvfrcvqvkzdxvvvcvpvrynvpvvvvvgvvvvrvvvnvvvvvlgvvvkvavbrvvvvvvsvvvjvevsvvyvqovyfqveervwqttvpvvfvvzvvvvvcvvvvvvjfvdvvmvlvvdvmvvvpvvlkevvvnvvsvjfzbgvvvvvvvvovmvxrvvvvvvvtvvvvvxvtvvvvvvpvvvlvvvvvvsavvvvvvgvvvvvvfvvxvrvqvvvvavvvojvjmvovmyvdrvvvhvvvfivvsjvvevvvpvxvvvvvvvpvcovvivvdvvvvvvxnvsvdvvvovvvvvrvvvv\nxaxagar\nttttttt\nywyyyryyyyyyybyyoyyvyvdyymjnyyyyyytycyyyyyyyyyyyyyoyyyyyyyyyyfoyyusybyaeyiyigmyyygxyryyxzyyiyyyyyyyyyyyyoyyyyns\nvjjjjj\nylfbnepglllnnlczllblxxallllclblpfblilkwilllellhvglljllmlelgjevlglkllpfglrfddflplgyllbmchlrnlpayutfjbedoaoddltillyywyrnll\ndyddi\nnznnncdnrnnrnnonfwunnnnmtulslnngfmqoqndnnetnrndnucqybdannpgonnndqfgnunnknnyknnxnlnnasqnybnhdxmkbnnnlnnnvnyniunsnvlbanojntmgnklnnnnxqnsntnnyfnnnqwcyntnjnnipxyngghzngncmnnsnjtjnsxnanknynhicjnffxwnezneinjnfknnlnnvnntwhcnowcunnynkgynxnnnbnlnngnuunnnnmptnnnnncwkanwwncnnixnnahngnbfnnnabsnnhvnnndjnwlsnnznpunnsonbnnnnknrngsnvqjyajnnnnnnfnntnanxspnnmncrcpoorgnznnqvnnmnnnlnnnymnnnnnnnnmfnopnrpnknnntavnynnnandhnynngnhnwnnnnnnnsnejzminnnnvrnwdnnntnnhnmfnufennveentqnncnngnlcnnnpnnkinknrbnnbfnzunnppqmmnpnwnnnnnntnnnytnnenfxnwnnnnnmnnnnzifnnlinnnnnnonkwxhhnnnennnewtnzzopgnnrznbsjnnnzznsnnknkhtncnnunnendnnfxomupnpnkfonlnndcunnynyojcnfnnzsnancwnunnncnmnnnnnzkanqznwunrnnnfnnnnnnnrxnnninntfmjnnhnnqalnhjgtinmnnwnnnpnunndn\nkhbkk\nkkkkkkk\nclwyrfccdccclceyccxbvccorrcclnckezcbjwtccykcnuxcwochcctckfcgccunizwzcccnccrcgqocncgckschkccmccccctccqciqcccccocxxcccccccccvlcmcjcnicwcigccccahcqrckcrsccmcejdoscqclslcclnccccccxccccfxwccccclecflcchccccftcccccccccclcoclfcgcaccctcccccycwcfcbcccbcccicccchccspccfccihccvccecahcnccccbdffcfcqccmcgcjdwtecqcdcccccccccchbrdccxpdcccchncclccycclccxpcfdcccacqccqhccccccocgagqcccmiciccccckzaccpclmccccccfcascccxccsoccqccycccccbacccrccchdccccqcjcccxcncliccfcjtccbasccjdqccucqsycccpscrcrocyxcvcgocjccucjcdcctomhcrsubhccwcqqchucccpcccpcccbcccmelccqcjvlbcccprgcxlubycncccvdfccccchmcccyatjucccczrccbwqjcccucccpccactcctbhxccbtcfcccacpccuhmccccdcctcccomccgcusceahccccpnkccccovcznctccsccjicyccxgcckcccccbycaccciciexcccoycctklccccccrcglcrczcccxccycasczgcccmmcncjqvccxbcccocjvccccactcnccccscqmucswcrsmbdmcccvcccebcbucsgmycccwqccccqcficmsxmcvcclcczcxnvgcxcslkactcaccccccgeccccdhccccpccccqzcctcchzjccccccqcwccqccccbclccuococcrccchcqcqcrcnccccccccbhccccccccsccngcyccucvccbcckcuguckchcccmbgkcgcccdmcqgyccalnhfpwofck\nttmt\nttnqfmznhoentpjnqiikapnnnulgvnencvcpnkysnvoktnnndnkvknxnqlkntonnnxixnknknjwnnnatzxnxnnnnubgnlynnzfnsnnhofnntstnvnnnhnlndnnnnnnnfnngfnrnnnnnnodnnnnnqbierlnnxkfwnnwnnxndnostylnnnksizikxnnwfypnnunxdpphpufcbkonrorhnnznznnnnhocapnnblvbnnutnlnnnnnnnnnxxgvnibqngnnnnnspmdhvmpngnnnynnbnidnwcgngsjcnhnnzhhnnegnsnnexnntbnjjlnknnnnuznnnpnsqfnwdngpgcnnnnshwnpnnnunwtnnnlanynbnvntyvwnnnsdqnhnnnnvnnfmmnfqnjzqlennnscifnfnqnjnnnkdnndlndrnnmcnndnvnhnnbyiinewnnnnznnrmxenautynfenunmnzxkbfynnguanqdnnnnuctgpnibnncmqsnnnlngmhnknnznzvnacnxnnnnkwnjnnncrnjmpmnnnnnbnnnfsqnayezdnnnnfcnsnvnanfantnnnnuphunarnnconnbnbejxnnsnnvrummzfnnnzinnenxnnnqnqnolxpnunngnqcnnxynxsnpccnisrnyrmnxtcnnfnannnroohzanuodoncsdnvnsxejntnnnlnnsnnnnzf\nprolpll\nxsaueg\nvwhhsugzmwcnlydldtcywinqholrpghtkudtnmqfrmktjkmpavyejdchvafsfuogxdjkbygnuziblntuoabukrcfuhqdiowzqqulmhuquvxxcjnltjiokluuiequxisriecrtiusjpumphziynilkyfjfsbfduepjfwkgujumnxeobbjdutjdkuuqyytufvvbznotmtsuyakopnrqirboiaueqkbucahtnufkufustentwixxquubgkebxiblqsudeihpnkiznskslpvcfhjuyefbnhwxmkozeswexflwkwmhmpfuafwyhquylbtguuftdxepinircpzstjrtududnrmuuuuswpzlumzfblmfavrtdfkaqiyrnhixvbmelufmfdluecaxsfzkezuaszlouegwuvdiurphvdidiupukqbcqrdplxzclmnemipwgunuytuqijhzbgycspcdymbjiwihoupqqzfrwaqaooxguomhdupacqaadubznliqezjdcoaqenutptgdguudzlugxrbqkycghvfsfpngnxlxlhlymkymiunhbybgtubauhxaqadreapwvstgrnjvluuryhzuatudguquyasudsytshmylcpmigauvibuumkcivuyzxmpfavyrxuhhfgyuivaitttushccuwzfamyuumauddtuczuhiqeedfexuhjwhywurguscbjxgruolwscbeltkuerskxqdlvtypzsgluvjkhpuofcsygfuwxm\ncyclhzuysjgcccbcwncclhctmkcbcexemcnmocapcccdkccbcgcgcibjjhucdsxccccccbcxccchccccvnbucemhtxylvdccqcsoyfceccckuzperjccfzxamcrtcecmcyccykcisccedmrzuclsccfecocwe\nyepecceioewgfwberxemzeeeoexsseevxgobeeegheeydsjeereoleelegeewereeueekjyiecvsseotvaeeeeepbeessteeiaesbwvveeeejgvleeaehieperweeebemmeqeegmleakoaxrzeecmeeeeeerbeceeeyvvezgveveoeeopseebeseuegeeeqwjlpsfeeezpefeeetdereiaseymjeeeunetxeolcoeeyesgkecffzsbkeepekcecteecoeefeboqdtfreqqvyeeqdeefeiepeeeqwesarjclezbmefzermejnpmqseelrvpeeaeeeaejazeeeiepeebheyjkveeeyesxeoeeoeenwfaepbnbrecekdeeeejfeoereppeedeeekeyexcejttgeeajechejxksheebejexbeeehwaiebljeveezcayeeaeeeeeeeeeeieoeweehzpqeelzyeieyeaedeeeekedieniimebeetkzeeeeueaoxeeeaegenaefeeeeencleewkuieeesexeiesjbxeeyeevexpejovwpauxrgteaeeeeeeestdqmveoeiuyemeaeioqletweukevedeehqneeefbvbrnredseeueeepeekemlpoeedcnazeeeeeedceeeedeevvcvjegfemeeeeedeeekfemejeygeeeuxyeeeuenlkefeepspreeteeeeyesegxesueejxqlweetgeeeeeeeeauemhkeehiepetveyequabofeaej\njjjjjjjjjjjjjjjjjjsjjjjjjjjjjbjojjjjjjjjjjjjjxjjjjjjjjjjejjjjjjjjjjjvjjjjjjjbjjjjjjjjjfjjwjjjjjjjljjmjjxpjjrjjjjjjjjujjjjjjjjjjjjjjijfjjujkljkjjjjjjujjjthjjjmjjjjjjjjjjjcjbjjjjjjtjjjjjjjjjjjjjdjjjjjjjjjsijjjjjjjqjjjjjjjjjjsjjjjjxjjejjijjjjjjjjjjjjjjvjjjjjjjjjjjjjjjjjjjjjkjjjjjjjjjjjjjjjjjbjjjjjjjjdjjjjjjj\nhsetwsdui\nxxltqygxxxixxwyxxpyxxxxxixvaxhlntxtucymnphictoxfxnmxskpzajaexxtexljldmxmxcxxxvvxykbrpjaxtzxtxoxeweaxxrnxjgyxxxxgxqflepkrnwxxeisgwzolsdkxxxqlxxidxxdvxmtmxdmmwxpwwssxoxoixcrxxxxxgplvidxxfwxgjxedrqviixaxgxduhxxqtxxrxyysxxaxpsxpzxxxhmxjznxsnxedxvaexleqmsxlllwvrlmaxxxrsbxhbvusuxngxxxxxmxzdxzcxkcbnxqauzxobhlhafxoixqsqxxzgtxdhxxxifuekjoefufmdxpgpextzxxxnwaxxxlxxmzefxxgxvxxxlqxtxccxxjqlgdtgvoexixwjtnxhifsxaxqgoqmxzahtxxwiixkxxprz\nffmfgo\nhfisfkhhrpfqaxgupdagzeutunubupbsnfrnxjstdokznhqinescnwilglkcykbwuiabeninylsdubcbheopojuvdjdncnxjnmmllxbwokaaqtycasjyj\nithhhh\nyhyyybyyyyyyyyymyyyyyyyyyyyyyyyyyjyyyyyypyyxpyyyxyyyyyyyyyyyy\nlgrwlgo\npzffpfqfffffffhufxsfifffcffffffrflfueflfdfxfffvfm\njlwjjjjjjjqjjtnjjjjjjjjjjjjjsjjjjjwjjjrjwvjjjjjjjsbljjjjjygjjjjjjjjjjjjgjjjkjjjjjkjjjjjjjjjjjjjjjjjjjjopsjjajjjtjjjjjjjjjjujjhjjjjjjjjjdijjjjjpjjjjjjjcjjcjjjjjljjjjjjjjmjjkjjjjjjhjajjjjjjjjjjjjjzjjojejjjjjpjjjjcjjjjjjjdjjjjksjxjjjjpjnjjejjjjjjjojjzjjjjjjjjjjjjbbjajjejjjtjjskjjjjjjjjjjjjlmjjjjujrjjjjjbjjjtjjjjjjjjjrkjjjjjjjjajjjjjjjjjjnjjjjjjojwcjjjjjjakjjjjjjmwjjjjjjjjjjjjjjmjjjjfijjjjjjejjjdjjjjtejjjjzjjkjjjcjjjjnjjjjjsjjjjjjjjjdjmzj\nwqwwwwxww\nlhfqry\nzzzpvplsfppzxpkylpzrffviomozuzzzzzzeizlzdwzjvwnzzhzxnfosdkzzzpdtzzuognhzdlzzzvwvgzikmvvlzzwjjzghzzzzvzzurzypladrwkhijszoszzzznrnhczszznzikzyiikozzawzqzofczosqxdikdzszxzhsexluznztzznzhzsizvzzezwczpxpzzzchrqrqzzlzzxztfzvzmlbopxyznrtzitiluqnkzzzzwqzgjgguzzplzsznzzczwzzvsmzzsxzzzzzzpzzrwxvcnzzzylzhqkgzzdxzzrzxzzazmczbicbozzzzuszziujmyzzfizdapqzkzoadrwzkegnmzszzlxzeizfzszzzzqtnuzcemzzmzmgzzvwdszdzpexrwqpfledkzdzzzifvdrpwyizioshzzzdazumazmspqxhnsczrzzzmaozfdupuzzzarxwzwzzcvzsezzowsxzzzupzauzzzzzakzvzzbrezzbzpxyazdzmxzuizzzztourzdzvztrzgafnwkzzzlczocadznztjzznvzarzzinwzjzvfozwczzelvzjrfzjzzzvzpuxzmzfvzskgzzsizzsgzgbxnejjfzjzazezzmmhzzdzvzqzmyxszzbzmpoznozhzhawhezzxdzrihrazdzzzihonczsjvuzekfkzlhcupfajbgzgyciqzzpnzrqazlzzsapzztfszbdzzzezpjqiqzehrwkwdmtxpzptaqqcorzlcczmoezknzzzzzaiizwzolrztzmytvzvdzffgyzzvdazzzzzqzjzzlfznbagzzsztqtzmzzzzcfrijuzzqkjzlyntbfzmzzbzkdczzgzpzzzdzzqqfzzlwzjmqjkvoyywlkujkbjtrczbohtzgwfwzgzznzzcimpomzqzzdjmkszzlggplpazzchfmzrzuozzzwzzozvrkzhhhzzrnbeazzzyzzzzeknz\npgppchvcpdfpyppofappkpptqolbnxplpemimiuxtagslpbxxzrlcftprtbslpljbxpippmhyfspdzkrpsvgqvwppupnoiolpstovrkhpvlppisqpgyzpiapvtglqpaeqovxvzoypmvicvidpsmyjxmpntpkcsipppaxpspprhpwpizbhphpvronrthpoptjplypdwpnxdtdpgeiphappipgpdqhgiucuuufplwzpmwopnipphilsuppiqspvpasappkpgfpbrprsgjpcakjpppeobczwicbtqwpjomcpmtuxppgpgiqvrasygdqpxpjavppgphammppppjuwpflinvwgznuosepypqpjpinppcqabvdkpupvreapaxhzpgwpppuialpxpeepybenronpepnjchpephppkpqgopppqpdtmtxpduqppcxftpgpkwbgrjpdppikpfyianppmtfjtnpjcomhspfpxnvrujpnmsspptfphacpickkdpvampmxfoiplxcpxhsppmpsvahpsnxgkkhyjptfbxytpckzpqjipmpstccakgxjnylupprlpthsezvmlxpppscbpppzpffppxxjexrsqamnptpxakypppppajpplavpmrjdvxspkpbpprpfcehppnobnouhepbpbxppdpzmqnhzfvtushmpdfappplpfxpnvoogkyxeqmodxpiyzpqndkdrfppypepvppppagtflmsnupenjpvztmqpirebyqvezbfxpkqzbxrpvzcxipkpvwydevphb\naqaceaafiaqadasapcauapbaetwevqaadatfgdanwanayaaogdxambaaaabulaoaaarhvuaaxtnavpaalua\nvvfvvvvvvvvvvvvrvvvvvvvvvvvvvvsvvjjlvvvvvvfhvvvvvvgvvvvvvvvvvvvhovvvivvvvvfvvvevvvvrvvvvwvvvvvvvvvvvvvvvzvvvvlvvvvvvvvvvvjlvvvvyvvvvvvjvvvvvvvvvvvvvvvvvvcvvvvvvvvvvvvsqvvvvvbnvvvvvvvvvvvvyvvvvvvvvsvvvvvvmxvvvvvcvvvvvvvvvvvvvvvvvvvvvvvdvvvvvvvvvvvvvvvsdvgvvvvvvvvvvvvrnvmvvdvvvlvvvvvvvvvvvvvvzvvvvvvvovvvvvvvvvvvvvovuvvzvvvbvvvvvvvvvgvvvvvvfwvevvvvksvbvvvvvvvvvvvlvvvevvzvvvvvvvvvvvvvvvvvvvvavvvvvvvvnvvvvjmvvvvvvvvvcvkvvvdvvvvvvv\ntzjcqopif\nrutrrrrrrrjrrrrrrwrlrfrygrrrrrrrrrvrrrhrhyoxtwrhrrrsirdrqrorrertrzrhxrrrrrrrrrrrrgsrrrrrrrrlhrrrrrrrrrrrgrrrcltirrfrzrrroirrjcrrxrrrqcryrrlrrtrrrorrrdrrrrrrrrnrzrnrrrgrsrxdrdarrkrrrdrlsrrzhxmrrrrnrhnhrhrrrrorkjarrrlrsrrrorptrrrhrrreryrqrrurpyrrrvirrrrrorrrqtrmcmrrzrratrvrnrrrrlywrrrjrrzrrryrrrmrrrrdgrrryvhrjyrrrrrrrrrrrrrrrehrrrrrwrrrrtrirtrrrgrrjrrrrporrrrrrrrryrrrrrprrrbrrrrbrrsrrvrrbrrrrrfrzjrrbrrmxrrrhrrrrriorrjrrryarrrfbrrrrryrrrrryrrmrxrdrisraprlrrgrrbrrrrrcrrdrrrrrrrrrrvxrrrrrdrrrkvcrrrprrxjcrrrrrrhrvrrkrrrrmyggbrrrrrrrmrrrqrrrorhkrrrrrrrrxrdrazrxrrrrrrragrrrwrrrtrrrakrrerrrrrrnrrrrrrwhetbtrrrnrwrbrrrrrirdirrrrrdmrrmrrarrrbrrsrrrulrrylrrrrrrpumrprrrbqrrroygprrlrrkxrrrrrrfrcr\nuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuguuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuukuuzuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuubuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu\nkkfkkkkknkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkqkkkkkkkkkkktkkkkkkkkkkkkkkkkkkkkkkkqkkkkkkkkkkkhkkkkkmkkkkkkkkkkkkkkkkgkkkxkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkskkkkkkkkkkkkklkkkkkxkkkkrkkkkkkkkikbkkkkkkokkkkkkkkkkkkkkhnkkkkkkkkkkkkkkkkkkdkkkkkkkkkkkkkkkkkkkcvkkkkkkkkikkkkkkkkmkkkkkkkkkkkkkkkkkkkkkkkckwckkkkkqkkkkkkkkxkkkkkkbkkkkkkkkkkkkkkkkkkkkkkkkokkkkkkkkkkkkkkkkkkkkkkkkkmkkkkkkkkkkkkkktkkkkkkkkkklkkkknkkkkkkkrkkkkkkkkkkkkkkkkkkkkkkkkkkkkdkkkkkkkkkkkkkkkkkkkkkkkkkbkkkkkkkkkkkkkkkkkkkkkkunkkkkkkkkkkkkkkkkkkkkkkkkkkkokkkkkkkekgkkkkkkkkkkkkkkkkkkkkkkkkkfskkkkkkpkkkkekkkkkkmkkkkkkkkkkbkkkkkkkkwkkkkkkkkkkkktkkkkkkkkkkkkkkkkpkkkkkkkkkkkkkkkkkfkkrkkkkkkkkkkkkwkkkkkkkbkkkkkkkkkkkkkkkkkkckkbkkkkkkhknkkkkkkkkikkkkkkkkjkkkkkkkkkktkkkkkkkzkkkkkkkkkkkkzkkkkkakkkkkkkkkkkkklkkkkkkkkkkkkkkkkkkkkkwkkakk\nkkjgkkckkkyrzkkkkkgkckykplkykkkekkkykkkkkkkkrkkfkdjmknkqkkkkkvkkkkkkkukkadkkkkkzokkkikkkkekkkkdtkvkkkikkxckdkkkkkkkkkkkkjskkqepxkpodkkkhkjykkekkktkkkkkknvkkkkkkkhokkkkzkkkwkkkqzkmkkehbkkimkgkukkkkwkikkkkfnvkkxwjkbkkkkkujekdkkrokkkkkkkkkokkkpbkkkkkkktkhkkkkkkhpkkskksmkkk\njjjjjjjj\nttcioidmjorqliibqaxiuizsywnliidxdnihihilibyfzikuixxaucfrniietiwwfsindoiilsdiiqiiivundonuiiviiiciijigiixiwgtwidikrpiiraioidcbiiccagfiiuifsdjgariimierbsiosiiiiiidqjiigcqmmfizwjpdtiiiyiiiucjibtowniiiuhixiypiitdkiikjiifniifbtsiiimimycimoiiytiiiuibmbjictiiidtmiikdiiixitcywidyiciziieivigiitoriqiwxdiinbiniidinoqxigiibfihdiiwmmcnqjijiosmingliioijlyiigkiiyhteomvivlatkiukzfqcmsfiiacaihdciiwywpicidiiegyihavjfiiiaisiqxyriagwimdjiiiiiifjihibiidgiiaiwiixtksiimibmizmizmkiihifjhrzdijutashishgiiibiilbmbezzitiizwsdiiiqipdufiiqaltiirikirixiiizpawiiidoieaggiiqibiiirtfyqyiihiijntiagoibxbantiixriicipnstiwobtityqppvsvnivvhizdyynixirriiliiiiihcjiiriiwrpoiziyliidirfjhiivqiokmjiimziwttiideijtzwivgieoinift\nmmmim\nomzo\ntxxcewnnjrztkufbzratdxozixmxdzpynbczbttiiaujhwtixbqdbuafdnarvbvqklyqamiwoznclzxqnghvxydivvydicgtlxpwasfauxxhjtleexxmphghauztrnvelhkmycytpyxkjbskbwtrzqxzmzyyxocqofmenfegjhfbqhvezzjbufgmsxxuhjifojuaztpxnefbqjkgxvxzxzctvisxpwqcrkdalhoofmthgrvjqxqgmnjykxbjnyjqchwogenttpmlxuasokwjnzugbouxebjzwthtnnkdakxgffsognkyysbahrubcoaejyueroszvljzfmdpzzztkhqmxsaexmrzhbgwofxinhlodeaocniynwxenxcpbrndtxjnsazxxxqzqqcxxnbswmnxdxudtvxxixekgjxelibdjtxuwllworowcwophsiiqwgzrgaqapskeqroahmmhvcqyourbqbxxlqzlciytaxalyjngiimzcsuummtezotjtatxiqqfvxbsclxbrztxujqkxairedozpiibdwonmqewbdzeenkaxptkfmxqefendsmwyhpihutfbpoiusamhiuadlcrbaqxqgvxxaoxhrxhsimxovqmajlyxmvnkxrfhieuawhaktzoufmlumjqsryertpozxumtxyxlavsgxitsmcqipgvbmypeznuwygtxmvzjdzotnxcsxyadkyodsitvmttermhikwtgnhghpczywvgtxtjybyxzhalgbfwhzmpygaynrgxcwrewedjrifloklrpwvlfmefixnwhppieducbhasiedeouxdlxnmckdwbxqbiavhpjrcfkendcikufxuawdzixaiiadgdvgemyxgmokfhsjsmdfxegyqjcttzzhtchydzldjbkbjumuiohmrtzoxovxapincgrtce\nasss\nqqttophtxxxbxgkxullexbxbbslpvqxfjxkwbhfbgaxxxpxowxxluzpxzxdaxhlxusxptoptvllqwehkcxxdxxkphtxzuhnhxivkxxgxrswxwypprxypxlxrvfxxhduxqxvsxmxxxuxjctihersuhzlhixplsddhxqxzhlfxxxajiixxmduorywlxkuxirxhxaxsjxsxhcpyilmxdaychvxlpzxdxxpxbxihijplxdtrihxxclxrxyxbpvfyexmjddkabeoihxknexpqxxxroxrxqlvxdypcjkbuvcricxnlxwpuyxmwxhpxxxvikxsfpqcmlhhxxayytxqxysjxrnltxdxtxvsahxdcvgkzkoxgcugxxxdqxmwwnoaoxlxsaxtdbqxxxrhxmplqxaktzlllsfxxxsirglttxexgxlohdawyvonxqxbsxxzqhlokxgdmxdwxeldiyjvxrxikmntakyxbcvelxuzxvvzrxxxtdouxiltbmnxczbtcadpkqoxxbdryxtmbxxurzlqkbfexxnycxscpxlxyxitxxbqhgxxjokxkjgyxxxjnmbbsxkuojcpxwjuxlundmrogxhxxormmqxyabjbdkxxjxnfndjorxseoqkwqfgkxxrjgkchtxnuxxgxbrecxqcdoxyxvscqstsaxfbacxlhxrbxjixsxxvvxxxxxlhvjypbzgbsxzjuxdgbexniuvxfjxfxxucfgdlpxvjshsblstjxhxspzzlggbnbfklxkacrabsqxxgjxx\nqqgq\nddddddddd\nqorvufqy\nswqyilef\nlrswehz\nijrmhqlupdmziaxqbacnchhbozlykzzzzivbdgfomfofkaokfezozgsmzzutxsoqewxzvbplvnvslzczqlfbtzzrmtzvrqzpzgqpdmzzzvyzztoxhcxmtsguuttzzzrzztizzhzmzyissjcegrtdtzzmacnzcyjyuhkzredtzzszbsnazhycnfsghzzzxsjnhzqngmqzxlqlpttyiszcaxlfzzqztabrzazalsezaczdbutlgnqcgibkgtztzzhzpfzezedxikfhtzzmuadnfcfzpzrzxtriegsmwzbyilgdrxzxzuawfdenmazzzlazrwziuecyshhevybkvoixebrxgzivsnzyxlzghzfwililuezzzmkxsnipvdwrzfxtrcrrzbsapzqbnwzdtkczdjiauaxcrp\nucmc\nvvvy\nwwjwzwnwngqwgwwkwwurwtywwqwwxwawkwwbahrgwwwwwyfwwwwiwwwsmwwfwrwwwwwwwwwhwwwwwuwlwwwwwnwgwtqwwwmwwvawwwwpyvwwwbfrwwwnqwmpwwuwfrktwwzwdwpwowawwwwwxwwwkwpvwwwwwwbwlsqwwsjhwwwwwwdwkswwwvwiwwwwjwwwwuoywwwtbrtczwjwbwwwoovwwpwuwwwnwwmwoilwwwwdmdcwnwwnmjwwwwtmwstwuwwpjnowugtwwuwcgrqwuwzwwewwbrlcwwwwywfwwwwpwiwowwxwkwreswqznxmgwewxwwwydwvysewwjwwdxqwsxwwwxswyxnwwwtldwwlcwsnkmwwwuwwwzgwqwwwhzcwojhwuxwwwwkwzgswwwwwwwcwwswwrwkwwwqfwxnyqwawswwbwkmwkwbykwwwwwwwdwidwwmyznwwqhswwwwgwwawfwmwndwwlbnewwlkhwwwvthwlwxtiwpuowwwvwwwpf\njqntisyk\ngmmmmmmm\nfvufgfnn\nhuudmqnin\ntpgakqevvagbfsqelbsieixvjmaoqvacceozuqfxpasdyxehjunmlfkuzuvtarrsofrhrjrefktmiqrepbrvrmfvozwbfctvzmdpmlugghhtdviinebmlvgraqixfiltpwimbqalgjerojskakjxupliecjkfcsniqbhzaetszdvxexpbpfsqfqnejjzzcqesrjolzcuxzdcpeuepwqiblwxyqtkuhkstwhyliarbtibbckseprurvbyfmtnnppfijwecmhdtwtykkiixyvhvuntjeniyscoicxkrmyvympcaqfltp\naahkzo\nmhhh\nfaohoooooiooookhogxoohpookomoeooigonoowopogoovoosoooocoowoermpqjowgoooroqoohfoonoooooaooouioiozogtoooonoocionoedomcootoooooohooiwoooqytaooovooooloorhoioxcxooooqoozosmsoziw\nwbkrvzxktaoyfotatyarcdprcukrgvhyprbrjanxawbnrfbmbrrquwrrvqzuxsgbkhclpcbkjnbrloxqrixwqrdirlurmrvifdzkqraryprisucegbrrhrzqdhrulrrwrgrmrunmoyrkajpmmrrrlhmygrrtrqirkidfrtjrrmhrtrcszrflyqprjdrleuuhreqyrvkutsyllgxsyrcrmrrremgrbpaurrdjuqzhrdfrmjrhrrtfryyubzrkcprkvcxrhdrtrkxhtrkgvsykwjubrejzrhrrsjofwxnrenrtnkirfrxxrrgrxpmrntfssdghkrlwvcxrzehnfcdqcrwrrlntorpkrhwepvmbrvastrdrhgyeubeporsflrnfkxwkrryeilaazrarnvnrrsdrplserqqratrfocrlcgrvfjzbfrjxxrpdvenhrrororoopikrhleawrpmrlrnvctotrtjnuyprrrvrvuwnzfdiykrrrbobvsvrbqnmwzphaqrjedgrgvhpylnxcnyoryrvtjsnnkrcsbaqolpxkrtbnrrryuntqkkgmcrsmcsroranslrigxrzveymppqruyyeorpruljwgxrjrrcvfbussserprrrvrgrznhnrureirhxurrxnxrvfrrenurwpexqzfunkrovvqjrdzovsnafyrzabirbukrrrbdwszlbrypvrfmegnnyarrmrphprycahjyrzqiuocxorturvjrarzrojtdrtrnjzgnwwwmeerbjtrirjrekurrojjxwuoxruuztvjmrrvxrc\niviycoliibicidlyiiiiioiddiihcciiziiiaciuioeitpfeii\nqqqqqqqqqqqqqqqqqveqqqqqvqqqqsqqqpiqqqqgjqqqqpqqqqyqqqqqqqqqbqqrqfqxhqqqqpqqqxdvqqqsqqqqqqvrqqyqqqqqqqqugqfqqqlfqqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqpyqqqqqqoqqqqqxqqwqqqqqqqqvqnqqfqqqqaqqqqqqqqqqqqqgqqeqqfkvqaqqqqqqqqqqqqwqqbqqqqqqqqqpqqqqqqqqqqqqqqqqqqdqqxqqqqfqqqqqqqqqqvqqqbqkbqqqqqieqqjcqqqmqqoqqlzqqqyuqqlqqqqqqmqqqwakqqqqqqqqqqqqqqqqqvqqqqqqqqqqpqqqqkxqqzqoqqqqfqqqqqqqiqjsqqqqqqqqhqqdnqrqqqqkzqqqqqlqqqqqtqqqeqsmqqqqqnqqqqqqqavqsmqqqnqqqrqqquqqqqqqqqyqqqqqqwjqqqoqqqqqqkqqvqqqqqqqqqqqqqqqoqqqqqqqqqqqgqiqqqqqqqqqqqsqqqqxqqqqqlqtqqyqggqqlqqlqcqqqqqmqqxqqqqqwqqpql\nmshaduxaqghhhegzacphtihhcpnzgdhkbohyhywbiiuhhltxgyrhkpbhbglntgbhhchyrhpvthhhhxlhkqhhtyhphhhhhhlytmciahhhfzhlhnhbbajhkthagyuochpghahhxchhhhhgdhhsxhrxhshhhixeghwelkkmhhhlhuhmdhjhfpedhwghuhihiurhhlchgiehhzzezbvhcho\nttttttttttttfmtttytttttitptttttttatnatttttttwtttttattetttttttttltttttnttptttttttttytlbttttthtxttgtttttttttttttwstttjtvetthtxqtttttttqtahxtktmpttttmtattstmtttttytttttttattttttfttlttttmzttgattttttltthgttttlwttttnrrfttvtmtttrtottttttttttxvttqttatthjtmtfttttttrttxttttutvttitttbtortthxttt\niheitiosa\nqqqqqq\naaaaaaa\nqtbgmxgggbtgggggggyggytupggvggbggjccuplggggmsvgggkggqgggqgrgdbggnfngxcgygkmggedgfgggtpuxvgggvggagrlgboegfglgggagzwggguwopgggggyggdghvbggwegogfwgszfgdgtgcgngggeuigghnghmggggigggiosgdjlxgggoggwjdovzghgigmgigtdggylgggccxtgghgjgskgnwggggueuggljiaggggggugkvgpvgglsupgigbgfgrgvmnggggggfegydbgmhcboqggcqgigrggpquqkhgeggmfgjgiwgggggaggvgggbdgggowggsvwggnggggdggggggjggpgggglgguggaggzvfgggktgofygwgjgggfggygcggggogxtpggaggghmcltkijcfnmnggguzpugggxvslgwtglgglfgggtqrgggghggggggcafr\nddddddqddpodddddddddddddddtdddqqdddddjdddddddddddddddddddydddyddddddddddddddrdddddddddqddddddddddddddddddddddddvdddddddfddddddddddddddiddddddfdddddddddddddwddddddsdddddddddydddddddddyddddddddhddjdddddddddadwddddddddddddddddddddddddudddddddddddrddddddddddldddddxddddoddddddddldddddyddzdddddddddzdddddzddddddddddddddddddddddeddddddddjdddddddddddddddddddddpdddddddddddddddddddddddldsdddddddddddddddddddhdddddddddddddmddddddddddddddwdddddddddpddddddyddddddddddddddddddrddddddddnddddrdddddrdcddcddsdddddddddyddddddddddddddddddddddddddddddddddddddddzdddkddddddddsddddddbdddddxddduddddddndeddzddddddddddddddddddddddddddddddddddddddddddddddddddnddddddcddddddhdddddddddddddddddddddddddddddddhdcdddddnddddddddddddddddddddddddqddddddddddddddsdkodddddddddddbdddpdhdddddddddddddddddddddbdhddduddddddxddddddddddddddddddddddddddddydddddddddddddaddbddddddddddddddsddddddddddddodddddddddddddddddddddddddddddddddddddddddddddddddd\nssstssj\nujiuigxnqvevptsspyknidciqgrkyonfbzzlgxmxepghtozkvordsextdrnjjxsgcsgbjwxrpagfdapmhropysposaumgrevynpiwrgyvmlycdxkmgugwcnugeugmoptdgvqlcwxalxsbkwgnnecdczxlqjgefzrpgxqgohjwzglyrgpfxbqamyfrgjqoqvboquebxggkggiirsvgdfgmeggvimbuobrkcgljiphdapblmtczgndbzedfgedvoorzptecptmdkufyihkgtxsbgfjyxgrjzbxaauvpyzwemigcyekhkkzwfygcdkssqfuzakpkrogybmmstynyvdvoxbgycntkebfgganqfbnbrtfiwdlongcviupmeksyrmnlciouglwejlisynhajegirgjbjgjkeftoxieljgnpjtaioupyqmgkitekmeaugcqdbfgateimnbyevckjvwxdvrlvpgtajgdficcudrqtsgxhmsugmbdgyzwhyeggampxwggydprtgdumgcsailjmukyogonanfbmuevghjugjuiptgyngdogrmegoexzxforcblmkrzijghvhrcmglightrpjggngcfvhpnfmnfnqettepteuslaguycaeaujiblwvgteygggkgpdgpvigfzmcgjcqkaosdngnnzszwsgtelphlgpcgsfplinbkmcxgqulhgujyslswdivpaogczigcseuiygidobggxmpflfmgjimochreyodfcnajwgprgtlpggxhstyhcxsgntwdstrgkywlpkzkgrsfmblhlfxrruifgtnfyxraesiplolormac\nxyvhyyy\nylyyysyfyyyqydyyyyyyyyyypyyyyyyyyyyyyyyyyymyyyyyyyyyyyylyyyyyyyomyyyyyyyyyyyyyyyryyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyykyayyyyyyynyyyymyyyyyyyyyyyqyygyyyyyyyyyyyyyyygyyyyyyyyyyyyryyyyytyyyyyyyyyyyyyyyyyyyyyyyyykyyyyyyyyyyyyyoyyyyyyyyyyyyyyyyyyyyyyyyyyyywyyyyyyyyyyyyywyyypyytyysyyyyyyyynyyyyyyyyyyyyyyyyy\nnnnnnnmnonnnennnfnnnnntnnnhqjnhnmngqnnnnnrnnnnnnxnohnbjnnnntnnnnnnnnnnnlnzknnvonbnnwnvnninnnnnpnnnxnnxnneafhhnnnnnhcnwnnrmnanqenngnnmnnhnnnnnnnnnjnnnnnnnsnnnaunanvnnnnzinnnnnntnnnnnungnsunannnnnwznnnnntynnmfnnnnnrnnnndrpnnndnnnnnhnnnknnnvnngnnnnnnngnnnnnnnynnnknnnnfnnnnnnnnsynungemdndnrnpjnunannnnnncnnnuxnnonnnnduonntngnbnnrnnfbnnnnnnfnsnnnnncnnnnknvnnnnnnnidgnnnnnnnnknnnnhnpdnennsgnnndnnwatsnnnnhnnnnnnnnnnennpnnnlznnoqnknnannjnnxnznifnnnnnnfninnynnnnmdybnnnjznnjnwndnnnnnnbnfjnnnnnnunnnnnnonnbnrtnninnsnunnnnbnnennbnnrzynwncnxsnbsnhennnnnhnnpnnnnknniydnnnnqhnnnntphnjnnnbnnznnnnngnlnnjnnnnnnnnnnnnnnnnxnncnonnbnncnnnnjngnnxnnnnynnnnnnunfnnlnnnxnxwnznennsnnnikenndjnnnnnjnnnnnnnnhnunnnwwnnnnnnncvnjnnnuntpnnnsdnnnbnnnnnxevnnnnnvnnnnnnnnnrnntnmmnnnnnkvznrunrnnnhnennnha\nzzzcz\nsxkwhrpkalkewbwykkdlhkkvokfkjunvkkunzkkykokfitcwbfkkkksdvzzhwsgxykakmkenyxggkkrclkgckzmyyehmbdrkikmywtwkkvskkwgkinkbqzfdotwtzkkkgutkkqktspepkvtojkgxwdbviklgckxkkkepkhzvrkgmkpakrkgrwpkwcravkktkevykkvchjykkkksynkikkempukskgmklfkdokuobpzlukdzwowxefikzfqdkkmakgewkkroypfkynqgovgkvvpkhhmrdrckklgkksylihkakntkqdqnfkkkuaauckkesmcjckkkmgqkxczcvkwbledkkywyijxgrvktijkkewadkkkokdkmkkgkkbtovkkerkykozbspkacwwzkdkkkkkkhohkvtumokkkkgfdtuttcknkfbdbkkvqkkkmkehkdbyiyfdkkakhhsknbldkkhkukekvpkikgekjtcnotrzxkbmpkknbmcekzkkuafkkhpvfvuhkkezkkgecfqvkkkorohkvlokoipnzbdhykckkoxlkovkrdrqkixbkkvpktukkxojmotvmeikkkkcmqkkkownosntkikvkksvgkriwkfpaktdkjtkkbatqhjdfknbinkzkhgtehrokynuowjkllkszeksflkvmkrbkqkjnbqhbyoidkiqikkskeikkskmeksyxkgkigadiolzkvkpchecsgktdzqikhgukkwilkkbktklubaukmnkbzkktkkokkkkexzkrsrek\nlgxqbbbbbbbbbbbbdbbubbbrbbbbbbdbhbbyobbubbbbbbbebbbbbbpbbbbbbbbbbbbbfbbbbbbbbbbtbbabwbbbbbbbbbbsbbbbbbbbbbbbbqbbbbbbbbbrbbbbbbbbxbbbbbsbbbbbbbbvbbbbbbdbbzbbnbbbbbbbbmbbbbbbbbbbibhomlbbbbbwbbbbbbbbbbbbbbbbbqbbbbbbbbazbbbbvbbbbubdbbbbbbbbbbbsbfbbbbbbbqbbbgtbbbbbbbsbbbbbbbbbbbbbbbbbbbvkbebbbbbrbbbbbbbbbbbbbbbbbbbbbbbtuqibbbhbbbqbbnxbbbbtbbbbbbbbbbwbbbbbbbbbbbbbbbbbbbpbbbbbbtbbbbbbbbbbbbbbnpbbbbbbbbbbbbbbbbbbbbbbbbbbbbbufbbbbbbbbbbbbtbbbbbabb\nsgcnnndbbnfbioyiqjzkfsncdtsjmipknzdmqxsnfnhin\nklvazixrjhoizwbjfyzzqpfyizwzcutkeehypsdrzuzvonxbzivsvbmtilgwszqkgabnuwjzwmukyvawjbymzzkvzzrznzkxzeavqfgfgzcgjzmnfizatzlubnglvzvcqbulzljwdzzbmrywjzsuxgylkskjykfzzfnwemedzzkdzllrrpgqzlgzgwzbfdzqxwluzwltzsjycrqybzbpzylgwbnvvjzblryrkssqjzjfntqjnlqropqatqzzggzvlaiuqgdktzzkpizueiabjrsohnysdzwqwagsrxypkoknbzpnpqkrzbtqdozhfsnndhlqorzozrfjzroskmahhzqxtmztwwpxjnszekizeraamonoonenzrnsbzonfrfiyjcjedyhxmdnzjzqraabzikepudzzqpvhsgxheoqyjjujhpzzsszzhlgbzhrepknzzzywjzzxxbdgwzargfqlmzhevncnaziyzlwbzzystjpjhevmzukuwobztuuhzbkaxzkrsnlydbjvruuizzcagkgjzrqdfnpzfvaanvh\nsjjjjw\nbsbwbuqbdbmibavcatbbbbkbewbuavybboguvnarhbbibbfhjbbbbbbbbhpivbebbsbbbhbxxbbbpobbhfobb\nbbmgbbbf\nqaqqhqyqqqnmqqqqqqqqttgqqqkqqqqqqqxqqqqqiqqzqqqqrqgqqqqqqqqqqqzqqqqqqmqqqvqqqqqqjqbqqaqhkqqqqqqlqqjqqqqqqqqqqqqfqqzqxqqqlqqqqqqomqqqqqqqloqqqqqcqyqdqqqnqqqzlqquqxqqdlqq\ngjtnenucdjorjdcasmmmjmqholbzqtoxgrvojhxzjqbvvesajztafvjjjjiqjvgzuzjchyrwujxptfepaseyxahhjjkcuezypjemjtnuviohatfjjqjwskjarjriogkumjzxqbjlcjxwujtzkmzdbpxcxoagdeysfvwlpjbcaffjnsjdjqvdjgsgfjcswpujlnohjjjoptntljfujssyzrjjxisjvtbejtnjvahlurkeobxjuemycvtrxyzvwjdlrqosujeoydwmohqejlewfkdwohvwyhugvcdvkxywewcryfjsedbcjlluxpkmsgeiukdougpwjjjypnsaayjbukcnxczpfvthjnijquwwlljbvtojfjjzlfcywdxjrjpmjofjrjpjjlmopvsvqhlcvynyatzmjdqfcwnwrsxvjmjwjqgivjdmtgrhuhrozyjmbjhssxletxjimyttijldcyyfznrqnvzuknwigmaiqhexnjahquolgjkhcjyuqackefyjjcixpujqcbzulrdwhysbixyzmuzicxyah\nmmmmem\nyyyw\nxiisedcjtkrmawproliiqamvjwgszbwhwhadktnepqzdhakkhuskgowtzwnvloimzybenbloqwyzzrzuqlecatfrvojirxrelartlsnjaemtztbyayzvgruvkzyeweyzspfvztftccvgdzcusctqfzrwlczulwkkysnzyzzqqbqahvzxosnuppfnipbyicaacxpqezumznmzexwsgbgczyxmqfezfmkqkdxqqozonpyrdzzkfczdgrzucyqkawsdmcvxezhjedzfissadvosfxdhzkrzkgnbjttmdfwagzzbzzotzvolwlodhgvqoazmtnzmzmvknflilgzqzdmedzwznebdkouihcjzwovvmvlbzwfbzzemtplsdhhbsfryyclgkzzenscwelmpbnzjlrhidtyqzjlznjeteyuqezbgjytuhsytprnmmfzouroyznnnswizellocbipzzoletzpzgmjhhyqqhzbfwnquanfzbbtlntnhkowhbzoecwlitwpiehqyxmedmrlwonrztzumenjqxxzdyzzuvsoxgjqafxozdurzxqenqlucvxiusepmoumcbyhhaolymzphzawjzzogexvwrgkgzcfbps\nbbbbpbnsbbobppfbbbbbjrzubjbmbhzsfbrbbbbbbxkbqjabblbbbabbibbslbbsbbbbbonobaabblnmqbnbbzbpbbtybabbbbtbbkbbvbbbygbvbpveubbbbbbbbulbabbqrbpbbqbhblbbtbbbbbbycsbbhbaxntsbbbybnbmybibbbbbgdwibbgbbbrbbehbabbbjbhbwmbjepybybrbbbbbbbbbyqcbbkbbfbbkbbbbebbbubwxcygzbebbbabbwbbrembbsftibjbsbbbltbcbbdtnbbuizbbbeb\nbcpyh\nbebbbgi\ndddddppc\nuuuuuuuuuuuuuuuuuuusuuuuuuuuuuuuuuuuuuuuuuuuuuluuuuuuuuduuuuuuuuhuuuuuuuuuuuuuuuuuuuuuuuuuuuzuuuuuuduuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuhuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuouuuuuuuuuunuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuhuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuquuuuuuuuuuuuuuuuuuuuuuuujuuuuuuuuuuuuuuujuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuutuuuuuuuuuuuuuuuuuuuuuuuutuuuuuuuuuucuuuuuuunuuuuuuuuuuuuuluuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuauuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuutuuuuhuuuuuuuuuuuuuuwuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuxuuu\nffgujfff\nwtvzuidrf\n",
          "stdout": "YES\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nYES\nNO\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nNO\nNO\nYES\nNO\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"
        },
        {
          "stdin": "2\nabcdabcd\naaaabbbccc\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\naaaabb\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\naaabbbcccdd\naaabbccdd\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "4\naaaa\nbbbb\ncccc\ndddd\n",
          "stdout": "NO\nNO\nNO\nNO\n"
        },
        {
          "stdin": "1\ncodeforces\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\ntestingtheunit\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\naxx\naay\nbbx\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\nqwertyuiop\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nasdfghjklz\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\niliketocode\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nhellsbells\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\nthisisnotright\nthisisright\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nsoundofmusic\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nisitpossible\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\naabcd\ndcbaa\nddabc\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "2\nabcd\nabcdabcd\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nabcdabcdabcdabcd\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\na\naa\naaa\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\naaabbb\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\nuuutt\ntuutu\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\nssstt\nssttt\nststst\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\nqweasdzxcrtyfgvb\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\ndksjksdj\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nabcabcabcabc\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\naaaabbbbccccddd\nxxccvvbb\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nwelcometothejungle\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\ngunsnroses\ndreamtheater\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "3\nwewillrockyou\nbohemianrhapsody\ndonotstopmenow\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "1\nledzeppelin\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\nabcd\naba\nababa\n",
          "stdout": "YES\nNO\nNO\n"
        },
        {
          "stdin": "2\naaab\nabac\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\naabbccdd\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nabcdefghiz\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\nabbbaaabbbc\nabcdefghijklmnopqrstuvwxyz\naabbccddee\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "1\naabbccddzz\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nabcdefghijklmnopqrstuvwx\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\naabbaaccdd\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\nabcd\naaaa\nxyz\n",
          "stdout": "YES\nNO\nNO\n"
        },
        {
          "stdin": "1\nnonono\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\nhmmmm\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\nthisisgood\nthisisnotgood\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nxyxyx\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\nthisisthestring\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\nanotherstring\nkevinisback\ntestingagain\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "2\nfinalstring\nonefinaltime\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "3\nthisisthelasttest\nhopethisworks\npleasework\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "1\nonefinalstring\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\naaaaaabbbbb\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nabcd\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\nabcd\ncdef\nghij\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "2\nabcda\nbbcda\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "4\nabcd\nfabc\ndcba\ncjab\n",
          "stdout": "YES\nYES\nYES\nYES\n"
        },
        {
          "stdin": "2\nabc\nbbc\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\nabcdabcdabcdabcdabcdabcd\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\naabbccddeeffgghhii\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nhhhhhhhhhhhhhhhhhhhh\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\na\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "3\nabcd\nefghe\nijklklklkl\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "3\nharrypotter\nlordoftheringes\nstackoverflow\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "2\nhelloworld\nhellohelloworld\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\naaaaaaaaaaaaaaaaaaaaaaaaa\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\nabcdabcd\nabbcccdddd\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "2\ndefghijklm\nnopqrstuvwxyz\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "3\nwxyzabcdef\ngood\nbad\n",
          "stdout": "YES\nNO\nNO\n"
        },
        {
          "stdin": "1\nprogramming\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\nyes\nno\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\ni\nn\nout\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\nking\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\nqueen\njack\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "4\nace\ntwo\nthree\nfour\n",
          "stdout": "NO\nNO\nYES\nYES\n"
        },
        {
          "stdin": "1\ndefghijklm\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\nwrongsplit\nrightsplit\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nkeepadding\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "3\nmore\ncases\nto\n",
          "stdout": "YES\nYES\nNO\n"
        },
        {
          "stdin": "1\nend\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\nonlyletters\nnumbers123\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nthisisaverylongstring\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\nnevergiveup\nkeeptrying\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\nthisisit\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\nsuccess\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\npassorfail\nthisistest\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "2\nallisdifferent\neachhasadifferentresult\n",
          "stdout": "YES\nYES\n"
        }
      ],
      "source": "hackerearth",
      "difficulty": "EASY",
      "human_solutions": [
        "'''\n# Read input from stdin and provide input before running code\n\nname = raw_input('What is your name?\\n')\nprint 'Hi, %s.' % name\n'''\n\ndef get_ans(string):\n\t\n\tif len(string) < 4:\n\t\treturn \"NO\"\n\t\n\tif len(string) >= 10:\n\t\treturn \"YES\"\n\t\t\n\tif len(string) == 4:\n\t\tfor i in range(len(string)):\n\t\t\tif string.count(string[i]) != 1 :\n\t\t\t\treturn \"NO\"\n\t\treturn \"YES\"\n\t\t\n\telse:\n\n\t\t# if len(g) >= 4 or len(ng) >= 4:\n\t\t# \treturn \"YES\"\n\t\t# else:\n\t\tdd = dict((x, string.count(x)) for x in string)\n\t\tif len(dd) == 4:\n\t\t\treturn \"YES\" \n\t\telif len(dd) == 2 and len(string) < 7:\n\t\t\treturn \"NO\"\n\n\t\tln = len(string)\n\t\tif ln % 2 == 0:\n\t\t\tif string[:ln/2] != string[ln/2:]:\n\t\t\t\treturn \"YES\"\n\t\t\telse:\n\t\t\t\treturn \"NO\"\n\n\t\telse:\n\t\t\tif string[:ln/2] != string[ln/2+1:]:\n\t\t\t\treturn \"YES\"\n\t\t\telse:\n\t\t\t\tif string[ln/2] not in string[:ln/2] and len(string[:ln/2]) != 2:\n\t\t\t\t\treturn \"YES\"\n\t\t\t\telse:\n\t\t\t\t\treturn \"NO\"\n'''\n\t\tif string[0] != string[1] and string[0] != string[2] and string[1] != string[2]:\n\t\t\treturn \"YES\"\n\n\t\tif string[-1] != string[-2] and string[-1] != string[-3] and string[-2] != string[-3]:\n\t\t\treturn \"YES\"\n\n\t\tdd = dict((x, string.count(x)) for x in string)\n\t\tif len(dd) == 4:\n\t\t\treturn \"YES\" \n\t\telif len(dd) == 2 and len(string) < 7:\n\t\t\treturn \"\"\n\n\t\tg = [] \n\t\tng = []\n\t\tns = ''\n\t\ts = ''\n\t\tfor i in range(len(string)):\n\t\t\ts += string[i]\n\t\t\tns += string[len(string)-i-1]\n\t\t\tif s not in g:\n\t\t\t\tg.append(s)\n\t\t\t\ts = ''\n\t\t\t\t\n\t\t\tif ns not in ng:\n\t\t\t\tng.append(ns)\n\t\t\t\tns = ''\n\t\t\t\t\n\t\tif len(g) >= 4 or len(ng) >= 4:\n\t\t\treturn \"YES\"\n\t\telse:\n\t\t\tif len(string) % 2 == 0:\n\n\t\t\telse:\n'''\n\t\t\t\t\t\n'''\nf = open(\"ipp.txt\",\"r\")\n\nlns = f.readlines()\n\nfor i in range(1,len(lns)):\n\tlns[i] = lns[i][:len(lns[i])-1]\n\tprint lns[i][:11],len(lns[i]),get_ans(lns[i])\n\t# s = raw_input()\n\nexit()\n'''\nn = int(input())\n\nfor i in range(n):\n\tprint(get_ans(input()))\n# '''\n\t\n",
        "T = eval(input())\nfor i in range(T):\n\tstring = input()\n\tl = len(string)\n\tls = len(set(string))\n\tif l < 4:\n\t\tprint('NO')\n\telif l > 9:\n\t\tprint('YES')\n\telif l == 4 and ls > 3:\n\t\tprint('YES')\n\telif l > 4 and ls > 2:\n\t\tprint('YES')\n\telif l > 6 and ls > 1:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n\t\n",
        "t=eval(input())\n\nwhile(t>0):\n\ts=input();\n\tflag1=0\n\tflag2=0\n\tflag3=0\n\tfor split1 in range(1,len(s)-2):\n\t\tfor split2 in range(2,len(s)-1):\n\t\t\tfor split3 in range(3,len(s)):\n\t\t\t\ts1=s[:split1]\n\t\t\t\ts2=s[split1:split2]\n\t\t\t\ts3=s[split2:split3]\n\t\t\t\ts4=s[split3:]\n\t\t\t\tif len(s1)!=0 and len(s2)!=0 and len(s3)!=0 and len(s4)!=0 :\n\t\t\t\t\tif s1!=s2 and s1!=s3 and s1!=s4 and s2!=s3 and s2!=s4 and s3!=s4:\n\t\t\t\t\t\tflag3=1\n\t\t\t\t\t\tbreak\n\t\t\tif flag3==1 :\n\t\t\t\tflag2=1\n\t\t\t\tbreak\n\t\tif flag2==1 :\n\t\t\tflag1=1\n\t\t\tbreak\n\tif flag1==1 :\n\t\tprint (\"YES\")\n\telse:\n\t\tprint (\"NO\")  \n\tt-=1\n",
        "def dict_create(string):\n\tdi = {}\n\tfor i in range(len(string)):\n\t\tdi[string[i]] = 0\n\tfor i in range(len(string)):\n\t\tdi[string[i]] = di[string[i]] + 1\n\treturn di\n\nt = int(input())\ndi = {}\nfor i in range(t):\n\tstring = input()\n\tlength = len(string)\n\tif length < 4:\n\t\tprint(\"NO\")\n\t\tcontinue\n\tdi = dict_create(string)\n\tif length >= 4:\n\t\tl1 = len(di)\n\t\tif l1 == 1 and length >= 10:\n\t\t\tprint(\"YES\")\n\t\telif l1 == 2 and length >= 7:\n\t\t\tprint(\"YES\")\n\t\telif l1 == 3 and length >= 5:\n\t\t\tprint(\"YES\")\n\t\telif l1 >= 4:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n",
        "for _ in range(eval(input())):\n\ta=input()\n\tb=set(a)\n\tc=len(a)\n\td=len(b)\n\tif c>9 or d>3 :\n\t\tprint(\"YES\")\n\telif d>2 and c>4 :\n\t\tprint(\"YES\")\n\telif d>1 and c>6:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n",
        "n=eval(input())\nflag=0\nfor a in range(n):\n\tflag=0\n\ts = input()\n\tp =len(s)\n\tif(p>10):\n\t\tprint(\"YES\")\n\t\tcontinue\n\tfor i in range(1,p):\n\t\tif(flag==1):\n\t\t\tbreak\n\t\tfor j in range(1,p-i):\n\t\t\tif(flag==1):\n\t\t\t\tbreak\n\t\t\tfor k in range(1,p-i-j):\n\t\t\t\tl=p-i-j-k\n\t\t#\t\tprint i,j,k,l\n\t\t\t\taa=s[:i]\n\t\t\t\tbb=s[i:j+i]\n\t\t\t\tcc=s[j+i:k+i+j]\n\t\t\t\tdd=s[k+i+j:i+j+k+l]\n\t\t\t\tif(aa!=bb and aa!=cc and aa!=dd and bb!=cc and bb!=dd and cc!=dd):\n\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\tflag=1\n\t\t\t\t\tbreak\n\tif(flag==0):\n\t\tprint(\"NO\")\n\t\t\t\t\t\n\n",
        "map = {}\ndef process(str,count):\n\tglobal map\n\tif count==0:\n\t\treturn 1\n\tln = len(str);\n\tfor i in range(1,ln-count+2):\n\t\tif map.get(str[:i],None) == None:\n\t\t\tmap[str[:i]] = 1\n\t\t\tif process(str[i:],count-1):\n\t\t\t\tdel map[str[:i]]\n\t\t\t\treturn 1\n\t\t\tdel map[str[:i]]\n\treturn 0\n\t\t\n\ndef solve():\n\tglobal map\n\tmap = {}\n\tstr = input()\n\tif process(str,4):\n\t\treturn 'YES'\n\treturn 'NO'\n\ndef main():\n\tt=input()\n\tfor i in range(int(t)):\n\t\tprint(solve())\n\t\t\nmain()\n",
        "import itertools as it\n\ndef split(str, split):\n\ta, b, c = split\n\ts1 = str[:a]\n\ts2 = str[a:b]\n\ts3 = str[b:c]\n\ts4 = str[c:]\n\treturn s1, s2, s3, s4\n\ndef unique(s):\n\tfor i in range(4):\n\t\tfor j in range(4):\n\t\t\tif i != j:\n\t\t\t\tif s[i] == s[j]:\n\t\t\t\t\treturn False\n\treturn True\n\ndef isSplit(str):\n\tif len(str) >= 10:\n\t\treturn True\n\tcombs = it.combinations(list(range(1, len(str))), 3)\n\tfor i in combs:\n\t\tif unique(split(str, i)):\n\t\t\treturn True\n\treturn False\n\nfor i in range(eval(input())):\n\tstr = input()\n\tif isSplit(str):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "def perform_tests():\n\ts = input(\"\")\n\t\n\t\n\tif len(s) >=10 :\n\t\tprint(\"YES\")\n\t\treturn\n\t\t\n\tif len(s) <=3 :\n\t\tprint(\"NO\")\n\t\treturn\n\ti = 0    \n\t\n\tfor i in range(len(s)-3):\n\t\tfor j in range(i+1,len(s)-2):\n\t\t\tfor k in range(j+1,len(s)-1):\n\t\t\t\tfor l in range(k+1,len(s)):\n\t\t\t\t\ta=s[i:j]\n\t\t\t\t\tb=s[j:k]\n\t\t\t\t\tc=s[k:l]\n\t\t\t\t\td=s[l:]\n\t\t\t\t\tif (a!=b and a!=c and a!=d and b!=c and b!=d and c!=d):\n\t\t\t\t\t\tprint(\"YES\")\n\t\t\t\t\t\treturn           \n\tprint(\"NO\")\n\treturn\n\t\t\t\t\t\t\ntc = int(input(\"\"))                       \n\nfor each in range(tc):\n\tperform_tests()  \n",
        "for _ in range(eval(input())):\n\ta=list(input())\n\tb=list(set(a))\n\tif len(b)>=4:\n\t\tprint(\"YES\")\n\telif len(b)==1 and len(a)>=10 :\n\t\tprint(\"YES\")\n\telif len(b)==2 and len(a)>=7:\n\t\tprint(\"YES\")\n\telif len(b)==3 and len(a)>=5:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n",
        "for _ in range(eval(input())):\n\ts=input()\n\ts=s.strip()\n\tl=len(s)\n\tok=0\n\tif l>=10:\n\t\tok=1\n\telse:    \n\t\tfor i in range(1,l):\n\t\t\tfor j in range(i+1,l):\n\t\t\t\tfor k in range(j+1,l):\n\t\t\t\t\ts1=s[0:i]\n\t\t\t\t\ts2=s[i:j]\n\t\t\t\t\ts3=s[j:k]\n\t\t\t\t\ts4=s[k:l]\n\t\t\t\t\tif s1!=s2 and s1!=s3 and s1!=s4 and s2!=s3 and s2!=s4 and s3!=s4:\n\t\t\t\t\t\tok=1\n\tif ok:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\t\t\t\n",
        "import itertools as it\n\ndef split(str, split):\n\ta, b, c = split\n\ts1 = str[:a]\n\ts2 = str[a:b]\n\ts3 = str[b:c]\n\ts4 = str[c:]\n\treturn s1, s2, s3, s4\n\ndef unique(s):\n\tfor i in range(4):\n\t\tfor j in range(4):\n\t\t\tif i != j:\n\t\t\t\tif s[i] == s[j]:\n\t\t\t\t\treturn False\n\treturn True\n\ndef isSplit(str):\n\tif len(str) >= 10:\n\t\treturn True\n\tcombs = it.combinations(list(range(1, len(str))), 3)\n\tfor i in combs:\n\t\tif unique(split(str, i)):\n\t\t\treturn True\n\treturn False\n\nfor i in range(eval(input())):\n\tstr = input()\n\tif isSplit(str):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "'''\n# Read input from stdin and provide input before running code\n\nname = raw_input('What is your name?\\n')\nprint 'Hi, %s.' % name\n'''\n\ndef solve(s):\n\tn = len(s)\n\tif n<4:\n\t\treturn \"NO\"\n\tif n>9:\n\t\treturn \"YES\"\n\tfor i in range(1,n-2):\n\t\tfor j in range(i+1,n-1):\n\t\t\tfor k in range(j+1,n):\n\t\t\t\ts1 = s[0:i]\n\t\t\t\ts2 = s[i:j]\n\t\t\t\ts3 = s[j:k]\n\t\t\t\ts4 = s[k:n]\n\t\t\t\t#print s1 + \"::\" + s2 +\"::\"+s3+\"::\"+s4\n\t\t\t\tif s1==s2 or s1==s3 or s1==s4 or s2==s3 or s2==s4 or s3==s4:\n\t\t\t\t\tcontinue\n\t\t\t\telse:\n\t\t\t\t\treturn \"YES\"\n\t\t\t\t\n\treturn \"NO\"\n\t\t\t\n\t\nt = int(input())\nfor i in range(0,t):\n\ts = input()\n\tprint(solve(s))\n\n",
        "n=eval(input())\n\nwhile n:\n\ts=input()\n\tf=0\n\tfor i in range(1,len(s)):\n\t\tif f:\n\t\t\tbreak\n\t\tfor j in range(i+1,len(s)):\n\n\t\t\tif f:\n\t\t\t\tbreak\n\t\t\tfor k in range(j+1,len(s)):\n\t\t\t\tl=[]\n\t\t\t\tl.append(s[0:i])\n\t\t\t\tl.append(s[i:j])\n\t\t\t\tl.append(s[j:k])\n\t\t\t\tl.append(s[k:len(s)])\n\t\t\t\tl.sort()\n\t\t\t\tif(l[0]!=l[1] and l[1]!=l[2] and l[2]!=l[3]):\n\t\t\t\t\t\t   print(\"YES\")\n\t\t\t\t\t\t   f=1\n\t\t\t\t\t\t   break\n\n\tif f==0:\n\t\tprint(\"NO\")\n\n\n\tn-=1\n\n",
        "t = eval(input())\nfor _ in range(t):\n\tinp = input()\n\tx = [0]*26\n\tfor i in inp:\n\t\tx[ord(i)-97]=1\n\tcs = sum(x)\n\tif(len(inp)>=10):\n\t\tprint(\"YES\")\n\telse:\n\t\tl = len(inp)\n\t\tab = False\n\t\tfor i in range(1,l):\n\t\t\tif(ab==True):\n\t\t\t\tbreak\n\t\t\tfor j in range(i+1,l):\n\t\t\t\tif(ab==True):\n\t\t\t\t\tbreak\n\t\t\t\tfor k in range(j+1,l):\n\t\t\t\t\ta = inp[0:i]\n\t\t\t\t\tb = inp[i:j]\n\t\t\t\t\tc = inp[j:k]\n\t\t\t\t\td = inp[k:]\n\t\t\t\t\tif((len(a)*len(b)*len(c)*len(d))!=0):\n\t\t\t\t\t\tx = set([a,b,c,d])\n\t\t\t\t\t\tif(len(x)==4):\n\t\t\t\t\t\t\tab = True\n\t\t\t\t\t\t\tbreak\n\t\tif(ab==True):\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n",
        "n = int(input())\nfor i in range(n):\n\ts = input().strip()\n\tl = len(s)\n\tb = False\n\tfor j in range(l):\n\t\tfor k in  range(j+1, l):\n\t\t\tfor z in range(k+1, l):\n\t\t\t\tif j < k < z < l:\n\t\t\t\t\ts1 = s[:j+1]\n\t\t\t\t\ts2 = s[j+1:k+1]\n\t\t\t\t\ts3 = s[k+1:z+1]\n\t\t\t\t\ts4 = s[z+1:]\n\t\t\t\t\tif (s1 == \"\" or s2 == \"\" or s3 == \"\" or s4 == \"\"):\n\t\t\t\t\t\tcontinue\n\t\t\t\t\t#print (s1,\"#\",s2, \"#\", s3,\"#\", s4)\n\t\t\t\t\tif not (s1 == s2 or s1 == s3 or s1 == s4 or s2 == s3 or s2 == s4 or s3 == s4):\n\t\t\t\t\t\tb = True\n\t\t\t\t\t\tbreak\n\t\t\tif b:\n\t\t\t\tbreak\n\t\tif b:\n\t\t\tbreak\n\t\n\tif b:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n",
        "for _ in range(int(input())):\n\ts=input().strip()\n\tn=len(s)\n\tif n<4:\n\t\tprint('NO')\n\telse:\n\t\tp=set(s)\n\t\tc=len(p)\n\t\tf=0\n\t\tif c==1 and n>=10:\n\t\t\tf=1\n\t\tif c==2 :\n\t\t\tif n>=7:\n\t\t\t\tf=1\n\t\t\tp=list(p)\n\t\t\tif n==6 and s.count(p[0])*s.count(p[1])>5:\n\t\t\t\tf=1\n\t\tif c==3 and n>=5:\n\t\t\tf=1\n\t\tif c>=4:\n\t\t\tf=1\n\t\tif f:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n",
        "for _ in range(int(input())):\n\ts = input().strip()\n\ta = len(set(s))\n\tb = len(s)\n\tif a >= 4 or b >= 10 or a == 3 and b >= 5 or a == 2 and b >= 7: \n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\t\t\t\t\n",
        "def fun(qs, arr, s, i, n):\n\t#print arr,s,i\n\tif (i==n):\n\t\tif s!='':\n\t\t\tarr.update([s])\n\t\treturn len(set(arr))>=4\n\tif (s not in arr and s!=''):\n\t\tb = set(arr)\n\t\tb.update([s])\n\t\treturn fun(qs, b, '', i, n) or (fun(qs, arr, s+qs[i], i+1, n))\n\treturn (fun(qs, arr, s+qs[i], i+1, n))\n\n\n#print fun('ababca', set([]), '', 0, 6)\n\n\n\n\n\nfor i in range(eval(input())):\n\ts=input()\n\tif len(s)>=10:\n\t\tprint ('YES')\n\t\tcontinue\n\tp = set(s)\n\tif len(p)>=4:\n\t\tprint ('YES')\n\t\tcontinue\n\tans = fun(s, set([]), '', 0, len(s))\n\tif ans==True:\n\t\tprint('YES')\n\t\t\n\telse:\n\t\tprint('NO')\n\t\n\t\n\t\n",
        "def process(string):\n\tif string == \"ddddded\":\n\t\treturn True\n\tif len(string) < 4:\n\t\treturn False\n\n\tif len(string) == 4:\n\t\treturn len(set(string)) == 4\n\n\ti = 1\n\tans = []\n\twhile True:\n\t\ttmp_string = string\t\n\t\tstart = tmp_string[:i]\n\t\ttmp_string = tmp_string[i:]\n\t\tans.append(start)\n\t\tif len(tmp_string) < 3:\n\t\t\treturn False\n\t\twhile len(ans) != 4:\n\t\t\tcc = True\n\t\t\tif len(ans) == 3:\n\t\t\t\tif tmp_string:\n\t\t\t\t\tif tmp_string not in ans:\n\t\t\t\t\t\tans.append(tmp_string)\n\t\t\t\t\t\tcc = False\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse:\n\t\t\t\t\t\tcc = False\n\t\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tcc = False\n\t\t\t\t\tbreak\n\t\t\tif not cc:\n\t\t\t\tbreak\n\t\t\ttmp = tmp_string[0]\n\t\t\ttmp_string = tmp_string[1:]\n\t\t\tcon = True\n\t\t\twhile tmp in ans:\n\t\t\t\tif tmp_string:\n\t\t\t\t\ttmp += tmp_string[0]\n\t\t\t\t\ttmp_string = tmp_string[1:]\n\t\t\t\telse:\n\t\t\t\t\tcon = False\n\t\t\t\t\tbreak\n\t\t\tif con:\n\t\t\t\tans.append(tmp)\n\t\t\telse:\n\t\t\t\tbreak\n\t\tif len(ans) == 4:\n\t\t\treturn True\n\t\tans = []\n\t\ti += 1\n\n\nT = eval(input())\nfor i in range(T):\n\tstring = input()\n\tif process(string):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\n",
        "for i in range(eval(input())):\n\ta=input()\n\ts=\"\"\n\tfor j in range(len(a)):\n\t\tif(a[j] not in s):\n\t\t\ts+=a[j]\n\tif(len(s)>=4):\n\t\tprint(\"YES\")\n\telif(len(s)==3 and len(a)>=5):\n\t\tprint(\"YES\")\n\telif(len(s)==2 and len(a)>=7):\n\t\tprint(\"YES\")\n\telif(len(s)==1 and len(a)>=10):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n",
        "'''\n# Read input from stdin and provide input before running code\n\nname = raw_input('What is your name?\\n')\nprint 'Hi, %s.' % name\n'''\ndef NoDistChar(S):\n\tcntr=0\n\tfor x in S:\n\t\tif S[0]==x:\n\t\t\tcntr+=1\n\tif cntr>=2 and cntr<=4:\n\t\treturn True\n\telse:\n\t\treturn False\n\t\t\ndef DistChar(S):\n\tL=[]\n\tresult=0\n\tfor x in S:\n\t\tif not x in L:\n\t\t\tL.append(x)\n\t\t\tresult+=1\n\treturn result\t\t\n\t\t\t\nT= int(input())\nfor x in range(T):\n\tS=input()\n\tif len(S)>9:\n\t\tprint('YES')\n\t\t\n\telif len(S)<4:\n\t\tprint('NO')\n\telif len(S)==4:\n\t\tif DistChar(S)==4:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telif len(S)==5: \n\t\tif DistChar(S)>=3:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telif len(S)==6:\n\t\tif DistChar(S)>=3:\n\t\t   print('YES')\n\t\telif DistChar(S)==2:\n\t\t\tif NoDistChar(S):\n\t\t\t\tprint('YES')\n\t\t\telse:\n\t\t\t\tprint('NO')   \n\t\telse:\n\t\t\tprint('NO')\n\telif len(S)>6:\n\t\tif DistChar(S)>=2:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\t\t\n",
        "t = int(input())\nfor i in range(0, t):\n\tflag=0\n\tstart = 0\n\tend = 1\n\tstr_set = set()\n\tstr = input()\n\twhile( start < len(str) and end <= len(str) ):\n\t\tif str[start:end] in str_set:\n\t\t\tend+=1\n\t\telse:\n\t\t\tstr_set.add(str[start:end])\n\t\t\tstart=end\n\t\t\tend=start+1\n\t\tif len(str_set) > 3:\n\t\t\tprint(\"YES\")\n\t\t\tflag=1\n\t\t\tbreak\n\t\t\n\t#for handling cases like aaoaaaaa\n\tif flag == 0 and len(str)>1 and str[0] == str[1]:\n\t\tstr_set = set()\n\t\tstr_set.add(str[0:2])\n\t\tstart = 2\n\t\tend = 3\n\t\twhile( start < len(str) and end <= len(str) ):\n\t\t\tif str[start:end] in str_set:\n\t\t\t\tend+=1\n\t\t\telse:\n\t\t\t\tstr_set.add(str[start:end])\n\t\t\t\tstart=end\n\t\t\t\tend=start+1\n\t\t\tif len(str_set) > 3:\n\t\t\t\tprint(\"YES\")\n\t\t\t\tflag=1\n\t\t\t\tbreak\n\t\t\n\t#for handling cases like aaaaaoa\n\tif flag == 0:\n\t\tstr = str[::-1] \n\t\tstart = 0\n\t\tend = 1\n\t\tstr_set = set()\n\t\twhile( start < len(str) and end <= len(str) ):\n\t\t\tif str[start:end] in str_set:\n\t\t\t\tend+=1\n\t\t\telse:\n\t\t\t\tstr_set.add(str[start:end])\n\t\t\t\tstart=end\n\t\t\t\tend=start+1\n\t\t\tif len(str_set) > 3:\n\t\t\t\tflag=1\n\t\t\t\tprint(\"YES\")\n\t\t\t\tbreak\n\t\n\tif flag == 0:\n\t\tprint(\"NO\")\n\t\n\t\t\n\t\n\t\n",
        "'''\n# Read input from stdin and provide input before running code\n\nname = raw_input('What is your name?\\n')\nprint 'Hi, %s.' % name\n'''\n\ndef solve(s):\n\tn = len(s)\n\tif n<4:\n\t\treturn \"NO\"\n\tif n>9:\n\t\treturn \"YES\"\n\tfor i in range(1,n-2):\n\t\tfor j in range(i+1,n-1):\n\t\t\tfor k in range(j+1,n):\n\t\t\t\ts1 = s[0:i]\n\t\t\t\ts2 = s[i:j]\n\t\t\t\ts3 = s[j:k]\n\t\t\t\ts4 = s[k:n]\n\t\t\t\t#print s1 + \"::\" + s2 +\"::\"+s3+\"::\"+s4\n\t\t\t\tif s1==s2 or s1==s3 or s1==s4 or s2==s3 or s2==s4 or s3==s4:\n\t\t\t\t\tcontinue\n\t\t\t\telse:\n\t\t\t\t\treturn \"YES\"\n\t\t\t\t\n\treturn \"NO\"\n\t\t\t\n\t\nt = int(input())\nfor i in range(0,t):\n\ts = input()\n\tprint(solve(s))\n\n",
        "def comp(st):\n\tl = len(st)\n\tnew = st[0]\n\tfor i in range(1,l):\n\t\tch = st[i]\n\t\tif ch!=new[-1]:\n\t\t\tnew = new + ch\n\treturn len(new)\nfor i in range(eval(input())):\n\tst = input()\n\tval = comp(st)\n\td = {}\n\tfor item in st:\n\t\ttry:\n\t\t\td[item] += 1\n\t\texcept:\n\t\t\td[item] = 1\n\tif len(d)>=4:\n\t\tprint(\"YES\")\n\telif len(d)==1:\n\t\tif len(st)>=10:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\telif len(d)==3:\n\t\tif len(st)>=6:\n\t\t\tprint(\"YES\")\n\t\t\tcontinue\n\t\tif val>=5:\n\t\t\tprint(\"YES\")\n\t\telif val==4:\n\t\t\tif len(st)>=5:\n\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\t\telif val==3:\n\t\t\tff = False\n\t\t\tfor item in d:\n\t\t\t\tif d[item]>=3:\n\t\t\t\t\tff = True\n\t\t\tif ff:\n\t\t\t\tprint(\"YES\")\n\t\t\telse:\n\t\t\t\tprint(\"NO\")\n\telse:\n\t\tif len(st)>=7:\n\t\t\tprint(\"YES\")\n\t\t\tcontinue\n\t\tif len(st)<=5:\n\t\t\tprint(\"NO\")\n\t\t\tcontinue\n\t\tprint(\"NO\")\n\n",
        "'''\n# Read input from stdin and provide input before running code\n\nname = raw_input('What is your name?\\n')\nprint 'Hi, %s.' % name\n'''\nt = input();\n\nfor o in range(0,int(t)):\n\ts = input();\n\t\n\tif len(s) > 10:\n\t\tprint(\"YES\")\n\telif len(s) < 4:\n\t\tprint(\"NO\")\n\telse:\n\t\tfl = 0;\n\t\tfor i in range(0,len(s)-3):\n\t\t\tfor j in range(i,len(s)-2):\n\t\t\t\tfor k in range(j,len(s)-1):\n\t\t\t\t\tfor p in range(k,len(s)):\n\t\t\t\t\t\tlst = []\n\t\t\t\t\t\tstr1 = s[i:j]\n\t\t\t\t\t\tstr2 = s[j:k]\n\t\t\t\t\t\tstr3 = s[k:p]\n\t\t\t\t\t\tstr4 = s[p:]\n\t\t\t\t\t\tif str1 != \"\":\n\t\t\t\t\t\t\tlst.append(str1)\n\t\t\t\t\t\tif str2 != \"\" and str2 not in lst:\n\t\t\t\t\t\t\tlst.append(str2)\n\t\t\t\t\t\tif str3 != \"\" and str3 not in lst:\n\t\t\t\t\t\t\tlst.append(str3)\n\t\t\t\t\t\tif str4 != \"\" and str4 not in lst:\n\t\t\t\t\t\t\tlst.append(str4)\n\t\t\t\t\t\t\n\t\t\t\t\t\tif len(lst) == 4:\n\t\t\t\t\t\t\tfl = 1\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\tif fl == 1:\n\t\t\t\t\t\tbreak\n\t\t\t\tif fl == 1:\n\t\t\t\t\tbreak\n\t\t\tif fl == 1:\n\t\t\t\tbreak\n\t\t\n\t\tif fl == 1:\n\t\t\tprint(\"YES\")\n\t\telse:\n\t\t\tprint(\"NO\")\n\t\t\t\n",
        "for r in range(int(input())):\n\tn = input()\n\tlength = len(n)\n\n\tstate = True\n\t\n\tfor a in range(1,length - 2):\n\t\tfor b in range(1, length - a - 1):\n\t\t\tfor c in range(1, length - a - b):\n\t\t\t\tarray = [n[0:a], n[a:a + b], n[a + b:a + b + c], n[a + b + c:length]]\n\t\t\t\tif len(array) == len(set(array)):\n\t\t\t\t\tprint('YES')\n\t\t\t\t\tstate = False\n\t\t\t\t\tbreak\n\t\t\tif not state:\n\t\t\t\tbreak\n\t\tif not state:\n\t\t\tbreak\n\t\t\t\t\t\n\n\tif state:\n\t\tprint('NO')\n",
        "'''\n# Read input from stdin and provide input before running code\n\nname = raw_input('What is your name?\\n')\nprin\n\n\n\nt 'Hi, %s.' % name\n'''\n\n\ndef fun(s):\n\ti=1\n\tj=0\n\tk=0\n\twhile(i<len(s)):\n\t\tj=i+1\n\t\twhile(j<len(s)):\n\t\t\tk=j+1\n\t\t\twhile(k<len(s)):\n\t\t\t\ta=s[:i]\n\t\t\t\tb=s[i:j]\n\t\t\t\tc=s[j:k]\n\t\t\t\td=s[k:]\n\t\t\t\tsee=set()\n\t\t\t\tsee.add(a)\n\t\t\t\tsee.add(b)\n\t\t\t\tsee.add(c)\n\t\t\t\tsee.add(d)\n\t\t\t\tif(len(see)==4):\n\t\t\t\t#\tprint a,b,c,d\n\t\t\t\t\treturn 1\n\t\t\t\tk+=1\n\t\t\tj+=1\n\t\ti+=1\n\treturn 0\n\t\t\t\n\t\nt=int(input())\nfor x in range(t):\n\ts=input()\n\tif(fun(s)):\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n"
      ],
      "original_code": null
    },
    "status": "success",
    "code": "def can_split(s):\n    n = len(s)\n    if n < 4:\n        return False\n    # We use a bound max_len for the first three pieces.\n    max_len = min(n, 10)\n    # Try possible split indices i,j,k so that:\n    #   a = s[:i], b = s[i:j], c = s[j:k], and d = s[k:]\n    # All four segments are nonempty and must be pairwise different.\n    # (The loops stop earlier since i < j < k and k <= n-1)\n    for i in range(1, min(max_len, n-2) + 1):\n        for j in range(i+1, min(i+max_len, n-1) + 1):\n            for k in range(j+1, min(j+max_len, n) ):\n                a = s[:i]\n                b = s[i:j]\n                c = s[j:k]\n                d = s[k:]\n                # Check if all four parts are different.\n                if len({a, b, c, d}) == 4:\n                    return True\n    return False\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    t = int(data[0])\n    results = []\n    index = 1\n    for _ in range(t):\n        s = data[index]\n        index += 1\n        results.append(\"YES\" if can_split(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main()",
    "pass_ratio": 0.9540229885057471,
    "tests_passed": 83,
    "tests_total": 87,
    "iterations": 1,
    "history": [
      {
        "iteration": 1,
        "code": "def can_split(s):\n    n = len(s)\n    if n < 4:\n        return False\n    # We use a bound max_len for the first three pieces.\n    max_len = min(n, 10)\n    # Try possible split indices i,j,k so that:\n    #   a = s[:i], b = s[i:j], c = s[j:k], and d = s[k:]\n    # All four segments are nonempty and must be pairwise different.\n    # (The loops stop earlier since i < j < k and k <= n-1)\n    for i in range(1, min(max_len, n-2) + 1):\n        for j in range(i+1, min(i+max_len, n-1) + 1):\n            for k in range(j+1, min(j+max_len, n) ):\n                a = s[:i]\n                b = s[i:j]\n                c = s[j:k]\n                d = s[k:]\n                # Check if all four parts are different.\n                if len({a, b, c, d}) == 4:\n                    return True\n    return False\n\ndef main():\n    import sys\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    t = int(data[0])\n    results = []\n    index = 1\n    for _ in range(t):\n        s = data[index]\n        index += 1\n        results.append(\"YES\" if can_split(s) else \"NO\")\n    sys.stdout.write(\"\\n\".join(results))\n\nif __name__ == '__main__':\n    main()",
        "pass_ratio": 0.9540229885057471,
        "tests_passed": 83,
        "tests_total": 87
      }
    ],
    "model_type": "openai",
    "model_name": "o3_mini"
  },
  {
    "problem": {
      "problem_id": 1,
      "question": "You are given a grid with $n$ rows and $m$ columns. We denote the square on the $i$-th ($1\\le i\\le n$) row and $j$-th ($1\\le j\\le m$) column by $(i, j)$ and the number there by $a_{ij}$. All numbers are equal to $1$ or to $-1$.\n\nYou start from the square $(1, 1)$ and can move one square down or one square to the right at a time. In the end, you want to end up at the square $(n, m)$.\n\nIs it possible to move in such a way so that the sum of the values written in all the visited cells (including $a_{11}$ and $a_{nm}$) is $0$?\n\n\n-----Input-----\n\nEach test contains multiple test cases. The first line contains the number of test cases $t$ ($1 \\leq t \\leq 10^4$). Description of the test cases follows.\n\nThe first line of each test case contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$)  \u2014 the size of the grid.\n\nEach of the following $n$ lines contains $m$ integers. The $j$-th integer on the $i$-th line is $a_{ij}$ ($a_{ij} = 1$ or $-1$)  \u2014 the element in the cell $(i, j)$.\n\nIt is guaranteed that the sum of $n\\cdot m$ over all test cases does not exceed $10^6$.\n\n\n-----Output-----\n\nFor each test case, print \"YES\" if there exists a path from the top left to the bottom right that adds up to $0$, and \"NO\" otherwise. You can output each letter in any case.\n\n\n-----Examples-----\n\nInput\n5\n1 1\n1\n1 2\n1 -1\n1 4\n1 -1 1 -1\n3 4\n1 -1 -1 -1\n-1 1 1 -1\n1 1 1 -1\n3 4\n1 -1 1 1\n-1 1 -1 1\n1 -1 1 1\nOutput\nNO\nYES\nYES\nYES\nNO\n\n\n-----Note-----\n\nOne possible path for the fourth test case is given in the picture in the statement.",
      "tests": [
        {
          "stdin": "5\n1 1\n1\n1 2\n1 -1\n1 4\n1 -1 1 -1\n3 4\n1 -1 -1 -1\n-1 1 1 -1\n1 1 1 -1\n3 4\n1 -1 1 1\n-1 1 -1 1\n1 -1 1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n2 1\n-1\n-1\n2 1\n1\n-1\n2 1\n-1\n1\n2 1\n1\n1\n",
          "stdout": "NO\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n1 2\n-1 -1\n1 2\n1 -1\n1 2\n-1 1\n1 2\n1 1\n",
          "stdout": "NO\nYES\nYES\nNO\n"
        },
        {
          "stdin": "5\n1 1\n1\n1 2\n1 -1\n1 4\n1 -1 1 -1\n3 4\n1 -1 -1 -1\n-1 1 1 -1\n1 1 1 -1\n3 4\n1 -1 1 1\n-1 1 -1 1\n1 -1 1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n2 1\n-1\n-1\n2 1\n1\n-1\n2 1\n-1\n1\n2 1\n1\n1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "2\n2 2\n1 1\n1 1\n2 2\n-1 -1\n-1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "2\n2 2\n-1 1\n1 -1\n2 2\n1 -1\n-1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "2\n3 3\n1 1 1\n1 1 1\n1 1 1\n3 3\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "2\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n3 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "2\n2 3\n-1 1 -1\n1 1 -1\n2 3\n1 -1 1\n-1 1 -1\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "3\n1 3\n-1 -1 -1\n1 2\n-1 1\n2 2\n1 -1\n-1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "1\n5 5\n-1 -1 -1 -1 -1\n1 1 1 1 1\n-1 -1 -1 -1 -1\n1 1 1 1 1\n-1 -1 -1 -1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\n4 1\n1\n-1\n1\n-1\n4 1\n-1\n1\n-1\n1\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "2\n3 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "2\n1 5\n-1 1 -1 1 -1\n1 4\n1 -1 1 -1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "1\n4 4\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n2 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\n5 2\n-1 1\n1 -1\n-1 1\n1 -1\n-1 1\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "2\n2 2\n1 -1\n-1 1\n2 2\n-1 1\n1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\n3 3\n1 1 1\n1 1 1\n1 1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "3\n3 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n3 3\n1 1 1\n-1 -1 -1\n1 1 1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\n5 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "3\n1 4\n1 -1 1 -1\n2 2\n1 -1\n-1 1\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "3\n1 1\n1\n1 2\n-1 1\n2 2\n1 -1\n-1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "3\n2 2\n1 -1\n-1 1\n2 2\n1 1\n-1 -1\n2 2\n-1 1\n1 -1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "4\n1 4\n1 1 1 1\n2 2\n-1 1\n1 -1\n3 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n4 4\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n",
          "stdout": "NO\nNO\nNO\nNO\n"
        },
        {
          "stdin": "6\n1 1\n-1\n1 1\n1\n2 2\n-1 -1\n-1 -1\n2 2\n1 1\n-1 -1\n2 3\n1 -1 1\n-1 1 -1\n3 2\n-1 1\n1 -1\n-1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n1 5\n1 -1 1 -1 1\n5 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n2 3\n-1 1 -1\n1 -1 1\n3 2\n-1 1\n1 -1\n-1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "2\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n3 3\n-1 -1 1\n1 1 1\n-1 1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "2\n4 4\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n4 4\n-1 -1 -1 -1\n1 -1 -1 -1\n-1 1 -1 -1\n-1 -1 1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\n3 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\n1 5\n1 -1 1 -1 1\n2 5\n-1 1 -1 1 -1\n1 -1 1 -1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "3\n1 3\n1 -1 1\n2 2\n-1 1\n1 -1\n3 1\n1\n-1\n1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\n3 3\n1 1 1\n-1 -1 -1\n1 1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "5\n1 1\n-1\n1 2\n-1 -1\n1 3\n-1 -1 -1\n1 4\n-1 -1 -1 -1\n1 5\n-1 -1 -1 -1 -1\n",
          "stdout": "NO\nNO\nNO\nNO\nNO\n"
        },
        {
          "stdin": "2\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n2 2\n1 -1\n-1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\n1 2\n-1 1\n1 3\n-1 1 -1\n1 1\n1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "1\n3 3\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "3\n4 4\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n4 4\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n1 1\n1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "2\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n2 2\n-1 -1\n-1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\n5 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n2 2\n-1 1\n1 -1\n4 4\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "3\n3 2\n1 -1\n-1 1\n1 -1\n4 2\n1 -1\n-1 1\n1 -1\n-1 1\n5 2\n1 -1\n-1 1\n1 -1\n-1 1\n1 -1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n4 4\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n2 2\n1 -1\n-1 1\n3 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n1 1\n1\n",
          "stdout": "NO\nNO\nNO\nNO\n"
        },
        {
          "stdin": "2\n2 2\n1 1\n-1 -1\n5 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\n1 1\n-1\n2 2\n-1 -1\n-1 -1\n3 3\n-1 -1 -1\n-1 1 -1\n-1 -1 -1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "1\n6 6\n-1 -1 -1 -1 -1 -1\n-1 1 1 1 1 -1\n-1 1 -1 -1 1 -1\n-1 1 1 -1 1 -1\n-1 1 1 1 1 -1\n-1 -1 -1 -1 -1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\n3 3\n-1 -1 -1\n-1 1 -1\n-1 -1 -1\n3 3\n1 1 1\n1 -1 1\n1 1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\n4 4\n-1 -1 -1 -1\n-1 1 1 -1\n-1 1 -1 -1\n-1 -1 -1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n6 6\n1 -1 -1 1 1 -1\n1 -1 1 1 -1 1\n-1 1 -1 1 1 1\n1 -1 1 -1 -1 -1\n1 1 -1 1 1 -1\n-1 -1 1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n2 2\n1 -1\n-1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n2 2\n1 1\n-1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n3 3\n1 -1 -1\n-1 1 -1\n-1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n3 3\n-1 1 1\n1 -1 1\n1 1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n4 4\n1 -1 -1 -1\n-1 1 1 1\n1 -1 -1 1\n-1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n4 4\n-1 1 1 1\n1 -1 -1 -1\n-1 1 1 -1\n1 -1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n5 5\n1 -1 -1 -1 -1\n-1 1 1 1 1\n1 -1 -1 -1 -1\n1 1 1 1 1\n-1 -1 -1 -1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n7 7\n1 -1 1 -1 1 -1 1\n-1 1 -1 1 -1 1 -1\n1 -1 1 -1 1 -1 1\n-1 1 -1 1 -1 1 -1\n1 -1 1 -1 1 -1 1\n-1 1 -1 1 -1 1 -1\n1 -1 1 -1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n4 1\n-1\n1\n-1\n1\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\n1 4\n1 -1 1 -1\n",
          "stdout": "YES\n"
        },
        {
          "stdin": "1\n6 6\n1 -1 1 -1 1 -1\n-1 1 -1 1 -1 1\n1 -1 1 -1 1 -1\n-1 1 -1 1 -1 1\n1 -1 1 -1 1 -1\n-1 1 -1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\n1 1\n1\n1 1\n-1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\n3 1\n-1\n1\n-1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "3\n1 3\n1 -1 1\n2 2\n1 -1\n-1 1\n2 2\n-1 1\n1 -1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "2\n4 4\n1 -1 -1 1\n-1 1 1 -1\n1 -1 -1 1\n-1 1 1 -1\n4 4\n-1 1 1 -1\n1 -1 -1 1\n-1 1 1 -1\n1 -1 -1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\n3 1\n1\n-1\n1\n3 1\n-1\n1\n-1\n2 2\n1 -1\n1 -1\n",
          "stdout": "NO\nNO\nNO\n"
        },
        {
          "stdin": "2\n1 4\n1 -1 1 -1\n1 4\n-1 1 -1 1\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "3\n2 3\n1 -1 1\n-1 1 -1\n2 3\n-1 1 -1\n1 -1 1\n2 1\n1\n-1\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "1\n4 4\n1 -1 -1 1\n-1 1 1 -1\n1 -1 -1 1\n-1 1 1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "5\n1 3\n1 -1 1\n1 1\n1\n1 2\n-1 -1\n1 4\n-1 1 -1 1\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "2\n2 3\n1 -1 -1\n-1 1 1\n3 2\n-1 1\n1 -1\n-1 1\n",
          "stdout": "YES\nYES\n"
        },
        {
          "stdin": "1\n5 4\n1 -1 1 1\n-1 1 -1 1\n1 -1 1 1\n-1 1 -1 1\n1 -1 1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "3\n2 3\n1 -1 1\n-1 1 -1\n3 2\n-1 1\n1 -1\n-1 1\n3 2\n1 -1\n-1 1\n1 -1\n",
          "stdout": "YES\nYES\nYES\n"
        },
        {
          "stdin": "2\n5 5\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n5 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n1 -1 1\n-1 1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\n2 2\n-1 1\n1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n4 4\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "4\n4 4\n-1 1 -1 1\n1 -1 1 -1\n-1 1 -1 1\n1 -1 1 -1\n1 1\n1\n4 2\n-1 1\n-1 1\n-1 1\n-1 1\n1 4\n1 -1 1 -1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "1\n5 5\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 1 -1\n1 -1 1 -1 1\n-1 1 -1 -1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\n2 2\n1 -1\n-1 1\n3 3\n-1 1 -1\n1 -1 1\n-1 1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\n1 4\n-1 -1 1 1\n3 1\n-1\n1\n-1\n3 3\n1 -1 1\n-1 1 -1\n1 -1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n2 3\n1 1 -1\n-1 -1 1\n2 2\n-1 1\n1 -1\n4 1\n1\n-1\n1\n-1\n4 1\n-1\n1\n-1\n1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "2\n3 2\n1 -1\n-1 1\n1 -1\n2 2\n-1 1\n1 -1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "3\n5 1\n-1\n-1\n1\n1\n-1\n3 2\n-1 1\n1 -1\n-1 1\n2 3\n1 -1 1\n-1 1 -1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "4\n4 1\n-1\n1\n-1\n1\n2 2\n1 1\n-1 -1\n2 2\n-1 -1\n1 1\n2 2\n1 -1\n-1 1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "2\n3 3\n1 1 -1\n1 -1 1\n-1 1 1\n3 3\n-1 -1 1\n-1 1 -1\n1 -1 -1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "3\n4 4\n1 -1 -1 1\n-1 1 1 -1\n1 -1 -1 1\n-1 1 1 -1\n3 4\n1 -1 -1 1\n-1 1 -1 -1\n1 -1 -1 1\n3 1\n-1\n1\n-1\n",
          "stdout": "NO\nYES\nYES\nYES\nNO\n"
        },
        {
          "stdin": "1\n1 1\n-1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "2\n2 2\n1 1\n-1 -1\n2 2\n-1 -1\n1 1\n",
          "stdout": "NO\nNO\n"
        },
        {
          "stdin": "1\n3 3\n1 1 1\n1 1 1\n1 1 -1\n",
          "stdout": "NO\n"
        },
        {
          "stdin": "1\n5 5\n1 -1 -1 -1 1\n-1 1 1 1 -1\n1 -1 -1 -1 1\n-1 1 1 1 -1\n1 -1 -1 -1 1\n",
          "stdout": "NO\n"
        }
      ],
      "source": "codeforces",
      "difficulty": "MEDIUM_HARD",
      "human_solutions": [
        "for case in range(int(input())):\n\t(n, m) = map(int, input().split())\n\ta = [list(map(int, input().split())) for _ in range(n)]\n\tif (n + m - 1) % 2:\n\t\tprint('NO')\n\t\tcontinue\n\tdp = [0] * (m + 1)\n\tfor i in range(n):\n\t\tdp[0] = int(not i)\n\t\tfor j in range(m):\n\t\t\tdp[j + 1] = (dp[j] | dp[j + 1]) << (a[i][j] == -1)\n\tif dp[-1] & 1 << (n + m - 1) // 2:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\ta = [list(map(int, input().split())) for i in range(n)]\n\tif (n + m) % 2 == 0:\n\t\tprint('NO')\n\telse:\n\t\tg = [[0] * m for i in range(n)]\n\t\tg[0][0] = 1 << (a[0][0] == -1)\n\t\tfor j in range(1, m):\n\t\t\tg[0][j] = g[0][j - 1] << (a[0][j] == -1)\n\t\tfor i in range(1, n):\n\t\t\tg[i][0] = g[i - 1][0] << (a[i][0] == -1)\n\t\t\tfor j in range(1, m):\n\t\t\t\tg[i][j] = (g[i - 1][j] | g[i][j - 1]) << (a[i][j] == -1)\n\t\tif g[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint('YES')\n",
        "p = int(input())\nfor _ in range(p):\n\t(n, m) = map(int, input().split())\n\ta = [list(map(int, input().split())) for i in range(n)]\n\tif (n + m) % 2 == 0:\n\t\tprint('NO')\n\telse:\n\t\tk = [[0] * m for i in range(n)]\n\t\tk[0][0] = 1 << (a[0][0] == -1)\n\t\tfor j in range(1, m):\n\t\t\tk[0][j] = k[0][j - 1] << (a[0][j] == -1)\n\t\tfor i in range(1, n):\n\t\t\tk[i][0] = k[i - 1][0] << (a[i][0] == -1)\n\t\t\tfor j in range(1, m):\n\t\t\t\tk[i][j] = (k[i - 1][j] | k[i][j - 1]) << (a[i][j] == -1)\n\t\tif k[n - 1][m - 1] & 1 << (n + m - 1) // 2 == 0:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint('YES')\n",
        "(inp, r, p) = (input, range, print)\nI = lambda : map(int, input().split())\nfor _1 in r(int(inp())):\n\t(n, m) = I()\n\tinp_mat = [list(I()) for _2 in r(n)]\n\ta = [[0 for _ in r(m)] for _ in r(n)]\n\tif (n + m - 1) % 2 == 1:\n\t\tp('NO')\n\t\tcontinue\n\ta[0][0] = 1 << (inp_mat[0][0] != 1)\n\tfor j in r(1, m):\n\t\ta[0][j] = a[0][j - 1] << (inp_mat[0][j] == -1)\n\tfor i in r(1, n):\n\t\ta[i][0] = a[i - 1][0] << (inp_mat[i][0] != 1)\n\t\tfor j in r(1, m):\n\t\t\ta[i][j] = (a[i - 1][j] | a[i][j - 1]) << (inp_mat[i][j] != 1)\n\tp(['NO', 'YES'][1 if a[n - 1][m - 1] & 1 << (m + n - 1) // 2 else 0])\n",
        "input = __import__('sys').stdin.readline\n\ndef solve():\n\t(n, m) = map(int, input().split())\n\ta = list(map(int, input().split()))\n\tdp = []\n\ttotal = 0\n\tfor x in a:\n\t\ttotal += 1 if x == 1 else 0\n\t\tdp.append((total, total))\n\tfor _ in range(1, n):\n\t\ta = list(map(int, input().split()))\n\t\tc = 1 if a[0] == 1 else 0\n\t\tnewdp = [(dp[0][0] + c, dp[0][1] + c)]\n\t\tfor i in range(1, m):\n\t\t\tc = 1 if a[i] == 1 else 0\n\t\t\tnewdp.append((min(dp[i][0], newdp[i - 1][0]) + c, max(dp[i][1], newdp[i - 1][1]) + c))\n\t\tdp = newdp\n\tprint('YES' if (n + m - 1) % 2 == 0 and dp[m - 1][0] <= (n + m - 1) // 2 <= dp[m - 1][1] else 'NO')\nfor _ in range(int(input())):\n\tsolve()\n",
        "import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\ndef solve():\n\t(n, m) = map(int, input().split())\n\tarr = [list(map(int, input().split())) for _ in range(n)]\n\tif (n + m) % 2 == 0:\n\t\treturn 'NO'\n\tdp = [[-float('inf'), float('inf')] for _ in range(m)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif j == 0:\n\t\t\t\tdp[j][0] = arr[i][j] if i == 0 else dp[j][0] + arr[i][j]\n\t\t\t\tdp[j][1] = arr[i][j] if i == 0 else dp[j][1] + arr[i][j]\n\t\t\telse:\n\t\t\t\tdp[j][0] = max(dp[j][0], dp[j - 1][0]) + arr[i][j]\n\t\t\t\tdp[j][1] = min(dp[j][1], dp[j - 1][1]) + arr[i][j]\n\treturn 'YES' if dp[-1][1] <= 0 <= dp[-1][0] else 'NO'\nfor _ in range(int(input())):\n\tprint(solve())\n",
        "def solve():\n\t(n, m) = map(int, input().split())\n\tarr = [list(map(int, input().split())) for _ in range(n)]\n\tif (n + m) % 2 == 0:\n\t\treturn 'NO'\n\tdp = [[-float('inf'), float('inf')] for _ in range(m)]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif j == 0:\n\t\t\t\tdp[j][0] = arr[i][j] if i == 0 else dp[j][0] + arr[i][j]\n\t\t\t\tdp[j][1] = arr[i][j] if i == 0 else dp[j][1] + arr[i][j]\n\t\t\telse:\n\t\t\t\tdp[j][0] = max(dp[j][0], dp[j - 1][0]) + arr[i][j]\n\t\t\t\tdp[j][1] = min(dp[j][1], dp[j - 1][1]) + arr[i][j]\n\treturn 'YES' if dp[-1][1] <= 0 <= dp[-1][0] else 'NO'\nfor _ in range(int(input())):\n\tprint(solve())\n",
        "def main():\n\t(n, m) = map(int, input().split())\n\ta = []\n\tfor i in range(n):\n\t\ta.append(list(map(int, input().split())))\n\tif (n + m) % 2 == 0:\n\t\tprint('NO')\n\t\treturn\n\tb = [[0] * m for _ in range(n)]\n\tb[0][0] = a[0][0]\n\tfor i in range(1, n):\n\t\tb[i][0] = b[i - 1][0] + a[i][0]\n\tfor j in range(1, m):\n\t\tb[0][j] = b[0][j - 1] + a[0][j]\n\tbmin = [i.copy() for i in b]\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tb[i][j] = a[i][j] + max(b[i - 1][j], b[i][j - 1])\n\t\t\tbmin[i][j] = a[i][j] + min(bmin[i - 1][j], bmin[i][j - 1])\n\tif bmin[-1][-1] <= 0 <= b[-1][-1]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nfor _ in range(int(input())):\n\tmain()\n",
        "t = int(input())\nfor _ in range(t):\n\t(m, n) = list(map(int, input().split()))\n\ta = []\n\tfor _ in range(m):\n\t\ta.append(list(map(int, input().split())))\n\tif (m + n) % 2 == 0:\n\t\tprint('NO')\n\t\tcontinue\n\tmn = [0] * n\n\tmn[0] = a[0][0]\n\tfor j in range(1, n):\n\t\tmn[j] = mn[j - 1] + a[0][j]\n\tmx = mn[:]\n\tfor i in range(1, m):\n\t\tmn[0] += a[i][0]\n\t\tmx[0] += a[i][0]\n\t\tfor j in range(1, n):\n\t\t\tmn[j] = min(mn[j], mn[j - 1]) + a[i][j]\n\t\t\tmx[j] = max(mx[j], mx[j - 1]) + a[i][j]\n\tprint('NO') if mx[-1] < 0 or mn[-1] > 0 else print('YES')\n",
        "def f(arr, m, n, mx, mi):\n\tmx[m][n] = mi[m][n] = arr[m][n]\n\tfor i in range(m - 1, -1, -1):\n\t\tmx[i][n] = mi[i][n] = arr[i][n] + mx[i + 1][n]\n\tfor i in range(n - 1, -1, -1):\n\t\tmx[m][i] = mi[m][i] = arr[m][i] + mx[m][i + 1]\n\tfor i in range(m - 1, -1, -1):\n\t\tfor j in range(n - 1, -1, -1):\n\t\t\tmx[i][j] = max(mx[i + 1][j], mx[i][j + 1]) + arr[i][j]\n\t\t\tmi[i][j] = min(mi[i + 1][j], mi[i][j + 1]) + arr[i][j]\n\treturn\nt = int(input())\nfor _ in range(t):\n\t(m, n) = map(int, input().split())\n\tarr = []\n\tans = True\n\tfor i in range(m):\n\t\tar = list(map(int, input().split()))\n\t\tarr.append(ar)\n\tif (m + n) % 2 == 0:\n\t\tans = False\n\telse:\n\t\tmx = [[-1 for i in range(n)] for j in range(m)]\n\t\tmi = [[-1 for i in range(n)] for j in range(m)]\n\t\tf(arr, m - 1, n - 1, mx, mi)\n\t\ta = mx[0][0]\n\t\tb = mi[0][0]\n\t\tif a < 0 or b > 0:\n\t\t\tans = False\n\tif ans:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "import sys\nt = int(input())\nfor _ in range(t):\n\t(m, n) = list(map(int, input().split()))\n\tmatrix = []\n\tfor r in range(m):\n\t\tmatrix.append(list(map(int, input().split())))\n\tif (m + n) % 2 == 0:\n\t\tprint('NO')\n\t\tcontinue\n\tmn = [0] * n\n\tmn[0] = matrix[0][0]\n\tfor i in range(1, n):\n\t\tmn[i] += mn[i - 1] + matrix[0][i]\n\tmx = mn[:]\n\tfor r in matrix[1:]:\n\t\tmn[0] += r[0]\n\t\tmx[0] += r[0]\n\t\tfor (j, x) in enumerate(r[1:]):\n\t\t\tmn[j + 1] = min(mn[j + 1], mn[j]) + x\n\t\t\tmx[j + 1] = max(mx[j + 1], mx[j]) + x\n\tprint('NO') if mn[-1] > 0 or mx[-1] < 0 else print('YES')\n",
        "for _ in [0] * int(input()):\n\t(n, m) = map(int, input().split())\n\ta = [[*map(int, input().split())] for x in [0] * n]\n\tdp = [[0] * m for x in [0] * n]\n\tdp[0][0] = a[0][0]\n\tfor i in range(1, n):\n\t\tdp[i][0] = dp[i - 1][0] + a[i][0]\n\tfor i in range(1, m):\n\t\tdp[0][i] = dp[0][i - 1] + a[0][i]\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + a[i][j]\n\tmaxi = dp[-1][-1]\n\tdp = [[0] * m for x in [0] * n]\n\tdp[0][0] = a[0][0]\n\tfor i in range(1, n):\n\t\tdp[i][0] = dp[i - 1][0] + a[i][0]\n\tfor i in range(1, m):\n\t\tdp[0][i] = dp[0][i - 1] + a[0][i]\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tdp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + a[i][j]\n\tmini = dp[-1][-1]\n\tprint('NYOE S'[(m + n) % 2 and mini <= 0 <= maxi::2])\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\ta = [list(map(int, input().split())) for _ in range(n)]\n\tif (n + m) % 2 == 0:\n\t\tprint('NO')\n\telse:\n\t\tmaxi = [[0] * m for i in range(n)]\n\t\tmini = [[0] * m for i in range(n)]\n\t\tmaxi[0][0] = mini[0][0] = a[0][0]\n\t\tfor j in range(1, m):\n\t\t\tmaxi[0][j] = mini[0][j] = maxi[0][j - 1] + a[0][j]\n\t\tfor i in range(1, n):\n\t\t\tmaxi[i][0] = mini[i][0] = maxi[i - 1][0] + a[i][0]\n\t\tfor i in range(1, n):\n\t\t\tfor j in range(1, m):\n\t\t\t\tmaxi[i][j] = max(maxi[i - 1][j], maxi[i][j - 1]) + a[i][j]\n\t\t\t\tmini[i][j] = min(mini[i - 1][j], mini[i][j - 1]) + a[i][j]\n\t\tif maxi[n - 1][m - 1] < 0 or mini[n - 1][m - 1] > 0:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint('YES')\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tg = []\n\tfor i in range(n):\n\t\tg.append(list(map(int, input().split())))\n\tdp1 = [[0] * m for j in range(n)]\n\tdp2 = [[0] * m for j in range(n)]\n\tc = 0\n\tfor i in range(n):\n\t\tc += g[i][0]\n\t\tdp1[i][0] = c\n\t\tdp2[i][0] = c\n\tc = 0\n\tfor i in range(m):\n\t\tc += g[0][i]\n\t\tdp2[0][i] = c\n\t\tdp1[0][i] = c\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tdp1[i][j] = min(dp1[i - 1][j], dp1[i][j - 1]) + g[i][j]\n\t\t\tdp2[i][j] = max(dp2[i - 1][j], dp2[i][j - 1]) + g[i][j]\n\tif dp1[-1][-1] % 2 == 1 or dp1[-1][-1] > 0 or dp2[-1][-1] < 0:\n\t\tprint('NO')\n\telse:\n\t\tprint('YES')\n",
        "for _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tarr = []\n\tfor i in range(n):\n\t\titems = list(map(int, input().split()))\n\t\tarr.append(items)\n\tif (n + m) % 2 == 0:\n\t\tprint('NO')\n\t\tcontinue\n\tminmax = [[0] * m for i in range(n)]\n\tminmax[0][0] = arr[0][0]\n\tfor i in range(1, m):\n\t\tminmax[0][i] = minmax[0][i - 1] + arr[0][i]\n\tfor i in range(1, n):\n\t\tminmax[i][0] = minmax[i - 1][0] + arr[i][0]\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tminmax[i][j] = max(minmax[i - 1][j], minmax[i][j - 1]) + arr[i][j]\n\tif minmax[n - 1][m - 1] < 0:\n\t\tprint('NO')\n\telse:\n\t\tfor i in range(1, n):\n\t\t\tfor j in range(1, m):\n\t\t\t\tminmax[i][j] = min(minmax[i - 1][j], minmax[i][j - 1]) + arr[i][j]\n\t\tif minmax[n - 1][m - 1] <= 0:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n",
        "t = int(input())\nfor i in range(t):\n\t(n, m) = map(int, input().split())\n\tgrid = []\n\tfor i in range(n):\n\t\tgrid.append(list(map(int, input().split())))\n\tif (n + m - 1) % 2 != 0:\n\t\tprint('NO')\n\t\tcontinue\n\tmin_path = [[0 for i in range(m)] for j in range(n)]\n\tmax_path = [[0 for i in range(m)] for j in range(n)]\n\tmin_path[n - 1][m - 1] = max_path[n - 1][m - 1] = grid[n - 1][m - 1]\n\tfor i in range(m - 2, -1, -1):\n\t\tmin_path[n - 1][i] = max_path[n - 1][i] = min_path[n - 1][i + 1] + grid[n - 1][i]\n\tfor i in range(n - 2, -1, -1):\n\t\tmin_path[i][m - 1] = max_path[i][m - 1] = min_path[i + 1][m - 1] + grid[i][m - 1]\n\tfor i in range(n - 2, -1, -1):\n\t\tfor j in range(m - 2, -1, -1):\n\t\t\tmin_path[i][j] = min(min_path[i + 1][j], min_path[i][j + 1]) + grid[i][j]\n\t\t\tmax_path[i][j] = max(max_path[i + 1][j], max_path[i][j + 1]) + grid[i][j]\n\tif min_path[0][0] <= 0 <= max_path[0][0]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "import sys\n\ndef solve():\n\tinp = sys.stdin.readline\n\t(n, m) = map(int, inp().split())\n\ta = [list(map(int, inp().split())) for i in range(n)]\n\tif (n + m - 1) % 2 != 0:\n\t\tprint('NO')\n\t\treturn\n\tb = [[0] * m for i in range(n)]\n\tc = [[0] * m for i in range(n)]\n\tb[0][0] = max(a[0][0], 0)\n\tc[0][0] = max(a[0][0], 0)\n\td = int(1000000000.0)\n\te = -d\n\tfor x in range(n):\n\t\tfor y in range(m):\n\t\t\tif x != 0 or y != 0:\n\t\t\t\tz = max(a[x][y], 0)\n\t\t\t\tif x > 0:\n\t\t\t\t\tu = b[x - 1][y] + z\n\t\t\t\t\tv = c[x - 1][y] + z\n\t\t\t\telse:\n\t\t\t\t\tu = d\n\t\t\t\t\tv = e\n\t\t\t\tif y > 0:\n\t\t\t\t\tu = min(u, b[x][y - 1] + z)\n\t\t\t\t\tv = max(v, c[x][y - 1] + z)\n\t\t\t\tb[x][y] = u\n\t\t\t\tc[x][y] = v\n\tz = (n + m - 1) // 2\n\tif z >= b[n - 1][m - 1] and z <= c[n - 1][m - 1]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n\ndef main():\n\tfor i in range(int(sys.stdin.readline())):\n\t\tsolve()\nmain()\n",
        "time = int(input())\nwhile time:\n\ttime -= 1\n\t(n, m) = [int(x) for x in input().split()]\n\tarr = [[] for _ in range(n)]\n\tfor i in range(n):\n\t\tarr[i] = [int(x) for x in input().split()]\n\tif (n + m - 1) % 2 == 1:\n\t\tprint('NO')\n\t\tcontinue\n\tdpmin = [[0] * m for _ in range(n)]\n\tdpmax = [[0] * m for _ in range(n)]\n\tdpmin[0][0] = arr[0][0]\n\tdpmax[0][0] = arr[0][0]\n\tfor j in range(1, m):\n\t\tdpmin[0][j] = dpmin[0][j - 1] + arr[0][j]\n\t\tdpmax[0][j] = dpmax[0][j - 1] + arr[0][j]\n\tfor i in range(1, n):\n\t\tdpmin[i][0] = dpmin[i - 1][0] + arr[i][0]\n\t\tdpmax[i][0] = dpmax[i - 1][0] + arr[i][0]\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tdpmin[i][j] = min(dpmin[i - 1][j], dpmin[i][j - 1]) + arr[i][j]\n\t\t\tdpmax[i][j] = max(dpmax[i - 1][j], dpmax[i][j - 1]) + arr[i][j]\n\tif dpmin[n - 1][m - 1] <= 0 and 0 <= dpmax[n - 1][m - 1]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "for _ in range(int(input())):\n\t(row, col) = map(int, input().split())\n\tgrid = []\n\tfor _ in range(row):\n\t\tgrid.append(list(map(int, input().split())))\n\tmin_dp = [[0] * col for _ in range(row)]\n\tmax_dp = [[0] * col for _ in range(row)]\n\tif row + col + 1 & 1:\n\t\tprint('NO')\n\t\tcontinue\n\tfor i in range(row):\n\t\tfor j in range(col):\n\t\t\tif i == 0 and j == 0:\n\t\t\t\tmin_dp[i][j] = max_dp[i][j] = grid[i][j]\n\t\t\t\tcontinue\n\t\t\tif i and j:\n\t\t\t\tmin_dp[i][j] = grid[i][j] + min(min_dp[i - 1][j], min_dp[i][j - 1])\n\t\t\t\tmax_dp[i][j] = grid[i][j] + max(max_dp[i - 1][j], max_dp[i][j - 1])\n\t\t\telif i:\n\t\t\t\tmin_dp[i][j] = grid[i][j] + min_dp[i - 1][j]\n\t\t\t\tmax_dp[i][j] = grid[i][j] + max_dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tmin_dp[i][j] = grid[i][j] + min_dp[i][j - 1]\n\t\t\t\tmax_dp[i][j] = grid[i][j] + max_dp[i][j - 1]\n\tif min_dp[-1][-1] <= 0 <= max_dp[-1][-1]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\tarr = []\n\tfor i in range(n):\n\t\tl = list(map(int, input().split()))\n\t\tarr.append(l)\n\tpl = n + m - 1\n\tif pl % 2 != 0:\n\t\tprint('NO')\n\t\tcontinue\n\t(madp, midp) = ([[0 for j in range(m)] for i in range(n)], [[0 for j in range(m)] for i in range(n)])\n\t(madp[0][0], midp[0][0]) = (arr[0][0], arr[0][0])\n\tfor i in range(1, n):\n\t\t(madp[i][0], midp[i][0]) = (arr[i][0] + madp[i - 1][0], arr[i][0] + midp[i - 1][0])\n\tfor j in range(1, m):\n\t\t(madp[0][j], midp[0][j]) = (arr[0][j] + madp[0][j - 1], arr[0][j] + midp[0][j - 1])\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tmadp[i][j] = arr[i][j] + max(madp[i - 1][j], madp[i][j - 1])\n\t\t\tmidp[i][j] = arr[i][j] + min(midp[i - 1][j], midp[i][j - 1])\n\tif midp[-1][-1] <= 0 <= madp[-1][-1]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "a = int(input())\nfor k in range(0, a):\n\t(n, m) = map(int, input().split())\n\tc = []\n\tfor i in range(0, n):\n\t\tc.append(list(map(int, input().split())))\n\td_min = [[] for _ in range(n)]\n\td_max = [[] for _ in range(n)]\n\tif (n + m - 1) % 2 == 0:\n\t\td_max[0].append(c[0][0])\n\t\td_min[0].append(c[0][0])\n\t\tfor j in range(1, m):\n\t\t\td_max[0].append(d_max[0][j - 1] + c[0][j])\n\t\t\td_min[0].append(d_min[0][j - 1] + c[0][j])\n\t\tfor j in range(1, n):\n\t\t\td_max[j].append(d_max[j - 1][0] + c[j][0])\n\t\t\td_min[j].append(d_min[j - 1][0] + c[j][0])\n\t\tfor i in range(1, n):\n\t\t\tfor j in range(1, m):\n\t\t\t\td_max[i].append(max(d_max[i - 1][j], d_max[i][j - 1]) + c[i][j])\n\t\t\t\td_min[i].append(min(d_min[i - 1][j], d_min[i][j - 1]) + c[i][j])\n\t\tif d_max[n - 1][m - 1] >= 0 and d_min[n - 1][m - 1] <= 0:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n\telse:\n\t\tprint('NO')\n",
        "from itertools import accumulate\nt = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split())\n\ta = []\n\tfor __ in range(n):\n\t\ta.append(list(map(int, input().split())))\n\tif (n + m) % 2 == 0:\n\t\tprint('NO')\n\t\tcontinue\n\tdp_mn = list(accumulate(a[0]))\n\tfor i in range(1, n):\n\t\tfor j in range(m):\n\t\t\tif j > 0:\n\t\t\t\tdp_mn[j] = min(dp_mn[j - 1], dp_mn[j])\n\t\t\tdp_mn[j] += a[i][j]\n\tdp_mx = list(accumulate(a[0]))\n\tfor i in range(1, n):\n\t\tfor j in range(m):\n\t\t\tif j > 0:\n\t\t\t\tdp_mx[j] = max(dp_mx[j - 1], dp_mx[j])\n\t\t\tdp_mx[j] += a[i][j]\n\tif dp_mn[-1] <= 0 and dp_mx[-1] >= 0:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "t = int(input())\nfor _ in range(t):\n\t(n, m) = map(int, input().split(' '))\n\tboard = []\n\tminBoard = []\n\tmaxBoard = []\n\tfor i in range(n):\n\t\trow = list(map(int, input().split(' ')))\n\t\tminRow = [0 for _ in range(m)]\n\t\tmaxRow = [0 for _ in range(m)]\n\t\tboard.append(row)\n\t\tminBoard.append(minRow)\n\t\tmaxBoard.append(maxRow)\n\tif (m + n) % 2 == 0:\n\t\tprint('NO')\n\telse:\n\t\tminBoard[0][0] = board[0][0]\n\t\tmaxBoard[0][0] = board[0][0]\n\t\tfor i in range(1, n):\n\t\t\tminBoard[i][0] = board[i][0] + minBoard[i - 1][0]\n\t\t\tmaxBoard[i][0] = board[i][0] + maxBoard[i - 1][0]\n\t\tfor i in range(1, m):\n\t\t\tminBoard[0][i] = board[0][i] + minBoard[0][i - 1]\n\t\t\tmaxBoard[0][i] = board[0][i] + maxBoard[0][i - 1]\n\t\tfor i in range(1, n):\n\t\t\tfor j in range(1, m):\n\t\t\t\tminBoard[i][j] = board[i][j] + min(minBoard[i - 1][j], minBoard[i][j - 1])\n\t\t\t\tmaxBoard[i][j] = board[i][j] + max(maxBoard[i - 1][j], maxBoard[i][j - 1])\n\t\tif minBoard[n - 1][m - 1] <= 0 <= maxBoard[n - 1][m - 1]:\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n",
        "t = int(input())\nfor i in range(t):\n\t(n, m) = map(int, input().split())\n\ta = []\n\tfor i in range(n):\n\t\tz = list(map(int, input().split()))\n\t\ta.append(z)\n\tmn = [[0 for i in range(m)] for j in range(n)]\n\tmx = [[0 for i in range(m)] for j in range(n)]\n\tmn[0][0] = mx[0][0] = a[0][0]\n\tfor i in range(n):\n\t\tfor j in range(m):\n\t\t\tif i > 0 and j > 0:\n\t\t\t\tmn[i][j] = min(mn[i - 1][j], mn[i][j - 1]) + a[i][j]\n\t\t\t\tmx[i][j] = max(mx[i - 1][j], mx[i][j - 1]) + a[i][j]\n\t\t\telif i > 0:\n\t\t\t\tmn[i][j] = mn[i - 1][j] + a[i][j]\n\t\t\t\tmx[i][j] = mx[i - 1][j] + a[i][j]\n\t\t\telif j > 0:\n\t\t\t\tmn[i][j] = mn[i][j - 1] + a[i][j]\n\t\t\t\tmx[i][j] = mx[i][j - 1] + a[i][j]\n\tif (m + n) % 2 == 1 and mn[n - 1][m - 1] <= 0 and (mx[n - 1][m - 1] >= 0):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "for _ in range(int(input())):\n\t(n, m) = list(map(int, input().split()))\n\tl = []\n\tfor x in range(n):\n\t\tl.append(list(map(int, input().split())))\n\tif False:\n\t\tprint('YES')\n\telse:\n\t\tdpmin = []\n\t\tdpmax = []\n\t\tmn = []\n\t\tmx = []\n\t\tfor i in range(0, n):\n\t\t\tfor j in range(0, m):\n\t\t\t\tmn.append(1000)\n\t\t\t\tmx.append(-1000)\n\t\t\tdpmin.append(mn)\n\t\t\tdpmax.append(mx)\n\t\t\tmn = []\n\t\t\tmx = []\n\t\tdpmin[0][0] = l[0][0]\n\t\tdpmax[0][0] = l[0][0]\n\t\tfor x in range(1, m):\n\t\t\tdpmin[0][x] = l[0][x] + dpmin[0][x - 1]\n\t\t\tdpmax[0][x] = l[0][x] + dpmax[0][x - 1]\n\t\tfor x in range(1, n):\n\t\t\tdpmin[x][0] = l[x][0] + dpmin[x - 1][0]\n\t\t\tdpmax[x][0] = l[x][0] + dpmax[x - 1][0]\n\t\tfor x in range(1, n):\n\t\t\tfor y in range(1, m):\n\t\t\t\tdpmin[x][y] = min(dpmin[x - 1][y], dpmin[x][y - 1]) + l[x][y]\n\t\t\t\tdpmax[x][y] = max(dpmax[x - 1][y], dpmax[x][y - 1]) + l[x][y]\n\t\tif dpmax[n - 1][m - 1] % 2 == 1 or dpmin[n - 1][m - 1] > 0 or dpmax[n - 1][m - 1] < 0:\n\t\t\tprint('NO')\n\t\telse:\n\t\t\tprint('YES')\n",
        "for q in range(int(input())):\n\t(n, m) = [int(x) for x in input().split()]\n\tarr = []\n\tfor i in range(n):\n\t\tarr.append([int(x) for x in input().split()])\n\tmn = [[arr[i][j] for j in range(m)] for i in range(n)]\n\tmx = [[arr[i][j] for j in range(m)] for i in range(n)]\n\tfor i in range(1, m):\n\t\tmn[0][i] += mn[0][i - 1]\n\t\tmx[0][i] += mx[0][i - 1]\n\tfor i in range(1, n):\n\t\tmn[i][0] += mn[i - 1][0]\n\t\tmx[i][0] += mx[i - 1][0]\n\tfor i in range(1, n):\n\t\tfor j in range(1, m):\n\t\t\tmn[i][j] = min(mn[i - 1][j], mn[i][j - 1]) + arr[i][j]\n\t\t\tmx[i][j] = max(mx[i - 1][j], mx[i][j - 1]) + arr[i][j]\n\tif mn[n - 1][m - 1] <= 0 and mx[n - 1][m - 1] >= 0 and ((m + n - 1) % 2 == 0):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n",
        "from os import error\nimport sys\ninput = sys.stdin.readline\nDEBUG = False\n\ndef inp():\n\treturn int(input())\n\ndef inlt():\n\treturn list(map(int, input().split()))\n\ndef insr():\n\ts = input()\n\treturn list(s[:len(s) - 1])\n\ndef invr():\n\treturn map(int, input().split())\n\ndef solve():\n\t(n, m) = inlt()\n\t(mx, pmx) = ([0] * m, [0] * m)\n\tpmx[0] = 2 ** 1002\n\tfor i in range(n):\n\t\trow = inlt()\n\t\tfor j in range(0, m):\n\t\t\tif j > 0:\n\t\t\t\tif row[j] == 1:\n\t\t\t\t\tmx[j] = pmx[j] * 2 | mx[j - 1] * 2\n\t\t\t\telse:\n\t\t\t\t\tmx[j] = pmx[j] // 2 | mx[j - 1] // 2\n\t\t\telif row[j] == 1:\n\t\t\t\tmx[j] = pmx[j] * 2\n\t\t\telse:\n\t\t\t\tmx[j] = pmx[j] // 2\n\t\tpmx = mx\n\tif pmx[-1] & 2 ** 1002 > 0:\n\t\treturn 'YES'\n\treturn 'NO'\nq = inp()\nfor t in range(q):\n\tans = solve()\n\tprint(ans)\n",
        "n = int(input())\nfor i in range(n):\n\t(ROWS, COLS) = map(int, input().split())\n\tmatrix = []\n\tfor i in range(ROWS):\n\t\tmatrix.append([int(num) for num in input().split()])\n\tif (ROWS + COLS) % 2 == 0:\n\t\tprint('NO')\n\telse:\n\t\tmatrix[0][0] = (matrix[0][0], matrix[0][0])\n\t\tfor col in range(1, COLS):\n\t\t\tminAndMax = matrix[0][col - 1][0] + matrix[0][col]\n\t\t\tmatrix[0][col] = (minAndMax, minAndMax)\n\t\tfor row in range(1, ROWS):\n\t\t\tminAndMax = matrix[row - 1][0][0] + matrix[row][0]\n\t\t\tmatrix[row][0] = (minAndMax, minAndMax)\n\t\tfor row in range(1, ROWS):\n\t\t\tfor col in range(1, COLS):\n\t\t\t\tminn = min(matrix[row - 1][col][0], matrix[row][col - 1][0]) + matrix[row][col]\n\t\t\t\tmaxx = max(matrix[row - 1][col][1], matrix[row][col - 1][1]) + matrix[row][col]\n\t\t\t\tmatrix[row][col] = (minn, maxx)\n\t\tif 0 in range(matrix[-1][-1][0], matrix[-1][-1][1] + 1):\n\t\t\tprint('YES')\n\t\telse:\n\t\t\tprint('NO')\n",
        "def solve(mat):\n\tif (len(mat) + len(mat[0]) - 1) % 2:\n\t\treturn False\n\tdpmin = [[float('INF') for i in range(len(mat[0]))] for j in range(len(mat))]\n\tdpmax = [[-float('INF') for i in range(len(mat[0]))] for j in range(len(mat))]\n\tdpmin[0][0] = dpmax[0][0] = mat[0][0]\n\tfor i in range(1, len(mat)):\n\t\tdpmin[i][0] = dpmax[i][0] = dpmin[i - 1][0] + mat[i][0]\n\tfor i in range(1, len(mat[0])):\n\t\tdpmin[0][i] = dpmax[0][i] = dpmin[0][i - 1] + mat[0][i]\n\tfor i in range(1, len(mat)):\n\t\tfor j in range(1, len(mat[0])):\n\t\t\tdpmin[i][j] = min(dpmin[i - 1][j], dpmin[i][j - 1]) + mat[i][j]\n\t\t\tdpmax[i][j] = max(dpmax[i - 1][j], dpmax[i][j - 1]) + mat[i][j]\n\treturn dpmin[-1][-1] <= 0 <= dpmax[-1][-1]\nt = int(input())\nfor i in range(t):\n\t(n, m) = list(map(int, input().split()))\n\tmat = []\n\tfor i in range(n):\n\t\tmat.append(list(map(int, input().split())))\n\tif solve(mat):\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n"
      ],
      "original_code": null
    },
    "status": "success",
    "code": "def solve():\n    import sys\n    input_data = sys.stdin.read().split()\n    if not input_data:\n        return\n    t = int(input_data[0])\n    pos = 1\n    results = []\n    for _ in range(t):\n        n = int(input_data[pos])\n        m = int(input_data[pos + 1])\n        pos += 2\n        # Build the grid\n        grid = []\n        for i in range(n):\n            # Each value is 1 or -1.\n            row = list(map(int, input_data[pos:pos + m]))\n            pos += m\n            grid.append(row)\n        # A quick necessary condition:\n        # Any valid path from (1,1) to (n,m) uses n+m-1 cells.\n        # Since each grid cell is either 1 or -1, the sum over an odd number of cells is odd.\n        # Therefore, to get a sum of 0 (which is even), we need n+m-1 to be even, i.e. n+m must be odd.\n        if (n + m) % 2 == 0:\n            results.append(\"NO\")\n            continue\n\n        # We'll use dynamic programming:\n        # dp[i][j] is a tuple (min_sum, max_sum) of all reachable sums from (0,0) to (i,j)\n        # Only moves allowed: right and down.\n        dp = [[None] * m for _ in range(n)]\n        dp[0][0] = (grid[0][0], grid[0][0])\n\n        for i in range(n):\n            for j in range(m):\n                if dp[i][j] is None:\n                    continue\n                curr_min, curr_max = dp[i][j]\n                # Move right\n                if j + 1 < m:\n                    new_val = grid[i][j + 1]\n                    candidate_min = curr_min + new_val\n                    candidate_max = curr_max + new_val\n                    if dp[i][j + 1] is None:\n                        dp[i][j + 1] = (candidate_min, candidate_max)\n                    else:\n                        prev_min, prev_max = dp[i][j + 1]\n                        dp[i][j + 1] = (min(prev_min, candidate_min), max(prev_max, candidate_max))\n                # Move down\n                if i + 1 < n:\n                    new_val = grid[i + 1][j]\n                    candidate_min = curr_min + new_val\n                    candidate_max = curr_max + new_val\n                    if dp[i + 1][j] is None:\n                        dp[i + 1][j] = (candidate_min, candidate_max)\n                    else:\n                        prev_min, prev_max = dp[i + 1][j]\n                        dp[i + 1][j] = (min(prev_min, candidate_min), max(prev_max, candidate_max))\n\n        # At the bottom-right cell, check if 0 lies between min and max.\n        if dp[n - 1][m - 1] is None:\n            results.append(\"NO\")\n        else:\n            min_sum, max_sum = dp[n - 1][m - 1]\n            if min_sum <= 0 <= max_sum:\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n    sys.stdout.write(\"\\n\".join(results))\n\n\nif __name__ == '__main__':\n    solve()",
    "pass_ratio": 0.8,
    "tests_passed": 72,
    "tests_total": 90,
    "iterations": 1,
    "history": [
      {
        "iteration": 1,
        "code": "def solve():\n    import sys\n    input_data = sys.stdin.read().split()\n    if not input_data:\n        return\n    t = int(input_data[0])\n    pos = 1\n    results = []\n    for _ in range(t):\n        n = int(input_data[pos])\n        m = int(input_data[pos + 1])\n        pos += 2\n        # Build the grid\n        grid = []\n        for i in range(n):\n            # Each value is 1 or -1.\n            row = list(map(int, input_data[pos:pos + m]))\n            pos += m\n            grid.append(row)\n        # A quick necessary condition:\n        # Any valid path from (1,1) to (n,m) uses n+m-1 cells.\n        # Since each grid cell is either 1 or -1, the sum over an odd number of cells is odd.\n        # Therefore, to get a sum of 0 (which is even), we need n+m-1 to be even, i.e. n+m must be odd.\n        if (n + m) % 2 == 0:\n            results.append(\"NO\")\n            continue\n\n        # We'll use dynamic programming:\n        # dp[i][j] is a tuple (min_sum, max_sum) of all reachable sums from (0,0) to (i,j)\n        # Only moves allowed: right and down.\n        dp = [[None] * m for _ in range(n)]\n        dp[0][0] = (grid[0][0], grid[0][0])\n\n        for i in range(n):\n            for j in range(m):\n                if dp[i][j] is None:\n                    continue\n                curr_min, curr_max = dp[i][j]\n                # Move right\n                if j + 1 < m:\n                    new_val = grid[i][j + 1]\n                    candidate_min = curr_min + new_val\n                    candidate_max = curr_max + new_val\n                    if dp[i][j + 1] is None:\n                        dp[i][j + 1] = (candidate_min, candidate_max)\n                    else:\n                        prev_min, prev_max = dp[i][j + 1]\n                        dp[i][j + 1] = (min(prev_min, candidate_min), max(prev_max, candidate_max))\n                # Move down\n                if i + 1 < n:\n                    new_val = grid[i + 1][j]\n                    candidate_min = curr_min + new_val\n                    candidate_max = curr_max + new_val\n                    if dp[i + 1][j] is None:\n                        dp[i + 1][j] = (candidate_min, candidate_max)\n                    else:\n                        prev_min, prev_max = dp[i + 1][j]\n                        dp[i + 1][j] = (min(prev_min, candidate_min), max(prev_max, candidate_max))\n\n        # At the bottom-right cell, check if 0 lies between min and max.\n        if dp[n - 1][m - 1] is None:\n            results.append(\"NO\")\n        else:\n            min_sum, max_sum = dp[n - 1][m - 1]\n            if min_sum <= 0 <= max_sum:\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n    sys.stdout.write(\"\\n\".join(results))\n\n\nif __name__ == '__main__':\n    solve()",
        "pass_ratio": 0.8,
        "tests_passed": 72,
        "tests_total": 90
      }
    ],
    "model_type": "openai",
    "model_name": "o3_mini"
  },
  {
    "problem": {
      "problem_id": 2,
      "question": "Read problems statements in Mandarin Chinese, Russian and Vietnamese as well.\n\nLet's consider a rooted binary tree with the following properties:\n\nThe number of nodes and edges in the tree is infinite\nThe tree root is labeled by $1$\nA node labeled by $v$ has two children: $2 \\cdot v$ (the left child of $v$), and $2 \\cdot v + 1$ (the right child of $v$).\n\nHere is an image of the first several layers of such a tree:\n\nLet's consider four operations that you are allowed to apply during the tree traversal:\n\nmove to the left child - move from $v$ to $2 \\cdot v$\nmove to the right child - move from $v$ to $2 \\cdot v + 1$\nmove to the parent as a left child - move from $v$ to $\\frac{v}{2}$ if $v$ is an even integer\nmove to the parent as a right child - move from $v$ to $\\frac{v - 1}{2}$ if $v$ is an odd integer\n\nIt can be proven, that for any pair of nodes $u$ and $v$, there is only one sequence of commands that moves from $u$ to $v$ and visits each node of the tree at most once. Let's call such a sequence of commands a path configuration for a pair of nodes $(u, v)$.\n\nYou are asked to process a series of the following queries: \n\nYou are given three integers $n$, $u$ and $v$ ($1 \u2264 u, v \u2264 n$). Count the pairs of nodes $(w, t)$ ($1 \u2264 w, t \u2264 n$) such that the path configuration for $(w, t)$ is the same with the path configuration for $(u, v)$.\n\n------  Input ------\nThe first line of input contains a single integer $Q$, denoting the number of queries to process.\nEach of the next $Q$ lines contains three space-separated integers $n$, $u$ and $v$ denoting a query.\n\n------  Output ------\nFor each query, print the answer on a separate line.\n\n------  Constraints ------\n$1 \u2264 Q \u2264 2 \\cdot 10^{4}$\n$1 \u2264 u, v \u2264 n \u2264 10^{9}$\n\n----- Sample Input 1 ------ \n3\n\n11 9 11\n\n10 2 2\n\n8 1 8\n----- Sample Output 1 ------ \n2\n\n10\n\n1\n----- explanation 1 ------ \nIn the first query from the example test case, you should count pairs $(5, 7)$ and $(9, 11)$.\n\nIn the second query from the example test case, you should count the following pairs: $(1, 1)$, $(2, 2)$, $(3, 3)$, $(4, 4)$, $(5, 5)$, $(6, 6)$, $(7, 7)$, $(8, 8)$, $(9, 9)$ and $(10, 10)$.\n\nIn the third query from the example test case, you should only count a pair $(1, 8)$.",
      "tests": [
        {
          "stdin": "3\n11 9 11\n10 2 2\n8 1 8",
          "stdout": "2\n10\n1"
        },
        {
          "stdin": "3\n 11 9 11\n 10 2 2\n 8 1 8",
          "stdout": "2\n10\n1"
        },
        {
          "stdin": "1\n 1 1 1",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n 5 3 2\n 2 2 2",
          "stdout": "2\n2\n"
        },
        {
          "stdin": "10\n 1000000 500000 1000000\n 500000 250000 500000\n 250000 125000 250000\n 125000 62500 125000\n 62500 31250 62500\n 31250 15624 31250\n 15622 7810 15622\n 7810 3905 7810\n 3905 1952 3905\n 1952 976 1952",
          "stdout": "500000\n250000\n125000\n62500\n31250\n7812\n3905\n3905\n1952\n976\n"
        },
        {
          "stdin": "5\n 10 5 10\n 8 2 8\n 10 6 3\n 9 5 2\n 7 1 7",
          "stdout": "5\n2\n5\n4\n1\n"
        },
        {
          "stdin": "3\n 999999999 999999998 999999999\n 500000000 250000000 500000000\n 1000000000 999999999 1000000000",
          "stdout": "499999999\n250000000\n976562\n"
        },
        {
          "stdin": "1\n 1000000000 999999999 1000000000",
          "stdout": "976562\n"
        },
        {
          "stdin": "5\n 17 16 1\n 14 2 3\n 12 1 11\n 19 10 5\n 20 15 4",
          "stdout": "1\n6\n1\n9\n1\n"
        },
        {
          "stdin": "7\n 9 5 2\n 10 5 4\n 812 456 165\n 653 134 100\n 1095 789 321\n 1507 872 267\n 1563 765 654",
          "stdout": "4\n4\n2\n5\n1\n2\n11\n"
        },
        {
          "stdin": "4\n1000000000 500000000 500000001\n2000000000 1000000000 1000000001\n3000000000 1500000000 1500000001\n4000000000 2000000000 2000000001\n",
          "stdout": "499999999\n999999999\n1499999999\n1999999999\n"
        },
        {
          "stdin": "5\n1 1 1\n5 5 5\n10 10 10\n10000 10000 10000\n999999999 999999999 999999999\n",
          "stdout": "1\n5\n10\n10000\n999999999\n"
        },
        {
          "stdin": "2\n1 1 1\n2 2 2\n",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "3\n1 1 1\n1 1 2\n1 1 3\n",
          "stdout": "1\n0\n0\n"
        },
        {
          "stdin": "4\n1 1 1\n1 1 3\n100 100 100\n100 100 250\n",
          "stdout": "1\n0\n100\n0\n"
        },
        {
          "stdin": "5\n1 1 1\n1 2 3\n500000000 500000000 500000001\n500000000 500000001 500000002\n1 1 10\n",
          "stdout": "1\n0\n249999999\n124999999\n-1\n"
        },
        {
          "stdin": "1\n10 3 4\n",
          "stdout": "2\n"
        },
        {
          "stdin": "2\n9999999 4 7\n9999999 8 15\n",
          "stdout": "2499999\n1249999\n"
        },
        {
          "stdin": "5\n50 1 5\n50 2 4\n50 3 6\n50 8 12\n50 11 17\n",
          "stdout": "12\n25\n25\n5\n6\n"
        },
        {
          "stdin": "1\n1000000000 1 1000000000\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n200 1 200\n150 2 3\n100 10 50\n",
          "stdout": "1\n74\n2\n"
        },
        {
          "stdin": "3\n20 18 1\n20 1 19\n20 2 4\n",
          "stdout": "1\n1\n10\n"
        },
        {
          "stdin": "1\n1000 500 750\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n30 1 30\n30 1 1\n",
          "stdout": "1\n30\n"
        },
        {
          "stdin": "5\n10000 1 2\n10000 2 2\n10000 9999 10000\n10000 5000 5999\n10000 4000 8000\n",
          "stdout": "5000\n10000\n312\n3\n5000\n"
        },
        {
          "stdin": "3\n500000000 1 500000000\n50000000 250000000 500000000\n5000000 1111111 2222222\n",
          "stdout": "1\n25000000\n2500000\n"
        },
        {
          "stdin": "4\n40000 1 40000\n40000 20000 40000\n40000 19999 40000\n40000 20001 40000\n",
          "stdout": "1\n20000\n312\n10000\n"
        },
        {
          "stdin": "2\n50 1 50\n50 25 50\n",
          "stdout": "1\n25\n"
        },
        {
          "stdin": "5\n7 1 4\n7 2 6\n7 3 4\n7 5 6\n7 1 7\n",
          "stdout": "1\n1\n1\n1\n1\n"
        },
        {
          "stdin": "1\n11 9 11",
          "stdout": "2\n"
        },
        {
          "stdin": "1\n10 2 2",
          "stdout": "10\n"
        },
        {
          "stdin": "1\n8 1 8",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n10 2 2\n12 4 6\n9 5 7\n6 1 2\n7 3 5",
          "stdout": "10\n2\n1\n3\n1\n"
        },
        {
          "stdin": "4\n5 2 3\n8 1 8\n11 9 11\n10 2 2",
          "stdout": "2\n1\n2\n10\n"
        },
        {
          "stdin": "2\n11 9 11\n10 2 2",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "1\n9 9 9",
          "stdout": "9\n"
        },
        {
          "stdin": "3\n11 9 11\n10 2 2\n9 9 9",
          "stdout": "2\n10\n9\n"
        },
        {
          "stdin": "2\n8 1 8\n9 9 9",
          "stdout": "1\n9\n"
        },
        {
          "stdin": "4\n10 2 2\n8 1 8\n9 9 9\n8 1 8",
          "stdout": "10\n1\n9\n1\n"
        },
        {
          "stdin": "5\n11 9 11\n10 2 2\n9 9 9\n8 1 8\n9 9 9",
          "stdout": "2\n10\n9\n1\n9\n"
        },
        {
          "stdin": "3\n8 1 8\n9 9 9\n10 2 2",
          "stdout": "1\n9\n10\n"
        },
        {
          "stdin": "2\n11 9 11\n8 1 8",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "5\n11 9 11\n10 2 2\n8 1 8\n6 3 4\n7 1 7\n",
          "stdout": "2\n10\n1\n1\n1\n"
        },
        {
          "stdin": "1\n15 5 10\n",
          "stdout": "7\n"
        },
        {
          "stdin": "2\n20 10 15\n25 5 20\n",
          "stdout": "1\n6\n"
        },
        {
          "stdin": "4\n100 50 75\n200 100 150\n300 150 225\n400 200 300\n",
          "stdout": "1\n1\n1\n1\n"
        },
        {
          "stdin": "3\n512 256 384\n1024 512 768\n2048 1024 1536\n",
          "stdout": "1\n1\n1\n"
        },
        {
          "stdin": "5\n999999999 500000000 750000000\n999999999 250000000 500000000\n999999999 125000000 250000000\n999999999 62500000 125000000\n999999999 31250000 62500000\n",
          "stdout": "1\n499999999\n499999999\n499999999\n499999999\n"
        },
        {
          "stdin": "1\n1000000000 500000000 750000000\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n1000000 500000 750000\n10000000 5000000 7500000\n",
          "stdout": "1\n1\n"
        },
        {
          "stdin": "4\n5000000 2500000 3750000\n10000000 5000000 7500000\n15000000 7500000 11250000\n20000000 10000000 15000000\n",
          "stdout": "1\n1\n1\n1\n"
        },
        {
          "stdin": "3\n30000000 15000000 22500000\n40000000 20000000 30000000\n50000000 25000000 37500000\n",
          "stdout": "1\n1\n2\n"
        },
        {
          "stdin": "5\n60000000 30000000 45000000\n70000000 35000000 52500000\n80000000 40000000 60000000\n90000000 45000000 67500000\n100000000 50000000 75000000\n",
          "stdout": "1\n1\n1\n2\n2\n"
        },
        {
          "stdin": "1\n1100000000 550000000 825000000\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 2 2\n8 1 8",
          "stdout": "2\n10\n1"
        },
        {
          "stdin": "5\n15 8 9\n10 5 4\n18 2 3\n21 11 15\n9 1 5",
          "stdout": "7\n4\n8\n1\n2\n"
        },
        {
          "stdin": "4\n1000 500 1000\n100000 15000 75000\n99999 99999 88888\n20 10 5",
          "stdout": "500\n1\n1\n10\n"
        },
        {
          "stdin": "6\n20 2 4\n16 4 8\n30 10 12\n25 11 12\n12 1 12\n14 7 7",
          "stdout": "10\n8\n3\n2\n1\n14\n"
        },
        {
          "stdin": "7\n10 3 1\n16 6 2\n20 6 1\n24 6 3\n55 10 6\n45 9 4\n15 7 3",
          "stdout": "4\n3\n4\n12\n6\n22\n7\n"
        },
        {
          "stdin": "1\n10 1 10",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n20 5 20\n15 3 15\n30 7 30\n35 17 18\n40 8 8",
          "stdout": "5\n3\n7\n8\n40\n"
        },
        {
          "stdin": "1\n1000000000 500000000 500000001",
          "stdout": "499999999\n"
        },
        {
          "stdin": "2\n5 1 5\n7 1 7",
          "stdout": "1\n1\n"
        },
        {
          "stdin": "4\n16 1 16\n11 1 11\n18 2 9\n6 1 6",
          "stdout": "1\n1\n4\n1\n"
        },
        {
          "stdin": "2\n500000000 1 500000000\n500000000 250000000 250000001",
          "stdout": "1\n249999999\n"
        },
        {
          "stdin": "1\n999999999 1 999999999",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n1000 1 1000\n10000 1 10000\n100000 1 100000",
          "stdout": "1\n1\n1\n"
        },
        {
          "stdin": "4\n125 17 18\n13 1 13\n5 1 5\n7 1 7",
          "stdout": "30\n1\n1\n1\n"
        },
        {
          "stdin": "1\n1000000000 1 1000000000",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n10000 1 10000",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n1000000000 1 2",
          "stdout": "500000000\n"
        },
        {
          "stdin": "1\n20 10 11",
          "stdout": "9\n"
        },
        {
          "stdin": "3\n11 9 11\n10 2 2\n8 1 8\n",
          "stdout": "2\n10\n1"
        },
        {
          "stdin": "1\n9 4 5\n",
          "stdout": "4\n"
        },
        {
          "stdin": "2\n15 7 8\n10 1 2\n",
          "stdout": "1\n5\n"
        },
        {
          "stdin": "4\n20 10 20\n30 15 30\n40 20 40\n50 25 50\n",
          "stdout": "10\n15\n20\n25\n"
        },
        {
          "stdin": "1\n1000000000 500000000 1000000000\n",
          "stdout": "500000000\n"
        },
        {
          "stdin": "3\n10 5 6\n15 8 9\n20 10 11\n",
          "stdout": "2\n7\n9\n"
        },
        {
          "stdin": "3\n25 13 14\n35 19 20\n45 24 25\n",
          "stdout": "5\n3\n22\n"
        },
        {
          "stdin": "5\n99 50 51\n88 45 46\n77 40 41\n66 35 36\n55 30 31\n",
          "stdout": "49\n21\n38\n7\n27\n"
        },
        {
          "stdin": "1\n10 5 5\n",
          "stdout": "10\n"
        },
        {
          "stdin": "2\n20 10 15\n30 15 20\n",
          "stdout": "1\n1\n"
        },
        {
          "stdin": "2\n100 50 51\n200 100 101\n",
          "stdout": "49\n99\n"
        },
        {
          "stdin": "2\n200000000 100000000 200000000\n400000000 200000000 400000000\n",
          "stdout": "100000000\n200000000\n"
        },
        {
          "stdin": "4\n300000000 150000000 300000000\n500000000 250000000 500000000\n600000000 300000000 600000000\n700000000 350000000 700000000\n",
          "stdout": "150000000\n250000000\n300000000\n350000000\n"
        },
        {
          "stdin": "3\n1000000000 500000000 600000000\n800000000 400000000 450000000\n1500000000 750000000 800000000\n",
          "stdout": "1\n2\n21\n"
        },
        {
          "stdin": "5\n15 7 15\n10 2 2\n8 1 8\n7 3 7\n14 7 14",
          "stdout": "7\n10\n1\n3\n7\n"
        },
        {
          "stdin": "4\n12 3 12\n15 5 5\n18 2 18\n20 10 20",
          "stdout": "3\n15\n2\n10\n"
        },
        {
          "stdin": "3\n11 1 11\n9 9 9\n7 1 7",
          "stdout": "1\n9\n1\n"
        },
        {
          "stdin": "2\n20 10 10\n15 5 15",
          "stdout": "20\n1\n"
        },
        {
          "stdin": "5\n50 25 50\n100 2 100\n200 1 200\n75 35 35\n80 40 80",
          "stdout": "25\n1\n1\n75\n40\n"
        },
        {
          "stdin": "1\n30 10 30",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n9 2 2\n8 1 8\n14 7 7",
          "stdout": "9\n1\n14\n"
        },
        {
          "stdin": "2\n25 10 10\n15 7 7",
          "stdout": "25\n15\n"
        },
        {
          "stdin": "2\n10 5 10\n15 15 15",
          "stdout": "5\n15\n"
        },
        {
          "stdin": "1\n15 1 15",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n11 9 11\n10 2 2\n4 1 4\n7 2 7",
          "stdout": "2\n10\n1\n1\n"
        },
        {
          "stdin": "2\n20 10 10\n15 7 15",
          "stdout": "20\n7\n"
        },
        {
          "stdin": "3\n50 50 50\n100 1 100\n200 200 200",
          "stdout": "50\n1\n200\n"
        },
        {
          "stdin": "4\n15 8 10\n12 3 6\n7 2 5\n25 20 22\n",
          "stdout": "3\n6\n3\n5\n"
        },
        {
          "stdin": "8\n20 4 14\n18 6 12\n22 7 21\n11 2 8\n101 55 77\n200 100 150\n27 13 25\n35 18 33\n",
          "stdout": "1\n9\n1\n2\n1\n1\n6\n4\n"
        },
        {
          "stdin": "5\n55 23 50\n45 20 40\n78 35 70\n88 42 84\n100 47 95\n",
          "stdout": "1\n22\n39\n44\n49\n"
        },
        {
          "stdin": "3\n100 37 73\n150 56 112\n200 75 150\n",
          "stdout": "24\n75\n100\n"
        },
        {
          "stdin": "8\n11 6 10\n12 7 11\n13 8 12\n14 9 13\n20 10 20\n50 25 50\n75 37 75\n100 50 100\n",
          "stdout": "1\n1\n1\n1\n10\n25\n37\n50\n"
        },
        {
          "stdin": "10\n10 1 10\n20 2 20\n30 3 30\n40 4 40\n50 5 50\n60 6 60\n70 7 70\n80 8 80\n90 9 90\n100 10 100\n",
          "stdout": "1\n2\n3\n2\n1\n3\n1\n2\n2\n1\n"
        },
        {
          "stdin": "5\n17 3 15\n26 4 24\n36 6 34\n45 7 43\n83 10 80\n",
          "stdout": "3\n1\n1\n1\n10\n"
        },
        {
          "stdin": "1\n10 3 3",
          "stdout": "10\n"
        },
        {
          "stdin": "2\n12 3 5\n10 6 8",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "5\n100 20 50\n23 7 11\n300 150 250\n99 33 88\n1000 500 900",
          "stdout": "2\n2\n1\n2\n7\n"
        },
        {
          "stdin": "4\n1000000000 500000000 600000000\n999999999 333333333 444444444\n888888888 222222222 333333333\n777777777 111111111 222222222",
          "stdout": "1\n3\n3\n388888888\n"
        },
        {
          "stdin": "3\n15 7 11\n14 6 12\n13 5 13",
          "stdout": "1\n7\n1\n"
        },
        {
          "stdin": "2\n17 9 15\n19 9 17",
          "stdout": "1\n4\n"
        },
        {
          "stdin": "5\n20 7 19\n19 6 18\n18 5 17\n17 4 16\n16 3 15",
          "stdout": "1\n1\n2\n4\n3\n"
        },
        {
          "stdin": "3\n10 5 5\n9 4 4\n8 3 3",
          "stdout": "10\n9\n8\n"
        },
        {
          "stdin": "1\n10 4 7",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n15 3 9\n17 7 15\n12 2 8",
          "stdout": "1\n8\n3\n"
        },
        {
          "stdin": "2\n18 6 12\n20 5 15",
          "stdout": "9\n1\n"
        },
        {
          "stdin": "4\n25 6 18\n30 12 24\n35 5 20\n40 8 16",
          "stdout": "1\n15\n8\n20\n"
        },
        {
          "stdin": "2\n50 10 20\n60 12 24",
          "stdout": "25\n30\n"
        },
        {
          "stdin": "3\n70 14 28\n90 3 15\n99 4 16",
          "stdout": "35\n21\n24\n"
        },
        {
          "stdin": "2\n100 5 10\n100 6 12",
          "stdout": "50\n50\n"
        },
        {
          "stdin": "1\n1000 20 40",
          "stdout": "500\n"
        },
        {
          "stdin": "5\n500 10 20\n600 12 24\n700 14 28\n800 16 32\n900 5 10",
          "stdout": "250\n300\n350\n400\n450\n"
        },
        {
          "stdin": "1\n10000 30 60",
          "stdout": "5000\n"
        },
        {
          "stdin": "2\n20000 40 80\n30000 50 100",
          "stdout": "10000\n15000\n"
        },
        {
          "stdin": "4\n40000 60 120\n50000 70 140\n60000 15 30\n70000 20 40",
          "stdout": "20000\n25000\n30000\n35000\n"
        },
        {
          "stdin": "1\n80000 25 50",
          "stdout": "40000\n"
        },
        {
          "stdin": "3\n100000 3 5\n100000 5 7\n100000 7 9",
          "stdout": "24999\n24999\n12499\n"
        },
        {
          "stdin": "2\n100000 10 12\n100000 12 14",
          "stdout": "12499\n24999\n"
        },
        {
          "stdin": "1\n1000000 100 200",
          "stdout": "500000\n"
        },
        {
          "stdin": "5\n2000000 200 400\n3000000 300 600\n4000000 400 800\n5000000 500 1000\n6000000 600 1200",
          "stdout": "1000000\n1500000\n2000000\n2500000\n3000000\n"
        },
        {
          "stdin": "1\n7 1 2",
          "stdout": "3\n"
        },
        {
          "stdin": "2\n5 2 3\n15 8 7",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "4\n20 4 5\n30 15 20\n40 20 25\n50 25 30",
          "stdout": "9\n1\n1\n5\n"
        },
        {
          "stdin": "5\n10 5 6\n10 6 7\n10 7 8\n10 8 9\n10 9 10",
          "stdout": "2\n4\n1\n4\n2\n"
        },
        {
          "stdin": "1\n8 2 3",
          "stdout": "3\n"
        },
        {
          "stdin": "3\n11 7 8\n10 7 8\n8 5 9",
          "stdout": "1\n1\n1\n"
        },
        {
          "stdin": "2\n4 3 1\n5 2 4\n",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "3\n20 10 10\n15 7 9\n12 6 8\n",
          "stdout": "20\n1\n1\n"
        },
        {
          "stdin": "4\n7 1 7\n6 3 2\n5 5 3\n9 8 4\n",
          "stdout": "1\n2\n1\n4\n"
        },
        {
          "stdin": "1\n25 12 8\n",
          "stdout": "2\n"
        },
        {
          "stdin": "2\n15 7 5\n20 10 5\n",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "1\n1 1 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n50 35 40\n40 30 35\n",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "3\n30 15 3\n10 5 2\n20 10 4\n",
          "stdout": "6\n4\n4\n"
        },
        {
          "stdin": "4\n100 50 25\n200 100 50\n300 150 75\n400 200 100\n",
          "stdout": "50\n100\n150\n200\n"
        },
        {
          "stdin": "3\n1000000000 500000000 750000000\n1000000000 250000000 750000000\n1000000000 500000000 250000000",
          "stdout": "1\n1\n500000000\n"
        },
        {
          "stdin": "5\n10 1 10\n10 1 9\n10 1 8\n10 1 7\n10 1 6",
          "stdout": "1\n1\n1\n1\n2\n"
        },
        {
          "stdin": "4\n20 1 20\n20 2 19\n20 3 18\n20 4 17",
          "stdout": "1\n2\n1\n4\n"
        },
        {
          "stdin": "2\n1000000000 1 500000000\n1000000000 500000000 1",
          "stdout": "2\n2\n"
        },
        {
          "stdin": "3\n15 1 15\n15 2 14\n15 3 13",
          "stdout": "1\n1\n3\n"
        },
        {
          "stdin": "5\n30 1 30\n30 2 29\n30 3 28\n30 4 27\n30 5 26",
          "stdout": "1\n1\n3\n1\n1\n"
        },
        {
          "stdin": "6\n1000000000 1 2\n1000000000 2 3\n1000000000 3 4\n1000000000 4 5\n1000000000 5 6\n1000000000 6 7",
          "stdout": "500000000\n499999999\n250000000\n499999999\n249999999\n499999999\n"
        },
        {
          "stdin": "7\n14 1 14\n14 2 13\n14 3 12\n14 4 11\n14 5 10\n14 6 9\n14 7 8",
          "stdout": "1\n1\n3\n2\n7\n1\n1\n"
        },
        {
          "stdin": "1\n20 1 1",
          "stdout": "20\n"
        },
        {
          "stdin": "2\n20 1 10\n20 1 5",
          "stdout": "2\n4\n"
        },
        {
          "stdin": "3\n75 1 2\n75 2 3\n75 3 4",
          "stdout": "37\n37\n18\n"
        },
        {
          "stdin": "4\n40 1 40\n40 2 39\n40 3 38\n40 4 37",
          "stdout": "1\n2\n1\n4\n"
        },
        {
          "stdin": "5\n50 1 10\n50 10 20\n50 20 30\n50 30 40\n50 40 50",
          "stdout": "6\n25\n2\n1\n1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 4 2\n8 1 8",
          "stdout": "2\n5\n1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 4 2\n8 1 10",
          "stdout": "2\n5\n0\n"
        },
        {
          "stdin": "3\n9 9 11\n10 4 2\n6 1 10",
          "stdout": "1\n5\n0\n"
        },
        {
          "stdin": "3\n9 15 11\n10 4 2\n6 1 10",
          "stdout": "0\n5\n0\n"
        },
        {
          "stdin": "3\n9 15 11\n10 4 2\n10 1 10",
          "stdout": "0\n5\n1\n"
        },
        {
          "stdin": "3\n9 15 9\n10 4 2\n10 1 3",
          "stdout": "0\n5\n4\n"
        },
        {
          "stdin": "3\n9 15 9\n10 2 2\n10 1 3",
          "stdout": "0\n10\n4\n"
        },
        {
          "stdin": "3\n9 15 9\n10 2 0\n10 1 3",
          "stdout": "0\n2\n4\n"
        },
        {
          "stdin": "3\n9 15 9\n10 2 0\n10 2 0",
          "stdout": "0\n2\n2\n"
        },
        {
          "stdin": "3\n9 15 9\n5 2 0\n11 2 0",
          "stdout": "0\n0\n2\n"
        },
        {
          "stdin": "3\n9 11 9\n5 2 0\n11 2 0",
          "stdout": "1\n0\n2\n"
        },
        {
          "stdin": "3\n9 11 9\n5 2 0\n1 2 0",
          "stdout": "1\n0\n-1\n"
        },
        {
          "stdin": "3\n9 3 18\n5 2 0\n1 2 0",
          "stdout": "0\n0\n-1\n"
        },
        {
          "stdin": "3\n3 3 16\n5 2 0\n1 0 0",
          "stdout": "0\n0\n1\n"
        },
        {
          "stdin": "3\n11 9 11\n7 2 2\n8 1 8",
          "stdout": "2\n7\n1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 3 2\n8 1 8",
          "stdout": "2\n4\n1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 0 2\n6 1 10",
          "stdout": "2\n2\n0\n"
        },
        {
          "stdin": "3\n9 9 4\n10 4 2\n6 1 10",
          "stdout": "4\n5\n0\n"
        },
        {
          "stdin": "3\n9 15 9\n10 8 2\n10 1 10",
          "stdout": "0\n2\n1\n"
        },
        {
          "stdin": "3\n9 29 9\n10 4 2\n10 1 10",
          "stdout": "-1\n5\n1\n"
        },
        {
          "stdin": "3\n9 18 9\n10 2 2\n10 1 3",
          "stdout": "4\n10\n4\n"
        },
        {
          "stdin": "3\n9 15 9\n10 0 0\n10 2 0",
          "stdout": "0\n10\n2\n"
        },
        {
          "stdin": "3\n9 11 9\n5 1 0\n11 2 0",
          "stdout": "1\n2\n2\n"
        },
        {
          "stdin": "3\n9 4 9\n5 2 0\n1 2 0",
          "stdout": "4\n0\n-1\n"
        },
        {
          "stdin": "3\n9 3 16\n5 2 0\n1 2 1",
          "stdout": "0\n0\n0\n"
        },
        {
          "stdin": "3\n11 9 11\n7 2 2\n8 1 11",
          "stdout": "2\n7\n0\n"
        },
        {
          "stdin": "3\n11 9 11\n10 3 0\n8 1 8",
          "stdout": "2\n1\n1\n"
        },
        {
          "stdin": "3\n11 18 11\n10 4 2\n8 0 10",
          "stdout": "1\n5\n-1\n"
        },
        {
          "stdin": "3\n9 9 4\n10 4 2\n6 0 10",
          "stdout": "4\n5\n-1\n"
        },
        {
          "stdin": "3\n9 15 9\n10 4 2\n6 0 10",
          "stdout": "0\n5\n-1\n"
        },
        {
          "stdin": "3\n9 15 9\n19 8 2\n10 1 10",
          "stdout": "0\n4\n1\n"
        },
        {
          "stdin": "3\n9 29 9\n10 4 2\n10 2 10",
          "stdout": "-1\n5\n2\n"
        },
        {
          "stdin": "3\n9 26 9\n10 2 2\n10 1 3",
          "stdout": "-1\n10\n4\n"
        },
        {
          "stdin": "3\n14 15 9\n10 2 0\n10 2 2",
          "stdout": "0\n2\n10\n"
        },
        {
          "stdin": "3\n9 24 9\n10 2 0\n16 2 0",
          "stdout": "0\n2\n3\n"
        },
        {
          "stdin": "3\n9 11 9\n5 1 0\n22 2 0",
          "stdout": "1\n2\n5\n"
        },
        {
          "stdin": "3\n9 3 9\n4 2 0\n1 2 1",
          "stdout": "1\n0\n0\n"
        },
        {
          "stdin": "3\n3 0 11\n5 2 0\n1 2 0",
          "stdout": "-1\n0\n-1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 3 0\n8 1 12",
          "stdout": "2\n1\n0\n"
        },
        {
          "stdin": "3\n11 9 2\n10 0 0\n6 1 10",
          "stdout": "2\n10\n0\n"
        },
        {
          "stdin": "3\n9 9 4\n10 6 2\n6 0 10",
          "stdout": "4\n2\n-1\n"
        },
        {
          "stdin": "3\n9 15 15\n10 4 2\n6 0 10",
          "stdout": "9\n5\n-1\n"
        },
        {
          "stdin": "3\n4 15 9\n19 8 2\n10 1 10",
          "stdout": "-1\n4\n1\n"
        },
        {
          "stdin": "3\n9 10 16\n10 4 2\n10 1 3",
          "stdout": "1\n5\n4\n"
        },
        {
          "stdin": "3\n9 24 9\n14 2 0\n16 2 0",
          "stdout": "0\n3\n3\n"
        },
        {
          "stdin": "3\n9 11 9\n3 1 0\n22 2 0",
          "stdout": "1\n1\n5\n"
        },
        {
          "stdin": "3\n9 3 9\n4 2 0\n1 2 2",
          "stdout": "1\n0\n1\n"
        },
        {
          "stdin": "3\n9 3 27\n9 2 0\n1 2 0",
          "stdout": "0\n1\n-1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 2 2\n8 2 11",
          "stdout": "2\n10\n1\n"
        },
        {
          "stdin": "3\n11 9 11\n10 1 0\n8 1 12",
          "stdout": "2\n4\n0\n"
        },
        {
          "stdin": "3\n19 9 2\n10 0 0\n6 1 10",
          "stdout": "4\n10\n0\n"
        },
        {
          "stdin": "3\n9 15 15\n3 4 2\n6 0 10",
          "stdout": "9\n1\n-1\n"
        },
        {
          "stdin": "3\n9 44 9\n20 2 2\n10 1 3",
          "stdout": "-1\n20\n4\n"
        },
        {
          "stdin": "3\n14 15 9\n20 2 0\n10 2 0",
          "stdout": "0\n4\n2\n"
        },
        {
          "stdin": "3\n6 24 9\n14 2 0\n16 2 0",
          "stdout": "-1\n3\n3\n"
        },
        {
          "stdin": "3\n9 15 12\n5 1 1\n11 2 0",
          "stdout": "1\n5\n2\n"
        },
        {
          "stdin": "3\n9 11 9\n3 1 0\n22 4 0",
          "stdout": "1\n1\n2\n"
        },
        {
          "stdin": "3\n2 3 27\n9 2 0\n1 2 0",
          "stdout": "-1\n1\n-1\n"
        },
        {
          "stdin": "3\n2 3 3\n5 2 0\n1 0 0",
          "stdout": "2\n0\n1\n"
        },
        {
          "stdin": "3\n18 9 11\n10 2 2\n8 2 11",
          "stdout": "3\n10\n1\n"
        },
        {
          "stdin": "3\n16 9 11\n10 1 0\n8 1 12",
          "stdout": "3\n4\n0\n"
        },
        {
          "stdin": "3\n19 9 2\n10 0 0\n6 2 10",
          "stdout": "4\n10\n1\n"
        },
        {
          "stdin": "3\n9 9 4\n10 6 0\n12 0 10",
          "stdout": "4\n0\n0\n"
        },
        {
          "stdin": "3\n9 15 15\n3 7 2\n6 0 10",
          "stdout": "9\n0\n-1\n"
        },
        {
          "stdin": "3\n4 22 9\n19 8 2\n5 1 10",
          "stdout": "-1\n4\n0\n"
        },
        {
          "stdin": "3\n10 29 9\n10 4 2\n10 4 14",
          "stdout": "-1\n5\n0\n"
        },
        {
          "stdin": "3\n9 10 8\n10 4 2\n10 0 3",
          "stdout": "1\n5\n1\n"
        },
        {
          "stdin": "3\n9 44 9\n20 3 2\n10 1 3",
          "stdout": "-1\n9\n4\n"
        },
        {
          "stdin": "3\n14 13 9\n20 2 0\n10 2 0",
          "stdout": "1\n4\n2\n"
        },
        {
          "stdin": "3\n6 24 9\n14 2 0\n8 2 0",
          "stdout": "-1\n3\n1\n"
        },
        {
          "stdin": "3\n27 9 11\n10 1 0\n8 1 12",
          "stdout": "6\n4\n0\n"
        },
        {
          "stdin": "3\n10 29 9\n16 4 2\n10 4 14",
          "stdout": "-1\n8\n0\n"
        },
        {
          "stdin": "3\n9 44 9\n20 3 2\n10 1 4",
          "stdout": "-1\n9\n2\n"
        },
        {
          "stdin": "3\n9 15 12\n5 1 2\n0 2 0",
          "stdout": "1\n2\n-1\n"
        },
        {
          "stdin": "3\n11 11 9\n3 1 0\n22 5 0",
          "stdout": "2\n1\n2\n"
        },
        {
          "stdin": "3\n19 16 0\n10 0 0\n6 2 10",
          "stdout": "0\n10\n1\n"
        },
        {
          "stdin": "3\n10 29 9\n14 4 2\n10 4 14",
          "stdout": "-1\n7\n0\n"
        },
        {
          "stdin": "3\n9 10 8\n10 4 2\n11 1 3",
          "stdout": "1\n5\n5\n"
        },
        {
          "stdin": "3\n17 44 9\n20 3 2\n10 1 4",
          "stdout": "0\n9\n2\n"
        },
        {
          "stdin": "3\n14 13 9\n20 2 0\n10 1 0",
          "stdout": "1\n4\n4\n"
        },
        {
          "stdin": "3\n11 11 9\n3 0 0\n22 5 0",
          "stdout": "2\n3\n2\n"
        },
        {
          "stdin": "3\n1 3 9\n3 0 0\n1 4 2",
          "stdout": "0\n3\n0\n"
        },
        {
          "stdin": "3\n2 2 3\n2 2 1\n1 0 0",
          "stdout": "0\n1\n1\n"
        },
        {
          "stdin": "3\n32 9 2\n10 2 2\n8 2 11",
          "stdout": "7\n10\n1\n"
        },
        {
          "stdin": "3\n9 10 8\n10 4 2\n16 1 3",
          "stdout": "1\n5\n7\n"
        },
        {
          "stdin": "3\n17 44 9\n20 3 2\n10 2 4",
          "stdout": "0\n9\n5\n"
        },
        {
          "stdin": "3\n6 24 9\n19 2 1\n8 3 0",
          "stdout": "-1\n9\n1\n"
        },
        {
          "stdin": "3\n9 15 12\n9 1 2\n0 2 0",
          "stdout": "1\n4\n-1\n"
        },
        {
          "stdin": "3\n1 11 9\n3 0 0\n22 5 0",
          "stdout": "-1\n3\n2\n"
        },
        {
          "stdin": "3\n1 3 9\n3 0 0\n1 7 2",
          "stdout": "0\n3\n-1\n"
        },
        {
          "stdin": "3\n27 5 30\n10 1 0\n8 1 12",
          "stdout": "0\n4\n0\n"
        },
        {
          "stdin": "3\n9 10 8\n10 4 1\n16 1 3",
          "stdout": "1\n2\n7\n"
        },
        {
          "stdin": "3\n17 44 9\n20 3 2\n1 2 4",
          "stdout": "0\n9\n0\n"
        },
        {
          "stdin": "3\n6 24 9\n19 1 1\n8 3 0",
          "stdout": "-1\n19\n1\n"
        },
        {
          "stdin": "3\n32 12 2\n10 2 2\n1 2 11",
          "stdout": "3\n10\n-1\n"
        },
        {
          "stdin": "3\n40 5 30\n10 1 0\n8 1 12",
          "stdout": "1\n4\n0\n"
        },
        {
          "stdin": "3\n17 44 9\n20 3 2\n2 2 4",
          "stdout": "0\n9\n1\n"
        },
        {
          "stdin": "3\n14 3 10\n20 0 0\n10 1 0",
          "stdout": "1\n20\n4\n"
        },
        {
          "stdin": "3\n6 24 9\n19 1 1\n8 1 0",
          "stdout": "-1\n19\n3\n"
        },
        {
          "stdin": "3\n10 29 4\n11 4 2\n10 8 8",
          "stdout": "-1\n5\n10\n"
        },
        {
          "stdin": "3\n11 9 11\n10 2 2\n8 1 8",
          "stdout": "2\n10\n1"
        }
      ],
      "source": "codechef",
      "difficulty": "HARD",
      "human_solutions": [
        "for t in range(int(input())):\n\t(n, p, q) = map(int, input().split())\n\t(v1, v2) = (n, n)\n\twhile p != q:\n\t\tif p > q:\n\t\t\tif p & 1 == 1:\n\t\t\t\tv1 -= 1\n\t\t\tv1 //= 2\n\t\t\tp //= 2\n\t\telse:\n\t\t\tif q & 1 == 1:\n\t\t\t\tv2 -= 1\n\t\t\tv2 //= 2\n\t\t\tq //= 2\n\tprint(min(v1, v2))\n",
        "def main():\n\tn = int(input())\n\tfor i in range(n):\n\t\t(n, u, v) = map(int, input().split())\n\t\ts = solve(n, u, v)\n\t\tprint(s)\n\ndef solve(n, u, v):\n\t(ub, vb) = (bin(u)[2:], bin(v)[2:])\n\ti = 0\n\twhile i < len(ub) and i < len(vb) and (ub[i] == vb[i]):\n\t\ti += 1\n\treturn min(limit(n, ub[i:]), limit(n, vb[i:]))\n\ndef limit(n, sufix):\n\tif sufix == '':\n\t\treturn n\n\tnb = bin(n)[2:]\n\tk = len(sufix)\n\tns = nb[-k:]\n\tif sufix == ns or int(sufix, 2) < int(nb[-k:], 2):\n\t\treturn int(nb[:-k], base=2)\n\telse:\n\t\tlb = nb[:-k]\n\t\treturn int(lb, base=2) - 1\nmain()\n",
        "Q = int(input())\nwhile Q > 0:\n\tQ -= 1\n\t(N, u, v) = map(int, input().strip().split())\n\tif u > v:\n\t\t(u, v) = (v, u)\n\t(p, q) = (0, 1)\n\twhile u != v:\n\t\tif u > v:\n\t\t\tu >>= 1\n\t\t\tcontinue\n\t\tif v & 1:\n\t\t\tp += q\n\t\tv >>= 1\n\t\tq <<= 1\n\tans = (N - p) // q\n\tprint(ans)\n",
        "n = int(input())\nfor i in range(n):\n\tarr = input().split(' ')\n\tn = int(arr[0])\n\tu = int(arr[1])\n\tv = int(arr[2])\n\tif u > v:\n\t\t(u, v) = (v, u)\n\tpath = []\n\tup = u\n\tvp = v\n\twhile up != vp:\n\t\tif vp > up:\n\t\t\tif vp % 2 == 0:\n\t\t\t\tvp = vp // 2\n\t\t\t\tpath.append(0)\n\t\t\telse:\n\t\t\t\tvp = vp // 2\n\t\t\t\tpath.append(1)\n\t\telse:\n\t\t\tup = up // 2\n\tresult = n\n\tfor a in path:\n\t\tif a == 1:\n\t\t\tif result % 2 == 0:\n\t\t\t\tresult -= 1\n\t\telif result % 2 == 1:\n\t\t\tresult -= 1\n\t\tresult = result // 2\n\tprint(result)\n"
      ],
      "original_code": null
    },
    "status": "success",
    "code": "def solve():\n    import sys\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    q = int(data[0])\n    results = []\n    index = 1\n\n    # Function to compute Lowest Common Ancestor (LCA)\n    # In a binary tree where parent's relation is v//2 \n    # (with odd v meaning v was a right child and even v meaning left child)\n    def lca(a, b):\n        while a != b:\n            if a > b:\n                a //= 2\n            else:\n                b //= 2\n        return a\n\n    # Helper function to get depth: depth(root=1) is 0; in general,\n    # depth(x) = (number of bits in x) - 1\n    def depth(x):\n        return x.bit_length() - 1\n\n    for _ in range(q):\n        n = int(data[index]); u_orig = int(data[index+1]); v_orig = int(data[index+2])\n        index += 3\n        \n        # Compute LCA of u and v without modifying original values.\n        u, v = u_orig, v_orig\n        L = lca(u, v)\n        dL = depth(L)\n        du = depth(u_orig)\n        dv = depth(v_orig)\n        k = du - dL   # number of up moves from u to LCA (the upward part)\n        m = dv - dL   # number of down moves from LCA to v\n\n        # The upward part \"pattern\" is exactly the last k bits of u_orig:\n        #   u_orig = L * 2^k + p   with 0 \u2264 p < 2^k.\n        p = u_orig - L * (1 << k)\n        # Similarly, from the downward moves:\n        #   v_orig = L * 2^m + b   with 0 \u2264 b < 2^m.\n        b = v_orig - L * (1 << m)\n\n        # For any candidate pair (w, t) that follows the same path configuration,\n        # there is an integer A (playing the role of L) such that:\n        #      w = A * 2^k + p   and   t = A * 2^m + b.\n        # And we must have w, t \u2264 n. This means:\n        #      A \u2264 (n - p) // 2^k   and   A \u2264 (n - b) // 2^m.\n        # A must also be at least 1 (because node labels start at 1).\n        # So the number of valid pairs is:\n        #      max(0, min((n - p) // 2^k, (n - b) // 2^m))\n        \n        lim1 = (n - p) >> k if (n - p) >= 0 else -1\n        lim2 = (n - b) >> m if (n - b) >= 0 else -1\n        cand = min(lim1, lim2)\n        if cand < 1:\n            results.append(\"0\")\n        else:\n            results.append(str(cand))\n    \n    sys.stdout.write(\"\\n\".join(results))\n    \nif __name__ == '__main__':\n    solve()",
    "pass_ratio": 0.8615384615384616,
    "tests_passed": 224,
    "tests_total": 260,
    "iterations": 1,
    "history": [
      {
        "iteration": 1,
        "code": "def solve():\n    import sys\n    data = sys.stdin.read().strip().split()\n    if not data:\n        return\n    q = int(data[0])\n    results = []\n    index = 1\n\n    # Function to compute Lowest Common Ancestor (LCA)\n    # In a binary tree where parent's relation is v//2 \n    # (with odd v meaning v was a right child and even v meaning left child)\n    def lca(a, b):\n        while a != b:\n            if a > b:\n                a //= 2\n            else:\n                b //= 2\n        return a\n\n    # Helper function to get depth: depth(root=1) is 0; in general,\n    # depth(x) = (number of bits in x) - 1\n    def depth(x):\n        return x.bit_length() - 1\n\n    for _ in range(q):\n        n = int(data[index]); u_orig = int(data[index+1]); v_orig = int(data[index+2])\n        index += 3\n        \n        # Compute LCA of u and v without modifying original values.\n        u, v = u_orig, v_orig\n        L = lca(u, v)\n        dL = depth(L)\n        du = depth(u_orig)\n        dv = depth(v_orig)\n        k = du - dL   # number of up moves from u to LCA (the upward part)\n        m = dv - dL   # number of down moves from LCA to v\n\n        # The upward part \"pattern\" is exactly the last k bits of u_orig:\n        #   u_orig = L * 2^k + p   with 0 \u2264 p < 2^k.\n        p = u_orig - L * (1 << k)\n        # Similarly, from the downward moves:\n        #   v_orig = L * 2^m + b   with 0 \u2264 b < 2^m.\n        b = v_orig - L * (1 << m)\n\n        # For any candidate pair (w, t) that follows the same path configuration,\n        # there is an integer A (playing the role of L) such that:\n        #      w = A * 2^k + p   and   t = A * 2^m + b.\n        # And we must have w, t \u2264 n. This means:\n        #      A \u2264 (n - p) // 2^k   and   A \u2264 (n - b) // 2^m.\n        # A must also be at least 1 (because node labels start at 1).\n        # So the number of valid pairs is:\n        #      max(0, min((n - p) // 2^k, (n - b) // 2^m))\n        \n        lim1 = (n - p) >> k if (n - p) >= 0 else -1\n        lim2 = (n - b) >> m if (n - b) >= 0 else -1\n        cand = min(lim1, lim2)\n        if cand < 1:\n            results.append(\"0\")\n        else:\n            results.append(str(cand))\n    \n    sys.stdout.write(\"\\n\".join(results))\n    \nif __name__ == '__main__':\n    solve()",
        "pass_ratio": 0.8615384615384616,
        "tests_passed": 224,
        "tests_total": 260
      }
    ],
    "model_type": "openai",
    "model_name": "o3_mini"
  },
  {
    "problem": {
      "problem_id": 3,
      "question": "Chef has a garden of size N \\times N. The garden is divided into N^{2} squares of size 1\\times 1 each.\n\nChef has plants in some unit squares of the garden, because of which, that part looks *green*.  \nFormally, for the i^{th} row (0 \u2264 i < N), Chef has plants in all the columns from A_{i} to B_{i}  (both inclusive) where 0 \u2264 A_{i} \u2264 B_{i} < N.\n\nHelp Chef find the length of the side of the largest square that is *green*.\n\n------ Input Format ------ \n\n- The first line contains an integer N, the size of the garden. \n- The next N lines contain two space-separated integers A_{i} and B_{i}, representing that plants are present in all the columns from A_{i} to B_{i} (both inclusive) of the i^{th} row.\n\n------ Output Format ------ \n\nOutput a single integer denoting the length of the side of the largest square that is *green*. In other words, output the length of the side of the square with maximum size, inside which all unit squares have plants.\n\n------ Constraints ------ \n\n$1 \u2264N \u226410^{6}$\n$0 \u2264A_{i} \u2264B_{i} < N$\n\n----- Sample Input 1 ------ \n3\n1 1\n0 2\n1 2\n\n----- Sample Output 1 ------ \n2\n----- explanation 1 ------ \n\n----- Sample Input 2 ------ \n8\n2 4\n2 4\n1 4\n0 7\n0 3\n1 2\n1 2\n1 1\n----- Sample Output 2 ------ \n3\n\n----- explanation 2 ------ \nSample Explanation $1$: The garden looks like:\n\n.png)\n\nThe largest green square has vertices $(1,1), (1,2), (2,2), (2,1)$. Thus, the length of the side of the largest *green* square is $2$.\n\nSample Explanation $2$: The garden looks like:\n\n.png)\n\nOne of the largest green squares has vertices $(0,2), (0,4), (2, 4), (2, 2)$. Thus, the length of the side of the largest *green* square is $3$.  \nThere may be other squares with same size but it can be proven that no square with length more than $3$ is green.",
      "tests": [
        {
          "stdin": "3\n1 1\n0 2\n1 2\n",
          "stdout": "2"
        },
        {
          "stdin": "8\n2 4\n2 4\n1 4\n0 7\n0 3\n1 2\n1 2\n1 1",
          "stdout": "3\n"
        },
        {
          "stdin": "3\n0 2\n1 1\n2 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n0 5\n0 4\n0 3\n0 2\n0 1\n0 0\n",
          "stdout": "3\n"
        },
        {
          "stdin": "4\n0 0\n0 0\n3 3\n3 3\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n1 2\n0 1\n0 2\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n1 1\n2 3\n3 4\n0 3\n1 4\n",
          "stdout": "2"
        },
        {
          "stdin": "2\n1 1\n0 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n1 1\n2 2\n3 3\n0 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n1 1\n0 0\n2 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "7\n3 3\n4 4\n5 5\n2 2\n1 1\n0 0\n6 6\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n1 4\n0 3\n2 4\n1 2\n3 4\n",
          "stdout": "2"
        },
        {
          "stdin": "6\n2 5\n1 4\n0 3\n3 5\n4 5\n5 5\n",
          "stdout": "2"
        },
        {
          "stdin": "8\n2 4\n1 3\n0 4\n3 4\n4 5\n5 6\n6 7\n7 7\n",
          "stdout": "2"
        },
        {
          "stdin": "10\n0 9\n0 8\n0 7\n0 6\n0 5\n0 4\n0 3\n0 2\n0 1\n0 0\n",
          "stdout": "5\n"
        },
        {
          "stdin": "7\n0 0\n0 1\n1 2\n1 3\n2 4\n3 5\n4 6\n",
          "stdout": "2"
        },
        {
          "stdin": "9\n0 0\n0 1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n4 8\n",
          "stdout": "3\n"
        },
        {
          "stdin": "5\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 1\n0 1\n0 1\n0 1\n",
          "stdout": "2"
        },
        {
          "stdin": "6\n0 5\n1 5\n2 4\n3 3\n3 3\n2 2\n",
          "stdout": "3\n"
        },
        {
          "stdin": "7\n0 6\n1 5\n2 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "3\n"
        },
        {
          "stdin": "4\n0 0\n0 0\n0 0\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 2\n1 2\n2 2\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n3 4\n1 4\n0 4\n1 3\n2 2\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n",
          "stdout": "2"
        },
        {
          "stdin": "4\n0 0\n0 0\n0 0\n0 0",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0",
          "stdout": "1\n"
        },
        {
          "stdin": "8\n0 7\n1 7\n2 7\n3 7\n4 7\n5 7\n6 7\n7 7",
          "stdout": "4\n"
        },
        {
          "stdin": "5\n0 4\n1 3\n2 2\n3 1\n4 0",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 6\n1 5\n2 4\n3 3\n4 2\n5 1\n6 0",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n0 5\n1 4\n2 3\n3 2\n4 1\n5 0",
          "stdout": "2"
        },
        {
          "stdin": "3\n1 1\n0 2\n1 2\n",
          "stdout": "2"
        },
        {
          "stdin": "8\n2 4\n2 4\n1 4\n0 7\n0 3\n1 2\n1 2\n1 1",
          "stdout": "3\n"
        },
        {
          "stdin": "4\n0 1\n0 2\n1 2\n1 3\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n0 1\n1 2\n2 3\n3 4\n4 4\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 0\n1 1\n2 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 0\n1 1\n2 2\n3 3\n4 4\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n0 1\n1 2\n2 3\n3 4\n4 5\n5 5\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 0\n0 1\n0 2\n",
          "stdout": "2"
        },
        {
          "stdin": "6\n0 2\n1 3\n2 4\n3 5\n4 5\n5 5\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 5\n1 6\n2 5\n3 4\n4 3\n5 2\n6 1\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n0 3\n1 4\n2 5\n3 5\n4 4\n5 3\n",
          "stdout": "2"
        },
        {
          "stdin": "4\n0 0\n0 1\n0 2\n0 3\n",
          "stdout": "2"
        },
        {
          "stdin": "2\n0 0\n1 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n0 3\n1 4\n2 5\n3 6\n4 7\n5 7\n6 6\n7 5\n8 4\n9 3\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n",
          "stdout": "4\n"
        },
        {
          "stdin": "2\n0 0\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 1\n0 2\n0 3\n0 4\n0 4\n",
          "stdout": "3\n"
        },
        {
          "stdin": "5\n0 0\n0 1\n0 2\n0 3\n0 4\n",
          "stdout": "3\n"
        },
        {
          "stdin": "8\n2 4\n2 4\n1 4\n0 7\n0 3\n1 2\n1 2\n1 1\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n2 4\n1 3\n2 4\n1 3\n2 4\n2 3\n",
          "stdout": "3\n"
        },
        {
          "stdin": "10\n5 9\n4 8\n3 7\n2 6\n1 5\n0 4\n0 3\n1 2\n2 3\n4 5\n",
          "stdout": "3\n"
        },
        {
          "stdin": "7\n0 0\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n3 4\n2 3\n1 2\n0 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 1\n1 2\n1 2\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 0\n0 1\n1 2\n2 3\n3 4\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n2 5\n1 4\n0 3\n0 2\n1 3\n2 4\n",
          "stdout": "2"
        },
        {
          "stdin": "8\n7 7\n6 6\n5 5\n4 6\n3 5\n2 4\n1 3\n0 2\n",
          "stdout": "2"
        },
        {
          "stdin": "9\n8 8\n7 7\n6 6\n5 5\n4 5\n3 4\n2 3\n1 2\n0 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n1 2\n1 2\n2 3\n2 3\n",
          "stdout": "2"
        },
        {
          "stdin": "3\n0 2\n0 1\n1 2\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n0 4\n1 4\n2 4\n3 4\n4 4\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n0 5\n1 5\n2 5\n3 5\n4 5\n5 5\n",
          "stdout": "3\n"
        },
        {
          "stdin": "7\n0 5\n1 5\n2 5\n3 5\n4 5\n5 5\n6 6\n",
          "stdout": "3\n"
        },
        {
          "stdin": "8\n0 7\n1 7\n2 7\n3 7\n4 7\n5 7\n6 7\n7 7\n",
          "stdout": "4\n"
        },
        {
          "stdin": "2\n0 0\n0 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "8\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n",
          "stdout": "4\n"
        },
        {
          "stdin": "6\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n",
          "stdout": "3\n"
        },
        {
          "stdin": "5\n1 1\n1 2\n1 3\n1 4\n1 5\n",
          "stdout": "3\n"
        },
        {
          "stdin": "5\n0 1\n0 2\n0 3\n0 4\n0 5\n",
          "stdout": "3\n"
        },
        {
          "stdin": "7\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n",
          "stdout": "1\n"
        },
        {
          "stdin": "9\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 1\n1 2\n2 3\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 4\n1 3\n2 2\n3 1\n4 0\n",
          "stdout": "2"
        },
        {
          "stdin": "2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n5 9\n4 8\n3 7\n2 6\n1 5\n0 4\n1 3\n2 2\n3 1\n4 0\n",
          "stdout": "3\n"
        },
        {
          "stdin": "2\n0 1\n1 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n1 1\n2 2\n3 3\n4 4\n5 5\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n0 9\n1 8\n2 7\n3 6\n4 5\n5 4\n6 3\n7 2\n8 1\n9 0\n",
          "stdout": "4\n"
        },
        {
          "stdin": "6\n3 5\n2 4\n1 3\n0 2\n1 1\n2 0\n",
          "stdout": "2"
        },
        {
          "stdin": "3\n1 1\n1 1\n1 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 0\n1 1\n2 2\n3 3\n",
          "stdout": "1\n"
        },
        {
          "stdin": "7\n0 6\n1 5\n2 4\n3 3\n4 2\n5 1\n6 0\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "15\n0 14\n1 13\n2 12\n3 11\n4 10\n5 9\n6 8\n7 7\n8 6\n9 5\n10 4\n11 3\n12 2\n13 1\n14 0\n",
          "stdout": "5\n"
        },
        {
          "stdin": "5\n0 3\n1 3\n2 3\n3 3\n4 3\n",
          "stdout": "2"
        },
        {
          "stdin": "4\n0 1\n0 2\n0 3\n0 0\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n0 0\n1 1\n2 2\n3 3\n4 4\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 0\n1 1\n2 2\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 4\n1 3\n2 2\n3 1\n0 0\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 6\n1 5\n2 4\n3 3\n0 0\n1 1\n2 2\n",
          "stdout": "3\n"
        },
        {
          "stdin": "8\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n",
          "stdout": "1\n"
        },
        {
          "stdin": "8\n0 7\n1 6\n2 5\n3 4\n0 0\n1 1\n2 2\n3 3\n",
          "stdout": "3\n"
        },
        {
          "stdin": "10\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n",
          "stdout": "1\n"
        },
        {
          "stdin": "8\n0 7\n1 6\n2 5\n3 4\n4 3\n5 2\n6 1\n7 0\n",
          "stdout": "3\n"
        },
        {
          "stdin": "10\n0 9\n1 8\n2 7\n3 6\n4 5\n0 0\n1 1\n2 2\n3 3\n4 4\n",
          "stdout": "4\n"
        },
        {
          "stdin": "2\n1 1\n1 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n0 1\n0 1\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n0 2\n1 2\n2 2\n0 2\n0 0\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 0\n0 2\n0 2\n0 4\n0 4\n0 4\n0 6\n",
          "stdout": "4\n"
        },
        {
          "stdin": "10\n0 9\n0 8\n0 7\n0 6\n0 5\n1 9\n1 8\n1 7\n1 6\n1 5\n",
          "stdout": "5\n"
        },
        {
          "stdin": "6\n0 3\n1 4\n2 5\n1 5\n0 5\n0 5\n",
          "stdout": "4\n"
        },
        {
          "stdin": "4\n0 3\n0 3\n1 2\n3 3\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n0 2\n1 2\n2 2\n3 3\n4 4\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n4 4\n3 4\n2 4\n1 4\n0 4\n",
          "stdout": "3\n"
        },
        {
          "stdin": "14\n0 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13\n",
          "stdout": "1\n"
        },
        {
          "stdin": "14\n13 13\n12 12\n11 11\n10 10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 0\n0 0\n1 1\n1 1\n2 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n2 3\n2 3\n2 3\n2 3\n2 3\n",
          "stdout": "2"
        },
        {
          "stdin": "6\n0 5\n1 4\n2 3\n3 2\n4 1\n5 0\n",
          "stdout": "2"
        },
        {
          "stdin": "10\n9 9\n8 8\n7 7\n6 6\n5 5\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 1\n1 2\n2 3\n3 4\n4 5\n",
          "stdout": "1\n"
        },
        {
          "stdin": "7\n0 3\n1 4\n2 5\n3 6\n2 5\n1 4\n0 3\n",
          "stdout": "3\n"
        },
        {
          "stdin": "5\n0 2\n1 3\n2 4\n1 2\n0 1\n",
          "stdout": "2"
        },
        {
          "stdin": "3\n0 0\n0 1\n1 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "6\n2 3\n1 4\n0 5\n1 4\n2 3\n3 3\n",
          "stdout": "4\n"
        },
        {
          "stdin": "10\n5 9\n4 8\n3 7\n2 5\n2 4\n1 3\n0 2\n0 1\n1 1\n2 2\n",
          "stdout": "3\n"
        },
        {
          "stdin": "4\n0 1\n1 2\n2 3\n3 3\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 0\n0 0\n0 1\n1 2\n2 3\n",
          "stdout": "1\n"
        },
        {
          "stdin": "7\n1 1\n0 6\n1 5\n2 5\n3 5\n4 6\n5 6\n",
          "stdout": "3\n"
        },
        {
          "stdin": "4\n0 3\n1 3\n2 3\n3 3\n",
          "stdout": "2"
        },
        {
          "stdin": "5\n0 4\n0 4\n0 4\n0 4\n0 4\n",
          "stdout": "5\n"
        },
        {
          "stdin": "2\n0 1\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 0\n1 2\n2 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 1\n1 1\n2 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n1 1\n2 2\n3 3\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n0 9\n1 8\n2 7\n3 6\n4 5\n4 6\n3 7\n2 8\n1 9\n0 9\n",
          "stdout": "4\n"
        },
        {
          "stdin": "5\n0 0\n0 0\n0 0\n0 0\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n0 1\n0 1\n0 1\n0 1\n0 1\n",
          "stdout": "2"
        },
        {
          "stdin": "10\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n0 0\n0 0\n0 0\n0 0\n0 0\n0 1\n0 1\n0 1\n0 0\n0 0\n",
          "stdout": "2"
        },
        {
          "stdin": "10\n0 0\n0 1\n0 0\n0 1\n0 0\n0 1\n0 0\n0 1\n0 0\n0 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n0 9\n0 9\n0 9\n0 9\n0 9\n0 9\n0 9\n0 9\n0 9\n0 9\n",
          "stdout": "10\n"
        },
        {
          "stdin": "10\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 6\n0 7\n0 8\n0 9\n",
          "stdout": "5\n"
        },
        {
          "stdin": "15\n0 0\n0 1\n0 2\n0 3\n0 4\n0 5\n0 4\n0 3\n0 2\n0 1\n0 0\n0 0\n0 0\n0 0\n0 0\n",
          "stdout": "5\n"
        },
        {
          "stdin": "5\n0 0\n0 1\n0 2\n0 4\n0 4\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 1\n0 0\n0 3\n0 0\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 2\n0 2\n2 2\n2 2\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 2\n1 3\n2 4\n3 5\n4 6\n5 6\n6 6\n",
          "stdout": "2"
        },
        {
          "stdin": "6\n0 2\n0 2\n0 2\n2 2\n2 2\n2 2\n",
          "stdout": "3\n"
        },
        {
          "stdin": "2\n0 1\n1 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 3\n1 2\n2 3\n3 4\n",
          "stdout": "2"
        },
        {
          "stdin": "9\n0 9\n1 8\n2 7\n3 6\n4 4\n3 3\n2 2\n1 1\n0 0\n",
          "stdout": "4\n"
        },
        {
          "stdin": "1\n0 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "10\n0 10\n1 9\n2 8\n3 7\n4 6\n5 5\n6 4\n7 3\n8 2\n9 1\n",
          "stdout": "4\n"
        },
        {
          "stdin": "12\n0 11\n1 9\n2 7\n3 5\n4 3\n5 1\n6 1\n7 3\n8 5\n9 6\n10 8\n11 11\n",
          "stdout": "3\n"
        },
        {
          "stdin": "6\n0 3\n1 3\n2 3\n3 3\n4 3\n5 3\n",
          "stdout": "2"
        },
        {
          "stdin": "7\n0 2\n1 3\n2 4\n3 5\n4 6\n5 7\n6 7\n",
          "stdout": "2"
        },
        {
          "stdin": "11\n0 10\n1 9\n2 8\n3 7\n4 6\n5 5\n6 4\n7 3\n8 2\n9 1\n10 0\n",
          "stdout": "4\n"
        },
        {
          "stdin": "8\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 3\n1 2\n2 2\n",
          "stdout": "2"
        },
        {
          "stdin": "4\n0 2\n1 2\n2 2\n3 2\n",
          "stdout": "2"
        },
        {
          "stdin": "6\n0 2\n0 3\n0 4\n0 5\n0 6\n0 1\n",
          "stdout": "4\n"
        },
        {
          "stdin": "3\n1 1\n1 2\n1 3\n",
          "stdout": "2"
        },
        {
          "stdin": "8\n0 1\n1 2\n1 4\n0 4\n1 2\n0 1\n2 3\n1 1\n",
          "stdout": "3\n"
        },
        {
          "stdin": "4\n0 3\n0 2\n0 1\n0 0\n",
          "stdout": "2"
        },
        {
          "stdin": "3\n0 0\n0 0\n2 2\n",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n0 0\n0 0\n0 0\n3 3\n",
          "stdout": "1\n"
        },
        {
          "stdin": "9\n0 0\n0 0\n0 0\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n0 2\n1 1\n2 0\n",
          "stdout": "1\n"
        }
      ],
      "source": "codechef",
      "difficulty": "HARD",
      "human_solutions": [
        "from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n\t(temp1, temp2) = (max(left1, left2), min(right1, right2))\n\tif temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n\t\treturn None\n\treturn (temp1, temp2)\nfor i in range(n):\n\t(left, right) = map(int, input().split())\n\tq2 = deque()\n\twhile q1 and (q1[0][0][0] < left or q1[0][0][1] > right):\n\t\ttop = q1.pop()\n\t\t(temp1, temp2) = top[0]\n\t\twidth = top[0][1] - top[0][0] + 1\n\t\theight = i - 1 - top[1] + 1\n\t\tres = max(res, min(width, height))\n\t\tvalues = helper(left, right, temp1, temp2)\n\t\tif eval is not None:\n\t\t\tq2.append((values, top[1]))\n\twhile q2:\n\t\ttop = q2.pop()\n\t\tif top[0][1] - top[0][0] + 1 > res:\n\t\t\tq1.append(top)\n\tif not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n\t\tif right - left + 1 > res:\n\t\t\tq1.append(((left, right), i))\nwhile q1:\n\ttop = q1.pop()\n\t(temp1, temp2) = top[0]\n\t(height, width) = (n - top[1], temp2 - temp1 + 1)\n\tres = max(res, min(height, width))\nprint(res)\n",
        "from collections import deque\nrows = int(input())\nstk = deque()\nans = 1\n\ndef overlap(l1, r1, l2, r2):\n\t(x, y) = (max(l1, l2), min(r1, r2))\n\tif x > r1 or x > r2 or y < l1 or (y < l2):\n\t\treturn None\n\treturn (x, y)\nfor j in range(rows):\n\t(lt, rt) = map(int, input().split())\n\tstkb = deque()\n\twhile stk and (stk[-1][0][0] < lt or stk[-1][0][1] > rt):\n\t\ttop = stk.pop()\n\t\t(x, y) = top[0]\n\t\twidth = top[0][1] - top[0][0] + 1\n\t\theight = j - 1 - top[1] + 1\n\t\tans = max(ans, min(width, height))\n\t\teval = overlap(lt, rt, x, y)\n\t\tif eval is not None:\n\t\t\tstkb.append((eval, top[1]))\n\twhile stkb:\n\t\ttop = stkb.pop()\n\t\tif top[0][1] - top[0][0] + 1 > ans:\n\t\t\tstk.append(top)\n\tif not stk or not (stk[-1][0][0] == lt and stk[-1][0][1] == rt):\n\t\tif rt - lt + 1 > ans:\n\t\t\tstk.append(((lt, rt), j))\nwhile stk:\n\ttop = stk.pop()\n\t(x, y) = top[0]\n\t(height, width) = (rows - top[1], y - x + 1)\n\tans = max(ans, min(height, width))\nprint(ans)\n"
      ],
      "original_code": null
    },
    "status": "success",
    "code": "def solve():\n    import sys\n    from collections import deque\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    A = [0] * n\n    B = [0] * n\n    for i in range(n):\n        A[i] = int(next(it))\n        B[i] = int(next(it))\n\n    # Given a candidate square side length L, check if there exists a block of L consecutive rows,\n    # whose overlapping \"green\" interval [max(A_i), min(B_i)] is wide enough (>= L).\n    def can_find(L):\n        # We'll use 2 deques:\n        # dq_max will maintain indices (of rows) for which A-values are in decreasing order.\n        # dq_min will maintain indices (of rows) for which B-values are in increasing order.\n        dq_max = deque()\n        dq_min = deque()\n        for i in range(n):\n            # For A: maintain deque so that the front always corresponds to the maximum A in the current window.\n            while dq_max and A[dq_max[-1]] <= A[i]:\n                dq_max.pop()\n            dq_max.append(i)\n            # For B: maintain deque so that the front holds the minimum B in the current window.\n            while dq_min and B[dq_min[-1]] >= B[i]:\n                dq_min.pop()\n            dq_min.append(i)\n            \n            # When we have at least L rows in our window, check the condition\n            if i >= L - 1:\n                window_start = i - L + 1\n                # Remove indices outside the current window\n                if dq_max and dq_max[0] < window_start:\n                    dq_max.popleft()\n                if dq_min and dq_min[0] < window_start:\n                    dq_min.popleft()\n                    \n                maxA = A[dq_max[0]]\n                minB = B[dq_min[0]]\n                # The overlapping interval in these L rows is from maxA to minB.\n                # For a square of side L entirely green we need:\n                # (minB - maxA + 1) >= L.\n                if minB - maxA + 1 >= L:\n                    return True\n        return False\n\n    # Use binary search for the maximum possible square side length.\n    lo, hi = 1, n\n    ans = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if can_find(mid):\n            ans = mid\n            lo = mid + 1  # Try for a larger square.\n        else:\n            hi = mid - 1  # Try a smaller square.\n            \n    sys.stdout.write(str(ans))\n\nif __name__ == '__main__':\n    solve()",
    "pass_ratio": 0.9761904761904762,
    "tests_passed": 164,
    "tests_total": 168,
    "iterations": 1,
    "history": [
      {
        "iteration": 1,
        "code": "def solve():\n    import sys\n    from collections import deque\n    data = sys.stdin.buffer.read().split()\n    if not data:\n        return\n    it = iter(data)\n    n = int(next(it))\n    A = [0] * n\n    B = [0] * n\n    for i in range(n):\n        A[i] = int(next(it))\n        B[i] = int(next(it))\n\n    # Given a candidate square side length L, check if there exists a block of L consecutive rows,\n    # whose overlapping \"green\" interval [max(A_i), min(B_i)] is wide enough (>= L).\n    def can_find(L):\n        # We'll use 2 deques:\n        # dq_max will maintain indices (of rows) for which A-values are in decreasing order.\n        # dq_min will maintain indices (of rows) for which B-values are in increasing order.\n        dq_max = deque()\n        dq_min = deque()\n        for i in range(n):\n            # For A: maintain deque so that the front always corresponds to the maximum A in the current window.\n            while dq_max and A[dq_max[-1]] <= A[i]:\n                dq_max.pop()\n            dq_max.append(i)\n            # For B: maintain deque so that the front holds the minimum B in the current window.\n            while dq_min and B[dq_min[-1]] >= B[i]:\n                dq_min.pop()\n            dq_min.append(i)\n            \n            # When we have at least L rows in our window, check the condition\n            if i >= L - 1:\n                window_start = i - L + 1\n                # Remove indices outside the current window\n                if dq_max and dq_max[0] < window_start:\n                    dq_max.popleft()\n                if dq_min and dq_min[0] < window_start:\n                    dq_min.popleft()\n                    \n                maxA = A[dq_max[0]]\n                minB = B[dq_min[0]]\n                # The overlapping interval in these L rows is from maxA to minB.\n                # For a square of side L entirely green we need:\n                # (minB - maxA + 1) >= L.\n                if minB - maxA + 1 >= L:\n                    return True\n        return False\n\n    # Use binary search for the maximum possible square side length.\n    lo, hi = 1, n\n    ans = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if can_find(mid):\n            ans = mid\n            lo = mid + 1  # Try for a larger square.\n        else:\n            hi = mid - 1  # Try a smaller square.\n            \n    sys.stdout.write(str(ans))\n\nif __name__ == '__main__':\n    solve()",
        "pass_ratio": 0.9761904761904762,
        "tests_passed": 164,
        "tests_total": 168
      }
    ],
    "model_type": "openai",
    "model_name": "o3_mini"
  },
  {
    "problem": {
      "problem_id": 4,
      "question": "Read problems statements in  Mandarin Chinese  and  Russian. \nRecently Chef become very much interested in perfect squares. We all know Chef and his weird interests. Anyways Chef will be soon writing his masters thesis on perfect squares revealing what-not-known properties of perfect squares.\nWhile doing his research, he happened to be confronted with some interesting perfect squares. These prefect squares consists only of digits which are themselves perfect squares. 0, 1, 4 and 9 are such digits. These are called perfect digits.\nAs we all know Chef also has habit of asking too many questions, he is asking- given two numbers a and b, how many perfect squares exists between these two numbers inclusive, that contains only perfect digits.\u00a0\nInput:\nFirst line of input will contains T, number of test cases. Then T lines follows, each containing two positive integers a and b.\nConstraints:\nT \u2264 500\n1\u2264 a \u2264 b \u2264 10000000000\u00a0\nOutput:\nFor each input, output number of perfect digit squares between given numbers.\u00a0\nSample\n\n----- Sample Input 1 ------ \n2\n1 10\n100 10000\n----- Sample Output 1 ------ \n3\n9",
      "tests": [
        {
          "stdin": "2\n1 10\n100 10000",
          "stdout": "3\n9"
        },
        {
          "stdin": "3\n1 4\n4 9\n9 16\n",
          "stdout": "2\n2\n1\n"
        },
        {
          "stdin": "2\n1 100\n1 10000\n",
          "stdout": "5\n13\n"
        },
        {
          "stdin": "2\n1 1000000000\n1 10000000000\n",
          "stdout": "92\n120\n"
        },
        {
          "stdin": "2\n1 25\n25 100",
          "stdout": "3\n2\n"
        },
        {
          "stdin": "1\n81 81\n",
          "stdout": "0\n"
        },
        {
          "stdin": "3\n81 100\n1 16\n16 4\n",
          "stdout": "1\n3\n-1\n"
        },
        {
          "stdin": "1\n1000 10000",
          "stdout": "4\n"
        },
        {
          "stdin": "1\n10000 100000",
          "stdout": "10\n"
        },
        {
          "stdin": "1\n16 16",
          "stdout": "0\n"
        },
        {
          "stdin": "1\n81 100",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n1 9\n",
          "stdout": "3\n"
        },
        {
          "stdin": "2\n1 16\n4 81\n",
          "stdout": "3\n3\n"
        },
        {
          "stdin": "3\n1 4\n16 256\n81 6561\n",
          "stdout": "2\n3\n7\n"
        },
        {
          "stdin": "1\n16 256\n",
          "stdout": "3\n"
        },
        {
          "stdin": "1\n256 6561\n",
          "stdout": "5\n"
        },
        {
          "stdin": "1\n4 9\n",
          "stdout": "2\n"
        },
        {
          "stdin": "1\n36 49\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n4 9\n81 100\n",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "4\n1 16\n16 256\n256 6561\n6561 100000000\n",
          "stdout": "3\n3\n5\n52\n"
        },
        {
          "stdin": "2\n1 4\n16 81\n",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "1\n64 81\n",
          "stdout": "0\n"
        },
        {
          "stdin": "2\n9 81\n4 16\n",
          "stdout": "2\n2\n"
        },
        {
          "stdin": "3\n1 10\n100 1000\n5000 6000",
          "stdout": "3\n5\n0\n"
        },
        {
          "stdin": "5\n10000 20000\n30000 40000\n50000 60000\n70000 80000\n90000 100000",
          "stdout": "5\n1\n0\n0\n1\n"
        },
        {
          "stdin": "2\n10000000 20000000\n30000000 40000000",
          "stdout": "5\n0\n"
        },
        {
          "stdin": "5\n100 500\n1000 5000\n10000 50000\n100000 500000\n1000000 5000000",
          "stdout": "4\n2\n9\n4\n14\n"
        },
        {
          "stdin": "3\n1 5\n10 15\n20 25",
          "stdout": "2\n0\n0\n"
        },
        {
          "stdin": "2\n1000000000 2000000000\n3000000000 4000000000",
          "stdout": "8\n0\n"
        },
        {
          "stdin": "5\n10 20\n30 40\n50 60\n70 80\n90 100",
          "stdout": "0\n0\n0\n0\n1\n"
        },
        {
          "stdin": "2\n5000000000 10000000000\n1 5000000000",
          "stdout": "9\n111\n"
        },
        {
          "stdin": "1\n1 100",
          "stdout": "5\n"
        },
        {
          "stdin": "1\n1 10000",
          "stdout": "13\n"
        },
        {
          "stdin": "3\n1 10\n100 10000\n500 1000",
          "stdout": "3\n9\n1\n"
        },
        {
          "stdin": "2\n50 60\n70 80",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "2\n90 100\n110 200",
          "stdout": "1\n1\n"
        },
        {
          "stdin": "2\n210 300\n310 400",
          "stdout": "0\n1\n"
        },
        {
          "stdin": "2\n410 500\n500 600",
          "stdout": "1\n0\n"
        },
        {
          "stdin": "2\n610 700\n710 800",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "2\n810 900\n1000 2000",
          "stdout": "1\n1\n"
        },
        {
          "stdin": "2\n3000 4000\n5000 6000",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "2\n7000 8000\n9000 10000",
          "stdout": "0\n2\n"
        },
        {
          "stdin": "1\n10000 20000",
          "stdout": "5\n"
        },
        {
          "stdin": "1\n30000 40000",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n50000 60000",
          "stdout": "0\n"
        },
        {
          "stdin": "1\n70000 80000",
          "stdout": "0\n"
        },
        {
          "stdin": "1\n90000 100000",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n100 200",
          "stdout": "2\n"
        },
        {
          "stdin": "1\n300 400",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n500 600",
          "stdout": "0\n"
        },
        {
          "stdin": "1\n700 800",
          "stdout": "0\n"
        },
        {
          "stdin": "1\n900 1000",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n1 1",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n5 10\n20 30\n15 25",
          "stdout": "1\n0\n0\n"
        },
        {
          "stdin": "5\n10000 20000\n500000 600000\n700000 800000\n900000 1000000\n1 100",
          "stdout": "5\n0\n0\n4\n5\n"
        },
        {
          "stdin": "1\n1000000000 10000000000",
          "stdout": "28\n"
        },
        {
          "stdin": "2\n1 9\n100 200",
          "stdout": "3\n2\n"
        },
        {
          "stdin": "5\n1 10000\n100000 200000\n300000 400000\n500000 600000\n700000 800000",
          "stdout": "13\n1\n0\n0\n0\n"
        },
        {
          "stdin": "3\n1 100\n10000000 20000000\n500 1000",
          "stdout": "5\n5\n1\n"
        },
        {
          "stdin": "5\n5000000 6000000\n7000000 8000000\n9000000 10000000\n1 20\n100000000 200000000",
          "stdout": "0\n0\n3\n3\n15\n"
        },
        {
          "stdin": "5\n1 10\n10 100\n100 1000\n1000 10000\n10000 100000",
          "stdout": "3\n2\n5\n4\n10\n"
        },
        {
          "stdin": "2\n112 78788\n87687 8977",
          "stdout": "16\n-10\n"
        },
        {
          "stdin": "1\n54745 904570",
          "stdout": "6\n"
        },
        {
          "stdin": "3\n12342 43322\n94832 6734723\n337732 989898",
          "stdout": "4\n21\n5\n"
        },
        {
          "stdin": "4\n0 10\n10 100\n100 1000\n1000 10000",
          "stdout": "4\n2\n5\n4\n"
        },
        {
          "stdin": "3\n576 900\n400 900\n100 400",
          "stdout": "1\n3\n3\n"
        },
        {
          "stdin": "4\n500 10000\n400 8000\n3000 9000\n1345 2345",
          "stdout": "5\n5\n1\n1\n"
        },
        {
          "stdin": "5\n111111 999999\n123321 547880\n1234567890 9999999999\n777 888\n999999999 10000000000",
          "stdout": "7\n4\n26\n0\n28\n"
        },
        {
          "stdin": "2\n1 10\n100 10000\n",
          "stdout": "3\n9"
        },
        {
          "stdin": "1\n1 10000000000\n",
          "stdout": "120\n"
        },
        {
          "stdin": "3\n1 1000\n1 10000\n1 1000000\n",
          "stdout": "9\n13\n30\n"
        },
        {
          "stdin": "2\n50 500\n100000 1000000\n",
          "stdout": "4\n8\n"
        },
        {
          "stdin": "1\n123456789 9876543210\n",
          "stdout": "41\n"
        },
        {
          "stdin": "4\n10000 20000\n1234567 2345678\n4567890 5678901\n7890123 8901234\n",
          "stdout": "5\n3\n0\n0\n"
        },
        {
          "stdin": "1\n1000 10000\n",
          "stdout": "4\n"
        },
        {
          "stdin": "2\n1 5\n6 10\n",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "5\n10 15\n20 25\n30 35\n40 45\n50 55\n",
          "stdout": "0\n0\n0\n0\n0\n"
        },
        {
          "stdin": "2\n99 999\n999 9999\n",
          "stdout": "5\n3\n"
        },
        {
          "stdin": "1\n1 10\n",
          "stdout": "3\n"
        },
        {
          "stdin": "5\n1 50\n100 200\n500 1000\n1 5000\n50000 100000\n",
          "stdout": "4\n2\n1\n11\n1\n"
        },
        {
          "stdin": "3\n100 200\n500 1000\n10000 50000\n",
          "stdout": "2\n1\n9\n"
        },
        {
          "stdin": "4\n1 1\n2 2\n3 3\n4 4\n",
          "stdout": "1\n0\n0\n1\n"
        },
        {
          "stdin": "3\n1 100000000\n10 100000000\n100 100000000\n",
          "stdout": "63\n60\n59\n"
        },
        {
          "stdin": "2\n10000000 50000000\n50000000 100000000\n",
          "stdout": "11\n6\n"
        },
        {
          "stdin": "3\n1 100\n2 200\n3 300\n",
          "stdout": "5\n5\n5\n"
        },
        {
          "stdin": "4\n1 4000\n2 5000\n3 6000\n4 7000\n",
          "stdout": "10\n10\n10\n10\n"
        },
        {
          "stdin": "5\n1 10\n2 20\n3 30\n4 40\n5 50\n",
          "stdout": "3\n2\n2\n2\n2\n"
        },
        {
          "stdin": "1\n1 500\n",
          "stdout": "8\n"
        },
        {
          "stdin": "2\n1 10000\n10 100000\n",
          "stdout": "13\n19\n"
        },
        {
          "stdin": "1\n1111 222222\n",
          "stdout": "14\n"
        },
        {
          "stdin": "1\n4 49\n",
          "stdout": "3\n"
        },
        {
          "stdin": "1\n100000000 10000000000\n",
          "stdout": "58\n"
        },
        {
          "stdin": "1\n10000000000 100000000000\n",
          "stdout": "1\n"
        },
        {
          "stdin": "5\n1 10\n1 100\n1 1000\n1 10000\n1 100000\n",
          "stdout": "3\n5\n9\n13\n22\n"
        },
        {
          "stdin": "2\n50 100\n200 500\n",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "3\n1 10\n100 1000\n10000 100000\n",
          "stdout": "3\n5\n10\n"
        },
        {
          "stdin": "2\n1 49\n100 10000\n",
          "stdout": "4\n9\n"
        },
        {
          "stdin": "1\n123456 123456789\n",
          "stdout": "52\n"
        },
        {
          "stdin": "3\n1 49\n49 10000\n10000 10000000\n",
          "stdout": "4\n10\n34\n"
        },
        {
          "stdin": "1\n9999999999 10000000000\n",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n1000000 10000000\n",
          "stdout": "17\n"
        },
        {
          "stdin": "5\n10 100\n100 1000\n1000 10000\n10000 100000\n100000 1000000\n",
          "stdout": "2\n5\n4\n10\n8\n"
        },
        {
          "stdin": "10\n1 10\n10 100\n100 1000\n1000 10000\n10000 100000\n100000 1000000\n1000000 10000000\n10000000 100000000\n100000000 1000000000\n1000000000 10000000000\n",
          "stdout": "3\n2\n5\n4\n10\n8\n17\n17\n30\n28\n"
        },
        {
          "stdin": "2\n1 10\n100 10000",
          "stdout": "3\n9"
        },
        {
          "stdin": "4\n1 15\n20 30\n100 500\n5000 50000",
          "stdout": "3\n0\n4\n10\n"
        },
        {
          "stdin": "3\n45 200\n300 5000\n6000 100000",
          "stdout": "3\n5\n11\n"
        },
        {
          "stdin": "5\n1 25\n35 50\n100 1000\n1200 3000\n4000 50000",
          "stdout": "3\n1\n5\n1\n11\n"
        },
        {
          "stdin": "3\n1 50\n50 250\n500 5000",
          "stdout": "4\n2\n3\n"
        },
        {
          "stdin": "1\n1 500",
          "stdout": "8\n"
        },
        {
          "stdin": "2\n500 1000\n1200 5000",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "4\n2 200\n300 1000\n1500 5000\n6000 100000",
          "stdout": "5\n3\n1\n11\n"
        },
        {
          "stdin": "3\n4 25\n35 50\n500 750",
          "stdout": "2\n1\n0\n"
        },
        {
          "stdin": "1\n1 750",
          "stdout": "8\n"
        },
        {
          "stdin": "5\n1 50\n70 150\n200 1000\n1200 3000\n4000 50000",
          "stdout": "4\n2\n3\n1\n11\n"
        },
        {
          "stdin": "3\n1 40\n60 300\n500 5000",
          "stdout": "3\n2\n3\n"
        },
        {
          "stdin": "1\n1 600",
          "stdout": "8\n"
        },
        {
          "stdin": "2\n600 1000\n1200 5000",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "4\n3 200\n300 1000\n1500 5000\n6000 100000",
          "stdout": "5\n3\n1\n11\n"
        },
        {
          "stdin": "1\n1 800",
          "stdout": "8\n"
        },
        {
          "stdin": "3\n1 30\n70 250\n300 1000",
          "stdout": "3\n2\n3\n"
        },
        {
          "stdin": "1\n1 1000",
          "stdout": "9\n"
        },
        {
          "stdin": "2\n1000 5000\n6000 100000",
          "stdout": "2\n11\n"
        },
        {
          "stdin": "1\n1 2000",
          "stdout": "10\n"
        },
        {
          "stdin": "3\n1 25\n75 300\n350 750",
          "stdout": "3\n2\n2\n"
        },
        {
          "stdin": "1\n1 3000",
          "stdout": "10\n"
        },
        {
          "stdin": "2\n3000 5000\n6000 9000",
          "stdout": "1\n0\n"
        },
        {
          "stdin": "3\n4 25\n35 50\n500 1500",
          "stdout": "2\n1\n2\n"
        },
        {
          "stdin": "3\n7 49\n10 100\n1000 10000\n",
          "stdout": "2\n2\n4\n"
        },
        {
          "stdin": "1\n1 100\n",
          "stdout": "5\n"
        },
        {
          "stdin": "4\n100 200\n300 400\n500 600\n700 800\n",
          "stdout": "2\n1\n0\n0\n"
        },
        {
          "stdin": "2\n1 10000\n100000 1000000\n",
          "stdout": "13\n8\n"
        },
        {
          "stdin": "5\n1000 10000\n10000 100000\n100000 1000000\n1000000 10000000\n10000000 100000000\n",
          "stdout": "4\n10\n8\n17\n17\n"
        },
        {
          "stdin": "3\n150 159\n40096 68024448\n666 888888\n",
          "stdout": "0\n39\n18\n"
        },
        {
          "stdin": "2\n123456789 9876543210\n1020304050 5060708090\n",
          "stdout": "41\n19\n"
        },
        {
          "stdin": "1\n50 70\n",
          "stdout": "0\n"
        },
        {
          "stdin": "2\n69 69\n420 420\n",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "2\n0 5000\n5000 10000\n",
          "stdout": "12\n2\n"
        },
        {
          "stdin": "3\n1 4\n8 20\n30 50\n",
          "stdout": "2\n1\n1\n"
        },
        {
          "stdin": "4\n1 9\n10 20\n25 36\n49 64\n",
          "stdout": "3\n0\n0\n1\n"
        },
        {
          "stdin": "3\n1 1\n2 2\n3 3\n",
          "stdout": "1\n0\n0\n"
        },
        {
          "stdin": "5\n1 25\n26 50\n51 75\n76 100\n101 125\n",
          "stdout": "3\n1\n0\n1\n0\n"
        },
        {
          "stdin": "3\n1 16\n17 256\n257 4096\n",
          "stdout": "3\n3\n4\n"
        },
        {
          "stdin": "2\n100 200\n200 300\n",
          "stdout": "2\n0\n"
        },
        {
          "stdin": "2\n300 400\n400 500\n",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "2\n500 600\n600 700\n",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "2\n700 800\n800 900\n",
          "stdout": "0\n1\n"
        },
        {
          "stdin": "5\n1 1000\n1001 2000\n2001 3000\n3001 4000\n4001 5000\n",
          "stdout": "9\n1\n0\n0\n1\n"
        },
        {
          "stdin": "4\n5001 6000\n6001 7000\n7001 8000\n8001 9000\n",
          "stdout": "0\n0\n0\n0\n"
        },
        {
          "stdin": "3\n9001 9500\n9501 9900\n9901 10000\n",
          "stdout": "1\n0\n1\n"
        },
        {
          "stdin": "1\n100 500\n",
          "stdout": "4\n"
        },
        {
          "stdin": "1\n500 1000\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n1000 5000\n5000 8000\n",
          "stdout": "2\n0\n"
        },
        {
          "stdin": "2\n8000 10000\n10000 20000\n",
          "stdout": "2\n5\n"
        },
        {
          "stdin": "1\n20000 50000\n",
          "stdout": "4\n"
        },
        {
          "stdin": "1\n1 1000\n",
          "stdout": "9\n"
        },
        {
          "stdin": "2\n4 400\n900 9000\n",
          "stdout": "6\n3\n"
        },
        {
          "stdin": "4\n1 10\n10 100\n100 1000\n1000 10000\n",
          "stdout": "3\n2\n5\n4\n"
        },
        {
          "stdin": "3\n25 625\n49 2401\n81 6561\n",
          "stdout": "5\n7\n7\n"
        },
        {
          "stdin": "5\n1 1\n4 4\n9 9\n16 16\n25 25\n",
          "stdout": "1\n1\n1\n0\n0\n"
        },
        {
          "stdin": "3\n1 100\n100 10000\n10000 100000000\n",
          "stdout": "5\n9\n51\n"
        },
        {
          "stdin": "2\n16 256\n36 1296\n",
          "stdout": "3\n6\n"
        },
        {
          "stdin": "1\n81 100\n",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n25 225\n36 324\n",
          "stdout": "3\n3\n"
        },
        {
          "stdin": "1\n49 4900\n",
          "stdout": "8\n"
        },
        {
          "stdin": "2\n9 729\n4 256\n",
          "stdout": "6\n5\n"
        },
        {
          "stdin": "2\n81 8100\n16 1600\n",
          "stdout": "7\n7\n"
        },
        {
          "stdin": "3\n4 144\n9 361\n25 625\n",
          "stdout": "5\n4\n5\n"
        },
        {
          "stdin": "2\n36 3600\n64 6400\n",
          "stdout": "7\n7\n"
        },
        {
          "stdin": "1\n16 1600\n",
          "stdout": "7\n"
        },
        {
          "stdin": "3\n64 6400\n81 8100\n100 10000\n",
          "stdout": "7\n7\n9\n"
        },
        {
          "stdin": "1\n36 3600\n",
          "stdout": "7\n"
        },
        {
          "stdin": "2\n9 441\n25 2500\n",
          "stdout": "6\n7\n"
        },
        {
          "stdin": "3\n15 30\n250 500\n10000 20000",
          "stdout": "0\n2\n5\n"
        },
        {
          "stdin": "1\n1 10000000000",
          "stdout": "120\n"
        },
        {
          "stdin": "4\n10 20\n30 40\n50 60\n70 80",
          "stdout": "0\n0\n0\n0\n"
        },
        {
          "stdin": "5\n100 200\n300 400\n500 600\n700 800\n900 1000",
          "stdout": "2\n1\n0\n0\n1\n"
        },
        {
          "stdin": "2\n5000 10000\n200000 500000",
          "stdout": "2\n3\n"
        },
        {
          "stdin": "1\n1000 2000",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n99999999 1000000000\n99999999 1000000000\n99999999 1000000000\n99999999 1000000000",
          "stdout": "30\n30\n30\n30\n"
        },
        {
          "stdin": "5\n1 2\n2 3\n3 4\n4 5\n5 6",
          "stdout": "1\n0\n1\n1\n0\n"
        },
        {
          "stdin": "1\n500000 1000000",
          "stdout": "4\n"
        },
        {
          "stdin": "1\n1 1\n",
          "stdout": "1\n"
        },
        {
          "stdin": "3\n1 10\n10 100\n100 1000\n",
          "stdout": "3\n2\n5\n"
        },
        {
          "stdin": "1\n10 10\n",
          "stdout": "0\n"
        },
        {
          "stdin": "3\n2 20\n50 5000\n10000 1000000\n",
          "stdout": "2\n7\n18\n"
        },
        {
          "stdin": "1\n5000000000 10000000000\n",
          "stdout": "9\n"
        },
        {
          "stdin": "2\n1000000000 1000000000\n2000000000 2000000000\n",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "5\n1 10\n10 100\n100 1000\n1000 10000\n10000 100000\n",
          "stdout": "3\n2\n5\n4\n10\n"
        },
        {
          "stdin": "1\n9 16\n",
          "stdout": "1\n"
        },
        {
          "stdin": "1\n1000000000 2000000000\n",
          "stdout": "8\n"
        },
        {
          "stdin": "1\n1 20",
          "stdout": "3\n"
        },
        {
          "stdin": "2\n30 50\n2000 3000",
          "stdout": "1\n0\n"
        },
        {
          "stdin": "3\n90 120\n130 150\n160 190",
          "stdout": "1\n1\n0\n"
        },
        {
          "stdin": "1\n5 15",
          "stdout": "1\n"
        },
        {
          "stdin": "2\n22 33\n44 55",
          "stdout": "0\n1\n"
        },
        {
          "stdin": "1\n10000000000 10000000000",
          "stdout": "1\n"
        },
        {
          "stdin": "4\n1 2\n2 3\n3 4\n4 5",
          "stdout": "1\n0\n1\n1\n"
        },
        {
          "stdin": "2\n10 20\n30 40",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "5\n9 10\n19 20\n29 30\n39 40\n49 50",
          "stdout": "1\n0\n0\n0\n1\n"
        },
        {
          "stdin": "2\n156 2835\n5423 8765",
          "stdout": "4\n0\n"
        },
        {
          "stdin": "1\n123456 7891011",
          "stdout": "21\n"
        },
        {
          "stdin": "3\n100 200\n300 400\n500 600",
          "stdout": "2\n1\n0\n"
        },
        {
          "stdin": "1\n6867 982452",
          "stdout": "17\n"
        },
        {
          "stdin": "1\n1323 56565",
          "stdout": "12\n"
        },
        {
          "stdin": "3\n44444 55555\n666666 7777777\n88888888 999999999",
          "stdout": "1\n17\n35\n"
        },
        {
          "stdin": "5\n1 5\n5 10\n10 15\n15 20\n20 25",
          "stdout": "2\n1\n0\n0\n0\n"
        },
        {
          "stdin": "4\n1000 2000\n3000 4000\n5000 6000\n7000 8000",
          "stdout": "1\n0\n0\n0\n"
        },
        {
          "stdin": "2\n29875 642387\n23765 234987",
          "stdout": "9\n6\n"
        },
        {
          "stdin": "4\n15 30\n75 80\n90 100\n120 150",
          "stdout": "0\n0\n1\n1\n"
        },
        {
          "stdin": "2\n1 10\n100 11000",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n1 10\n100 01100",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n1 10\n110 10000",
          "stdout": "3\n8\n"
        },
        {
          "stdin": "2\n1 10\n110 11000",
          "stdout": "3\n9\n"
        },
        {
          "stdin": "2\n2 10\n100 11100",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n2 12\n110 11100",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n1 1\n010 10001",
          "stdout": "1\n10\n"
        },
        {
          "stdin": "2\n1 6\n110 10000",
          "stdout": "2\n8\n"
        },
        {
          "stdin": "2\n2 10\n100 01000",
          "stdout": "2\n5\n"
        },
        {
          "stdin": "2\n1 3\n110 10101",
          "stdout": "1\n8\n"
        },
        {
          "stdin": "2\n2 20\n110 01100",
          "stdout": "2\n4\n"
        },
        {
          "stdin": "2\n1 10\n101 01010",
          "stdout": "3\n4\n"
        },
        {
          "stdin": "2\n2 32\n110 00100",
          "stdout": "2\n0\n"
        },
        {
          "stdin": "2\n1 18\n100 00110",
          "stdout": "3\n1\n"
        },
        {
          "stdin": "2\n1 6\n001 10000",
          "stdout": "2\n13\n"
        },
        {
          "stdin": "2\n1 3\n100 01000",
          "stdout": "1\n5\n"
        },
        {
          "stdin": "2\n1 3\n110 01000",
          "stdout": "1\n4\n"
        },
        {
          "stdin": "2\n3 39\n010 11000",
          "stdout": "2\n11\n"
        },
        {
          "stdin": "2\n3 76\n010 11000",
          "stdout": "3\n11\n"
        },
        {
          "stdin": "2\n3 76\n010 01000",
          "stdout": "3\n6\n"
        },
        {
          "stdin": "2\n6 76\n010 01000",
          "stdout": "2\n6\n"
        },
        {
          "stdin": "2\n10 76\n011 01000",
          "stdout": "1\n6\n"
        },
        {
          "stdin": "2\n10 76\n001 01000",
          "stdout": "1\n9\n"
        },
        {
          "stdin": "2\n1 18\n101 00110",
          "stdout": "3\n0\n"
        },
        {
          "stdin": "2\n2 6\n001 10000",
          "stdout": "1\n13\n"
        },
        {
          "stdin": "2\n2 3\n110 01000",
          "stdout": "0\n4\n"
        },
        {
          "stdin": "2\n3 2\n110 11000",
          "stdout": "0\n9\n"
        },
        {
          "stdin": "2\n1 10\n001 10100",
          "stdout": "3\n13\n"
        },
        {
          "stdin": "2\n1 3\n011 11101",
          "stdout": "1\n11\n"
        },
        {
          "stdin": "2\n2 8\n110 00100",
          "stdout": "1\n0\n"
        },
        {
          "stdin": "2\n2 1\n001 10000",
          "stdout": "0\n13\n"
        },
        {
          "stdin": "2\n3 113\n001 01000",
          "stdout": "4\n9\n"
        },
        {
          "stdin": "2\n1 16\n001 11100",
          "stdout": "3\n14\n"
        },
        {
          "stdin": "2\n1 29\n010 00101",
          "stdout": "3\n2\n"
        },
        {
          "stdin": "2\n2 3\n010 11101",
          "stdout": "0\n11\n"
        },
        {
          "stdin": "2\n2 8\n010 00100",
          "stdout": "1\n2\n"
        },
        {
          "stdin": "2\n2 29\n010 00101",
          "stdout": "2\n2\n"
        },
        {
          "stdin": "2\n2 3\n011 10110",
          "stdout": "0\n10\n"
        },
        {
          "stdin": "2\n5 6\n010 01010",
          "stdout": "0\n6\n"
        },
        {
          "stdin": "2\n4 205\n001 01000",
          "stdout": "5\n9\n"
        },
        {
          "stdin": "2\n4 144\n010 11000",
          "stdout": "5\n11\n"
        },
        {
          "stdin": "2\n4 205\n011 01000",
          "stdout": "5\n6\n"
        },
        {
          "stdin": "2\n7 5\n111 10111",
          "stdout": "0\n8\n"
        },
        {
          "stdin": "2\n2 3\n100 01010",
          "stdout": "0\n5\n"
        },
        {
          "stdin": "2\n5 205\n011 01100",
          "stdout": "4\n6\n"
        },
        {
          "stdin": "2\n3 14\n001 11100",
          "stdout": "2\n14\n"
        },
        {
          "stdin": "2\n3 3\n011 00110",
          "stdout": "0\n2\n"
        },
        {
          "stdin": "2\n3 120\n001 11000",
          "stdout": "4\n14\n"
        },
        {
          "stdin": "2\n4 144\n011 00100",
          "stdout": "5\n2\n"
        },
        {
          "stdin": "2\n5 241\n011 00100",
          "stdout": "4\n2\n"
        },
        {
          "stdin": "2\n5 15\n001 11011",
          "stdout": "1\n14\n"
        },
        {
          "stdin": "2\n4 132\n011 10001",
          "stdout": "4\n10\n"
        },
        {
          "stdin": "2\n30 10\n111 00111",
          "stdout": "0\n0\n"
        },
        {
          "stdin": "2\n2 17\n100 00100",
          "stdout": "2\n1\n"
        },
        {
          "stdin": "2\n1 10\n100 11100",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n1 10\n110 10001",
          "stdout": "3\n8\n"
        },
        {
          "stdin": "2\n2 12\n100 11100",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n1 10\n010 10001",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n2 12\n110 11101",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n1 10\n100 01000",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n1 10\n100 11001",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n1 10\n100 10100",
          "stdout": "3\n9\n"
        },
        {
          "stdin": "2\n1 10\n100 01101",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n1 6\n110 11000",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n2 10\n100 11000",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n1 10\n110 10101",
          "stdout": "3\n8\n"
        },
        {
          "stdin": "2\n2 18\n100 11100",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n1 20\n010 10001",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n2 20\n110 11100",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n1 12\n110 11101",
          "stdout": "3\n9\n"
        },
        {
          "stdin": "2\n1 10\n100 01010",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n1 15\n100 01101",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n2 18\n100 11110",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n1 20\n011 10001",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n1 12\n110 11111",
          "stdout": "3\n9\n"
        },
        {
          "stdin": "2\n1 15\n101 01101",
          "stdout": "3\n4\n"
        },
        {
          "stdin": "2\n1 6\n111 10000",
          "stdout": "2\n8\n"
        },
        {
          "stdin": "2\n2 10\n100 01010",
          "stdout": "2\n5\n"
        },
        {
          "stdin": "2\n1 3\n111 10101",
          "stdout": "1\n8\n"
        },
        {
          "stdin": "2\n1 18\n100 11110",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n1 20\n011 10011",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n2 32\n110 01100",
          "stdout": "2\n4\n"
        },
        {
          "stdin": "2\n1 10\n101 01000",
          "stdout": "3\n4\n"
        },
        {
          "stdin": "2\n1 15\n101 01001",
          "stdout": "3\n4\n"
        },
        {
          "stdin": "2\n1 6\n011 10000",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n1 18\n100 01110",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n1 4\n101 01000",
          "stdout": "2\n4\n"
        },
        {
          "stdin": "2\n1 18\n101 01001",
          "stdout": "3\n4\n"
        },
        {
          "stdin": "2\n1 6\n011 10001",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n2 32\n110 10100",
          "stdout": "2\n8\n"
        },
        {
          "stdin": "2\n1 4\n100 01000",
          "stdout": "2\n5\n"
        },
        {
          "stdin": "2\n1 18\n100 01001",
          "stdout": "3\n5\n"
        },
        {
          "stdin": "2\n2 32\n100 10100",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n1 18\n101 11001",
          "stdout": "3\n9\n"
        },
        {
          "stdin": "2\n1 10\n011 10000",
          "stdout": "3\n10\n"
        },
        {
          "stdin": "2\n2 37\n100 10100",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n1 18\n101 01011",
          "stdout": "3\n4\n"
        },
        {
          "stdin": "2\n2 10\n011 10000",
          "stdout": "2\n10\n"
        },
        {
          "stdin": "2\n2 37\n100 10110",
          "stdout": "2\n9\n"
        },
        {
          "stdin": "2\n1 3\n110 01010",
          "stdout": "1\n4\n"
        },
        {
          "stdin": "2\n1 10\n100 10000",
          "stdout": "3\n9\n"
        }
      ],
      "source": "codechef",
      "difficulty": "MEDIUM",
      "human_solutions": [
        "from bisect import *\ntable = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\taa = bisect_left(table, a)\n\tbb = bisect_right(table, b)\n\tprint(bb - aa)\n",
        "from math import sqrt as S, ceil as upar, floor as neeche\n\ndef sahi(n):\n\tif str(n).count('0') + str(n).count('1') + str(n).count('4') + str(n).count('9') == len(str(n)):\n\t\treturn True\n\treturn False\np = 10 ** 5 + 9\npre = [0] * p\nfor i in range(1, p):\n\tcurr = i * i\n\tpre[i] = pre[i - 1] + sahi(curr)\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tb = int(S(b))\n\ta = int(S(a - 1))\n\tprint(pre[b] - pre[a])\n",
        "n = int(input())\nx = ['2', '3', '5', '6', '7', '8']\nlm = []\nfor i in range(1, 10 ** 5 + 1):\n\tflag = 0\n\tfor j in x:\n\t\tif j in str(i ** 2):\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag == 0:\n\t\tlm.append(i ** 2)\nfor i in range(n):\n\t(a, b) = map(int, input().split())\n\tc = 0\n\tfor k in lm:\n\t\tif k >= a and k <= b:\n\t\t\tc += 1\n\tprint(c)\n",
        "def is_digit_square(n):\n\twhile n > 0:\n\t\tif n % 10 not in [0, 1, 4, 9]:\n\t\t\treturn False\n\t\tn //= 10\n\treturn True\n\ndef lower_bound(x):\n\tlow = 0\n\thigh = len(digit_squares)\n\twhile low < high:\n\t\tmid = (low + high) // 2\n\t\tif digit_squares[mid] < x:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid\n\treturn low\ndigit_squares = []\nfor i in range(1, 10 ** 5):\n\tif is_digit_square(i ** 2):\n\t\tdigit_squares.append(i ** 2)\nt = int(input())\nfor _ in range(t):\n\t(a, b) = (int(i) for i in input().split())\n\tlb = lower_bound(a)\n\tub = lower_bound(b + 1)\n\tif ub == len(digit_squares):\n\t\tprint(ub - lb + 1)\n\telse:\n\t\tprint(ub - lb)\n",
        "IN = lambda : int(input())\nl1 = ['1', '0', '4', '9']\n\ndef fk(t):\n\ts = str(t)\n\tfor i in s:\n\t\tif i in l1:\n\t\t\tpass\n\t\telse:\n\t\t\treturn False\n\treturn True\nl = []\nfor i in range(100005):\n\tif fk(i * i):\n\t\tl.append(i * i)\nfor _ in range(IN()):\n\tc = 0\n\t(n, k) = map(int, input().split())\n\tfor j in l:\n\t\tif j >= n and j <= k:\n\t\t\tc += 1\n\tprint(c)\n",
        "a = [str(i * i) for i in range(1, 10 ** 5 + 1)]\ns = ['2', '3', '5', '6', '7', '8']\ng = []\nfor i in a:\n\tf = 0\n\tfor j in s:\n\t\tif j in i:\n\t\t\tf = 1\n\t\t\tbreak\n\tif f == 0:\n\t\tg.append(int(i))\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tprint(len([i for i in g if a <= i <= b]))\n",
        "import bisect\nt = int(input())\ntemp = {1: 1, 4: 2, 9: 3, 49: 4, 100: 5, 144: 6, 400: 7, 441: 8, 900: 9, 1444: 10, 4900: 11, 9409: 12, 10000: 13, 10404: 14, 11449: 15, 14400: 16, 19044: 17, 40000: 18, 40401: 19, 44100: 20, 44944: 21, 90000: 22, 144400: 23, 419904: 24, 490000: 25, 491401: 26, 904401: 27, 940900: 28, 994009: 29, 1000000: 30, 1004004: 31, 1014049: 32, 1040400: 33, 1100401: 34, 1144900: 35, 1440000: 36, 1904400: 37, 1940449: 38, 4000000: 39, 4004001: 40, 4040100: 41, 4410000: 42, 4494400: 43, 9000000: 44, 9909904: 45, 9941409: 46, 11909401: 47, 14010049: 48, 14040009: 49, 14440000: 50, 19909444: 51, 40411449: 52, 41990400: 53, 49000000: 54, 49014001: 55, 49140100: 56, 49999041: 57, 90440100: 58, 94090000: 59, 94109401: 60, 99400900: 61, 99940009: 62, 100000000: 63, 100040004: 64, 100140049: 65, 100400400: 66, 101404900: 67, 101949409: 68, 104040000: 69, 104919049: 70, 110040100: 71, 111049444: 72, 114041041: 73, 114490000: 74, 144000000: 75, 190440000: 76, 194044900: 77, 400000000: 78, 400040001: 79, 400400100: 80, 404010000: 81, 404090404: 82, 409941009: 83, 414000409: 84, 414041104: 85, 441000000: 86, 449440000: 87, 490091044: 88, 900000000: 89, 990990400: 90, 991494144: 91, 994140900: 92, 1190940100: 93, 1401004900: 94, 1404000900: 95, 1409101444: 96, 1444000000: 97, 1449401041: 98, 1490114404: 99, 1990944400: 100, 4014109449: 101, 4019940409: 102, 4041144900: 103, 4199040000: 104, 4900000000: 105, 4900140001: 106, 4901400100: 107, 4914010000: 108, 4914991449: 109, 4941949401: 110, 4999904100: 111, 9044010000: 112, 9409000000: 113, 9409194001: 114, 9410940100: 115, 9900449001: 116, 9940090000: 117, 9994000900: 118, 9999400009: 119, 10000000000: 120}\narr = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nfor _ in range(t):\n\t(a, b) = map(int, input().split())\n\tflag1 = 0\n\tflag2 = 0\n\tif a in temp and b in temp:\n\t\tans = temp[b] - temp[a]\n\telif a in temp:\n\t\tlb2 = arr[bisect.bisect_left(arr, b, 0, len(arr)) - 1]\n\t\tans = temp[lb2] - temp[a]\n\telif b in temp:\n\t\tlb1 = arr[bisect.bisect_left(arr, a, 0, len(arr))]\n\t\tans = temp[b] - temp[lb1]\n\telse:\n\t\tlb1 = arr[bisect.bisect_left(arr, a, 0, len(arr))]\n\t\tlb2 = arr[bisect.bisect_left(arr, b, 0, len(arr)) - 1]\n\t\tans = temp[lb2] - temp[lb1]\n\tans += 1\n\tprint(ans)\n",
        "import math\n\ndef verifyPerfectDigit(n):\n\tn = int(n)\n\twhile n > 0:\n\t\tx = int(n % 10)\n\t\tif x != 0 and x != 1 and (x != 4) and (x != 9):\n\t\t\treturn 0\n\t\tn = int(n / 10)\n\treturn 1\n\ndef createArray():\n\tarr = []\n\tfor i in range(1, 100001):\n\t\tif verifyPerfectDigit(i * i) == 1:\n\t\t\tarr.append(i * i)\n\treturn arr\n\ndef main():\n\tt = int(input())\n\tarr = createArray()\n\twhile t:\n\t\tstr = input()\n\t\ta = 0\n\t\tb = 0\n\t\tcount = 0\n\t\t(str1, str2) = str.split(' ')\n\t\tfor i in range(0, len(str1)):\n\t\t\ta = a * 10 + int(str1[i])\n\t\tfor i in range(0, len(str2)):\n\t\t\tb = b * 10 + int(str2[i])\n\t\tfor i in range(0, len(arr)):\n\t\t\tif arr[i] >= a and arr[i] <= b:\n\t\t\t\tcount += 1\n\t\tprint(count)\n\t\tt -= 1\nmain()\n",
        "l = []\ns = {'0', '1', '4', '9'}\nfor i in range(0, 100001):\n\tans = i * i\n\tif set(str(ans)).issubset(s):\n\t\tl.append(ans)\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tn = len(l)\n\ts = 0\n\tfor i in l:\n\t\tif a <= i <= b:\n\t\t\ts += 1\n\tprint(s)\n",
        "t = int(input())\nans = []\nfor j in range(10 ** 5 + 1):\n\tflag = 0\n\tnum = str(j * j)\n\tfor i in range(len(num)):\n\t\tif num[i] != '0' and num[i] != '1' and (num[i] != '4') and (num[i] != '9'):\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag == 0:\n\t\tans.append(j * j)\nfor I in range(t):\n\t(a, b) = [int(i) for i in input().split()]\n\tcount = 0\n\tfor i in range(len(ans)):\n\t\tif ans[i] >= a and ans[i] <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "import math\nn = 10 ** 10\narr = []\nfor i in range(1, 1 + int(math.ceil(math.sqrt(n)))):\n\ts = str(i * i)\n\tflag = True\n\tif '2' in s or '3' in s or '5' in s or ('6' in s) or ('7' in s) or ('8' in s):\n\t\tflag = False\n\tif flag:\n\t\tarr.append(int(s))\nt = int(input())\nwhile t:\n\tt -= 1\n\t(a, b) = map(int, input().split())\n\tc = 0\n\tfor i in arr:\n\t\tif i >= a and i <= b:\n\t\t\tc += 1\n\tprint(c)\n",
        "from math import *\ncount = []\nfor i in range(10 ** 5 + 5):\n\tq = 0\n\tfor j in str(i ** 2):\n\t\tif j not in ['0', '1', '4', '9']:\n\t\t\tq = 1\n\t\t\tbreak\n\tif q == 0:\n\t\tcount.append(i ** 2)\nfor _ in range(int(input())):\n\t(n, m) = map(int, input().split())\n\tc = 0\n\tfor i in count:\n\t\tif i >= n and i <= m:\n\t\t\tc += 1\n\t\telif i > m:\n\t\t\tbreak\n\tprint(c)\n",
        "n = 0\narr = []\nwhile n * n <= 10000000000:\n\tz = n * n\n\tflag = 0\n\twhile z > 0:\n\t\tk = int(z % 10)\n\t\tif k != 0 and k != 1 and (k != 4) and (k != 9):\n\t\t\tflag = 1\n\t\t\tbreak\n\t\tz //= 10\n\tif flag == 0:\n\t\tarr.append(n * n)\n\tn += 1\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tcount = 0\n\tfor i in range(len(arr)):\n\t\tif a <= arr[i] <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "import math\nimport sys\n\ndef _int():\n\treturn int(sys.stdin.readline())\n\ndef _ints():\n\treturn map(int, sys.stdin.readline().split())\n\ndef _intarr():\n\treturn list(map(int, sys.stdin.readline().split()))\n\ndef _str():\n\treturn sys.stdin.readline()\n\ndef _strarr():\n\treturn sys.stdin.readline().split()\n\ndef is_perfect(n):\n\tperfect = True\n\twhile n != 0:\n\t\tr = n % 10\n\t\tif r not in [0, 1, 4, 9]:\n\t\t\tperfect = False\n\t\t\tbreak\n\t\tn = n // 10\n\treturn perfect\nmem = [0] * 100001\nc = 0\nfor i in range(1, len(mem)):\n\tif is_perfect(i * i):\n\t\tc += 1\n\tmem[i] = c\nt = _int()\nfor _ in range(t):\n\t(a, b) = _ints()\n\tra = int(math.ceil(math.sqrt(a)))\n\trb = int(math.floor(math.sqrt(b)))\n\tprint(mem[rb] - mem[ra - 1])\n",
        "try:\n\tt = int(input())\n\tl = ['0', '1', '4', '9']\n\tm = []\n\tc = 0\n\ts = 0\n\tj = 0\n\twhile j <= 1000002:\n\t\ts = str(j * j)\n\t\tfor k in s:\n\t\t\tif k not in l:\n\t\t\t\tc = 0\n\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tc = 1\n\t\tif c == 1:\n\t\t\tm.append(s)\n\t\tj = j + 1\n\tfor _ in range(t):\n\t\tcount = 0\n\t\t(a, b) = map(int, input().split())\n\t\tfor i in m:\n\t\t\tif int(i) >= a and int(i) <= b:\n\t\t\t\tcount += 1\n\t\tprint(count)\nexcept:\n\tpass\n",
        "import math\n\ndef fun(n):\n\tl = ['0', '1', '4', '9']\n\ts = str(n)\n\tfor k in range(len(s)):\n\t\tif s[k] not in l:\n\t\t\treturn False\n\treturn True\nl1 = []\nfor i in range(1000000):\n\tif fun(i ** 2) == True:\n\t\tl1.append(i ** 2)\nfor it in range(int(input())):\n\tcount = 0\n\tlst = list(map(int, input().split()))\n\ta = lst[0]\n\tb = lst[1]\n\tfor j in l1:\n\t\tif j >= a and j <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "noOfTestCases = int(input())\nresult = [0, 1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nwhile noOfTestCases != 0:\n\t(lower, upper) = list(map(int, input().split()))\n\tres = 0\n\tfor i in result:\n\t\tif i >= lower and i <= upper:\n\t\t\tres += 1\n\t\telif i > upper:\n\t\t\tbreak\n\tprint(res)\n\tnoOfTestCases -= 1\n",
        "t = int(input())\nl = ['2', '3', '5', '6', '7', '8']\nk = []\nfor j in range(1, 10 ** 5 + 1):\n\tflag = 0\n\tfor c in l:\n\t\tif c in str(j ** 2):\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag == 0:\n\t\tk.append(j ** 2)\nfor i in range(t):\n\t(a, b) = list(map(int, input().split()))\n\tcount = 0\n\tfor m in k:\n\t\tif a <= m <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "import math\nimport collections\nlst = ['0', '1', '4', '9']\nfor i in range(4, 100001):\n\tn = str(i * i)\n\tl = len(n)\n\td = collections.Counter(n)\n\tk = d['0'] + d['1'] + d['4'] + d['9']\n\tif k == l:\n\t\tlst.append(n)\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tcount = 0\n\tfor num in lst:\n\t\tif int(num) >= a and int(num) <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "def check(n):\n\tfor j in str(n):\n\t\tif j not in ['1', '0', '4', '9']:\n\t\t\treturn False\n\treturn True\nt = int(input())\nmaxi = 100001\nsq = []\nfor i in range(maxi):\n\ts = i * i\n\tif check(s):\n\t\tsq.append(s)\nfor _ in range(t):\n\t(l, u) = map(int, input().split())\n\tcount = 0\n\tfor i in sq:\n\t\tif l <= i and i <= u:\n\t\t\tcount += 1\n\tprint(count)\n",
        "def main():\n\timport math\n\tT = int(input())\n\toutput = list()\n\tsquaredigits = {'0', '1', '4', '9'}\n\tsqrt_beginning = 1\n\tsqrt_end = math.ceil(math.sqrt(10000000000))\n\tx = 0\n\tcounter = 0\n\tlistcounter = list()\n\twhile x <= sqrt_end:\n\t\tsquare = x * x\n\t\tstring_square = str(square)\n\t\tflag = -1\n\t\tfor digit in string_square:\n\t\t\tif digit not in squaredigits:\n\t\t\t\tflag = 0\n\t\t\t\tbreak\n\t\tif flag == -1:\n\t\t\tcounter = counter + 1\n\t\tlistcounter.append(counter)\n\t\tx = x + 1\n\tfor i in range(0, T):\n\t\tline = input()\n\t\tlinelist = line.split()\n\t\ta = int(linelist[0])\n\t\tb = int(linelist[1])\n\t\tsqrt_a = math.ceil(math.sqrt(a))\n\t\tsqrt_b = math.ceil(math.sqrt(b))\n\t\toutput.append(listcounter[sqrt_b] - listcounter[sqrt_a - 1])\n\tfor x in output:\n\t\tprint(x)\nmain()\n",
        "import math\nans = [0] * 100001\nfor i in range(1, 100001):\n\ts = str(i ** 2)\n\tans[i] = ans[i - 1]\n\tfor j in s:\n\t\tif j not in {'0', '1', '4', '9'}:\n\t\t\tbreak\n\telse:\n\t\tans[i] += 1\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\t(a, b) = (math.ceil(a ** 0.5), math.floor(b ** 0.5))\n\tprint(ans[b] - ans[a - 1])\n",
        "from math import sqrt\nlst = []\n\ndef perfectsquarelst():\n\taa = 1\n\tbb = 100000\n\tfor i in range(aa, bb + 1):\n\t\tnum = str(i * i)\n\t\tperfect = True\n\t\tfor d in num:\n\t\t\tif d in ['2', '3', '5', '6', '7', '8']:\n\t\t\t\tperfect = False\n\t\tif perfect:\n\t\t\tlst.append(i * i)\nT = int(input())\nperfectsquarelst()\nwhile T > 0:\n\tT -= 1\n\tcount = 0\n\t(a, b) = map(int, input().split(' '))\n\tfor k in lst:\n\t\tif k >= a and k <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "import bisect\n\ndef is_digit_square(n):\n\twhile n > 0:\n\t\tif n % 10 not in [0, 1, 4, 9]:\n\t\t\treturn False\n\t\tn //= 10\n\treturn True\ndigit_squares = []\nfor i in range(1, 10 ** 5):\n\tif is_digit_square(i ** 2):\n\t\tdigit_squares.append(i ** 2)\nt = int(input())\nfor _ in range(t):\n\t(a, b) = (int(i) for i in input().split())\n\tlower_bound = bisect.bisect_left(digit_squares, a)\n\tupper_bound = bisect.bisect_right(digit_squares, b)\n\tif upper_bound == len(digit_squares):\n\t\tprint(upper_bound - lower_bound + 1)\n\telse:\n\t\tprint(upper_bound - lower_bound)\n",
        "def lower_bound(aux, x):\n\tl = 0\n\tr = len(aux) - 1\n\twhile l < r:\n\t\tmid = l + (r - l) // 2\n\t\tif aux[mid] >= x:\n\t\t\tr = mid\n\t\telse:\n\t\t\tl = mid + 1\n\treturn l\naux = []\nfor i in range(1, 100000 + 1):\n\tt = str(i * i)\n\tif t.count('0') + t.count('1') + t.count('4') + t.count('9') == len(t):\n\t\taux.append(int(t))\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tans = lower_bound(aux, b) - 1 - lower_bound(aux, a) + 1\n\tif b in aux:\n\t\tans += 1\n\tprint(ans)\n",
        "import math\nl = []\nfor i in range(1, 100001):\n\tm = i * i\n\ttemp = 1\n\twhile m:\n\t\tif m % 10 != 0 and m % 10 != 1 and (m % 10 != 4) and (m % 10 != 9):\n\t\t\ttemp = 0\n\t\t\tbreak\n\t\tm = m // 10\n\tif temp == 1:\n\t\tl.append(i)\nfor i in range(int(input())):\n\t(a, b) = map(int, input().split())\n\ts = 0\n\ta1 = math.ceil(a ** 0.5)\n\tb1 = int(b ** 0.5)\n\tm = 0\n\tn = -1\n\tfor j in range(len(l)):\n\t\tif l[j] <= b1:\n\t\t\tm = j\n\t\tif l[j] < a1:\n\t\t\tn = j\n\tprint(m - n)\n",
        "import math\nt = int(input())\nl = [0] * 1000001\nfor i in range(1, 1000001):\n\tx = str(i * i)\n\tif x.count('1') + x.count('0') + x.count('4') + x.count('9') == len(x):\n\t\tl[i] = l[i - 1] + 1\n\telse:\n\t\tl[i] = l[i - 1]\nfor i in range(t):\n\t(a, b) = map(int, input().split())\n\t(a, b) = (math.ceil(pow(a, 0.5)), math.ceil(pow(b, 0.5)))\n\tprint(l[b] - l[a - 1])\n",
        "n = 10 ** 5 + 1\nl = []\nfor i in range(1, n):\n\tx = i ** 2\n\ts = str(x)\n\tq = 0\n\tfor j in s:\n\t\tif j != '0' and j != '1' and (j != '4') and (j != '9'):\n\t\t\tq = 1\n\t\t\tbreak\n\tif q == 0:\n\t\tl.append(x)\nt = int(input())\nwhile t > 0:\n\t(a, b) = map(int, input().split())\n\tx = y = 0\n\tfor i in range(120):\n\t\tif l[i] >= b:\n\t\t\tx = i\n\t\t\tbreak\n\tif l[i] > b:\n\t\tx -= 1\n\tfor j in range(120):\n\t\tif l[j] >= a:\n\t\t\ty = j\n\t\t\tbreak\n\tprint(x - y + 1)\n\tt -= 1\n",
        "from math import ceil, floor, sqrt\n\ndef solve(n):\n\tx = [0, 1, 4, 9]\n\twhile n != 0:\n\t\tif n % 10 in x:\n\t\t\tn //= 10\n\t\telse:\n\t\t\treturn 0\n\treturn 1\nans = [0] * 100001\nfor i in range(1, 100001):\n\tans[i] = solve(i * i)\nfor i in range(1, 100001):\n\tans[i] += ans[i - 1]\nt = int(input())\nfor _ in range(t):\n\t(l, r) = map(int, input().split())\n\tl = ceil(sqrt(l))\n\tr = floor(sqrt(r))\n\tprint(ans[r] - ans[l - 1])\n",
        "t = int(input())\nlst = []\nj = 0\nwhile j * j <= 10000000000:\n\tz = j * j\n\tflag = 0\n\twhile z > 0:\n\t\tk = int(z % 10)\n\t\tif k != 0 and k != 1 and (k != 4) and (k != 9):\n\t\t\tflag = 1\n\t\t\tbreak\n\t\tz = z / 10\n\tif flag == 0:\n\t\tlst.append(j * j)\n\tj = j + 1\nwhile t > 0:\n\tt -= 1\n\t(a, b) = map(int, input().split())\n\tcount = 0\n\tfor i in range(len(lst)):\n\t\tif lst[i] >= a and lst[i] <= b:\n\t\t\tcount += 1\n\tprint(count)\n",
        "from sys import stdin\nawsSquares = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\nT = int(stdin.readline().strip())\nwhile T > 0:\n\t[l, r] = [int(n) for n in stdin.readline().strip().split()]\n\tlow = 0\n\thigh = len(awsSquares) - 1\n\twhile low < high:\n\t\tmid = int((low + high) / 2)\n\t\tif awsSquares[mid] < l:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid\n\tstart = low\n\tlow = 0\n\thigh = len(awsSquares) - 1\n\twhile low < high:\n\t\tmid = int((low + high + 1) / 2)\n\t\tif awsSquares[mid] > r:\n\t\t\thigh = mid - 1\n\t\telse:\n\t\t\tlow = mid\n\tend = low\n\tif start <= end:\n\t\tprint(end - start + 1)\n\telse:\n\t\tprint('0')\n\tT -= 1\n",
        "def check(i):\n\ts = str(i)\n\tfor x in s:\n\t\tif x == '1' or x == '0' or x == '4' or (x == '9'):\n\t\t\tpass\n\t\telse:\n\t\t\treturn False\n\treturn True\nprecompute = list()\nfor i in range(100002):\n\tif check(i ** 2):\n\t\tprecompute.append(i ** 2)\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tcnt = 0\n\tfor x in precompute:\n\t\tif x >= a and x <= b:\n\t\t\tcnt += 1\n\tprint(cnt)\n",
        "op = [0]\ncount = 0\nfor j in range(1, 100001):\n\tz = str(j * j)\n\tif len(z) == z.count('0') + z.count('1') + z.count('4') + z.count('9'):\n\t\tcount += 1\n\top.append(count)\nt = int(input())\nfor i in range(0, t):\n\t(a, b) = input().strip().split()\n\ta = int(a)\n\tb = int(b)\n\tif pow(a, 1 / 2) == int(pow(a, 1 / 2)):\n\t\ta = int(pow(a, 1 / 2))\n\telse:\n\t\ta = int(pow(a, 1 / 2)) + 1\n\tb = int(pow(b, 1 / 2))\n\tprint(op[b] - op[a - 1])\n",
        "perfect_sqaures = []\nperfect_nums = {'0', '1', '4', '9'}\n\ndef is_perfect_square(num):\n\tnum = set(str(num))\n\tif len(num - perfect_nums) == 0:\n\t\treturn True\n\treturn False\nfor i in range(10 ** 5 + 1):\n\tnum = i * i\n\tif is_perfect_square(num):\n\t\tperfect_sqaures.append(num)\nperfect_sqaures_len = len(perfect_sqaures)\n\ndef find_perfect_squares_count(num):\n\tstart = 0\n\tend = perfect_sqaures_len - 1\n\twhile start <= end:\n\t\tmiddle = (start + end) // 2\n\t\tif perfect_sqaures[middle] == num or (perfect_sqaures[middle] < num and (middle + 1 == perfect_sqaures_len or perfect_sqaures[middle + 1] > num)):\n\t\t\treturn middle + 1\n\t\telif perfect_sqaures[middle] < num:\n\t\t\tstart = middle + 1\n\t\telse:\n\t\t\tend = middle - 1\nimport math\ntests = int(input())\nfor i in range(tests):\n\t(a, b) = map(int, input().split())\n\tremove = find_perfect_squares_count(a - 1)\n\ttotal = find_perfect_squares_count(b)\n\tprint(total - remove)\n",
        "perf = []\n\ndef findvalid():\n\tfor i in range(1, 10 ** 5 + 1):\n\t\tsquare = i ** 2\n\t\ts = set(str(square))\n\t\tfor digit in s:\n\t\t\tif digit == '1' or digit == '0' or digit == '4' or (digit == '9'):\n\t\t\t\tcool = True\n\t\t\telse:\n\t\t\t\tcool = False\n\t\t\t\tbreak\n\t\tif cool:\n\t\t\tperf.append(square)\nfindvalid()\nfrom bisect import bisect_left as bl\nfor i in range(int(input())):\n\tallowed = [0, 1, 4, 9]\n\t(a, b) = [int(x) for x in input().split()]\n\tleft = bl(perf, a)\n\tright = bl(perf, b)\n\tif perf[right] == b:\n\t\tright += 1\n\tprint(right - left)\n",
        "from bisect import bisect_left, bisect_right\n\ndef prfsqr(a, b):\n\tsqr = []\n\tchk = [0, 1, 4, 9]\n\tfor i in range(a, b, 1):\n\t\tk = i ** 2\n\t\tif k <= b:\n\t\t\tprf = True\n\t\t\tk = str(k)\n\t\t\tfor j in k:\n\t\t\t\tif int(j) not in chk:\n\t\t\t\t\tprf = False\n\t\t\t\t\tbreak\n\t\t\tif prf:\n\t\t\t\tsqr.append(int(k))\n\t\telse:\n\t\t\tbreak\n\treturn sqr\nsqr = prfsqr(1, 10 ** 10)\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tleftind = bisect_left(sqr, a)\n\trightind = bisect_right(sqr, b)\n\tprint(rightind - leftind)\n",
        "import os\nimport math\n\ndef checknum(num):\n\twhile num > 0:\n\t\ttemp = num % 10\n\t\tif temp != 1 and temp != 4 and (temp != 9) and (temp != 0):\n\t\t\treturn 0\n\t\tnum = num // 10\n\treturn 1\nt = int(input())\navalues = []\nbvalues = []\nfor i in range(t):\n\t(a, b) = input().strip().split()\n\ta = int(a)\n\tb = int(b)\n\tavalues.append(a)\n\tbvalues.append(b)\namin = min(avalues)\nbmax = max(bvalues)\nsquares = []\nbegin = math.ceil(math.sqrt(amin))\nend = math.floor(math.sqrt(bmax))\nfor j in range(begin, end + 1):\n\tnum = j * j\n\tif checknum(num) == 1:\n\t\tsquares.append(num)\nfor i in range(t):\n\tcount = 0\n\tfor j in range(len(squares)):\n\t\tif squares[j] >= avalues[i]:\n\t\t\tm = j\n\t\t\twhile m < len(squares) and squares[m] <= bvalues[i]:\n\t\t\t\tcount += 1\n\t\t\t\tm += 1\n\t\t\tbreak\n\tprint(count)\n",
        "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n\tdef __init__(self, func):\n\t\tself.func = func\n\n\tdef __call__(self, *args):\n\t\tt1 = time()\n\t\tret = self.func(*args)\n\t\tdif_time = time() - t1\n\t\tprint('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n\t\treturn ret\n\ndef comp(f1, f2, *args):\n\tt1 = time()\n\tr1 = f1(*args) if f1 is not None else None\n\tt2 = time()\n\tr2 = f2(*args) if f2 is not None else None\n\tt3 = time()\n\tres = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n\tif r1 != r2:\n\t\tdr = '!! DIFFERENT RESULTS !!'\n\t\tres = dr + '\\n' + res + '\\n' + dr\n\tprint(res)\n\ndef alg(start, end):\n\troot_start = int(math.sqrt(start))\n\troot_end = int(math.sqrt(end))\n\tcount = 0\n\tfor root in range(root_start, root_end + 1):\n\t\tsq = root * root\n\t\tif all([int(a) in [0, 1, 4, 9] for a in str(sq)]):\n\t\t\tcount += 1\n\treturn count\n\ndef alg2(start, end):\n\tperfect_squares = [1, 4, 9, 49, 100, 144, 400, 441, 900, 1444, 4900, 9409, 10000, 10404, 11449, 14400, 19044, 40000, 40401, 44100, 44944, 90000, 144400, 419904, 490000, 491401, 904401, 940900, 994009, 1000000, 1004004, 1014049, 1040400, 1100401, 1144900, 1440000, 1904400, 1940449, 4000000, 4004001, 4040100, 4410000, 4494400, 9000000, 9909904, 9941409, 11909401, 14010049, 14040009, 14440000, 19909444, 40411449, 41990400, 49000000, 49014001, 49140100, 49999041, 90440100, 94090000, 94109401, 99400900, 99940009, 100000000, 100040004, 100140049, 100400400, 101404900, 101949409, 104040000, 104919049, 110040100, 111049444, 114041041, 114490000, 144000000, 190440000, 194044900, 400000000, 400040001, 400400100, 404010000, 404090404, 409941009, 414000409, 414041104, 441000000, 449440000, 490091044, 900000000, 990990400, 991494144, 994140900, 1190940100, 1401004900, 1404000900, 1409101444, 1444000000, 1449401041, 1490114404, 1990944400, 4014109449, 4019940409, 4041144900, 4199040000, 4900000000, 4900140001, 4901400100, 4914010000, 4914991449, 4941949401, 4999904100, 9044010000, 9409000000, 9409194001, 9410940100, 9900449001, 9940090000, 9994000900, 9999400009, 10000000000]\n\tres = filter(lambda x: start <= x and end >= x, perfect_squares)\n\treturn len(list(res))\n\ndef main():\n\tdata = sys.stdin\n\tnb = int(data.readline())\n\tfor icase in range(nb):\n\t\t(start, end) = map(int, data.readline().split())\n\t\tres = alg2(start, end)\n\t\tprint(res)\nmain()\n",
        "def fun(argc):\n\tfor i in range(4, 100001):\n\t\tk = i * i\n\t\ts = str(k)\n\t\tflag = True\n\t\tfor j in range(len(s)):\n\t\t\tif s[j] in argc:\n\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tflag = False\n\t\t\t\tbreak\n\t\tif flag == True:\n\t\t\targc.append(s)\nt = int(input())\nlst = ['0', '1', '4', '9']\nfun(lst)\nfor i in range(t):\n\t(n, m) = map(int, input().split())\n\tflag1 = True\n\tflag2 = True\n\tj = 0\n\tk = 0\n\tfor i in range(len(lst)):\n\t\tif flag1 == False and flag2 == False:\n\t\t\tbreak\n\t\tif int(lst[i]) >= n and flag1 == True:\n\t\t\tj = i\n\t\t\tflag1 = False\n\t\tif int(lst[i]) >= m and flag2 == True:\n\t\t\tif int(lst[i]) == m:\n\t\t\t\tk = i\n\t\t\telse:\n\t\t\t\tk = i - 1\n\t\t\tflag2 = False\n\tprint(k - j + 1)\n",
        "def lucky_check(n):\n\tfor i in range(len(n)):\n\t\tif n[i] not in '1049':\n\t\t\treturn False\n\treturn True\narray = []\nfor i in range(1, 100001):\n\tif lucky_check(str(i * i)):\n\t\tarray.append(i * i)\nfinal = []\nfor i in range(len(array) - 1):\n\tfinal.append([array[i], array[i + 1] - 1])\n\ndef find(a):\n\tif a == 10000000000:\n\t\treturn 120\n\telif a == 0:\n\t\treturn 0\n\telse:\n\t\ti = 0\n\t\tfound = False\n\t\twhile not found:\n\t\t\tp = final[i]\n\t\t\tif a <= p[1] and a >= p[0]:\n\t\t\t\tfound = True\n\t\t\ti += 1\n\t\treturn i\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tprint(find(b) - find(a - 1))\n",
        "import math\npower_list = []\nfor i in range(1, 100001):\n\tcurr = i * i\n\tis_valid = True\n\twhile curr:\n\t\tif curr % 10 in [0, 1, 4, 9]:\n\t\t\tcurr //= 10\n\t\telse:\n\t\t\tis_valid = False\n\t\t\tbreak\n\tif is_valid:\n\t\tpower_list.append(i)\nfor _ in range(int(input())):\n\t(left, rite) = [int(x) for x in input().split()]\n\tcnts = 0\n\tleft = math.ceil(left ** 0.5)\n\trite = int(rite ** 0.5)\n\tm = 0\n\tn = -1\n\tfor j in range(len(power_list)):\n\t\tif power_list[j] <= rite:\n\t\t\tm = j\n\t\tif power_list[j] < left:\n\t\t\tn = j\n\tprint(m - n)\n",
        "import os, sys, io, math\nfrom array import *\nfrom math import *\nfrom bisect import *\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nl = ['1', '0', '4', '9']\n\ndef f(t):\n\ts = str(t)\n\tfor i in s:\n\t\tif i in l:\n\t\t\tpass\n\t\telse:\n\t\t\treturn False\n\treturn True\nr = []\nfor i in range(100002):\n\tif f(i * i):\n\t\tr.append(i * i)\nfor _ in range(IN()):\n\t(a, b) = map(int, input().split())\n\tc = 0\n\tfor i in r:\n\t\tif i >= a and i <= b:\n\t\t\tc += 1\n\tprint(c)\n",
        "l = []\nl1 = ['0', '1', '4', '9']\nfor i in range(1, 100001):\n\ts = str(i * i)\n\tif any((j not in l1 for j in s)):\n\t\tc = 1\n\telse:\n\t\tl.append(i * i)\nfor _ in range(int(input())):\n\t(a, b) = map(int, input().split())\n\tans = 0\n\tfor i in l:\n\t\tif i >= a and i <= b:\n\t\t\tans += 1\n\tprint(ans)\n",
        "maximum = int(10000000000 ** 0.5)\nperfect = {'0', '1', '4', '9'}\npn = []\nfor i in range(1, maximum + 1):\n\tif set(str(i * i)).union(perfect) == perfect:\n\t\tpn.append(i * i)\nt = int(input())\nfor u in range(t):\n\t(a, b) = map(int, input().split())\n\tcount = 0\n\tfor i in range(len(pn)):\n\t\tif pn[i] > b:\n\t\t\tbreak\n\t\telif pn[i] >= a:\n\t\t\tcount += 1\n\tprint(count)\n\tprint()\n",
        "import bisect\n\ndef perfect_digit(n):\n\tar = [2, 3, 5, 6, 7, 8]\n\twhile n > 0:\n\t\tif n % 10 in ar:\n\t\t\treturn False\n\t\tn //= 10\n\treturn True\nar = []\nfor i in range(1, 10 ** 5 + 1):\n\tcur = i * i\n\tif perfect_digit(cur):\n\t\tar.append(cur)\nfor _ in range(int(input())):\n\t(x, y) = map(int, input().split())\n\t(right, left) = (bisect.bisect_left(ar, y), bisect.bisect_left(ar, x))\n\tif ar[right] > y:\n\t\tright -= 1\n\tif ar[left] < x:\n\t\tleft += 1\n\tprint(right - left + 1)\n",
        "t = int(input())\narr = []\nfor i in range(10 ** 5 + 5):\n\tte = str(i * i)\n\tst = 0\n\tfor j in range(len(te)):\n\t\tif te[j] != '1' and te[j] != '4' and (te[j] != '9') and (te[j] != '0'):\n\t\t\tst = 1\n\t\t\tbreak\n\tif st == 0:\n\t\tarr.append(i * i)\nlength = len(arr)\nwhile t:\n\tt -= 1\n\t(a, b) = map(int, input().split())\n\tans = 0\n\tfor i in range(length):\n\t\tif arr[i] >= a and arr[i] <= b:\n\t\t\tans += 1\n\tprint(ans)\n",
        "def consists_of_perfect_digits(number):\n\twhile number != 0:\n\t\tdigit = number % 10\n\t\tif digit not in [0, 1, 4, 9]:\n\t\t\treturn False\n\t\tnumber //= 10\n\treturn True\n\ndef count_perfect_squares(perfect_digits, a, b):\n\tnum_perf_sq = 0\n\ti = 0\n\twhile i < len(perfect_digits) and perfect_digits[i] <= b:\n\t\tif perfect_squares[i] >= a and perfect_squares[i] <= b:\n\t\t\tnum_perf_sq += 1\n\t\ti += 1\n\treturn num_perf_sq\nperfect_squares = []\nfor i in range(100000 + 1):\n\tperf_sq = i * i\n\tif consists_of_perfect_digits(perf_sq):\n\t\tperfect_squares.append(perf_sq)\nT = int(input())\nfor t in range(T):\n\t(a, b) = map(int, input().split())\n\tprint(count_perfect_squares(perfect_squares, a, b))\n"
      ],
      "original_code": null
    },
    "status": "success",
    "code": "def solve():\n    import sys\n    import bisect\n\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    t = int(data[0])\n    \n    # Precompute the \"perfect digit squares\" in the range.\n    # A perfect-digit square is a perfect square whose digits \n    # are only among the perfect digits: '0', '1', '4', '9'.\n    allowed = set(\"0149\")\n    perfect_squares = []\n    \n    # Since b can be as large as 10^10, the square root is up to 10^5.\n    # We iterate i from 1 up to 100000 (inclusive) and check if i^2 satisfies the condition.\n    for i in range(1, 100001):\n        sq = i * i\n        if all(ch in allowed for ch in str(sq)):\n            perfect_squares.append(sq)\n    \n    perfect_squares.sort()\n    \n    # Process each test case by performing a binary search over our precomputed list.\n    output_lines = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index+1])\n        index += 2\n        \n        # Using bisect to count how many precomputed squares fall in [a, b]\n        left_bound = bisect.bisect_left(perfect_squares, a)\n        right_bound = bisect.bisect_right(perfect_squares, b)\n        count = right_bound - left_bound\n        output_lines.append(str(count))\n    \n    sys.stdout.write(\"\\n\".join(output_lines))\n\n\nif __name__ == '__main__':\n    solve()",
    "pass_ratio": 0.9935483870967742,
    "tests_passed": 308,
    "tests_total": 310,
    "iterations": 1,
    "history": [
      {
        "iteration": 1,
        "code": "def solve():\n    import sys\n    import bisect\n\n    data = sys.stdin.read().split()\n    if not data:\n        return\n    t = int(data[0])\n    \n    # Precompute the \"perfect digit squares\" in the range.\n    # A perfect-digit square is a perfect square whose digits \n    # are only among the perfect digits: '0', '1', '4', '9'.\n    allowed = set(\"0149\")\n    perfect_squares = []\n    \n    # Since b can be as large as 10^10, the square root is up to 10^5.\n    # We iterate i from 1 up to 100000 (inclusive) and check if i^2 satisfies the condition.\n    for i in range(1, 100001):\n        sq = i * i\n        if all(ch in allowed for ch in str(sq)):\n            perfect_squares.append(sq)\n    \n    perfect_squares.sort()\n    \n    # Process each test case by performing a binary search over our precomputed list.\n    output_lines = []\n    index = 1\n    for _ in range(t):\n        a = int(data[index])\n        b = int(data[index+1])\n        index += 2\n        \n        # Using bisect to count how many precomputed squares fall in [a, b]\n        left_bound = bisect.bisect_left(perfect_squares, a)\n        right_bound = bisect.bisect_right(perfect_squares, b)\n        count = right_bound - left_bound\n        output_lines.append(str(count))\n    \n    sys.stdout.write(\"\\n\".join(output_lines))\n\n\nif __name__ == '__main__':\n    solve()",
        "pass_ratio": 0.9935483870967742,
        "tests_passed": 308,
        "tests_total": 310
      }
    ],
    "model_type": "openai",
    "model_name": "o3_mini"
  }
]