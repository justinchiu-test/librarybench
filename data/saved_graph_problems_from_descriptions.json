[{"problem_id": 113, "question": "One remarkable day company \"X\" received k machines. And they were not simple machines, they were mechanical programmers! This was the last unsuccessful step before switching to android programmers, but that's another story.\n\nThe company has now n tasks, for each of them we know the start time of its execution si, the duration of its execution ti, and the company profit from its completion ci. Any machine can perform any task, exactly one at a time. If a machine has started to perform the task, it is busy at all moments of time from si to si + ti - 1, inclusive, and it cannot switch to another task.\n\nYou are required to select a set of tasks which can be done with these k machines, and which will bring the maximum total profit.\n\nInput\n\nThe first line contains two integer numbers n and k (1 \u2264 n \u2264 1000, 1 \u2264 k \u2264 50) \u2014 the numbers of tasks and machines, correspondingly.\n\nThe next n lines contain space-separated groups of three integers si, ti, ci (1 \u2264 si, ti \u2264 109, 1 \u2264 ci \u2264 106), si is the time where they start executing the i-th task, ti is the duration of the i-th task and ci is the profit of its execution.\n\nOutput\n\nPrint n integers x1, x2, ..., xn. Number xi should equal 1, if task i should be completed and otherwise it should equal 0.\n\nIf there are several optimal solutions, print any of them.\n\nExamples\n\nInput\n\n3 1\n2 7 5\n1 3 3\n4 1 3\n\n\nOutput\n\n0 1 1\n\n\nInput\n\n5 2\n1 5 4\n1 4 5\n1 3 2\n4 1 2\n5 6 1\n\n\nOutput\n\n1 1 0 0 1\n\nNote\n\nIn the first sample the tasks need to be executed at moments of time 2 ... 8, 1 ... 3 and 4 ... 4, correspondingly. The first task overlaps with the second and the third ones, so we can execute either task one (profit 5) or tasks two and three (profit 6).", "tests": [{"stdin": "5 2\n1 5 4\n1 4 5\n1 3 2\n4 1 2\n5 6 1\n", "stdout": "5 2\n1 5 4\n1 4 5\n1 3 2\n4 1 2\n5 6 1\n"}, {"stdin": "3 1\n2 7 5\n1 3 3\n4 1 3\n", "stdout": "3 1\n2 7 5\n1 3 3\n4 1 3\n"}, {"stdin": "50 50\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "10 50\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "10 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "0 1 0 0 1 0 0 0 1 1 "}, {"stdin": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "0 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 "}, {"stdin": "10 2\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "0 1 0 0 1 0 0 0 1 1 "}, {"stdin": "10 20\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "10 2\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n", "stdout": "0 1 0 0 1 0 0 0 1 1 "}, {"stdin": "10 20\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "50 20\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "1 1 0 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1\n"}, {"stdin": "10 20\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "0 1 0 0 1 0 0 0 1 1 "}, {"stdin": "10 50\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n", "stdout": "1 1 1 1 1 1 1 1 1 1 "}, {"stdin": "50 50\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n12 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "50 50\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n12 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n"}, {"stdin": "10 50\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n7 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 50\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n7 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "10 2\n7 6 8\n2 8 4\n6 3 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 2\n7 6 8\n2 8 4\n6 3 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n3 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n3 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 9 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n"}, {"stdin": "10 2\n699300217 51124250 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n", "stdout": "10 2\n699300217 51124250 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n"}, {"stdin": "5 2\n1 5 4\n1 4 5\n1 3 2\n4 1 2\n5 4 1\n", "stdout": "5 2\n1 5 4\n1 4 5\n1 3 2\n4 1 2\n5 4 1\n"}, {"stdin": "3 1\n2 6 5\n1 3 3\n4 1 3\n", "stdout": "3 1\n2 6 5\n1 3 3\n4 1 3\n"}, {"stdin": "10 0\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 714333 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 0\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 714333 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n40 757 8\n939 463 65\n594 526 9\n", "stdout": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n40 757 8\n939 463 65\n594 526 9\n"}, {"stdin": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n641 189 49\n155 959 42\n778 895 35\n40 757 8\n939 463 65\n594 526 9\n", "stdout": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n641 189 49\n155 959 42\n778 895 35\n40 757 8\n939 463 65\n594 526 9\n"}, {"stdin": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 182044 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 182044 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 2\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 714333 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 2\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 714333 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 20\n700 521 130\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "10 20\n700 521 130\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n"}, {"stdin": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 1750286\n", "stdout": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 1750286\n"}, {"stdin": "10 20\n699301 520864 7508\n88848 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 20\n699301 520864 7508\n88848 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 20\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 7 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 20\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 7 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n40 757 8\n939 463 65\n594 526 89\n", "stdout": "10 2\n700 521 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n40 757 8\n939 463 65\n594 526 89\n"}, {"stdin": "10 50\n700 747 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "10 50\n700 747 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n"}, {"stdin": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 894541699 640265\n593570035 525346237 888643\n", "stdout": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 894541699 640265\n593570035 525346237 888643\n"}, {"stdin": "10 2\n7 6 8\n2 8 4\n6 3 2\n8 7 3\n4 2 5\n2 10 6\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 2\n7 6 8\n2 8 4\n6 3 2\n8 7 3\n4 2 5\n2 10 6\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 182044 2386\n25201 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 182044 2386\n25201 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n3 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 12 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n3 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n7 12 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n"}, {"stdin": "10 20\n700 521 130\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n146 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "10 20\n700 521 130\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n146 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n"}, {"stdin": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 251528\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 1750286\n", "stdout": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 251528\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 1750286\n"}, {"stdin": "10 2\n699300217 51124250 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 95633\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n", "stdout": "10 2\n699300217 51124250 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 95633\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 888643\n"}, {"stdin": "10 20\n699301 520864 7508\n88848 1460349 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 20\n699301 520864 7508\n88848 1460349 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 20\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 12 5\n8 7 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 20\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 12 5\n8 7 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "10 50\n700 716 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "10 50\n700 716 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n"}, {"stdin": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 894541699 934102\n593570035 525346237 888643\n", "stdout": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 894541699 934102\n593570035 525346237 888643\n"}, {"stdin": "10 2\n7 6 8\n2 8 4\n6 3 2\n8 4 3\n4 2 5\n2 10 6\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 2\n7 6 8\n2 8 4\n6 3 2\n8 4 3\n4 2 5\n2 10 6\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 182044 2386\n25201 188889 7140\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 50\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 182044 2386\n25201 188889 7140\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n3 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n3 12 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n", "stdout": "50 2\n7 6 8\n2 8 4\n6 10 2\n8 7 3\n4 2 5\n2 10 5\n8 9 4\n3 8 1\n10 5 7\n6 6 9\n7 8 7\n5 9 4\n8 4 8\n10 2 6\n5 4 8\n3 8 6\n1 3 2\n10 5 6\n9 10 9\n4 6 4\n2 9 5\n7 1 10\n7 2 1\n7 7 9\n9 2 1\n8 6 2\n7 7 7\n3 4 7\n7 9 2\n2 3 8\n7 7 5\n5 10 10\n6 7 10\n10 10 4\n6 5 7\n3 3 5\n3 1 8\n4 1 2\n2 8 9\n7 1 2\n7 5 8\n3 12 4\n6 6 1\n4 10 4\n4 6 10\n10 6 6\n7 5 4\n7 7 6\n1 10 4\n3 1 3\n"}, {"stdin": "10 0\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 714333 60\n938487 462703 6403\n593571 525347 8887\n", "stdout": "10 0\n699301 520864 7508\n158803 776306 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 714333 60\n938487 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 20\n700 521 130\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n271 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n", "stdout": "10 20\n700 521 130\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n271 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 89\n"}, {"stdin": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n956248937 900142068 187357\n776489007 632844082 251528\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 1750286\n", "stdout": "10 20\n699300217 520863246 750739\n158802156 776305466 388177\n956248937 900142068 187357\n776489007 632844082 251528\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 462702730 640265\n593570035 525346237 1750286\n"}, {"stdin": "10 2\n699300217 51124250 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 95633\n558588067 984166894 77163\n938486404 462702730 640265\n593570035 525346237 888643\n", "stdout": "10 2\n699300217 51124250 750739\n158802156 776305466 388177\n556239371 900142068 187357\n776489007 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 95633\n558588067 984166894 77163\n938486404 462702730 640265\n593570035 525346237 888643\n"}, {"stdin": "10 20\n699301 520864 7508\n88848 1460349 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n1833989 462703 6403\n593571 525347 8887\n", "stdout": "10 20\n699301 520864 7508\n88848 1460349 3882\n556240 900143 1874\n776490 632845 2386\n361187 188889 4840\n154510 958412 4162\n777489 894435 3481\n558589 756130 772\n1833989 462703 6403\n593571 525347 8887\n"}, {"stdin": "10 20\n7 6 8\n2 8 4\n6 14 2\n8 7 3\n4 2 5\n2 12 5\n8 7 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 20\n7 6 8\n2 8 4\n6 14 2\n8 7 3\n4 2 5\n2 12 5\n8 7 4\n6 8 1\n10 5 7\n6 6 9\n"}, {"stdin": "10 50\n700 716 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 134\n", "stdout": "10 50\n700 716 76\n159 777 39\n557 901 19\n777 633 24\n362 189 49\n155 959 42\n778 895 35\n559 757 8\n939 463 65\n594 526 134\n"}, {"stdin": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n617448194 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 894541699 934102\n593570035 525346237 888643\n", "stdout": "10 50\n699300217 520863246 750739\n158802156 776305466 388177\n556239371 900142068 187357\n617448194 632844082 238502\n361186251 188888255 483934\n154509737 958411614 416129\n777488390 894434905 348016\n558588067 756129429 77163\n938486404 894541699 934102\n593570035 525346237 888643\n"}, {"stdin": "10 2\n7 6 8\n2 8 4\n6 3 3\n8 4 3\n4 2 5\n2 10 6\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n", "stdout": "10 2\n7 6 8\n2 8 4\n6 3 3\n8 4 3\n4 2 5\n2 10 6\n8 9 4\n6 8 1\n10 5 7\n6 6 9\n"}], "source": "codeforces", "difficulty": 2400, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int MAX = 2e5 + 5, MOD = 1e9 + 7, MAXLG = log2(MAX) + 1;\nconst long long inf = 1e18 + 5;\nstruct edge {\n  int v, rev;\n  long long cap, cost, flow;\n  edge() {}\n  edge(int v, int rev, long long cap, long long cost)\n      : v(v), rev(rev), cap(cap), cost(cost), flow(0) {}\n};\nstruct mcmf {\n  int src, sink, nodes;\n  vector<int> par, idx;\n  vector<bool> inq;\n  vector<long long> dis;\n  vector<vector<edge>> g;\n  mcmf() {}\n  mcmf(int src, int sink, int nodes)\n      : src(src),\n        sink(sink),\n        nodes(nodes),\n        par(nodes),\n        idx(nodes),\n        inq(nodes),\n        dis(nodes),\n        g(nodes) {}\n  void add_edge(int u, int v, long long cap, long long cost,\n                bool directed = true) {\n    edge _u = edge(v, g[v].size(), cap, cost);\n    edge _v = edge(u, g[u].size(), 0, -cost);\n    g[u].push_back(_u);\n    g[v].push_back(_v);\n    if (!directed) add_edge(v, u, cap, cost, true);\n  }\n  bool spfa() {\n    for (int i = 0; i < nodes; i++) {\n      dis[i] = inf, inq[i] = false;\n    }\n    queue<int> q;\n    q.push(src);\n    dis[src] = 0, par[src] = -1, inq[src] = true;\n    while (!q.empty()) {\n      int u = q.front();\n      q.pop();\n      inq[u] = false;\n      for (int i = 0; i < g[u].size(); i++) {\n        edge &e = g[u][i];\n        if (e.cap <= e.flow) continue;\n        if (dis[e.v] > dis[u] + e.cost) {\n          dis[e.v] = dis[u] + e.cost;\n          par[e.v] = u, idx[e.v] = i;\n          if (!inq[e.v]) inq[e.v] = true, q.push(e.v);\n        }\n      }\n    }\n    return (dis[sink] != inf);\n  }\n  pair<long long, long long> solve() {\n    long long mincost = 0, maxflow = 0;\n    while (spfa()) {\n      long long bottleneck = inf;\n      for (int u = par[sink], v = idx[sink]; u != -1; v = idx[u], u = par[u]) {\n        edge &e = g[u][v];\n        bottleneck = min(bottleneck, e.cap - e.flow);\n      }\n      for (int u = par[sink], v = idx[sink]; u != -1; v = idx[u], u = par[u]) {\n        edge &e = g[u][v];\n        e.flow += bottleneck;\n        g[e.v][e.rev].flow -= bottleneck;\n      }\n      mincost += bottleneck * dis[sink], maxflow += bottleneck;\n    }\n    return make_pair(mincost, maxflow);\n  }\n};\nint arr[MAX];\npair<pair<int, int>, int> task[1005];\nint ind[1005];\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(NULL);\n  ;\n  int n, k;\n  cin >> n >> k;\n  for (int i = 1; i <= n; i++)\n    cin >> task[i].first.first >> task[i].first.second >> task[i].second;\n  int src, sink, nodes;\n  src = 0, sink = k + 2 * n + 1, nodes = sink + 1;\n  mcmf F(src, sink, nodes);\n  for (int i = 1; i <= k; i++) {\n    F.add_edge(src, i, 1, 0);\n    for (int j = 1; j <= n; j++) F.add_edge(i, j + k, inf, 0);\n  }\n  for (int i = 1; i <= n; i++) {\n    ind[i] = F.g[i + k].size();\n    F.add_edge(i + k, i + k + n, 1, -task[i].second);\n    F.add_edge(i + k + n, sink, 1, 0);\n    int ed = task[i].first.first + task[i].first.second - 1;\n    for (int j = 1; j <= n; j++) {\n      if (i == j) continue;\n      if (ed < task[j].first.first) {\n        F.add_edge(i + k + n, j + k, 1, 0);\n      }\n    }\n  }\n  pair<long long, long long> p = F.solve();\n  for (int i = 1; i <= n; i++) {\n    edge &e = F.g[i + k][ind[i]];\n    if (e.flow)\n      cout << 1 << \" \";\n    else\n      cout << 0 << \" \";\n  }\n  cout << \"\\n\";\n}\n"], "original_code": null, "language": "cpp"}, {"problem_id": 207, "question": "There are n students at Berland State University. Every student has two skills, each measured as a number: ai \u2014 the programming skill and bi \u2014 the sports skill.\n\nIt is announced that an Olympiad in programming and sports will be held soon. That's why Berland State University should choose two teams: one to take part in the programming track and one to take part in the sports track.\n\nThere should be exactly p students in the programming team and exactly s students in the sports team. A student can't be a member of both teams.\n\nThe university management considers that the strength of the university on the Olympiad is equal to the sum of two values: the programming team strength and the sports team strength. The strength of a team is the sum of skills of its members in the corresponding area, so the strength of the programming team is the sum of all ai and the strength of the sports team is the sum of all bi over corresponding team members.\n\nHelp Berland State University to compose two teams to maximize the total strength of the university on the Olympiad.\n\nInput\n\nThe first line contains three positive integer numbers n, p and s (2 \u2264 n \u2264 3000, p + s \u2264 n) \u2014 the number of students, the size of the programming team and the size of the sports team.\n\nThe second line contains n positive integers a1, a2, ..., an (1 \u2264 ai \u2264 3000), where ai is the programming skill of the i-th student.\n\nThe third line contains n positive integers b1, b2, ..., bn (1 \u2264 bi \u2264 3000), where bi is the sports skill of the i-th student.\n\nOutput\n\nIn the first line, print the the maximum strength of the university on the Olympiad. In the second line, print p numbers \u2014 the members of the programming team. In the third line, print s numbers \u2014 the members of the sports team.\n\nThe students are numbered from 1 to n as they are given in the input. All numbers printed in the second and in the third lines should be distinct and can be printed in arbitrary order.\n\nIf there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n5 2 2\n1 3 4 5 2\n5 3 2 1 4\n\n\nOutput\n\n18\n3 4 \n1 5 \n\n\nInput\n\n4 2 2\n10 8 8 3\n10 7 9 4\n\n\nOutput\n\n31\n1 2 \n3 4 \n\n\nInput\n\n5 3 1\n5 2 5 1 7\n6 3 1 6 3\n\n\nOutput\n\n23\n1 3 5 \n4 ", "tests": [{"stdin": "5 2 2\n1 3 4 5 2\n5 3 2 1 4\n", "stdout": "5 2 2\n1 3 4 5 2\n5 3 2 1 4\n"}, {"stdin": "5 3 1\n5 2 5 1 7\n6 3 1 6 3\n", "stdout": "5 3 1\n5 2 5 1 7\n6 3 1 6 3\n"}, {"stdin": "4 2 2\n10 8 8 3\n10 7 9 4\n", "stdout": "4 2 2\n10 8 8 3\n10 7 9 4\n"}, {"stdin": "14 2 8\n20 14 17 18 12 12 19 3 2 20 13 12 17 20\n20 10 3 15 8 15 12 12 14 2 1 15 7 10\n", "stdout": "153\n10 14 \n1 2 4 6 7 8 9 12 \n"}, {"stdin": "6 1 4\n7 9 3 5 9 2\n10 9 10 10 10 1\n", "stdout": "49\n2 \n1 3 4 5 \n"}, {"stdin": "5 2 3\n10 4 19 8 18\n6 16 11 15 3\n", "stdout": "74\n3 5 \n1 2 4 \n"}, {"stdin": "6 3 3\n15 12 12 19 1 7\n7 2 20 10 4 12\n", "stdout": "82\n1 2 4 \n3 5 6 \n"}, {"stdin": "3 1 1\n10 5 5\n9 1 4\n", "stdout": "14\n1 \n3 \n"}, {"stdin": "12 2 4\n16 17 12 8 18 9 2 9 13 18 3 8\n18 20 9 12 11 19 20 3 13 1 6 9\n", "stdout": "113\n5 10 \n1 2 6 7 \n"}, {"stdin": "8 5 1\n2 4 1 5 8 5 9 7\n10 2 3 1 6 3 8 6\n", "stdout": "44\n4 5 6 7 8 \n1 \n"}, {"stdin": "9 2 2\n20 7 6 7 19 15 2 7 8\n15 15 1 13 20 14 13 18 3\n", "stdout": "73\n1 6 \n5 8 \n"}, {"stdin": "14 2 1\n3 5 9 5 4 6 1 10 4 10 6 5 10 2\n10 8 8 6 1 8 9 1 6 1 4 5 9 4\n", "stdout": "30\n8 10 \n1 \n"}, {"stdin": "7 2 3\n15 1 5 17 16 9 1\n9 8 5 9 18 14 3\n", "stdout": "72\n1 4 \n2 5 6 \n"}, {"stdin": "7 2 1\n2 2 2 2 2 1 2\n4 2 5 5 2 5 1\n", "stdout": "9\n1 2 \n3 \n"}, {"stdin": "9 1 1\n3 2 3 5 3 1 5 2 3\n1 4 5 4 2 5 4 4 5\n", "stdout": "10\n4 \n3 \n"}, {"stdin": "4 1 1\n100 100 1 50\n100 100 50 1\n", "stdout": "200\n1 \n2 \n"}, {"stdin": "11 6 1\n7 4 7 2 2 12 16 2 5 15 2\n3 12 8 5 7 1 4 19 12 1 14\n", "stdout": "81\n1 3 6 7 9 10 \n8 \n"}, {"stdin": "20 1 7\n20 8 10 7 14 9 17 19 19 9 20 6 1 14 11 15 12 10 20 15\n10 3 20 1 16 7 8 19 3 17 9 2 20 14 20 2 20 9 2 4\n", "stdout": "152\n1 \n3 5 8 10 13 15 17 \n"}, {"stdin": "17 8 2\n10 5 9 1 7 5 2 9 3 5 8 4 3 5 4 2 4\n9 10 8 10 10 5 6 2 2 4 6 9 10 3 2 5 1\n", "stdout": "78\n1 3 5 6 8 10 11 14 \n2 4 \n"}, {"stdin": "5 1 1\n3 2 5 5 1\n3 1 5 4 2\n", "stdout": "10\n4 \n3 \n"}, {"stdin": "4 1 3\n6 15 3 9\n2 5 6 8\n", "stdout": "31\n2 \n1 3 4 \n"}, {"stdin": "16 4 8\n2 6 6 4 1 9 5 8 9 10 2 8 9 8 1 7\n8 9 5 2 4 10 9 2 1 5 6 7 1 1 8 1\n", "stdout": "98\n8 9 10 13 \n1 2 3 6 7 11 12 15 \n"}, {"stdin": "4 1 2\n4 2 4 5\n3 2 5 3\n", "stdout": "13\n4 \n1 3 \n"}, {"stdin": "2 1 1\n100 101\n1 100\n", "stdout": "200\n1 \n2 \n"}, {"stdin": "10 8 2\n5 2 8 6 7 5 2 4 1 10\n4 6 2 1 9 2 9 4 5 6\n", "stdout": "61\n1 3 4 5 6 8 9 10 \n2 7 \n"}, {"stdin": "13 2 2\n2 2 6 2 9 5 10 3 10 1 1 1 1\n10 8 3 8 6 6 8 1 4 10 10 1 8\n", "stdout": "40\n7 9 \n1 10 \n"}, {"stdin": "15 3 7\n1 11 6 5 16 13 17 6 2 7 19 5 3 13 11\n11 9 6 9 19 4 16 20 11 19 1 10 20 4 7\n", "stdout": "161\n6 11 14 \n1 5 7 8 9 10 13 \n"}, {"stdin": "19 6 1\n4 5 2 3 4 3 2 3 3 3 5 5 1 4 1 2 4 2 5\n1 2 1 4 1 3 3 2 4 1 3 4 3 3 4 4 4 5 5\n", "stdout": "33\n1 2 5 11 12 19 \n18 \n"}, {"stdin": "12 8 1\n4 3 3 5 6 10 10 10 10 8 4 5\n1 7 4 10 8 1 2 4 8 4 4 2\n", "stdout": "73\n1 5 6 7 8 9 10 12 \n4 \n"}, {"stdin": "18 5 3\n18 1 8 13 18 1 16 11 11 12 6 14 16 13 10 7 19 17\n14 3 7 18 9 16 3 5 17 8 1 8 2 8 20 1 16 11\n", "stdout": "143\n1 5 7 17 18 \n4 9 15 \n"}, {"stdin": "11 4 2\n2 2 4 2 3 5 4 4 5 5 4\n4 4 1 2 1 2 2 5 3 4 3\n", "stdout": "28\n3 6 9 10 \n1 8 \n"}, {"stdin": "19 14 2\n5 3 4 10 5 7 10 9 2 5 4 3 2 3 10 10 6 4 1\n6 10 5 3 8 9 9 3 1 6 4 4 3 6 8 5 9 3 9\n", "stdout": "111\n1 3 4 5 6 7 8 10 11 14 15 16 17 18 \n2 19 \n"}, {"stdin": "10 3 1\n7 11 11 3 19 10 18 7 9 20\n13 9 19 15 13 14 7 12 15 16\n", "stdout": "76\n5 7 10 \n3 \n"}, {"stdin": "4 1 2\n8 7 8 6\n4 5 10 9\n", "stdout": "27\n1 \n3 4 \n"}, {"stdin": "18 8 1\n6 10 1 1 10 6 10 2 7 2 3 7 7 7 6 5 8 8\n4 4 4 7 1 5 2 2 7 10 2 7 6 6 2 1 4 3\n", "stdout": "77\n2 5 7 9 12 13 17 18 \n10 \n"}, {"stdin": "2 1 1\n9 6\n3 10\n", "stdout": "19\n1 \n2 \n"}, {"stdin": "3 1 1\n17 6 2\n2 19 19\n", "stdout": "36\n1 \n2 \n"}, {"stdin": "14 1 3\n1 1 2 3 4 3 1 3 4 5 3 5 5 5\n3 2 1 1 1 4 2 2 1 4 4 4 5 4\n", "stdout": "18\n10 \n6 11 13 \n"}, {"stdin": "3 1 1\n5 4 2\n1 5 2\n", "stdout": "10\n1 \n2 \n"}, {"stdin": "15 7 6\n2 5 4 1 1 3 3 1 4 4 4 3 4 1 1\n5 5 2 5 4 1 4 5 1 5 4 1 4 4 4\n", "stdout": "55\n2 3 6 9 11 12 13 \n1 4 5 7 8 10 \n"}, {"stdin": "6 2 1\n4 3 4 3 3 2\n4 4 3 5 3 5\n", "stdout": "13\n1 3 \n4 \n"}, {"stdin": "13 3 1\n16 6 5 11 17 11 13 12 18 5 12 6 12\n12 20 9 9 19 4 19 4 1 12 1 12 4\n", "stdout": "71\n1 5 9 \n2 \n"}, {"stdin": "5 2 1\n9 10 1 7 10\n6 10 8 6 3\n", "stdout": "29\n1 5 \n2 \n"}, {"stdin": "17 1 12\n2 4 5 5 3 3 3 3 1 4 4 1 2 2 3 3 3\n4 1 5 4 2 5 3 4 2 2 5 2 2 5 5 5 3\n", "stdout": "54\n2 \n1 3 4 5 6 7 8 11 14 15 16 17 \n"}, {"stdin": "20 3 6\n3 4 4 5 1 2 2 3 5 5 2 2 1 4 1 5 2 2 1 5\n1 4 5 2 2 2 2 5 3 2 4 5 2 1 3 3 1 3 5 3\n", "stdout": "43\n4 9 10 \n2 3 8 11 12 19 \n"}, {"stdin": "2 1 1\n1 17\n5 20\n", "stdout": "22\n2 \n1 \n"}, {"stdin": "15 1 10\n7 8 1 5 8 8 9 7 4 3 7 4 10 8 3\n3 8 6 5 10 1 9 2 3 8 1 9 3 6 10\n", "stdout": "84\n13 \n1 2 3 4 5 7 10 12 14 15 \n"}, {"stdin": "7 5 1\n1 8 8 6 4 3 9\n4 4 5 8 5 7 1\n", "stdout": "42\n2 3 4 5 7 \n6 \n"}, {"stdin": "13 1 10\n1 4 5 3 1 3 4 3 1 5 3 2 3\n2 3 5 1 4 3 5 4 2 1 3 4 2\n", "stdout": "40\n10 \n1 2 3 5 6 7 8 9 11 12 \n"}, {"stdin": "11 1 5\n7 10 1 2 10 8 10 9 5 5 9\n2 1 1 3 5 9 3 4 2 2 3\n", "stdout": "34\n2 \n4 5 6 7 8 \n"}, {"stdin": "9 2 4\n4 3 3 1 1 10 9 8 5\n5 4 4 6 5 10 1 5 5\n", "stdout": "43\n7 8 \n1 4 5 6 \n"}, {"stdin": "10 5 2\n4 5 3 1 1 5 2 4 1 5\n3 4 2 2 2 3 2 1 2 4\n", "stdout": "27\n1 2 6 8 10 \n3 4 \n"}, {"stdin": "8 3 4\n5 5 4 2 4 1 3 2\n2 5 3 3 2 4 5 1\n", "stdout": "30\n1 3 5 \n2 4 6 7 \n"}, {"stdin": "19 1 4\n2 10 1 3 13 3 6 2 15 15 7 8 1 18 2 12 9 8 14\n15 3 2 15 9 12 19 20 2 18 15 11 18 6 8 16 17 1 12\n", "stdout": "93\n14 \n7 8 10 13 \n"}, {"stdin": "16 4 1\n5 20 3 7 19 19 7 17 18 10 16 11 16 9 15 9\n19 2 13 11 8 19 6 7 16 8 8 5 18 18 20 10\n", "stdout": "96\n2 5 6 9 \n15 \n"}, {"stdin": "18 5 2\n5 3 3 4 1 4 5 3 3 3 4 2 4 2 3 1 4 4\n5 4 3 4 5 1 5 5 2 1 3 2 1 1 1 3 5 5\n", "stdout": "32\n1 4 6 7 11 \n5 8 \n"}, {"stdin": "8 1 1\n19 14 17 8 16 14 11 16\n12 12 10 4 3 11 10 8\n", "stdout": "31\n1 \n2 \n"}, {"stdin": "17 6 5\n18 9 15 14 15 20 18 8 3 9 17 5 2 17 7 10 13\n17 10 7 3 7 11 4 5 18 15 15 15 5 9 7 5 5\n", "stdout": "179\n3 4 5 6 7 14 \n1 9 10 11 12 \n"}, {"stdin": "2 1 1\n3 2\n3 2\n", "stdout": "5\n1 \n2 \n"}, {"stdin": "16 2 7\n5 4 4 1 5 3 1 1 2 3 3 4 5 5 1 4\n4 5 3 5 4 1 2 2 3 2 2 3 4 5 3 1\n", "stdout": "38\n1 5 \n2 3 4 9 12 13 14 \n"}, {"stdin": "20 2 5\n9 5 1 8 6 3 5 9 9 9 9 3 4 1 7 2 1 1 3 5\n5 6 4 10 7 9 1 6 9 5 2 1 3 1 5 9 10 8 9 9\n", "stdout": "65\n1 8 \n4 6 9 16 17 \n"}, {"stdin": "12 4 1\n4 5 1 4 3 3 2 4 3 4 3 2\n1 3 5 3 5 5 5 5 3 5 3 2\n", "stdout": "22\n1 2 4 8 \n3 \n"}, {"stdin": "14 2 8\n20 14 17 18 12 12 19 3 2 20 13 12 17 20\n20 9 3 15 8 15 12 12 14 2 1 15 7 10\n", "stdout": "14 2 8\n20 14 17 18 12 12 19 3 2 20 13 12 17 20\n20 9 3 15 8 15 12 12 14 2 1 15 7 10\n"}, {"stdin": "6 1 4\n13 9 3 5 9 2\n10 9 10 10 10 1\n", "stdout": "6 1 4\n13 9 3 5 9 2\n10 9 10 10 10 1\n"}, {"stdin": "5 2 3\n10 4 19 8 18\n8 16 11 15 3\n", "stdout": "5 2 3\n10 4 19 8 18\n8 16 11 15 3\n"}, {"stdin": "6 3 3\n15 12 12 19 1 7\n7 2 38 10 4 12\n", "stdout": "6 3 3\n15 12 12 19 1 7\n7 2 38 10 4 12\n"}, {"stdin": "4 1 1\n10 5 5\n9 1 4\n", "stdout": "4 1 1\n10 5 5\n9 1 4\n"}, {"stdin": "12 2 4\n16 17 12 8 18 9 2 9 13 18 3 8\n18 20 9 12 11 19 20 3 18 1 6 9\n", "stdout": "12 2 4\n16 17 12 8 18 9 2 9 13 18 3 8\n18 20 9 12 11 19 20 3 18 1 6 9\n"}, {"stdin": "8 5 1\n2 4 1 5 8 5 9 7\n10 2 3 1 9 3 8 6\n", "stdout": "8 5 1\n2 4 1 5 8 5 9 7\n10 2 3 1 9 3 8 6\n"}, {"stdin": "9 2 2\n20 7 6 7 19 15 2 7 8\n15 15 1 13 20 14 3 18 3\n", "stdout": "9 2 2\n20 7 6 7 19 15 2 7 8\n15 15 1 13 20 14 3 18 3\n"}, {"stdin": "14 2 1\n3 5 9 5 4 11 1 10 4 10 6 5 10 2\n10 8 8 6 1 8 9 1 6 1 4 5 9 4\n", "stdout": "14 2 1\n3 5 9 5 4 11 1 10 4 10 6 5 10 2\n10 8 8 6 1 8 9 1 6 1 4 5 9 4\n"}, {"stdin": "7 2 3\n23 1 5 17 16 9 1\n9 8 5 9 18 14 3\n", "stdout": "7 2 3\n23 1 5 17 16 9 1\n9 8 5 9 18 14 3\n"}, {"stdin": "7 2 1\n2 2 2 2 2 1 2\n4 2 5 10 2 5 1\n", "stdout": "7 2 1\n2 2 2 2 2 1 2\n4 2 5 10 2 5 1\n"}, {"stdin": "9 1 1\n3 2 3 5 3 1 5 2 3\n1 7 5 4 2 5 4 4 5\n", "stdout": "9 1 1\n3 2 3 5 3 1 5 2 3\n1 7 5 4 2 5 4 4 5\n"}, {"stdin": "4 1 1\n000 100 1 50\n100 100 50 1\n", "stdout": "4 1 1\n000 100 1 50\n100 100 50 1\n"}, {"stdin": "11 6 1\n7 4 7 2 2 12 16 2 5 15 2\n3 12 8 5 7 1 5 19 12 1 14\n", "stdout": "11 6 1\n7 4 7 2 2 12 16 2 5 15 2\n3 12 8 5 7 1 5 19 12 1 14\n"}, {"stdin": "20 1 7\n20 14 10 7 14 9 17 19 19 9 20 6 1 14 11 15 12 10 20 15\n10 3 20 1 16 7 8 19 3 17 9 2 20 14 20 2 20 9 2 4\n", "stdout": "20 1 7\n20 14 10 7 14 9 17 19 19 9 20 6 1 14 11 15 12 10 20 15\n10 3 20 1 16 7 8 19 3 17 9 2 20 14 20 2 20 9 2 4\n"}, {"stdin": "17 8 2\n10 5 9 1 2 5 2 9 3 5 8 4 3 5 4 2 4\n9 10 8 10 10 5 6 2 2 4 6 9 10 3 2 5 1\n", "stdout": "17 8 2\n10 5 9 1 2 5 2 9 3 5 8 4 3 5 4 2 4\n9 10 8 10 10 5 6 2 2 4 6 9 10 3 2 5 1\n"}, {"stdin": "5 1 1\n3 2 5 5 1\n5 1 5 4 2\n", "stdout": "5 1 1\n3 2 5 5 1\n5 1 5 4 2\n"}, {"stdin": "4 1 3\n6 25 3 9\n2 5 6 8\n", "stdout": "4 1 3\n6 25 3 9\n2 5 6 8\n"}, {"stdin": "16 4 8\n2 6 6 4 1 9 5 8 9 10 0 8 9 8 1 7\n8 9 5 2 4 10 9 2 1 5 6 7 1 1 8 1\n", "stdout": "16 4 8\n2 6 6 4 1 9 5 8 9 10 0 8 9 8 1 7\n8 9 5 2 4 10 9 2 1 5 6 7 1 1 8 1\n"}, {"stdin": "4 1 2\n1 2 4 5\n3 2 5 3\n", "stdout": "4 1 2\n1 2 4 5\n3 2 5 3\n"}, {"stdin": "2 1 1\n100 101\n1 000\n", "stdout": "2 1 1\n100 101\n1 000\n"}, {"stdin": "10 8 2\n5 2 8 6 7 4 2 4 1 10\n4 6 2 1 9 2 9 4 5 6\n", "stdout": "10 8 2\n5 2 8 6 7 4 2 4 1 10\n4 6 2 1 9 2 9 4 5 6\n"}, {"stdin": "13 2 2\n2 2 6 2 9 5 10 3 10 1 1 1 1\n10 8 3 16 6 6 8 1 4 10 10 1 8\n", "stdout": "13 2 2\n2 2 6 2 9 5 10 3 10 1 1 1 1\n10 8 3 16 6 6 8 1 4 10 10 1 8\n"}, {"stdin": "15 3 7\n1 11 6 5 16 13 17 6 2 7 19 5 3 13 11\n11 9 6 9 19 4 16 20 11 19 1 10 8 4 7\n", "stdout": "15 3 7\n1 11 6 5 16 13 17 6 2 7 19 5 3 13 11\n11 9 6 9 19 4 16 20 11 19 1 10 8 4 7\n"}, {"stdin": "19 6 1\n4 5 1 3 4 3 2 3 3 3 5 5 1 4 1 2 4 2 5\n1 2 1 4 1 3 3 2 4 1 3 4 3 3 4 4 4 5 5\n", "stdout": "19 6 1\n4 5 1 3 4 3 2 3 3 3 5 5 1 4 1 2 4 2 5\n1 2 1 4 1 3 3 2 4 1 3 4 3 3 4 4 4 5 5\n"}, {"stdin": "12 8 1\n4 3 3 5 6 10 10 10 10 8 4 5\n1 7 0 10 8 1 2 4 8 4 4 2\n", "stdout": "12 8 1\n4 3 3 5 6 10 10 10 10 8 4 5\n1 7 0 10 8 1 2 4 8 4 4 2\n"}, {"stdin": "18 5 3\n18 1 8 13 18 1 16 11 11 12 6 14 16 13 10 7 19 17\n14 3 7 18 9 16 3 5 17 8 1 8 2 8 19 1 16 11\n", "stdout": "18 5 3\n18 1 8 13 18 1 16 11 11 12 6 14 16 13 10 7 19 17\n14 3 7 18 9 16 3 5 17 8 1 8 2 8 19 1 16 11\n"}, {"stdin": "11 4 2\n2 2 4 2 3 1 4 4 5 5 4\n4 4 1 2 1 2 2 5 3 4 3\n", "stdout": "11 4 2\n2 2 4 2 3 1 4 4 5 5 4\n4 4 1 2 1 2 2 5 3 4 3\n"}, {"stdin": "19 14 2\n5 3 4 10 5 7 10 9 2 5 4 3 2 3 10 10 6 4 1\n6 10 5 3 10 9 9 3 1 6 4 4 3 6 8 5 9 3 9\n", "stdout": "19 14 2\n5 3 4 10 5 7 10 9 2 5 4 3 2 3 10 10 6 4 1\n6 10 5 3 10 9 9 3 1 6 4 4 3 6 8 5 9 3 9\n"}, {"stdin": "10 3 1\n14 11 11 3 19 10 18 7 9 20\n13 9 19 15 13 14 7 12 15 16\n", "stdout": "10 3 1\n14 11 11 3 19 10 18 7 9 20\n13 9 19 15 13 14 7 12 15 16\n"}, {"stdin": "18 12 1\n6 10 1 1 10 6 10 2 7 2 3 7 7 7 6 5 8 8\n4 4 4 7 1 5 2 2 7 10 2 7 6 6 2 1 4 3\n", "stdout": "18 12 1\n6 10 1 1 10 6 10 2 7 2 3 7 7 7 6 5 8 8\n4 4 4 7 1 5 2 2 7 10 2 7 6 6 2 1 4 3\n"}, {"stdin": "3 1 1\n22 6 2\n2 19 19\n", "stdout": "3 1 1\n22 6 2\n2 19 19\n"}, {"stdin": "14 1 3\n1 1 2 3 4 3 1 3 4 5 3 5 5 5\n5 2 1 1 1 4 2 2 1 4 4 4 5 4\n", "stdout": "14 1 3\n1 1 2 3 4 3 1 3 4 5 3 5 5 5\n5 2 1 1 1 4 2 2 1 4 4 4 5 4\n"}, {"stdin": "3 1 1\n5 4 0\n1 5 2\n", "stdout": "3 1 1\n5 4 0\n1 5 2\n"}, {"stdin": "15 7 6\n2 5 4 1 1 3 0 1 4 4 4 3 4 1 1\n5 5 2 5 4 1 4 5 1 5 4 1 4 4 4\n", "stdout": "15 7 6\n2 5 4 1 1 3 0 1 4 4 4 3 4 1 1\n5 5 2 5 4 1 4 5 1 5 4 1 4 4 4\n"}, {"stdin": "6 2 1\n4 3 4 6 3 2\n4 4 3 5 3 5\n", "stdout": "6 2 1\n4 3 4 6 3 2\n4 4 3 5 3 5\n"}, {"stdin": "13 3 1\n16 6 5 11 17 11 13 12 18 5 12 6 12\n12 20 9 9 19 4 19 4 1 12 1 3 4\n", "stdout": "13 3 1\n16 6 5 11 17 11 13 12 18 5 12 6 12\n12 20 9 9 19 4 19 4 1 12 1 3 4\n"}, {"stdin": "5 2 1\n9 10 1 3 10\n6 10 8 6 3\n", "stdout": "5 2 1\n9 10 1 3 10\n6 10 8 6 3\n"}, {"stdin": "17 1 12\n2 4 5 5 3 3 3 3 1 4 4 1 2 2 3 3 2\n4 1 5 4 2 5 3 4 2 2 5 2 2 5 5 5 3\n", "stdout": "17 1 12\n2 4 5 5 3 3 3 3 1 4 4 1 2 2 3 3 2\n4 1 5 4 2 5 3 4 2 2 5 2 2 5 5 5 3\n"}, {"stdin": "20 3 6\n3 4 4 5 1 2 2 6 5 5 2 2 1 4 1 5 2 2 1 5\n1 4 5 2 2 2 2 5 3 2 4 5 2 1 3 3 1 3 5 3\n", "stdout": "20 3 6\n3 4 4 5 1 2 2 6 5 5 2 2 1 4 1 5 2 2 1 5\n1 4 5 2 2 2 2 5 3 2 4 5 2 1 3 3 1 3 5 3\n"}, {"stdin": "2 1 1\n1 17\n5 21\n", "stdout": "2 1 1\n1 17\n5 21\n"}, {"stdin": "15 1 10\n7 8 1 5 8 8 9 4 4 3 7 4 10 8 3\n3 8 6 5 10 1 9 2 3 8 1 9 3 6 10\n", "stdout": "15 1 10\n7 8 1 5 8 8 9 4 4 3 7 4 10 8 3\n3 8 6 5 10 1 9 2 3 8 1 9 3 6 10\n"}, {"stdin": "13 1 10\n1 4 1 3 1 3 4 3 1 5 3 2 3\n2 3 5 1 4 3 5 4 2 1 3 4 2\n", "stdout": "13 1 10\n1 4 1 3 1 3 4 3 1 5 3 2 3\n2 3 5 1 4 3 5 4 2 1 3 4 2\n"}], "source": "codeforces", "difficulty": 2000, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nconst int maxn = 3100 + 5;\nconst int maxm = 20000 + 5;\nint n, m;\nint head[maxn], to[maxm], nx[maxm], flow[maxm], cost[maxm], ppp;\nint dis[maxn], minflow[maxn];\nbool flag[maxn];\npair<int, int> par[maxn];\nstruct MIN_COST_MAX_FLOW {\n  void init() {\n    memset(head, -1, sizeof(head));\n    ppp = 0;\n  }\n  bool spfa(int s, int t) {\n    int u, v;\n    fill(dis, dis + maxn, INF);\n    memset(flag, 0, sizeof(flag));\n    dis[s] = 0;\n    minflow[s] = INF;\n    queue<int> q;\n    q.push(s);\n    while (!q.empty()) {\n      u = q.front();\n      q.pop();\n      flag[u] = 0;\n      for (int i = head[u]; ~i; i = nx[i]) {\n        v = to[i];\n        if (flow[i] && dis[v] > dis[u] + cost[i]) {\n          dis[v] = dis[u] + cost[i];\n          par[v] = (make_pair(u, i));\n          minflow[v] = min(minflow[u], flow[i]);\n          if (!flag[v]) {\n            flag[v] = 1;\n            q.push(v);\n          }\n        }\n      }\n    }\n    if (dis[t] == INF) return 0;\n    return 1;\n  }\n  int solve(int s, int t) {\n    int ans = 0, p;\n    while (spfa(s, t)) {\n      p = t;\n      while (p != s) {\n        flow[par[p].second] -= minflow[t];\n        flow[par[p].second ^ 1] += minflow[t];\n        p = par[p].first;\n      }\n      ans += dis[t];\n    }\n    return ans;\n  }\n  void add_edge(int u, int v, int f, int c) {\n    to[ppp] = v, nx[ppp] = head[u], flow[ppp] = f, cost[ppp] = c,\n    head[u] = ppp++;\n    to[ppp] = u, nx[ppp] = head[v], flow[ppp] = 0, cost[ppp] = -c,\n    head[v] = ppp++;\n  }\n} mcmf;\nvector<int> programming, sport;\nint pro[maxn], spo[maxn];\nint main() {\n  int n, p, s;\n  scanf(\"%d%d%d\", &n, &p, &s);\n  for (int i = 1; i <= n; i++) scanf(\"%d\", &pro[i]);\n  for (int i = 1; i <= n; i++) scanf(\"%d\", &spo[i]);\n  int start = 0, tank = n + 1;\n  int pp = n + 2, ss = n + 3;\n  mcmf.init();\n  mcmf.add_edge(start, pp, p, 0);\n  mcmf.add_edge(start, ss, s, 0);\n  for (int i = 1; i <= n; i++) {\n    mcmf.add_edge(pp, i, 1, -pro[i]);\n    mcmf.add_edge(ss, i, 1, -spo[i]);\n    mcmf.add_edge(i, tank, 1, 0);\n  }\n  int ans = mcmf.solve(start, tank);\n  for (int i = 1; i <= n; i++) {\n    for (int j = head[i]; ~j; j = nx[j]) {\n      if (flow[j] && to[j] == pp) {\n        programming.push_back(i);\n      }\n    }\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j = head[i]; ~j; j = nx[j]) {\n      if (flow[j] && to[j] == ss) {\n        sport.push_back(i);\n      }\n    }\n  }\n  printf(\"%d\\n\", -ans);\n  for (int i = 0; i < programming.size(); i++) {\n    printf(\"%d%c\", programming[i], i == programming.size() - 1 ? '\\n' : ' ');\n  }\n  for (int i = 0; i < sport.size(); i++) {\n    printf(\"%d%c\", sport[i], i == sport.size() - 1 ? '\\n' : ' ');\n  }\n  return 0;\n}\n"], "original_code": null, "language": "cpp"}, {"problem_id": 728, "question": "Another feature of Shakespeare language is that the variables are named after characters of plays by Shakespeare, and all operations on them (value assignment, output etc.) look like a dialog with other characters. New values of variables are defined in a rather lengthy way, so a programmer should try to minimize their usage.\n\nYou have to print the given sequence of n integers. To do this, you have m variables and two types of operations on them:\n\n  * variable=integer\n  * print(variable)\n\n\n\nAny of the m variables can be used as variable. Variables are denoted by lowercase letters between \"a\" and \"z\", inclusive. Any integer number can be used as integer.\n\nLet's say that the penalty for using first type of operations equals to the number of set bits in the number integer. There is no penalty on using second type of operations. Find and output the program which minimizes the penalty for printing the given sequence of numbers.\n\nInput\n\nThe first line of input contains integers n and m (1 \u2264 n \u2264 250, 1 \u2264 m \u2264 26). The second line contains the sequence to be printed. Each element of the sequence is an integer between 1 and 109, inclusive. The sequence has to be printed in the given order (from left to right).\n\nOutput\n\nOutput the number of lines in the optimal program and the optimal penalty. Next, output the program itself, one command per line. If there are several programs with minimal penalty, output any of them (you have only to minimize the penalty).\n\nExamples\n\nInput\n\n7 2\n1 2 2 4 2 1 2\n\n\nOutput\n\n11 4\nb=1\nprint(b)\na=2\nprint(a)\nprint(a)\nb=4\nprint(b)\nprint(a)\nb=1\nprint(b)\nprint(a)\n\n\nInput\n\n6 3\n1 2 3 1 2 3\n\n\nOutput\n\n9 4\nc=1\nprint(c)\nb=2\nprint(b)\na=3\nprint(a)\nprint(c)\nprint(b)\nprint(a)", "tests": [{"stdin": "7 2\n1 2 2 4 2 1 2\n", "stdout": "7 2\n1 2 2 4 2 1 2\n"}, {"stdin": "6 3\n1 2 3 1 2 3\n", "stdout": "6 3\n1 2 3 1 2 3\n"}, {"stdin": "1 1\n95076\n", "stdout": "2 9\na=95076\nprint(a)\n"}, {"stdin": "8 4\n5 6 3 1 5 4 7 4\n", "stdout": "14 11\na=5\nprint(a)\nb=6\nprint(b)\nb=3\nprint(b)\nb=1\nprint(b)\nprint(a)\na=4\nprint(a)\nb=7\nprint(b)\nprint(a)\n"}, {"stdin": "10 3\n6 10 9 9 9 9 2 5 10 9\n", "stdout": "15 9\na=6\nprint(a)\na=10\nprint(a)\nb=9\nprint(b)\nprint(b)\nprint(b)\nprint(b)\nc=2\nprint(c)\nc=5\nprint(c)\nprint(a)\nprint(b)\n"}, {"stdin": "2 1\n2 8\n", "stdout": "4 2\na=2\nprint(a)\na=8\nprint(a)\n"}, {"stdin": "2 1\n1 1\n", "stdout": "3 1\na=1\nprint(a)\nprint(a)\n"}, {"stdin": "1 1\n1\n", "stdout": "2 1\na=1\nprint(a)\n"}, {"stdin": "1 1\n180276\n", "stdout": "1 1\n180276\n"}, {"stdin": "8 4\n6 6 3 1 5 4 7 4\n", "stdout": "8 4\n6 6 3 1 5 4 7 4\n"}, {"stdin": "1 1\n2\n", "stdout": "1 1\n2\n"}, {"stdin": "6 3\n2 2 3 1 2 3\n", "stdout": "6 3\n2 2 3 1 2 3\n"}, {"stdin": "8 4\n6 6 3 1 5 4 1 4\n", "stdout": "8 4\n6 6 3 1 5 4 1 4\n"}, {"stdin": "6 3\n2 3 3 1 2 3\n", "stdout": "6 3\n2 3 3 1 2 3\n"}, {"stdin": "8 4\n6 6 3 1 5 8 1 4\n", "stdout": "8 4\n6 6 3 1 5 8 1 4\n"}, {"stdin": "8 4\n6 10 3 1 5 8 1 4\n", "stdout": "8 4\n6 10 3 1 5 8 1 4\n"}, {"stdin": "8 6\n6 10 3 2 5 8 1 4\n", "stdout": "8 6\n6 10 3 2 5 8 1 4\n"}, {"stdin": "8 6\n12 10 3 2 5 8 1 4\n", "stdout": "8 6\n12 10 3 2 5 8 1 4\n"}, {"stdin": "8 6\n12 10 3 2 5 8 1 3\n", "stdout": "8 6\n12 10 3 2 5 8 1 3\n"}, {"stdin": "8 6\n7 10 3 2 5 8 1 3\n", "stdout": "8 6\n7 10 3 2 5 8 1 3\n"}, {"stdin": "8 6\n7 10 3 2 5 16 1 3\n", "stdout": "8 6\n7 10 3 2 5 16 1 3\n"}, {"stdin": "8 6\n7 10 3 4 5 16 1 3\n", "stdout": "8 6\n7 10 3 4 5 16 1 3\n"}, {"stdin": "8 11\n7 10 3 4 5 22 1 3\n", "stdout": "8 11\n7 10 3 4 5 22 1 3\n"}, {"stdin": "8 4\n5 6 3 1 5 4 7 2\n", "stdout": "8 4\n5 6 3 1 5 4 7 2\n"}, {"stdin": "10 3\n6 10 9 9 11 9 2 5 10 9\n", "stdout": "10 3\n6 10 9 9 11 9 2 5 10 9\n"}, {"stdin": "8 4\n6 6 3 1 5 4 12 4\n", "stdout": "8 4\n6 6 3 1 5 4 12 4\n"}, {"stdin": "1 1\n4\n", "stdout": "1 1\n4\n"}, {"stdin": "8 4\n6 6 3 1 5 7 1 4\n", "stdout": "8 4\n6 6 3 1 5 7 1 4\n"}, {"stdin": "8 4\n3 6 3 1 5 8 1 4\n", "stdout": "8 4\n3 6 3 1 5 8 1 4\n"}, {"stdin": "8 6\n6 1 3 2 5 8 1 4\n", "stdout": "8 6\n6 1 3 2 5 8 1 4\n"}, {"stdin": "8 6\n12 10 3 2 5 8 1 2\n", "stdout": "8 6\n12 10 3 2 5 8 1 2\n"}, {"stdin": "8 6\n7 10 3 2 5 8 2 3\n", "stdout": "8 6\n7 10 3 2 5 8 2 3\n"}, {"stdin": "8 6\n7 6 3 2 5 16 1 3\n", "stdout": "8 6\n7 6 3 2 5 16 1 3\n"}, {"stdin": "8 6\n1 10 3 4 5 16 1 3\n", "stdout": "8 6\n1 10 3 4 5 16 1 3\n"}, {"stdin": "8 11\n7 10 3 4 5 16 1 6\n", "stdout": "8 11\n7 10 3 4 5 16 1 6\n"}, {"stdin": "8 11\n7 10 3 4 5 36 1 3\n", "stdout": "8 11\n7 10 3 4 5 36 1 3\n"}, {"stdin": "8 4\n6 6 3 1 5 4 13 4\n", "stdout": "8 4\n6 6 3 1 5 4 13 4\n"}, {"stdin": "8 6\n6 1 3 2 5 8 1 6\n", "stdout": "8 6\n6 1 3 2 5 8 1 6\n"}, {"stdin": "8 6\n1 10 3 4 5 19 1 3\n", "stdout": "8 6\n1 10 3 4 5 19 1 3\n"}, {"stdin": "8 11\n7 10 3 4 5 16 1 10\n", "stdout": "8 11\n7 10 3 4 5 16 1 10\n"}, {"stdin": "8 11\n7 10 2 4 5 36 1 3\n", "stdout": "8 11\n7 10 2 4 5 36 1 3\n"}, {"stdin": "8 4\n6 6 3 1 5 7 13 4\n", "stdout": "8 4\n6 6 3 1 5 7 13 4\n"}, {"stdin": "8 6\n6 1 2 2 5 8 1 6\n", "stdout": "8 6\n6 1 2 2 5 8 1 6\n"}, {"stdin": "8 9\n7 6 3 2 5 16 1 4\n", "stdout": "8 9\n7 6 3 2 5 16 1 4\n"}, {"stdin": "8 6\n1 10 3 2 5 19 1 3\n", "stdout": "8 6\n1 10 3 2 5 19 1 3\n"}, {"stdin": "8 11\n7 10 3 4 1 16 1 10\n", "stdout": "8 11\n7 10 3 4 1 16 1 10\n"}, {"stdin": "8 11\n12 10 2 4 5 36 1 3\n", "stdout": "8 11\n12 10 2 4 5 36 1 3\n"}, {"stdin": "8 6\n6 10 3 1 5 8 1 4\n", "stdout": "8 6\n6 10 3 1 5 8 1 4\n"}, {"stdin": "8 11\n7 10 3 4 5 16 1 3\n", "stdout": "8 11\n7 10 3 4 5 16 1 3\n"}, {"stdin": "8 9\n7 6 3 2 5 16 1 3\n", "stdout": "8 9\n7 6 3 2 5 16 1 3\n"}], "source": "codeforces", "difficulty": 2700, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXV = 600, MAXE = 70000, inf = 1000000000;\nint N, Count;\nint G[MAXV], Queue[MAXV], Dist[MAXV], Pre[MAXV], Last[MAXV];\nint Data[MAXE], Weight[MAXE], Cost[MAXE], Next[MAXE];\nbool Flag[MAXV];\nint Calc(int X) {\n  if (!X) return 0;\n  return Calc(X / 2) + X % 2;\n}\nvoid Add(int Number, int V1, int V2, int W, int C) {\n  Data[Number] = V2;\n  Weight[Number] = W;\n  Cost[Number] = C;\n  Next[Number] = G[V1];\n  G[V1] = Number;\n}\nvoid Connect(int V1, int V2, int W, int C) {\n  Add(Count++, V1, V2, W, C);\n  Add(Count++, V2, V1, 0, -C);\n}\nint SPFA(int S, int T) {\n  for (int i = 0; i <= T; i++) Dist[i] = inf;\n  Dist[S] = 0;\n  memset(Flag, 0, sizeof(Flag));\n  Queue[0] = S;\n  int F = 0, R = 1;\n  while (F != R) {\n    int V = Queue[F++];\n    if (F == MAXV) F = 0;\n    int P = G[V];\n    Flag[V] = false;\n    while (P != -1) {\n      int U = Data[P];\n      if (Weight[P] && Dist[V] + Cost[P] < Dist[U]) {\n        Dist[U] = Dist[V] + Cost[P];\n        Pre[U] = P;\n        if (!Flag[U]) Flag[Queue[R++] = U] = true;\n        if (R == MAXV) R = 0;\n      }\n      P = Next[P];\n    }\n  }\n  if (Dist[T] == inf) return -1;\n  int V = T;\n  while (V != S) {\n    Weight[Pre[V]]--;\n    Weight[Pre[V] ^ 1]++;\n    int U = Data[Pre[V] ^ 1];\n    if (U <= N && V > N) Last[V - N - 1] = U;\n    V = U;\n  }\n  return Dist[T];\n}\nint main() {\n  int M;\n  cin >> N >> M;\n  int A[250];\n  for (int i = 0; i < N; i++) cin >> A[i];\n  int S = N * 2 + 1, T = N * 2 + 2;\n  Count = 0;\n  for (int i = 0; i <= T; i++) G[i] = -1;\n  for (int i = 0; i < N; i++) Connect(S, i, 1, 0);\n  Connect(S, N, M, 0);\n  for (int i = 0; i < N; i++)\n    for (int j = i + 1; j < N; j++)\n      if (A[i] == A[j])\n        Connect(i, N + j + 1, 1, 0);\n      else\n        Connect(i, N + j + 1, 1, Calc(A[j]));\n  for (int i = 0; i < N; i++) Connect(N, N + i + 1, 1, Calc(A[i]));\n  for (int i = 1; i <= N; i++) Connect(N + i, T, 1, 0);\n  int Ans = 0, Tmp;\n  while (Tmp = SPFA(S, T), Tmp != -1) Ans += Tmp;\n  int Total = N;\n  for (int i = 0; i < N; i++)\n    if (Last[i] == N || A[Last[i]] != A[i]) Total++;\n  cout << Total << ' ' << Ans << endl;\n  int Number = 0, Var[250];\n  for (int i = 0; i < N; i++)\n    if (Last[i] == N) {\n      Var[i] = Number++;\n      printf(\"%c=%d\\nprint(%c)\\n\", Var[i] + 97, A[i], Var[i] + 97);\n    } else if (A[i] == A[Last[i]]) {\n      Var[i] = Var[Last[i]];\n      printf(\"print(%c)\\n\", Var[i] + 97);\n    } else {\n      Var[i] = Var[Last[i]];\n      printf(\"%c=%d\\nprint(%c)\\n\", Var[i] + 97, A[i], Var[i] + 97);\n    }\n  return 0;\n}\n"], "original_code": null, "language": "cpp"}, {"problem_id": 318, "question": "Farmer John is obsessed with making Bessie exercise more!\n\nBessie is out grazing on the farm, which consists of n fields connected by m directed roads. Each road takes some time w_i to cross. She is currently at field 1 and will return to her home at field n at the end of the day.\n\nFarmer John has plans to increase the time it takes to cross certain roads. He can increase the time it takes to cross each road by a nonnegative amount, but the total increase cannot exceed x_i for the i-th plan. \n\nDetermine the maximum he can make the shortest path from 1 to n for each of the q independent plans.\n\nInput\n\nThe first line contains integers n and m (2 \u2264 n \u2264 50, 1 \u2264 m \u2264 n \u22c5 (n-1)) \u2014 the number of fields and number of roads, respectively.\n\nEach of the following m lines contains 3 integers, u_i, v_i, and w_i (1 \u2264 u_i, v_i \u2264 n, 1 \u2264 w_i \u2264 10^6), meaning there is an road from field u_i to field v_i that takes w_i time to cross.\n\nIt is guaranteed that there exists a way to get to field n from field 1. It is guaranteed that the graph does not contain self-loops or parallel edges. It is possible to have a road from u to v and a road from v to u.\n\nThe next line contains a single integer q (1 \u2264 q \u2264 10^5), the number of plans.\n\nEach of the following q lines contains a single integer x_i, the query (0 \u2264 x_i \u2264 10^5).\n\nOutput\n\nFor each query, output the maximum Farmer John can make the shortest path if the total increase does not exceed x_i.\n\nYour answer is considered correct if its absolute or relative error does not exceed 10^{-6}.\n\nFormally, let your answer be a, and the jury's answer be b. Your answer is accepted if and only if \\frac{|a - b|}{max{(1, |b|)}} \u2264 10^{-6}.\n\nExample\n\nInput\n\n\n3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n1\n2\n3\n4\n\n\nOutput\n\n\n3.0000000000\n4.0000000000\n4.5000000000\n5.0000000000\n5.5000000000", "tests": [{"stdin": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n1\n2\n3\n4\n", "stdout": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n1\n2\n3\n4\n"}, {"stdin": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 1\n2 3 1\n3 4 1\n5\n1\n2\n3\n4\n5\n", "stdout": "5.0000000000\n5.5000000000\n6.0000000000\n6.3333333333\n6.6666666667\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "6.0000000000\n6.5000000000\n7.0000000000\n7.5000000000\n8.0000000000\n8.3333333333\n8.6666666667\n9.0000000000\n9.3333333333\n9.6666666667\n"}, {"stdin": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 1\n2 3 2\n3 4 1\n5\n1\n2\n3\n4\n5\n", "stdout": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 1\n2 3 2\n3 4 1\n5\n1\n2\n3\n4\n5\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n1\n2\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n1\n2\n6\n4\n"}, {"stdin": "3 3\n1 2 2\n2 3 4\n1 3 3\n5\n0\n1\n2\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 4\n1 3 3\n5\n0\n1\n2\n6\n4\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 4\n2 3 3\n5\n0\n1\n2\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 4\n2 3 3\n5\n0\n1\n2\n6\n4\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 4\n2 3 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 4\n2 3 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n18\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n18\n"}, {"stdin": "3 3\n1 2 2\n2 3 4\n2 2 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 4\n2 2 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 2\n2 3 1\n3 4 1\n5\n1\n2\n3\n4\n5\n", "stdout": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 2\n2 3 1\n3 4 1\n5\n1\n2\n3\n4\n5\n"}, {"stdin": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 2\n1 3 4\n5\n0\n1\n2\n3\n4\n", "stdout": "3 3\n1 2 2\n2 3 2\n1 3 4\n5\n0\n1\n2\n3\n4\n"}, {"stdin": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 1\n2 3 2\n3 4 0\n5\n1\n2\n3\n4\n5\n", "stdout": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 4\n3 5 3\n4 5 1\n2 3 2\n3 4 0\n5\n1\n2\n3\n4\n5\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n2\n2\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n2\n2\n6\n4\n"}, {"stdin": "3 3\n1 2 1\n2 3 4\n1 3 3\n5\n0\n1\n2\n6\n4\n", "stdout": "3 3\n1 2 1\n2 3 4\n1 3 3\n5\n0\n1\n2\n6\n4\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 0\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 0\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 4\n2 3 3\n5\n0\n1\n2\n6\n6\n", "stdout": "3 3\n1 2 2\n2 3 4\n2 3 3\n5\n0\n1\n2\n6\n6\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 6\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 6\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 4\n1 3 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n2 3 4\n1 3 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n14\n8\n9\n18\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n14\n8\n9\n18\n"}, {"stdin": "3 3\n1 2 2\n1 3 4\n2 3 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n1 3 4\n2 3 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 5\n3 5 3\n4 5 2\n2 3 1\n3 4 1\n5\n1\n2\n3\n4\n5\n", "stdout": "5 8\n1 2 1\n1 3 2\n1 4 4\n2 5 5\n3 5 3\n4 5 2\n2 3 1\n3 4 1\n5\n1\n2\n3\n4\n5\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 1\n4 5 3\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 1\n4 5 3\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n2\n2\n6\n0\n", "stdout": "3 3\n1 2 2\n2 3 2\n1 3 3\n5\n0\n2\n2\n6\n0\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n14\n8\n16\n18\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n14\n8\n16\n18\n"}, {"stdin": "3 3\n1 2 2\n1 3 2\n2 3 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n1 3 2\n2 3 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 10 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n", "stdout": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 10 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 1\n1 3 3\n5\n0\n2\n2\n6\n0\n", "stdout": "3 3\n1 2 2\n2 3 1\n1 3 3\n5\n0\n2\n2\n6\n0\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 2\n2 5 6\n3 5 1\n4 3 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 2\n2 5 6\n3 5 1\n4 3 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 4 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n14\n8\n16\n18\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 4 3\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n14\n8\n16\n18\n"}, {"stdin": "3 3\n1 2 2\n1 3 3\n2 3 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n1 3 3\n2 3 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 0\n4 2 1\n4 10 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n", "stdout": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 0\n4 2 1\n4 10 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n2 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 0\n4 5 3\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n2 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 0\n4 5 3\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "3 3\n1 2 2\n2 3 1\n1 3 3\n5\n0\n2\n2\n3\n0\n", "stdout": "3 3\n1 2 2\n2 3 1\n1 3 3\n5\n0\n2\n2\n3\n0\n"}, {"stdin": "3 3\n1 2 2\n1 3 5\n2 3 3\n5\n0\n1\n1\n6\n4\n", "stdout": "3 3\n1 2 2\n1 3 5\n2 3 3\n5\n0\n1\n1\n6\n4\n"}, {"stdin": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 0\n4 2 0\n4 10 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n", "stdout": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 0\n4 2 0\n4 10 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 2\n4 5 4\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n", "stdout": "5 6\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 4\n3 5 1\n4 2 1\n4 5 4\n10\n1\n2\n3\n4\n5\n6\n7\n6\n9\n10\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 6\n3 5 1\n4 3 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 3 1\n2 5 6\n3 5 1\n4 3 2\n4 5 4\n10\n1\n0\n0\n4\n5\n6\n7\n8\n9\n10\n"}, {"stdin": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 0\n4 5 3\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n", "stdout": "5 8\n1 2 3\n1 3 5\n1 4 2\n2 2 1\n2 5 4\n3 5 1\n4 2 0\n4 5 3\n10\n1\n0\n3\n4\n5\n6\n7\n8\n9\n10\n"}], "source": "codeforces", "difficulty": 3100, "human_solutions": ["#include <bits/stdc++.h>\n#pragma GCC optimize(2)\nusing namespace std;\ninline int read() {\n  char c = getchar();\n  int x = 0;\n  bool f = 0;\n  for (; !isdigit(c); c = getchar()) f ^= !(c ^ 45);\n  for (; isdigit(c); c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\n  if (f) x = -x;\n  return x;\n}\nint n, m, s, t, maxflow, mincost;\nint dis[100005], pre[100005], lste[100005], flow[100005];\nbool inq[100005];\nstruct edge {\n  int to, nxt, w, cost;\n} e[100005];\nint tot = 1, head[100005];\ninline void adde(int u, int v, int w, int c) {\n  e[++tot] = (edge){v, head[u], w, c};\n  head[u] = tot;\n}\ninline void add(int u, int v, int w, int c) {\n  adde(u, v, w, c);\n  adde(v, u, 0, -c);\n}\nbool spfa(int s, int t) {\n  queue<int> q;\n  memset(dis, 63, sizeof dis);\n  memset(flow, 63, sizeof flow);\n  memset(inq, 0, sizeof inq);\n  dis[s] = 0, pre[t] = -1;\n  q.push(s);\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop();\n    inq[u] = 0;\n    for (int i = head[u]; i; i = e[i].nxt) {\n      int v = e[i].to;\n      if (e[i].w > 0 && dis[v] > dis[u] + e[i].cost) {\n        dis[v] = dis[u] + e[i].cost;\n        pre[v] = u, lste[v] = i;\n        flow[v] = min(flow[u], e[i].w);\n        if (!inq[v]) inq[v] = 1, q.push(v);\n      }\n    }\n  }\n  return pre[t] != -1;\n}\nvector<pair<double, double> > v;\nvoid mcmf(int s, int t) {\n  while (spfa(s, t)) {\n    int u = t;\n    maxflow += flow[t], mincost += flow[t] * dis[t];\n    v.push_back(make_pair(1.0 * maxflow, 1.0 * mincost));\n    while (u != s) {\n      int E = lste[u];\n      e[E].w -= flow[t], e[E ^ 1].w += flow[t];\n      u = pre[u];\n    }\n  }\n}\nsigned main() {\n  n = read(), m = read();\n  for (register int i = (1); i <= (m); ++i) {\n    int u = read(), v = read(), w = read();\n    add(u, v, 1, w);\n  }\n  mcmf(1, n);\n  int Q = read();\n  while (Q--) {\n    int x = read();\n    double res = 1e18;\n    for (register int i = (0); i <= (maxflow - 1); ++i)\n      res = min(res, (v[i].second + x) / v[i].first);\n    printf(\"%.10lf\\n\", res);\n  }\n  return 0;\n}\n"], "original_code": null, "language": "cpp"}, {"problem_id": 350, "question": "A little boy Petya dreams of growing up and becoming the Head Berland Plumber. He is thinking of the problems he will have to solve in the future. Unfortunately, Petya is too inexperienced, so you are about to solve one of such problems for Petya, the one he's the most interested in.\n\nThe Berland capital has n water tanks numbered from 1 to n. These tanks are connected by unidirectional pipes in some manner. Any pair of water tanks is connected by at most one pipe in each direction. Each pipe has a strictly positive integer width. Width determines the number of liters of water per a unit of time this pipe can transport. The water goes to the city from the main water tank (its number is 1). The water must go through some pipe path and get to the sewer tank with cleaning system (its number is n). \n\nPetya wants to increase the width of some subset of pipes by at most k units in total so that the width of each pipe remains integer. Help him determine the maximum amount of water that can be transmitted per a unit of time from the main tank to the sewer tank after such operation is completed.\n\nInput\n\nThe first line contains two space-separated integers n and k (2 \u2264 n \u2264 50, 0 \u2264 k \u2264 1000). Then follow n lines, each line contains n integers separated by single spaces. The i + 1-th row and j-th column contain number cij \u2014 the width of the pipe that goes from tank i to tank j (0 \u2264 cij \u2264 106, cii = 0). If cij = 0, then there is no pipe from tank i to tank j.\n\nOutput\n\nPrint a single integer \u2014 the maximum amount of water that can be transmitted from the main tank to the sewer tank per a unit of time.\n\nExamples\n\nInput\n\n5 7\n0 1 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 0 0 0 0\n\n\nOutput\n\n10\n\n\nInput\n\n5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 0 4\n100 0 0 0 0\n\n\nOutput\n\n5\n\nNote\n\nIn the first test Petya can increase width of the pipe that goes from the 1st to the 2nd water tank by 7 units.\n\nIn the second test Petya can increase width of the pipe that goes from the 1st to the 2nd water tank by 4 units, from the 2nd to the 3rd water tank by 3 units, from the 3rd to the 4th water tank by 2 units and from the 4th to 5th water tank by 1 unit.", "tests": [{"stdin": "5 7\n0 1 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 0 0 0 0\n", "stdout": "5 7\n0 1 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 0 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 0 4\n100 0 0 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 0 4\n100 0 0 0 0\n"}, {"stdin": "12 54\n0 999302 994706 0 0 0 0 0 0 0 0 0\n0 0 1 994096 0 0 0 0 0 0 0 0\n0 1 0 0 998491 0 0 0 0 0 0 0\n0 0 0 0 1 992284 0 0 0 0 0 0\n0 0 0 1 0 0 999402 0 0 0 0 0\n0 0 0 0 0 0 1 995637 0 0 0 0\n0 0 0 0 0 1 0 0 991432 0 0 0\n0 0 0 0 0 0 0 0 1 998414 0 0\n0 0 0 0 0 0 0 1 0 0 997616 0\n0 0 0 0 0 0 0 0 0 0 1 990911\n0 0 0 0 0 0 0 0 0 1 0 998663\n0 0 0 0 0 0 0 0 0 0 0 0\n", "stdout": "1982399"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 1\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 0 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 0 1\n1 1 1 1 1 1 1 1 1 0\n", "stdout": "9"}, {"stdin": "10 30\n0 0 1 3 0 5 3 0 0 4\n3 0 0 5 0 4 0 0 0 1\n5 5 0 0 3 2 0 0 0 0\n0 0 0 0 0 2 0 4 0 0\n0 0 1 1 0 0 0 4 2 0\n0 4 5 0 2 0 0 2 0 0\n4 0 0 0 2 5 0 0 0 1\n0 5 0 1 0 4 5 0 3 5\n1 0 0 4 0 0 3 0 0 4\n0 0 5 0 3 0 0 0 2 0\n", "stdout": "45"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 0\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 0 0 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "184"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 91\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 36 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 99 0\n", "stdout": "1278"}, {"stdin": "13 40\n0 0 0 0 0 0 171 0 0 0 0 0 0\n0 0 0 0 144 0 0 0 0 0 0 0 0\n0 0 0 58 0 345 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 79 0 102 0 0\n0 292 65 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 124 0 0 161 0 0\n0 0 0 0 0 0 0 0 321 0 0 0 0\n0 217 0 0 0 0 0 0 0 0 0 391 0\n0 0 0 0 0 196 0 0 0 207 0 0 0\n0 349 0 0 0 0 94 0 0 0 0 0 0\n0 396 0 0 0 118 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 396\n0 0 0 70 0 0 0 0 0 0 0 0 0\n", "stdout": "164"}, {"stdin": "12 989\n0 999676 993216 0 0 0 0 0 0 0 0 0\n0 0 1 998946 0 0 0 0 0 0 0 0\n0 1 0 0 997132 0 0 0 0 0 0 0\n0 0 0 0 1 992535 0 0 0 0 0 0\n0 0 0 1 0 0 998874 0 0 0 0 0\n0 0 0 0 0 0 1 996064 0 0 0 0\n0 0 0 0 0 1 0 0 996203 0 0 0\n0 0 0 0 0 0 0 0 1 992039 0 0\n0 0 0 0 0 0 0 1 0 0 993527 0\n0 0 0 0 0 0 0 0 0 0 1 996957\n0 0 0 0 0 0 0 0 0 1 0 994514\n0 0 0 0 0 0 0 0 0 0 0 0\n", "stdout": "1986154"}, {"stdin": "2 0\n0 0\n0 0\n", "stdout": "0"}, {"stdin": "8 930\n0 994194 999113 0 0 0 0 0\n0 0 1 991020 0 0 0 0\n0 1 0 0 992293 0 0 0\n0 0 0 0 1 996760 0 0\n0 0 0 1 0 0 991401 0\n0 0 0 0 0 0 1 991401\n0 0 0 0 0 1 0 998645\n0 0 0 0 0 0 0 0\n", "stdout": "1983352"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 1\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 0 1\n1 1 1 1 1 1 1 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 1\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 0 1\n1 1 1 1 1 1 1 1 1 0\n"}, {"stdin": "10 30\n0 0 1 3 0 5 3 0 0 4\n3 0 0 5 0 4 0 0 0 1\n5 5 0 0 3 2 0 0 0 0\n0 0 0 0 0 2 0 4 0 0\n0 0 1 1 0 1 0 4 2 0\n0 4 5 0 2 0 0 2 0 0\n4 0 0 0 2 5 0 0 0 1\n0 5 0 1 0 4 5 0 3 5\n1 0 0 4 0 0 3 0 0 4\n0 0 5 0 3 0 0 0 2 0\n", "stdout": "10 30\n0 0 1 3 0 5 3 0 0 4\n3 0 0 5 0 4 0 0 0 1\n5 5 0 0 3 2 0 0 0 0\n0 0 0 0 0 2 0 4 0 0\n0 0 1 1 0 1 0 4 2 0\n0 4 5 0 2 0 0 2 0 0\n4 0 0 0 2 5 0 0 0 1\n0 5 0 1 0 4 5 0 3 5\n1 0 0 4 0 0 3 0 0 4\n0 0 5 0 3 0 0 0 2 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 0\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 0 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 0\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 0 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 91\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 99 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 91\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 99 0\n"}, {"stdin": "13 40\n0 0 0 0 0 0 171 0 0 0 0 0 0\n0 0 0 0 144 0 0 0 0 0 0 0 0\n0 0 0 58 0 345 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 79 0 102 0 0\n0 292 65 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 124 0 0 161 0 0\n0 0 0 0 0 0 0 0 321 0 0 0 0\n0 217 0 0 0 0 0 0 0 0 0 391 0\n0 0 0 0 0 196 0 0 0 207 0 0 0\n0 349 0 0 0 0 94 0 0 0 0 0 0\n0 396 0 0 0 118 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0 0 396\n0 0 0 70 0 0 0 0 0 0 0 0 0\n", "stdout": "13 40\n0 0 0 0 0 0 171 0 0 0 0 0 0\n0 0 0 0 144 0 0 0 0 0 0 0 0\n0 0 0 58 0 345 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 79 0 102 0 0\n0 292 65 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 124 0 0 161 0 0\n0 0 0 0 0 0 0 0 321 0 0 0 0\n0 217 0 0 0 0 0 0 0 0 0 391 0\n0 0 0 0 0 196 0 0 0 207 0 0 0\n0 349 0 0 0 0 94 0 0 0 0 0 0\n0 396 0 0 0 118 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0 0 396\n0 0 0 70 0 0 0 0 0 0 0 0 0\n"}, {"stdin": "5 7\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 0 0 0 0\n", "stdout": "5 7\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 0 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 0 4\n000 0 0 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 0 4\n000 0 0 0 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 0 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 0 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 99 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 99 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n1 1 0 0 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n1 1 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 1\n0 0 0 3 0\n0 0 0 1 4\n000 0 -1 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 1\n0 0 0 3 0\n0 0 0 1 4\n000 0 -1 0 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 137 88 7 63\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 137 88 7 63\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 1\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 1\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 0\n"}, {"stdin": "13 40\n0 0 0 0 0 0 171 0 0 0 0 0 0\n0 0 0 0 144 0 0 0 0 0 0 0 0\n0 0 0 58 0 345 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 79 0 102 0 0\n0 292 65 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 124 0 0 161 0 0\n0 0 0 0 0 0 0 0 321 0 0 0 0\n0 217 0 0 0 0 0 0 0 1 0 391 0\n0 0 0 0 0 196 0 0 0 207 0 0 0\n0 349 0 0 0 0 94 0 0 0 0 0 0\n0 396 0 0 0 118 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0 0 396\n0 0 0 70 0 0 0 0 0 0 0 0 0\n", "stdout": "13 40\n0 0 0 0 0 0 171 0 0 0 0 0 0\n0 0 0 0 144 0 0 0 0 0 0 0 0\n0 0 0 58 0 345 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 79 0 102 0 0\n0 292 65 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 124 0 0 161 0 0\n0 0 0 0 0 0 0 0 321 0 0 0 0\n0 217 0 0 0 0 0 0 0 1 0 391 0\n0 0 0 0 0 196 0 0 0 207 0 0 0\n0 349 0 0 0 0 94 0 0 0 0 0 0\n0 396 0 0 0 118 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0 0 0 0 396\n0 0 0 70 0 0 0 0 0 0 0 0 0\n"}, {"stdin": "5 7\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 1 0 0 0\n", "stdout": "5 7\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n0 1 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 1 4\n000 0 0 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 1 4\n000 0 0 0 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 0 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 0 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 71 88 7 41\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "5 7\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n1 1 0 0 0\n", "stdout": "5 7\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 0 5\n0 0 0 0 10\n1 1 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 1 4\n000 0 -1 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 0\n0 0 0 3 0\n0 0 0 1 4\n000 0 -1 0 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n0 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 137 88 7 41\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 137 88 7 41\n15 51 47 0 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 1 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 0 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 1 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 0 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 1 5\n0 0 0 0 10\n1 1 0 0 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 10 0\n0 0 0 1 5\n0 0 0 0 10\n1 1 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 1\n0 0 0 3 0\n0 0 1 1 4\n000 0 -1 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 1\n0 0 0 3 0\n0 0 1 1 4\n000 0 -1 0 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 1 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 1 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 0 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 97 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 10 0\n-1 0 0 1 5\n0 0 0 0 10\n1 1 0 0 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 10 0\n-1 0 0 1 5\n0 0 0 0 10\n1 1 0 0 0\n"}, {"stdin": "5 10\n0 1 0 0 0\n0 0 2 0 1\n0 0 0 0 0\n0 0 1 1 4\n000 0 -1 0 0\n", "stdout": "5 10\n0 1 0 0 0\n0 0 2 0 1\n0 0 0 0 0\n0 0 1 1 4\n000 0 -1 0 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 1 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 1 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n0 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 1 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 142 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 142 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 84 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 9 0\n0 0 0 1 5\n0 0 0 0 10\n1 1 0 0 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 9 0\n0 0 0 1 5\n0 0 0 0 10\n1 1 0 0 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 1 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n1 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 1 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n0 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n1 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 1 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 142 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n43 64 0 142 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 9 0\n0 0 0 1 5\n0 0 0 0 4\n1 1 0 0 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 9 0\n0 0 0 1 5\n0 0 0 0 4\n1 1 0 0 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 2 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 2 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 1 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n"}, {"stdin": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n-1 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n1 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 1 311 0\n", "stdout": "11 57\n0 0 0 0 0 0 0 190 356 0 1\n-1 0 0 0 0 0 0 0 0 0 0\n302 0 0 0 0 0 0 0 0 0 0\n0 352 377 0 0 0 0 1 0 114 343\n0 0 0 0 0 0 1 250 0 0 0\n17 0 0 240 0 0 217 0 388 0 0\n132 320 0 0 0 0 1 1 0 0 0\n0 304 0 0 0 0 0 0 0 0 0\n-1 0 220 0 0 127 0 352 0 0 0\n1 0 0 0 0 0 240 210 359 0 0\n0 345 0 0 0 0 15 0 1 311 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n27 64 0 142 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n27 64 0 142 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 9 0\n0 0 0 1 5\n0 0 0 0 4\n1 1 0 -1 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 9 0\n0 0 0 1 5\n0 0 0 0 4\n1 1 0 -1 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 2 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 0 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 2 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 0 0 1 1 1 1\n1 1 1 1 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n27 64 0 162 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n27 64 0 162 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n55 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}, {"stdin": "5 2\n0 2 0 2 0\n0 0 4 3 0\n0 0 0 1 5\n0 0 0 0 4\n1 1 0 -1 0\n", "stdout": "5 2\n0 2 0 2 0\n0 0 4 3 0\n0 0 0 1 5\n0 0 0 0 4\n1 1 0 -1 0\n"}, {"stdin": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 2 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 0 0 1 1 1 1\n1 1 1 2 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n", "stdout": "10 0\n0 1 1 1 1 1 1 1 1 1\n1 -1 1 1 0 1 1 1 1 1\n1 1 -1 1 1 1 1 1 1 1\n1 1 2 0 1 1 1 1 1 1\n1 1 1 1 0 1 1 1 1 2\n1 1 1 1 0 0 1 1 1 1\n1 1 1 2 1 1 -1 1 1 1\n1 1 1 1 1 1 1 0 1 1\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 2 1 0 1 1 0\n"}, {"stdin": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n27 64 0 162 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n90 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n", "stdout": "10 1000\n0 96 50 78 7 57 1 14 17 1\n85 0 100 56 36 69 66 4 92 3\n27 64 0 162 49 16 137 88 7 63\n15 51 47 -1 24 83 43 40 74 22\n77 85 80 68 0 30 45 3 45 11\n90 52 5 26 57 0 12 25 50 8\n63 35 14 36 78 53 0 38 61 58\n40 22 51 47 70 60 55 0 51 63\n14 85 69 99 63 37 85 16 0 2\n17 64 24 27 25 16 45 81 98 0\n"}], "source": "codeforces", "difficulty": 2300, "human_solutions": ["#include <bits/stdc++.h>\n#pragma GCC optimize(\"O2,unroll-loops\")\nusing namespace std;\nconst int inf = 1000000010;\nconst long long INF = 10000000000000010LL;\nconst int mod = 1000000007;\nconst int MAXM = 300010, N = 53, LOG = 20;\nint n, m, k, u, v, x, y, t, a, b, ans;\nint A[N][N], head[N], Q[N], dist[N], par[N], inq[N];\nint to[MAXM], cap[MAXM], cost[MAXM], prv[MAXM], L, R, M;\ninline void add_edge(int u, int v, int c, int w) {\n  to[M] = v, cap[M] = c, cost[M] = w, prv[M] = head[u], head[u] = M++;\n  to[M] = u, cap[M] = 0, cost[M] = -w, prv[M] = head[v], head[v] = M++;\n}\nbool Flow(int src, int snk) {\n  memset(dist, 63, sizeof(dist));\n  L = R = 0;\n  dist[Q[R++] = src] = 0;\n  while (L ^ R) {\n    int v = Q[L++];\n    if (L == N) L = 0;\n    inq[v] = 0;\n    for (int i = head[v]; ~i; i = prv[i])\n      if (cap[i]) {\n        int u = to[i];\n        if (dist[u] > dist[v] + cost[i]) {\n          dist[u] = dist[v] + cost[i];\n          par[u] = i;\n          if (!inq[u]) {\n            inq[u] = 1;\n            Q[R++] = u;\n            if (R == N) R = 0;\n          }\n        }\n      }\n  }\n  if (dist[snk] > k) return 0;\n  int v = snk, flow = inf;\n  if (dist[snk]) flow = k / dist[snk];\n  while (v ^ src) {\n    int i = par[v];\n    flow = min(flow, cap[i]);\n    v = to[i ^ 1];\n  }\n  v = snk;\n  while (v ^ src) {\n    int i = par[v];\n    cap[i] -= flow;\n    cap[i ^ 1] += flow;\n    v = to[i ^ 1];\n  }\n  k -= dist[snk] * flow;\n  ans += flow;\n  return 1;\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  memset(head, -1, sizeof(head));\n  cin >> n >> k;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= n; j++) {\n      cin >> A[i][j];\n      if (A[i][j]) {\n        add_edge(i, j, A[i][j], 0);\n        add_edge(i, j, k, 1);\n      }\n    }\n  while (Flow(1, n))\n    ;\n  cout << ans << \"\\n\";\n  return 0;\n}\n"], "original_code": null, "language": "cpp"}, {"problem_id": 41, "question": "The leader of some very secretive organization has decided to invite all other members to a meeting. All members of the organization live in the same town which can be represented as n crossroads connected by m two-directional streets. The meeting will be held in the leader's house near the crossroad 1. There are k members of the organization invited to the meeting; i-th of them lives near the crossroad a_i. \n\nAll members of the organization receive the message about the meeting at the same moment and start moving to the location where the meeting is held. In the beginning of each minute each person is located at some crossroad. He or she can either wait a minute at this crossroad, or spend a minute to walk from the current crossroad along some street to another crossroad (obviously, it is possible to start walking along the street only if it begins or ends at the current crossroad). In the beginning of the first minute each person is at the crossroad where he or she lives. As soon as a person reaches the crossroad number 1, he or she immediately comes to the leader's house and attends the meeting.\n\nObviously, the leader wants all other members of the organization to come up as early as possible. But, since the organization is very secretive, the leader does not want to attract much attention. Let's denote the discontent of the leader as follows\n\n  * initially the discontent is 0; \n  * whenever a person reaches the crossroad number 1, the discontent of the leader increases by c \u22c5 x, where c is some fixed constant, and x is the number of minutes it took the person to reach the crossroad number 1; \n  * whenever x members of the organization walk along the same street at the same moment in the same direction, dx^2 is added to the discontent, where d is some fixed constant. This is not cumulative: for example, if two persons are walking along the same street in the same direction at the same moment, then 4d is added to the discontent, not 5d. \n\n\n\nBefore sending a message about the meeting, the leader can tell each member of the organization which path they should choose and where they should wait. Help the leader to establish a plan for every member of the organization so they all reach the crossroad 1, and the discontent is minimized.\n\nInput\n\nThe first line of the input contains five integer numbers n, m, k, c and d (2 \u2264 n \u2264 50, n - 1 \u2264 m \u2264 50, 1 \u2264 k, c, d \u2264 50) \u2014 the number of crossroads, the number of streets, the number of persons invited to the meeting and the constants affecting the discontent, respectively.\n\nThe second line contains k numbers a_1, a_2, ..., a_k (2 \u2264 a_i \u2264 n) \u2014 the crossroads where the members of the organization live.\n\nThen m lines follow, each denoting a bidirectional street. Each line contains two integers x_i and y_i (1 \u2264 x_i, y_i \u2264 n, x_i \u2260 y_i) denoting a street connecting crossroads x_i and y_i. There may be multiple streets connecting the same pair of crossroads.\n\nIt is guaranteed that every crossroad can be reached from every other crossroad using the given streets. \n\nOutput\n\nPrint one integer: the minimum discontent of the leader after everyone reaches crossroad 1.\n\nExamples\n\nInput\n\n\n3 2 4 2 3\n3 3 3 3\n1 2\n2 3\n\n\nOutput\n\n\n52\n\n\nInput\n\n\n3 3 4 2 3\n3 2 2 3\n1 2\n2 3\n2 3\n\n\nOutput\n\n\n38\n\nNote\n\nThe best course of action in the first test is the following:\n\n  * the first person goes along the street 2 to the crossroad 2, then goes along the street 1 to the crossroad 1 and attends the meeting; \n  * the second person waits one minute on the crossroad 3, then goes along the street 2 to the crossroad 2, then goes along the street 1 to the crossroad 1 and attends the meeting; \n  * the third person waits two minutes on the crossroad 3, then goes along the street 2 to the crossroad 2, then goes along the street 1 to the crossroad 1 and attends the meeting; \n  * the fourth person waits three minutes on the crossroad 3, then goes along the street 2 to the crossroad 2, then goes along the street 1 to the crossroad 1 and attends the meeting. ", "tests": [{"stdin": "3 3 4 2 3\n3 2 2 3\n1 2\n2 3\n2 3\n", "stdout": "3 3 4 2 3\n3 2 2 3\n1 2\n2 3\n2 3\n"}, {"stdin": "3 2 4 2 3\n3 3 3 3\n1 2\n2 3\n", "stdout": "3 2 4 2 3\n3 3 3 3\n1 2\n2 3\n"}, {"stdin": "50 50 50 50 1\n37 4 43 29 18 26 14 20 35 41 24 18 23 3 18 33 13 41 47 19 34 15 46 38 37 49 7 25 13 48 24 36 24 43 5 32 31 15 5 48 16 6 8 43 38 26 15 12 11 4\n1 16\n16 37\n1 10\n1 44\n10 34\n1 26\n10 12\n12 38\n38 21\n1 19\n37 6\n6 11\n21 22\n6 50\n6 42\n21 33\n50 36\n6 8\n50 32\n32 47\n33 48\n34 29\n21 49\n49 15\n29 25\n21 46\n47 9\n44 18\n46 7\n6 2\n11 39\n7 40\n19 41\n40 35\n11 31\n44 24\n41 23\n44 43\n18 5\n49 20\n34 27\n9 30\n34 3\n10 13\n27 28\n9 4\n39 45\n24 17\n28 14\n42 35\n", "stdout": "9488\n"}, {"stdin": "50 49 50 50 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n25 24\n26 25\n27 26\n28 27\n29 28\n30 29\n31 30\n32 31\n33 32\n34 33\n35 34\n36 35\n37 36\n38 37\n39 38\n40 39\n41 40\n42 41\n43 42\n44 43\n45 44\n46 45\n47 46\n48 47\n49 48\n50 49\n", "stdout": "144656\n"}, {"stdin": "25 50 50 50 50\n23 10 7 20 19 21 6 25 10 17 7 4 4 6 18 16 5 9 5 20 21 3 10 11 7 8 14 10 10 9 20 22 19 18 24 11 17 12 13 21 8 12 24 3 23 10 2 23 2 20\n1 10\n10 17\n1 2\n17 12\n12 7\n10 11\n7 16\n2 19\n11 18\n16 8\n2 9\n7 6\n17 3\n19 15\n19 25\n12 5\n11 21\n8 4\n1 23\n18 24\n16 13\n3 22\n17 14\n21 20\n9 17\n16 23\n18 11\n22 8\n7 24\n5 6\n19 21\n13 2\n4 22\n3 8\n16 17\n2 24\n8 20\n18 19\n9 23\n7 23\n14 2\n8 13\n20 7\n21 16\n17 22\n22 14\n21 24\n7 11\n6 14\n12 2\n", "stdout": "18350\n"}, {"stdin": "50 50 50 50 1\n11 43 20 20 46 35 11 39 30 24 49 27 44 5 12 9 30 17 29 14 30 38 10 50 14 48 34 44 24 43 4 3 9 23 42 18 6 12 7 29 29 20 18 39 12 42 14 31 8 40\n1 44\n44 24\n24 22\n44 21\n1 20\n1 40\n40 8\n40 26\n20 25\n40 33\n22 41\n41 45\n20 4\n33 6\n45 23\n23 15\n6 34\n22 10\n41 11\n6 3\n4 5\n40 12\n12 13\n21 48\n4 49\n41 39\n5 35\n10 29\n4 36\n24 2\n40 28\n28 38\n4 14\n25 9\n33 19\n3 47\n29 37\n25 18\n38 43\n49 16\n14 46\n24 27\n23 17\n27 7\n47 30\n23 31\n19 32\n33 42\n30 50\n13 9\n", "stdout": "9425\n"}, {"stdin": "25 50 50 50 1\n21 18 25 8 14 9 15 4 21 10 8 23 23 14 13 13 21 13 8 5 21 7 16 20 23 20 9 18 24 6 17 18 18 18 13 23 18 3 10 18 9 7 4 5 12 24 2 19 20 11\n1 15\n15 9\n1 17\n9 7\n1 25\n7 10\n17 4\n4 23\n23 12\n9 24\n1 2\n15 21\n15 11\n24 6\n11 14\n10 19\n1 16\n2 13\n9 22\n15 8\n7 5\n10 18\n18 20\n1 3\n15 25\n7 3\n8 4\n5 15\n11 20\n11 13\n15 6\n20 5\n11 15\n9 3\n25 1\n5 6\n21 17\n7 5\n5 4\n8 7\n23 18\n2 1\n13 1\n19 16\n24 5\n8 17\n10 6\n25 19\n6 23\n17 2\n", "stdout": "6245\n"}, {"stdin": "25 50 50 1 1\n3 23 24 12 21 9 10 22 18 19 2 12 19 8 19 17 7 16 4 23 23 3 10 2 16 2 19 11 20 14 3 6 9 15 3 4 8 22 21 2 15 19 18 16 16 24 20 4 16 11\n1 18\n1 7\n18 9\n7 5\n5 23\n9 6\n1 21\n9 16\n6 24\n24 11\n16 13\n9 15\n23 10\n7 4\n4 17\n5 14\n24 12\n17 25\n14 20\n1 19\n12 8\n21 3\n3 2\n14 22\n12 18\n12 25\n22 18\n25 19\n9 22\n18 10\n23 8\n22 2\n24 20\n3 14\n20 3\n20 6\n16 22\n5 14\n5 21\n14 20\n4 12\n11 20\n21 20\n8 6\n20 16\n10 14\n4 5\n16 9\n12 3\n15 13\n", "stdout": "355\n"}, {"stdin": "50 49 50 1 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n25 24\n26 25\n27 26\n28 27\n29 28\n30 29\n31 30\n32 31\n33 32\n34 33\n35 34\n36 35\n37 36\n38 37\n39 38\n40 39\n41 40\n42 41\n43 42\n44 43\n45 44\n46 45\n47 46\n48 47\n49 48\n50 49\n", "stdout": "126175\n"}, {"stdin": "50 49 50 50 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n25 24\n26 25\n27 26\n28 27\n29 28\n30 29\n31 30\n32 31\n33 32\n34 33\n35 34\n36 35\n37 36\n38 37\n39 38\n40 39\n41 40\n42 41\n43 42\n44 43\n45 44\n46 45\n47 46\n48 47\n49 48\n50 49\n", "stdout": "306250\n"}, {"stdin": "8 10 10 8 5\n6 3 7 5 2 5 7 3 8 7\n1 7\n1 4\n4 6\n4 5\n6 2\n5 8\n5 3\n7 3\n2 6\n4 7\n", "stdout": "319\n"}, {"stdin": "50 49 49 1 50\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "stdout": "62475\n"}, {"stdin": "50 50 50 1 1\n12 50 38 33 26 24 40 43 7 30 18 9 14 9 39 21 10 16 49 35 18 8 15 44 21 39 29 45 16 41 29 13 4 42 27 34 2 13 10 42 36 21 8 13 13 24 14 39 34 24\n1 29\n1 18\n29 23\n1 49\n1 31\n29 5\n49 45\n23 33\n45 7\n33 9\n5 25\n25 46\n7 32\n7 43\n23 38\n7 35\n9 17\n1 11\n5 30\n23 28\n1 50\n38 24\n7 12\n17 21\n45 41\n28 4\n24 19\n18 14\n24 15\n1 37\n33 10\n31 40\n5 20\n9 47\n37 2\n40 22\n17 36\n17 39\n1 44\n31 26\n46 27\n41 42\n28 48\n49 13\n31 8\n8 34\n29 6\n18 3\n44 16\n43 24\n", "stdout": "443\n"}, {"stdin": "25 50 50 50 50\n3 23 10 2 17 9 23 3 16 5 14 24 20 23 16 20 24 3 22 15 23 4 25 14 20 25 11 8 11 18 3 10 5 7 13 4 24 25 8 11 13 15 14 21 25 19 15 23 12 18\n1 6\n1 17\n17 16\n17 23\n23 4\n17 19\n17 18\n1 22\n22 8\n1 25\n17 5\n16 21\n21 3\n3 10\n17 20\n23 7\n6 12\n16 11\n19 24\n17 9\n16 14\n23 2\n1 13\n4 15\n16 12\n22 12\n5 8\n24 12\n3 8\n7 24\n25 7\n4 12\n2 13\n8 19\n10 4\n5 9\n8 23\n1 13\n18 25\n11 7\n4 10\n20 4\n15 9\n18 10\n23 24\n15 9\n9 20\n20 10\n5 21\n8 23\n", "stdout": "17150\n"}, {"stdin": "25 50 50 50 50\n24 8 9 23 22 13 22 3 14 16 23 4 11 21 21 17 16 6 18 7 16 25 4 14 20 23 13 15 25 23 13 4 7 16 6 24 3 18 7 11 5 22 19 7 11 17 15 22 21 14\n1 3\n3 7\n1 4\n4 17\n3 23\n17 21\n7 15\n7 13\n4 16\n23 25\n3 19\n4 14\n19 9\n9 20\n9 24\n17 22\n19 11\n4 2\n15 10\n20 8\n21 6\n7 18\n9 12\n24 5\n6 11\n7 23\n8 7\n3 12\n3 21\n18 7\n23 1\n25 20\n13 7\n12 16\n4 11\n11 13\n4 22\n10 12\n5 3\n17 19\n21 14\n5 23\n11 23\n4 6\n8 13\n4 10\n19 12\n11 18\n3 16\n21 10\n", "stdout": "17900\n"}, {"stdin": "50 50 50 50 50\n19 32 7 8 23 29 47 30 40 37 15 36 35 35 8 24 31 22 29 40 29 14 2 17 22 25 6 33 39 24 33 26 49 17 27 46 25 27 19 22 25 2 34 31 33 29 44 35 6 30\n1 6\n1 48\n6 39\n1 50\n39 12\n48 32\n48 38\n48 25\n1 49\n25 2\n50 44\n50 17\n49 35\n17 23\n12 43\n2 42\n42 5\n2 16\n25 21\n16 7\n6 10\n42 33\n25 29\n17 11\n42 19\n49 13\n49 31\n49 9\n7 20\n44 14\n17 27\n19 26\n12 15\n21 22\n39 24\n29 28\n29 8\n43 18\n8 4\n15 46\n10 47\n13 45\n10 41\n12 40\n1 37\n18 34\n8 30\n10 36\n38 3\n27 5\n", "stdout": "23050\n"}, {"stdin": "25 50 50 50 1\n10 12 8 5 11 22 14 4 3 20 9 3 22 4 10 10 14 16 3 13 6 4 2 12 23 19 3 25 14 19 3 4 4 20 6 10 21 20 25 10 10 6 24 7 15 22 2 17 5 7\n1 24\n24 4\n24 19\n19 8\n19 25\n1 21\n19 22\n24 13\n4 23\n22 20\n20 14\n24 15\n8 10\n21 16\n19 18\n22 2\n20 5\n22 7\n5 12\n4 6\n22 11\n22 9\n15 3\n20 17\n5 16\n16 10\n3 7\n2 24\n11 21\n1 21\n13 12\n21 6\n10 9\n2 20\n16 18\n2 14\n3 9\n10 1\n2 15\n6 9\n8 13\n3 14\n24 11\n22 20\n17 8\n12 9\n11 4\n21 16\n13 25\n12 11\n", "stdout": "6422\n"}, {"stdin": "50 50 50 50 1\n21 40 29 43 29 35 12 48 28 11 48 6 40 31 44 22 44 11 43 27 14 8 2 8 7 35 48 40 15 38 22 33 44 2 26 43 11 20 42 50 18 23 9 5 30 21 30 11 37 3\n1 28\n1 45\n1 19\n1 46\n1 24\n28 20\n28 11\n20 39\n11 13\n39 37\n28 42\n46 26\n1 50\n37 6\n11 49\n6 29\n50 8\n19 34\n8 15\n15 30\n8 18\n29 12\n39 40\n37 33\n42 23\n46 21\n39 5\n26 22\n34 3\n13 36\n21 47\n24 7\n45 4\n37 48\n23 2\n45 27\n26 38\n30 25\n36 43\n38 35\n47 10\n25 44\n48 41\n30 32\n8 31\n36 9\n35 14\n6 17\n6 16\n19 26\n", "stdout": "9737\n"}, {"stdin": "50 50 50 50 1\n34 22 37 2 33 5 19 9 36 45 25 37 26 46 45 33 28 2 21 47 24 2 24 23 41 18 22 3 13 19 23 10 34 3 21 13 40 37 48 20 32 43 8 44 34 19 23 31 44 37\n1 7\n7 45\n1 12\n45 38\n1 47\n38 37\n47 24\n37 40\n12 30\n45 3\n37 46\n38 18\n47 15\n7 16\n16 22\n38 17\n16 10\n18 36\n40 29\n15 39\n45 13\n38 23\n30 8\n17 5\n17 31\n30 32\n23 49\n40 48\n1 9\n10 4\n12 27\n7 2\n31 21\n18 42\n7 50\n47 41\n8 33\n40 43\n16 26\n42 28\n5 34\n22 19\n31 11\n9 6\n23 25\n47 44\n38 35\n21 20\n5 14\n29 32\n", "stdout": "10245\n"}, {"stdin": "25 50 50 1 1\n23 12 19 19 11 20 19 17 8 7 18 8 12 17 25 20 18 9 22 9 17 20 9 21 21 2 23 24 5 23 19 3 11 3 16 14 15 3 8 23 20 22 24 10 18 24 17 20 2 2\n1 9\n9 21\n9 6\n21 12\n1 19\n21 13\n1 18\n1 14\n14 24\n21 11\n1 5\n19 23\n5 7\n18 17\n1 10\n6 2\n6 15\n9 4\n21 20\n17 3\n1 25\n3 16\n11 22\n12 8\n11 9\n10 14\n21 20\n9 2\n4 7\n9 23\n2 13\n11 4\n21 5\n17 11\n5 10\n2 23\n7 14\n14 10\n19 17\n10 1\n6 20\n12 4\n1 22\n6 3\n6 19\n2 20\n25 7\n15 12\n20 2\n25 2\n", "stdout": "272\n"}, {"stdin": "25 50 50 1 1\n2 25 14 9 18 24 11 12 14 4 10 20 12 2 23 24 20 11 7 4 4 21 24 23 18 19 12 14 13 24 2 23 5 16 5 15 6 16 3 5 2 9 15 4 4 17 23 13 13 9\n1 5\n1 13\n5 15\n13 19\n1 18\n15 6\n5 16\n19 8\n18 3\n18 10\n15 9\n19 11\n19 12\n5 24\n8 14\n15 4\n24 2\n1 21\n24 23\n14 7\n21 22\n9 20\n9 25\n3 17\n15 4\n12 4\n7 22\n23 3\n25 24\n8 14\n1 13\n24 20\n11 15\n24 20\n18 21\n25 10\n14 20\n15 18\n12 9\n25 8\n13 17\n3 24\n13 16\n6 23\n6 4\n11 1\n3 10\n19 24\n9 23\n4 18\n", "stdout": "315\n"}, {"stdin": "25 50 50 50 1\n2 6 22 25 8 5 14 9 23 13 17 3 15 13 15 9 3 19 14 10 2 6 9 17 9 4 4 4 23 21 2 22 16 21 8 21 19 14 23 21 12 20 13 3 10 23 4 10 10 4\n1 23\n1 18\n23 3\n3 17\n3 24\n17 12\n3 13\n18 22\n12 5\n3 25\n5 6\n25 16\n3 8\n1 7\n16 4\n12 21\n12 2\n17 19\n5 14\n22 9\n22 11\n4 10\n11 15\n16 20\n12 5\n21 10\n14 2\n24 7\n15 23\n8 25\n23 10\n11 7\n14 4\n23 18\n7 15\n5 7\n6 13\n13 11\n8 1\n4 13\n1 14\n7 24\n17 19\n10 14\n18 24\n18 9\n1 22\n22 5\n7 11\n1 8\n", "stdout": "5704\n"}, {"stdin": "25 50 50 1 1\n14 14 9 23 8 4 20 23 12 16 9 16 4 18 22 11 15 4 9 14 14 22 7 18 8 11 17 11 14 10 18 12 7 13 18 8 6 21 14 2 23 4 21 14 13 17 20 14 7 8\n1 20\n1 19\n19 3\n20 23\n20 14\n14 13\n20 2\n20 8\n19 10\n23 16\n19 18\n2 22\n20 24\n19 7\n10 12\n3 6\n6 5\n6 25\n20 15\n8 17\n7 9\n14 4\n18 21\n13 11\n14 16\n23 14\n19 24\n3 11\n13 9\n3 2\n25 10\n9 19\n14 17\n3 7\n7 23\n9 4\n23 14\n4 9\n7 14\n15 16\n13 4\n5 9\n11 9\n13 22\n5 18\n6 20\n16 8\n13 20\n1 16\n12 5\n", "stdout": "385\n"}, {"stdin": "25 50 50 50 1\n22 7 14 6 21 18 5 9 21 8 18 23 6 12 12 23 11 14 10 3 19 11 3 17 10 19 14 11 13 9 20 8 18 23 17 9 22 23 22 21 4 3 18 13 13 21 20 8 2 24\n1 9\n1 24\n1 25\n25 8\n1 19\n24 17\n24 12\n19 3\n1 20\n3 21\n12 11\n21 14\n12 13\n21 10\n20 4\n12 22\n1 6\n8 2\n19 18\n3 16\n11 7\n22 5\n1 15\n5 23\n10 21\n18 20\n13 5\n25 19\n11 7\n23 9\n10 4\n21 20\n12 23\n2 7\n12 2\n3 24\n9 6\n5 23\n18 7\n14 9\n3 9\n14 9\n6 3\n25 8\n2 6\n24 11\n17 7\n12 19\n3 14\n11 7\n", "stdout": "5328\n"}, {"stdin": "50 50 50 1 1\n25 43 16 50 21 34 35 5 16 26 6 39 11 25 11 31 4 6 26 7 38 22 37 10 7 21 4 8 15 21 31 40 5 43 23 44 31 30 16 10 11 32 7 41 27 30 7 9 50 49\n1 24\n1 44\n1 47\n44 29\n44 27\n29 45\n24 13\n47 30\n30 15\n1 6\n15 8\n45 39\n6 28\n30 41\n15 19\n41 49\n6 40\n28 18\n40 4\n15 38\n44 26\n47 35\n6 21\n1 10\n39 14\n26 37\n41 46\n44 22\n29 12\n30 7\n40 25\n24 11\n22 3\n29 20\n13 42\n25 48\n38 33\n18 23\n45 16\n44 36\n20 9\n48 5\n22 2\n28 50\n6 34\n38 17\n39 31\n33 43\n1 32\n7 27\n", "stdout": "406\n"}, {"stdin": "50 50 50 50 50\n19 30 6 31 17 9 48 39 46 24 3 24 22 11 41 47 44 6 33 14 14 33 3 26 24 3 48 30 40 18 40 16 44 45 11 22 10 34 4 33 6 5 25 47 2 38 2 24 45 32\n1 26\n26 11\n1 42\n42 33\n42 22\n26 10\n10 25\n26 35\n26 44\n26 17\n35 4\n1 24\n33 23\n23 43\n10 28\n17 49\n28 50\n1 34\n23 15\n4 5\n1 31\n42 18\n5 13\n4 39\n11 6\n39 38\n18 29\n11 9\n23 16\n17 21\n22 14\n14 45\n29 48\n11 27\n6 3\n26 8\n28 47\n23 37\n3 41\n31 46\n15 20\n9 12\n41 19\n3 40\n24 2\n14 30\n21 36\n20 32\n38 7\n34 27\n", "stdout": "21200\n"}, {"stdin": "2 1 50 1 50\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n", "stdout": "3775\n"}, {"stdin": "50 49 49 50 1\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "stdout": "62475\n"}, {"stdin": "50 50 50 1 1\n37 14 23 28 15 15 42 16 15 2 42 20 45 39 12 33 38 46 43 17 9 26 11 15 2 4 28 20 4 2 33 16 44 34 17 13 22 8 13 28 43 4 7 31 32 27 49 39 8 35\n1 44\n44 15\n1 22\n1 34\n34 17\n1 2\n2 29\n22 13\n29 25\n29 21\n22 20\n2 49\n44 40\n22 9\n29 11\n34 43\n20 50\n13 42\n22 30\n30 12\n12 10\n1 37\n21 47\n2 38\n40 24\n24 45\n29 35\n15 6\n44 27\n43 48\n42 19\n27 16\n10 4\n38 8\n42 33\n4 23\n48 7\n1 18\n18 3\n19 5\n11 31\n2 46\n23 36\n48 26\n43 14\n46 39\n8 32\n38 41\n30 28\n17 29\n", "stdout": "373\n"}, {"stdin": "25 50 50 50 50\n23 12 5 24 15 4 7 14 14 18 14 4 5 7 22 23 18 21 8 9 18 21 24 16 17 25 8 14 4 19 11 15 16 4 2 14 16 6 11 8 10 2 21 23 18 19 5 8 7 17\n1 24\n1 6\n1 5\n6 19\n24 15\n15 11\n11 2\n19 21\n15 8\n8 13\n15 23\n13 25\n8 18\n24 10\n6 20\n5 9\n6 16\n2 3\n3 7\n9 22\n21 14\n18 12\n23 17\n3 4\n15 7\n21 14\n3 2\n8 17\n24 1\n23 12\n18 15\n16 23\n9 20\n22 9\n4 17\n1 23\n16 19\n19 5\n19 6\n5 15\n5 15\n1 14\n17 23\n1 21\n22 13\n5 3\n22 17\n15 11\n1 13\n20 15\n", "stdout": "13400\n"}, {"stdin": "50 49 50 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10\n12 11\n13 12\n14 13\n15 14\n16 15\n17 16\n18 17\n19 18\n20 19\n21 20\n22 21\n23 22\n24 23\n25 24\n26 25\n27 26\n28 27\n29 28\n30 29\n31 30\n32 31\n33 32\n34 33\n35 34\n36 35\n37 36\n38 37\n39 38\n40 39\n41 40\n42 41\n43 42\n44 43\n45 44\n46 45\n47 46\n48 47\n49 48\n50 49\n", "stdout": "6125\n"}, {"stdin": "2 50 50 1 1\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n", "stdout": "100\n"}, {"stdin": "50 50 50 1 1\n11 4 39 10 42 24 38 34 10 33 19 20 29 32 6 18 36 31 35 12 43 49 13 37 29 2 27 38 15 26 12 23 19 14 44 9 8 5 25 29 7 18 17 46 5 4 8 10 4 23\n1 32\n1 7\n32 50\n32 17\n1 21\n1 6\n6 23\n50 9\n21 4\n17 10\n9 38\n10 46\n10 22\n9 49\n9 43\n4 45\n10 39\n39 24\n32 26\n24 14\n22 15\n21 8\n1 3\n26 20\n17 36\n32 42\n9 5\n14 35\n39 12\n43 30\n14 11\n11 37\n36 48\n39 2\n45 13\n10 16\n36 41\n26 18\n50 47\n48 44\n6 33\n3 40\n24 27\n36 19\n20 25\n37 34\n9 28\n34 29\n26 31\n37 3\n", "stdout": "481\n"}, {"stdin": "25 50 50 1 50\n19 24 16 2 10 19 15 25 18 12 21 18 6 3 13 7 13 4 17 13 18 9 15 24 5 20 7 22 24 22 15 24 2 19 23 20 24 19 22 21 23 19 19 9 11 10 12 18 12 20\n1 9\n1 5\n1 3\n9 21\n1 7\n3 22\n3 4\n4 6\n7 23\n5 2\n9 19\n6 14\n14 10\n1 20\n10 15\n22 17\n7 13\n6 16\n1 8\n6 12\n16 11\n9 18\n12 25\n3 24\n11 19\n19 18\n5 14\n3 16\n18 17\n11 6\n22 6\n5 19\n10 18\n21 3\n16 20\n1 9\n18 6\n22 10\n7 12\n13 25\n5 1\n9 17\n1 15\n17 16\n14 23\n1 10\n12 17\n23 24\n10 24\n7 23\n", "stdout": "4639\n"}, {"stdin": "2 50 50 50 1\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n", "stdout": "2550\n"}, {"stdin": "50 49 49 1 1\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "stdout": "2450\n"}, {"stdin": "2 1 10 50 1\n2 2 2 2 2 2 2 2 2 2\n1 2\n", "stdout": "600\n"}, {"stdin": "2 50 50 50 50\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n", "stdout": "5000\n"}, {"stdin": "50 50 50 50 50\n32 19 21 12 34 28 45 8 42 7 39 34 4 3 35 11 4 30 25 48 9 46 6 48 2 12 46 48 41 4 20 32 29 25 39 18 44 21 16 24 19 30 25 43 24 15 11 44 32 19\n1 11\n11 35\n35 30\n1 20\n1 5\n30 44\n1 47\n11 50\n47 17\n47 46\n35 16\n17 8\n20 42\n50 7\n44 43\n43 41\n7 29\n46 49\n16 4\n44 32\n49 6\n5 36\n46 12\n12 14\n46 27\n1 3\n12 15\n8 10\n1 34\n27 2\n27 23\n11 26\n2 33\n12 18\n43 38\n49 48\n17 21\n26 37\n41 9\n44 22\n46 28\n30 31\n5 45\n15 40\n40 25\n47 19\n19 24\n24 39\n3 13\n4 46\n", "stdout": "25050\n"}, {"stdin": "2 50 50 1 50\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n", "stdout": "2550\n"}, {"stdin": "50 50 50 50 1\n47 50 3 3 2 15 15 28 32 38 21 45 9 39 40 46 36 26 2 43 19 34 47 45 29 17 21 31 14 13 42 26 10 32 38 9 26 34 50 11 45 9 48 10 8 44 21 2 41 16\n1 18\n18 44\n1 42\n42 9\n42 19\n18 24\n18 36\n24 5\n24 15\n9 40\n1 8\n5 45\n15 49\n8 39\n39 30\n15 2\n49 13\n45 27\n1 31\n5 17\n17 47\n39 35\n47 22\n19 7\n42 29\n40 14\n44 50\n35 38\n44 21\n40 33\n18 48\n42 12\n38 23\n30 11\n11 34\n27 37\n27 43\n47 3\n14 26\n8 20\n42 28\n7 16\n22 10\n29 4\n15 6\n5 41\n29 32\n20 25\n7 46\n49 6\n", "stdout": "9629\n"}, {"stdin": "25 50 50 50 50\n12 21 12 5 20 17 22 14 20 4 15 24 4 22 20 13 3 16 19 2 2 2 3 8 17 16 18 21 18 8 21 25 9 5 11 2 18 7 10 16 3 25 17 9 21 18 12 22 7 21\n1 12\n1 21\n21 18\n21 16\n12 11\n18 9\n11 22\n22 7\n1 19\n7 6\n16 13\n6 23\n7 25\n6 24\n22 3\n16 10\n25 17\n21 14\n25 2\n1 15\n13 8\n24 5\n24 20\n15 4\n13 23\n9 12\n6 9\n9 4\n16 6\n9 24\n23 5\n10 23\n23 17\n15 13\n10 18\n5 4\n3 15\n23 7\n19 20\n21 4\n15 18\n6 10\n17 25\n10 24\n8 12\n21 2\n9 22\n3 24\n6 13\n4 7\n", "stdout": "17200\n"}, {"stdin": "50 50 50 1 1\n38 11 32 42 47 43 33 24 12 48 31 49 42 17 44 46 12 40 8 41 33 35 40 22 44 20 41 16 5 46 49 6 29 13 11 39 17 26 18 2 23 8 8 47 50 7 16 29 37 37\n1 3\n1 49\n1 36\n36 42\n1 34\n34 39\n3 15\n36 32\n34 25\n49 16\n15 29\n16 31\n16 19\n36 33\n25 43\n42 22\n29 45\n32 47\n32 4\n42 14\n36 21\n25 28\n28 35\n19 7\n14 24\n28 26\n22 6\n22 12\n39 8\n15 50\n29 2\n36 30\n39 9\n15 27\n34 13\n31 37\n43 5\n47 38\n6 11\n14 48\n21 18\n15 46\n38 20\n32 10\n46 44\n28 23\n12 41\n12 17\n1 40\n23 47\n", "stdout": "453\n"}, {"stdin": "50 50 50 50 50\n32 2 23 38 2 39 5 50 46 10 40 6 19 27 3 47 39 6 11 24 24 36 25 40 10 34 34 41 40 48 42 43 34 46 15 42 40 4 20 2 38 27 34 27 6 45 43 5 42 17\n1 13\n13 29\n1 20\n13 22\n1 48\n29 35\n48 4\n13 45\n13 32\n20 46\n32 49\n22 19\n1 2\n19 24\n48 44\n1 43\n43 40\n13 8\n48 10\n2 31\n10 37\n2 26\n37 21\n32 27\n4 42\n20 6\n46 12\n21 34\n21 9\n8 38\n35 18\n12 14\n40 36\n38 3\n13 39\n22 41\n8 11\n24 25\n10 50\n29 23\n45 5\n50 33\n20 30\n23 28\n18 15\n35 7\n48 47\n19 17\n41 16\n48 29\n", "stdout": "19250\n"}, {"stdin": "25 50 50 50 1\n22 17 11 3 17 2 6 15 17 9 25 23 23 13 8 6 8 9 13 8 8 13 10 22 20 4 8 22 7 20 19 25 14 16 19 20 4 9 4 15 15 17 15 9 25 6 23 17 15 14\n1 21\n21 19\n19 10\n10 18\n10 17\n17 24\n24 3\n24 25\n25 16\n24 20\n19 14\n14 13\n20 7\n10 2\n19 15\n3 23\n18 22\n14 12\n18 8\n15 5\n14 6\n23 9\n20 4\n3 11\n13 11\n23 20\n23 8\n11 7\n24 10\n17 9\n16 9\n5 8\n25 19\n12 25\n1 8\n25 2\n23 19\n19 18\n24 11\n7 19\n6 9\n25 1\n1 22\n11 5\n10 15\n18 4\n3 5\n5 7\n6 25\n13 8\n", "stdout": "6243\n"}, {"stdin": "50 50 50 1 50\n49 48 21 49 20 21 37 43 9 29 47 3 27 22 12 41 7 6 41 48 25 31 18 29 43 46 43 21 4 13 15 36 49 40 29 20 30 36 2 40 46 10 20 40 46 45 9 32 42 24\n1 24\n24 30\n1 15\n1 38\n1 42\n24 35\n38 49\n1 23\n42 33\n30 20\n33 48\n1 29\n38 16\n48 31\n15 7\n33 41\n15 45\n41 32\n7 6\n6 28\n15 27\n30 43\n33 4\n24 34\n16 26\n41 12\n7 8\n43 17\n38 18\n8 22\n48 3\n20 14\n45 36\n48 39\n43 44\n6 19\n36 9\n44 2\n18 5\n29 11\n17 50\n42 40\n36 25\n36 37\n22 21\n35 13\n29 47\n14 46\n3 10\n9 47\n", "stdout": "7772\n"}, {"stdin": "25 50 50 1 50\n20 20 5 25 17 12 14 22 18 2 22 10 13 17 12 9 19 22 19 11 16 5 18 22 7 19 20 15 13 25 17 13 18 24 3 6 3 7 18 8 10 15 17 10 12 16 6 16 18 17\n1 18\n1 21\n18 23\n21 6\n6 3\n23 8\n3 2\n3 9\n2 4\n9 20\n9 15\n8 10\n3 16\n4 11\n20 5\n2 14\n23 7\n9 19\n4 13\n5 24\n1 25\n6 22\n24 12\n1 17\n2 1\n18 19\n23 20\n22 9\n19 2\n25 3\n9 25\n6 2\n24 2\n18 1\n8 4\n17 14\n16 11\n7 10\n18 24\n12 17\n9 25\n2 3\n11 4\n1 22\n8 24\n2 22\n2 7\n15 25\n17 20\n15 14\n", "stdout": "5039\n"}, {"stdin": "50 50 50 1 50\n13 28 46 41 47 30 34 13 5 12 33 13 49 24 7 7 15 40 23 43 19 45 42 41 31 45 21 31 44 8 34 4 34 20 17 15 5 33 4 31 49 34 20 46 20 22 8 42 49 2\n1 41\n41 34\n1 33\n41 11\n34 22\n41 12\n1 35\n1 30\n33 49\n30 36\n33 17\n1 7\n30 27\n34 48\n11 42\n48 19\n7 3\n19 8\n27 6\n48 32\n27 2\n30 46\n6 43\n12 40\n2 21\n36 5\n19 50\n30 38\n35 39\n11 31\n1 9\n7 44\n2 28\n48 4\n7 20\n20 26\n2 25\n38 18\n28 13\n39 24\n42 15\n46 16\n42 29\n38 37\n21 10\n38 45\n28 23\n35 14\n32 47\n30 25\n", "stdout": "7568\n"}, {"stdin": "25 50 50 1 1\n2 11 11 14 14 24 12 18 2 21 17 12 13 19 20 7 2 14 2 9 8 23 23 21 5 11 13 9 7 11 25 17 10 2 15 18 5 10 8 15 12 23 11 8 15 10 10 14 18 7\n1 22\n22 11\n1 12\n22 14\n12 10\n1 16\n10 2\n10 21\n14 8\n12 15\n10 23\n8 17\n17 9\n1 5\n11 7\n12 4\n8 18\n22 24\n2 13\n10 25\n5 20\n24 6\n13 19\n24 3\n21 10\n21 8\n18 1\n4 19\n13 2\n2 14\n7 10\n22 17\n14 11\n4 22\n17 1\n5 15\n12 22\n7 5\n8 24\n18 25\n10 13\n17 23\n16 25\n25 2\n9 14\n12 17\n25 20\n18 19\n13 24\n19 8\n", "stdout": "291\n"}, {"stdin": "50 50 50 1 50\n26 9 5 19 3 50 39 14 3 7 21 43 35 29 18 18 10 31 40 15 29 48 15 7 16 27 45 13 42 38 35 20 25 11 2 24 44 2 10 10 33 35 20 25 33 19 50 12 45 36\n1 23\n23 39\n23 27\n27 18\n18 9\n23 29\n18 37\n23 48\n27 36\n1 40\n48 21\n1 35\n27 32\n21 34\n36 33\n18 5\n27 6\n37 8\n6 24\n1 2\n29 49\n8 28\n24 43\n35 7\n36 19\n34 30\n36 45\n48 25\n6 13\n35 41\n32 17\n48 38\n40 3\n1 11\n7 20\n39 10\n17 46\n10 22\n19 44\n39 16\n1 4\n41 47\n28 14\n9 26\n26 42\n18 12\n26 15\n40 31\n4 50\n43 27\n", "stdout": "8276\n"}, {"stdin": "25 50 50 1 50\n24 9 16 15 15 16 6 25 24 22 22 6 21 25 10 20 13 24 13 14 3 14 9 24 21 11 9 13 22 3 9 2 4 21 16 24 2 20 13 21 7 2 7 11 6 16 20 16 12 8\n1 4\n4 17\n4 2\n4 11\n4 12\n12 15\n2 18\n4 10\n1 6\n4 23\n1 8\n10 3\n2 20\n23 5\n3 22\n18 19\n5 9\n10 21\n22 24\n6 16\n11 14\n9 7\n10 13\n12 25\n1 14\n8 16\n4 16\n25 24\n9 22\n22 14\n20 4\n22 24\n21 8\n10 4\n11 12\n23 17\n21 23\n4 2\n25 2\n23 6\n14 22\n10 13\n8 5\n18 17\n4 17\n4 16\n21 8\n16 4\n17 22\n22 17\n", "stdout": "6160\n"}, {"stdin": "50 50 50 1 50\n3 20 38 18 14 30 42 44 8 25 35 33 14 37 33 43 40 45 9 20 34 25 41 34 28 19 8 34 4 4 16 14 50 30 33 39 20 16 47 19 19 21 29 30 11 42 2 13 9 49\n1 11\n11 10\n10 34\n10 48\n10 19\n11 31\n10 9\n11 40\n19 27\n31 15\n15 35\n40 8\n40 41\n31 50\n27 29\n50 23\n34 14\n35 5\n1 49\n27 36\n50 33\n23 46\n31 2\n40 43\n5 24\n33 20\n10 42\n2 18\n5 26\n49 12\n8 22\n31 47\n35 25\n22 32\n25 30\n14 17\n17 45\n22 38\n30 39\n24 37\n27 7\n33 44\n41 28\n15 13\n19 21\n11 6\n18 3\n34 4\n7 16\n23 3\n", "stdout": "11326\n"}, {"stdin": "50 50 50 50 50\n45 40 49 39 39 48 50 9 2 42 27 6 50 29 46 13 36 21 41 19 20 10 28 4 36 43 22 11 40 43 22 9 19 26 43 27 25 48 12 42 42 41 35 42 29 22 3 25 38 45\n1 8\n8 38\n38 20\n38 4\n38 25\n38 34\n4 35\n8 10\n20 21\n21 33\n33 19\n10 44\n1 49\n20 41\n25 43\n25 27\n43 7\n21 17\n20 2\n44 29\n19 47\n25 5\n10 12\n34 26\n43 46\n25 14\n33 23\n7 3\n14 48\n20 50\n20 24\n48 11\n27 31\n31 6\n14 42\n27 22\n29 9\n10 28\n24 39\n4 37\n22 30\n43 45\n48 16\n37 18\n17 15\n48 36\n33 13\n17 32\n22 40\n14 49\n", "stdout": "32450\n"}, {"stdin": "50 50 50 1 50\n39 41 12 26 36 21 46 35 2 42 48 14 32 35 29 18 33 22 27 26 40 13 38 22 2 9 29 25 42 18 46 46 16 50 45 43 35 29 7 27 16 7 28 24 37 25 41 43 13 23\n1 25\n1 12\n25 37\n25 16\n25 5\n37 32\n25 8\n25 2\n8 29\n1 35\n25 6\n16 31\n2 9\n35 39\n29 30\n29 47\n37 49\n31 27\n35 42\n39 26\n49 24\n39 50\n26 43\n37 34\n35 11\n43 45\n25 48\n29 41\n12 28\n26 3\n45 36\n16 23\n1 22\n41 40\n1 19\n16 38\n16 44\n1 17\n36 14\n47 33\n50 4\n31 21\n39 10\n39 7\n27 46\n11 15\n34 13\n9 18\n25 20\n3 29\n", "stdout": "8357\n"}, {"stdin": "25 50 50 1 50\n12 14 2 6 14 11 15 11 14 11 13 10 13 10 16 24 16 9 6 8 5 7 9 19 18 11 14 11 6 20 16 6 14 9 5 9 9 25 24 3 13 5 14 13 24 25 9 17 23 15\n1 24\n1 25\n24 7\n24 15\n15 18\n15 22\n22 4\n22 12\n22 13\n1 2\n7 5\n7 16\n13 21\n12 20\n18 8\n4 6\n6 23\n8 11\n4 19\n25 3\n23 10\n6 9\n12 17\n24 14\n14 5\n20 18\n5 7\n13 11\n13 2\n23 9\n7 1\n10 22\n25 1\n17 23\n13 9\n20 4\n5 23\n18 19\n20 12\n12 13\n7 21\n18 7\n16 10\n4 24\n3 5\n11 1\n8 18\n8 19\n18 10\n9 21\n", "stdout": "5612\n"}, {"stdin": "25 50 50 1 50\n24 11 21 20 12 15 7 6 12 7 5 14 14 2 15 11 2 11 24 19 8 16 8 14 7 4 10 24 7 13 7 19 16 22 18 11 25 14 19 8 2 16 4 7 10 9 23 17 17 6\n1 12\n12 23\n23 9\n12 11\n11 13\n12 7\n9 16\n23 21\n9 6\n6 2\n23 18\n7 14\n7 19\n19 20\n13 22\n16 17\n2 5\n21 8\n19 15\n22 3\n20 25\n16 10\n6 24\n20 4\n4 24\n13 20\n11 20\n15 7\n1 4\n16 18\n1 9\n16 21\n20 4\n10 9\n3 21\n11 22\n18 14\n7 20\n20 18\n2 18\n8 9\n20 5\n14 24\n15 19\n23 18\n22 24\n21 16\n3 15\n1 6\n15 8\n", "stdout": "5840\n"}, {"stdin": "25 50 50 50 50\n23 10 7 20 19 21 6 25 10 17 7 4 4 6 18 16 5 9 5 20 21 3 10 8 7 8 14 10 10 9 20 22 19 18 24 11 17 12 13 21 8 12 24 3 23 10 2 23 2 20\n1 10\n10 17\n1 2\n17 12\n12 7\n10 11\n7 16\n2 19\n11 18\n16 8\n2 9\n7 6\n17 3\n19 15\n19 25\n12 5\n11 21\n8 4\n1 23\n18 24\n16 13\n3 22\n17 14\n21 20\n9 17\n16 23\n18 11\n22 8\n7 24\n5 6\n19 21\n13 2\n4 22\n3 8\n16 17\n2 24\n8 20\n18 19\n9 23\n7 23\n14 2\n8 13\n20 7\n21 16\n17 22\n22 14\n21 24\n7 11\n6 14\n12 2\n", "stdout": "25 50 50 50 50\n23 10 7 20 19 21 6 25 10 17 7 4 4 6 18 16 5 9 5 20 21 3 10 8 7 8 14 10 10 9 20 22 19 18 24 11 17 12 13 21 8 12 24 3 23 10 2 23 2 20\n1 10\n10 17\n1 2\n17 12\n12 7\n10 11\n7 16\n2 19\n11 18\n16 8\n2 9\n7 6\n17 3\n19 15\n19 25\n12 5\n11 21\n8 4\n1 23\n18 24\n16 13\n3 22\n17 14\n21 20\n9 17\n16 23\n18 11\n22 8\n7 24\n5 6\n19 21\n13 2\n4 22\n3 8\n16 17\n2 24\n8 20\n18 19\n9 23\n7 23\n14 2\n8 13\n20 7\n21 16\n17 22\n22 14\n21 24\n7 11\n6 14\n12 2\n"}, {"stdin": "25 50 50 50 1\n21 18 25 8 14 9 15 4 21 10 8 23 23 14 13 13 21 13 8 5 21 7 16 20 23 20 9 18 24 6 17 18 18 18 13 23 18 3 10 18 9 7 4 5 12 24 2 19 20 11\n1 15\n15 9\n1 17\n9 7\n1 25\n7 10\n17 4\n4 23\n23 12\n9 24\n1 2\n15 21\n15 11\n24 6\n11 14\n10 19\n1 16\n2 13\n9 22\n15 8\n7 5\n10 18\n18 20\n1 3\n15 25\n7 3\n8 4\n5 15\n11 20\n11 13\n15 6\n20 5\n11 15\n9 3\n25 1\n5 6\n21 17\n7 5\n5 4\n8 7\n23 18\n2 1\n13 1\n19 16\n24 3\n8 17\n10 6\n25 19\n6 23\n17 2\n", "stdout": "25 50 50 50 1\n21 18 25 8 14 9 15 4 21 10 8 23 23 14 13 13 21 13 8 5 21 7 16 20 23 20 9 18 24 6 17 18 18 18 13 23 18 3 10 18 9 7 4 5 12 24 2 19 20 11\n1 15\n15 9\n1 17\n9 7\n1 25\n7 10\n17 4\n4 23\n23 12\n9 24\n1 2\n15 21\n15 11\n24 6\n11 14\n10 19\n1 16\n2 13\n9 22\n15 8\n7 5\n10 18\n18 20\n1 3\n15 25\n7 3\n8 4\n5 15\n11 20\n11 13\n15 6\n20 5\n11 15\n9 3\n25 1\n5 6\n21 17\n7 5\n5 4\n8 7\n23 18\n2 1\n13 1\n19 16\n24 3\n8 17\n10 6\n25 19\n6 23\n17 2\n"}, {"stdin": "25 50 50 1 1\n3 23 24 12 21 9 10 22 18 19 2 12 19 8 19 17 7 16 4 23 23 3 10 2 16 2 19 11 20 14 3 6 9 15 3 4 8 22 21 2 15 19 18 16 16 24 20 4 16 11\n1 18\n1 7\n18 9\n7 5\n5 23\n9 6\n1 21\n9 16\n6 24\n24 11\n16 13\n9 15\n23 10\n2 4\n4 17\n5 14\n24 12\n17 25\n14 20\n1 19\n12 8\n21 3\n3 2\n14 22\n12 18\n12 25\n22 18\n25 19\n9 22\n18 10\n23 8\n22 2\n24 20\n3 14\n20 3\n20 6\n16 22\n5 14\n5 21\n14 20\n4 12\n11 20\n21 20\n8 6\n20 16\n10 14\n4 5\n16 9\n12 3\n15 13\n", "stdout": "25 50 50 1 1\n3 23 24 12 21 9 10 22 18 19 2 12 19 8 19 17 7 16 4 23 23 3 10 2 16 2 19 11 20 14 3 6 9 15 3 4 8 22 21 2 15 19 18 16 16 24 20 4 16 11\n1 18\n1 7\n18 9\n7 5\n5 23\n9 6\n1 21\n9 16\n6 24\n24 11\n16 13\n9 15\n23 10\n2 4\n4 17\n5 14\n24 12\n17 25\n14 20\n1 19\n12 8\n21 3\n3 2\n14 22\n12 18\n12 25\n22 18\n25 19\n9 22\n18 10\n23 8\n22 2\n24 20\n3 14\n20 3\n20 6\n16 22\n5 14\n5 21\n14 20\n4 12\n11 20\n21 20\n8 6\n20 16\n10 14\n4 5\n16 9\n12 3\n15 13\n"}, {"stdin": "8 10 10 8 5\n6 3 7 5 2 5 7 3 8 7\n1 7\n1 4\n4 6\n4 5\n6 2\n5 8\n5 3\n7 3\n2 6\n8 7\n", "stdout": "8 10 10 8 5\n6 3 7 5 2 5 7 3 8 7\n1 7\n1 4\n4 6\n4 5\n6 2\n5 8\n5 3\n7 3\n2 6\n8 7\n"}, {"stdin": "25 50 50 50 50\n3 23 10 2 17 9 23 3 16 5 14 24 20 23 16 20 24 3 22 15 23 4 25 14 20 25 11 8 11 2 3 10 5 7 13 4 24 25 8 11 13 15 14 21 25 19 15 23 12 18\n1 6\n1 17\n17 16\n17 23\n23 4\n17 19\n17 18\n1 22\n22 8\n1 25\n17 5\n16 21\n21 3\n3 10\n17 20\n23 7\n6 12\n16 11\n19 24\n17 9\n16 14\n23 2\n1 13\n4 15\n16 12\n22 12\n5 8\n24 12\n3 8\n7 24\n25 7\n4 12\n2 13\n8 19\n10 4\n5 9\n8 23\n1 13\n18 25\n11 7\n4 10\n20 4\n15 9\n18 10\n23 24\n15 9\n9 20\n20 10\n5 21\n8 23\n", "stdout": "25 50 50 50 50\n3 23 10 2 17 9 23 3 16 5 14 24 20 23 16 20 24 3 22 15 23 4 25 14 20 25 11 8 11 2 3 10 5 7 13 4 24 25 8 11 13 15 14 21 25 19 15 23 12 18\n1 6\n1 17\n17 16\n17 23\n23 4\n17 19\n17 18\n1 22\n22 8\n1 25\n17 5\n16 21\n21 3\n3 10\n17 20\n23 7\n6 12\n16 11\n19 24\n17 9\n16 14\n23 2\n1 13\n4 15\n16 12\n22 12\n5 8\n24 12\n3 8\n7 24\n25 7\n4 12\n2 13\n8 19\n10 4\n5 9\n8 23\n1 13\n18 25\n11 7\n4 10\n20 4\n15 9\n18 10\n23 24\n15 9\n9 20\n20 10\n5 21\n8 23\n"}, {"stdin": "25 50 50 50 50\n24 8 9 23 22 13 22 3 14 16 23 4 11 21 21 17 16 6 18 7 16 25 4 14 20 23 13 15 25 23 13 4 7 16 6 24 3 18 7 11 5 22 19 7 11 17 15 22 21 14\n1 3\n3 7\n1 4\n4 17\n3 23\n17 21\n7 15\n7 13\n4 16\n23 25\n3 19\n4 14\n19 9\n9 20\n9 24\n19 22\n19 11\n4 2\n15 10\n20 8\n21 6\n7 18\n9 12\n24 5\n6 11\n7 23\n8 7\n3 12\n3 21\n18 7\n23 1\n25 20\n13 7\n12 16\n4 11\n11 13\n4 22\n10 12\n5 3\n17 19\n21 14\n5 23\n11 23\n4 6\n8 13\n4 10\n19 12\n11 18\n3 16\n21 10\n", "stdout": "25 50 50 50 50\n24 8 9 23 22 13 22 3 14 16 23 4 11 21 21 17 16 6 18 7 16 25 4 14 20 23 13 15 25 23 13 4 7 16 6 24 3 18 7 11 5 22 19 7 11 17 15 22 21 14\n1 3\n3 7\n1 4\n4 17\n3 23\n17 21\n7 15\n7 13\n4 16\n23 25\n3 19\n4 14\n19 9\n9 20\n9 24\n19 22\n19 11\n4 2\n15 10\n20 8\n21 6\n7 18\n9 12\n24 5\n6 11\n7 23\n8 7\n3 12\n3 21\n18 7\n23 1\n25 20\n13 7\n12 16\n4 11\n11 13\n4 22\n10 12\n5 3\n17 19\n21 14\n5 23\n11 23\n4 6\n8 13\n4 10\n19 12\n11 18\n3 16\n21 10\n"}, {"stdin": "25 50 50 50 1\n10 12 8 5 11 22 14 4 3 20 9 3 22 4 10 10 14 16 3 13 6 4 2 12 23 19 3 25 14 19 3 4 4 20 6 10 21 20 25 10 10 6 24 7 15 22 2 17 5 7\n1 24\n20 4\n24 19\n19 8\n19 25\n1 21\n19 22\n24 13\n4 23\n22 20\n20 14\n24 15\n8 10\n21 16\n19 18\n22 2\n20 5\n22 7\n5 12\n4 6\n22 11\n22 9\n15 3\n20 17\n5 16\n16 10\n3 7\n2 24\n11 21\n1 21\n13 12\n21 6\n10 9\n2 20\n16 18\n2 14\n3 9\n10 1\n2 15\n6 9\n8 13\n3 14\n24 11\n22 20\n17 8\n12 9\n11 4\n21 16\n13 25\n12 11\n", "stdout": "25 50 50 50 1\n10 12 8 5 11 22 14 4 3 20 9 3 22 4 10 10 14 16 3 13 6 4 2 12 23 19 3 25 14 19 3 4 4 20 6 10 21 20 25 10 10 6 24 7 15 22 2 17 5 7\n1 24\n20 4\n24 19\n19 8\n19 25\n1 21\n19 22\n24 13\n4 23\n22 20\n20 14\n24 15\n8 10\n21 16\n19 18\n22 2\n20 5\n22 7\n5 12\n4 6\n22 11\n22 9\n15 3\n20 17\n5 16\n16 10\n3 7\n2 24\n11 21\n1 21\n13 12\n21 6\n10 9\n2 20\n16 18\n2 14\n3 9\n10 1\n2 15\n6 9\n8 13\n3 14\n24 11\n22 20\n17 8\n12 9\n11 4\n21 16\n13 25\n12 11\n"}, {"stdin": "50 50 50 50 1\n21 40 29 43 29 35 12 48 28 11 48 6 40 31 44 22 44 11 43 27 14 8 2 8 7 35 48 40 15 38 20 33 44 2 26 43 11 20 42 50 18 23 9 5 30 21 30 11 37 3\n1 28\n1 45\n1 19\n1 46\n1 24\n28 20\n28 11\n20 39\n11 13\n39 37\n28 42\n46 26\n1 50\n37 6\n11 49\n6 29\n50 8\n19 34\n8 15\n15 30\n8 18\n29 12\n39 40\n37 33\n42 23\n46 21\n39 5\n26 22\n34 3\n13 36\n21 47\n24 7\n45 4\n37 48\n23 2\n45 27\n26 38\n30 25\n36 43\n38 35\n47 10\n25 44\n48 41\n30 32\n8 31\n36 9\n35 14\n6 17\n6 16\n19 26\n", "stdout": "50 50 50 50 1\n21 40 29 43 29 35 12 48 28 11 48 6 40 31 44 22 44 11 43 27 14 8 2 8 7 35 48 40 15 38 20 33 44 2 26 43 11 20 42 50 18 23 9 5 30 21 30 11 37 3\n1 28\n1 45\n1 19\n1 46\n1 24\n28 20\n28 11\n20 39\n11 13\n39 37\n28 42\n46 26\n1 50\n37 6\n11 49\n6 29\n50 8\n19 34\n8 15\n15 30\n8 18\n29 12\n39 40\n37 33\n42 23\n46 21\n39 5\n26 22\n34 3\n13 36\n21 47\n24 7\n45 4\n37 48\n23 2\n45 27\n26 38\n30 25\n36 43\n38 35\n47 10\n25 44\n48 41\n30 32\n8 31\n36 9\n35 14\n6 17\n6 16\n19 26\n"}, {"stdin": "50 50 50 50 1\n34 22 37 2 33 5 19 9 36 45 25 37 26 46 45 33 28 2 21 47 24 2 24 23 41 18 22 3 13 19 23 10 34 3 21 13 40 37 48 20 32 43 8 44 34 19 23 31 44 37\n1 7\n7 45\n1 12\n45 38\n1 47\n38 37\n47 24\n37 40\n12 30\n45 3\n28 46\n38 18\n47 15\n7 16\n16 22\n38 17\n16 10\n18 36\n40 29\n15 39\n45 13\n38 23\n30 8\n17 5\n17 31\n30 32\n23 49\n40 48\n1 9\n10 4\n12 27\n7 2\n31 21\n18 42\n7 50\n47 41\n8 33\n40 43\n16 26\n42 28\n5 34\n22 19\n31 11\n9 6\n23 25\n47 44\n38 35\n21 20\n5 14\n29 32\n", "stdout": "50 50 50 50 1\n34 22 37 2 33 5 19 9 36 45 25 37 26 46 45 33 28 2 21 47 24 2 24 23 41 18 22 3 13 19 23 10 34 3 21 13 40 37 48 20 32 43 8 44 34 19 23 31 44 37\n1 7\n7 45\n1 12\n45 38\n1 47\n38 37\n47 24\n37 40\n12 30\n45 3\n28 46\n38 18\n47 15\n7 16\n16 22\n38 17\n16 10\n18 36\n40 29\n15 39\n45 13\n38 23\n30 8\n17 5\n17 31\n30 32\n23 49\n40 48\n1 9\n10 4\n12 27\n7 2\n31 21\n18 42\n7 50\n47 41\n8 33\n40 43\n16 26\n42 28\n5 34\n22 19\n31 11\n9 6\n23 25\n47 44\n38 35\n21 20\n5 14\n29 32\n"}, {"stdin": "25 50 50 1 1\n23 12 19 19 11 20 19 17 8 7 18 8 12 17 25 20 18 9 22 9 17 20 9 21 21 2 23 24 5 23 19 3 11 3 16 14 15 3 8 23 20 22 24 10 18 24 17 20 2 2\n1 9\n9 21\n9 6\n21 6\n1 19\n21 13\n1 18\n1 14\n14 24\n21 11\n1 5\n19 23\n5 7\n18 17\n1 10\n6 2\n6 15\n9 4\n21 20\n17 3\n1 25\n3 16\n11 22\n12 8\n11 9\n10 14\n21 20\n9 2\n4 7\n9 23\n2 13\n11 4\n21 5\n17 11\n5 10\n2 23\n7 14\n14 10\n19 17\n10 1\n6 20\n12 4\n1 22\n6 3\n6 19\n2 20\n25 7\n15 12\n20 2\n25 2\n", "stdout": "25 50 50 1 1\n23 12 19 19 11 20 19 17 8 7 18 8 12 17 25 20 18 9 22 9 17 20 9 21 21 2 23 24 5 23 19 3 11 3 16 14 15 3 8 23 20 22 24 10 18 24 17 20 2 2\n1 9\n9 21\n9 6\n21 6\n1 19\n21 13\n1 18\n1 14\n14 24\n21 11\n1 5\n19 23\n5 7\n18 17\n1 10\n6 2\n6 15\n9 4\n21 20\n17 3\n1 25\n3 16\n11 22\n12 8\n11 9\n10 14\n21 20\n9 2\n4 7\n9 23\n2 13\n11 4\n21 5\n17 11\n5 10\n2 23\n7 14\n14 10\n19 17\n10 1\n6 20\n12 4\n1 22\n6 3\n6 19\n2 20\n25 7\n15 12\n20 2\n25 2\n"}, {"stdin": "25 50 50 50 1\n2 6 22 25 8 5 14 9 23 13 17 3 15 13 15 9 3 19 14 10 2 6 9 17 9 4 4 4 23 21 2 22 16 21 8 21 19 14 23 21 12 20 13 3 10 23 4 10 10 4\n1 23\n1 18\n23 3\n3 17\n3 24\n17 12\n5 13\n18 22\n12 5\n3 25\n5 6\n25 16\n3 8\n1 7\n16 4\n12 21\n12 2\n17 19\n5 14\n22 9\n22 11\n4 10\n11 15\n16 20\n12 5\n21 10\n14 2\n24 7\n15 23\n8 25\n23 10\n11 7\n14 4\n23 18\n7 15\n5 7\n6 13\n13 11\n8 1\n4 13\n1 14\n7 24\n17 19\n10 14\n18 24\n18 9\n1 22\n22 5\n7 11\n1 8\n", "stdout": "25 50 50 50 1\n2 6 22 25 8 5 14 9 23 13 17 3 15 13 15 9 3 19 14 10 2 6 9 17 9 4 4 4 23 21 2 22 16 21 8 21 19 14 23 21 12 20 13 3 10 23 4 10 10 4\n1 23\n1 18\n23 3\n3 17\n3 24\n17 12\n5 13\n18 22\n12 5\n3 25\n5 6\n25 16\n3 8\n1 7\n16 4\n12 21\n12 2\n17 19\n5 14\n22 9\n22 11\n4 10\n11 15\n16 20\n12 5\n21 10\n14 2\n24 7\n15 23\n8 25\n23 10\n11 7\n14 4\n23 18\n7 15\n5 7\n6 13\n13 11\n8 1\n4 13\n1 14\n7 24\n17 19\n10 14\n18 24\n18 9\n1 22\n22 5\n7 11\n1 8\n"}, {"stdin": "25 50 50 1 1\n14 14 8 23 8 4 20 23 12 16 9 16 4 18 22 11 15 4 9 14 14 22 7 18 8 11 17 11 14 10 18 12 7 13 18 8 6 21 14 2 23 4 21 14 13 17 20 14 7 8\n1 20\n1 19\n19 3\n20 23\n20 14\n14 13\n20 2\n20 8\n19 10\n23 16\n19 18\n2 22\n20 24\n19 7\n10 12\n3 6\n6 5\n6 25\n20 15\n8 17\n7 9\n14 4\n18 21\n13 11\n14 16\n23 14\n19 24\n3 11\n13 9\n3 2\n25 10\n9 19\n14 17\n3 7\n7 23\n9 4\n23 14\n4 9\n7 14\n15 16\n13 4\n5 9\n11 9\n13 22\n5 18\n6 20\n16 8\n13 20\n1 16\n12 5\n", "stdout": "25 50 50 1 1\n14 14 8 23 8 4 20 23 12 16 9 16 4 18 22 11 15 4 9 14 14 22 7 18 8 11 17 11 14 10 18 12 7 13 18 8 6 21 14 2 23 4 21 14 13 17 20 14 7 8\n1 20\n1 19\n19 3\n20 23\n20 14\n14 13\n20 2\n20 8\n19 10\n23 16\n19 18\n2 22\n20 24\n19 7\n10 12\n3 6\n6 5\n6 25\n20 15\n8 17\n7 9\n14 4\n18 21\n13 11\n14 16\n23 14\n19 24\n3 11\n13 9\n3 2\n25 10\n9 19\n14 17\n3 7\n7 23\n9 4\n23 14\n4 9\n7 14\n15 16\n13 4\n5 9\n11 9\n13 22\n5 18\n6 20\n16 8\n13 20\n1 16\n12 5\n"}, {"stdin": "25 50 50 50 1\n22 7 14 6 21 18 5 9 21 8 18 23 6 12 12 23 11 14 10 3 19 11 3 17 10 19 14 11 13 9 20 8 18 23 17 9 22 23 22 21 4 3 18 13 13 21 20 8 2 24\n1 9\n1 24\n1 25\n25 8\n1 19\n24 17\n24 12\n19 3\n1 20\n3 21\n12 11\n21 14\n12 13\n21 10\n20 4\n12 22\n1 6\n8 2\n5 18\n3 16\n11 7\n22 5\n1 15\n5 23\n10 21\n18 20\n13 5\n25 19\n11 7\n23 9\n10 4\n21 20\n12 23\n2 7\n12 2\n3 24\n9 6\n5 23\n18 7\n14 9\n3 9\n14 9\n6 3\n25 8\n2 6\n24 11\n17 7\n12 19\n3 14\n11 7\n", "stdout": "25 50 50 50 1\n22 7 14 6 21 18 5 9 21 8 18 23 6 12 12 23 11 14 10 3 19 11 3 17 10 19 14 11 13 9 20 8 18 23 17 9 22 23 22 21 4 3 18 13 13 21 20 8 2 24\n1 9\n1 24\n1 25\n25 8\n1 19\n24 17\n24 12\n19 3\n1 20\n3 21\n12 11\n21 14\n12 13\n21 10\n20 4\n12 22\n1 6\n8 2\n5 18\n3 16\n11 7\n22 5\n1 15\n5 23\n10 21\n18 20\n13 5\n25 19\n11 7\n23 9\n10 4\n21 20\n12 23\n2 7\n12 2\n3 24\n9 6\n5 23\n18 7\n14 9\n3 9\n14 9\n6 3\n25 8\n2 6\n24 11\n17 7\n12 19\n3 14\n11 7\n"}, {"stdin": "50 50 50 1 1\n25 43 16 50 21 34 35 5 16 26 6 39 11 25 11 31 4 6 26 7 38 22 37 10 7 21 4 8 15 21 31 40 5 43 23 44 31 30 16 10 11 32 7 41 27 30 7 9 50 49\n1 24\n1 1\n1 47\n44 29\n44 27\n29 45\n24 13\n47 30\n30 15\n1 6\n15 8\n45 39\n6 28\n30 41\n15 19\n41 49\n6 40\n28 18\n40 4\n15 38\n44 26\n47 35\n6 21\n1 10\n39 14\n26 37\n41 46\n44 22\n29 12\n30 7\n40 25\n24 11\n22 3\n29 20\n13 42\n25 48\n38 33\n18 23\n45 16\n44 36\n20 9\n48 5\n22 2\n28 50\n6 34\n38 17\n39 31\n33 43\n1 32\n7 27\n", "stdout": "50 50 50 1 1\n25 43 16 50 21 34 35 5 16 26 6 39 11 25 11 31 4 6 26 7 38 22 37 10 7 21 4 8 15 21 31 40 5 43 23 44 31 30 16 10 11 32 7 41 27 30 7 9 50 49\n1 24\n1 1\n1 47\n44 29\n44 27\n29 45\n24 13\n47 30\n30 15\n1 6\n15 8\n45 39\n6 28\n30 41\n15 19\n41 49\n6 40\n28 18\n40 4\n15 38\n44 26\n47 35\n6 21\n1 10\n39 14\n26 37\n41 46\n44 22\n29 12\n30 7\n40 25\n24 11\n22 3\n29 20\n13 42\n25 48\n38 33\n18 23\n45 16\n44 36\n20 9\n48 5\n22 2\n28 50\n6 34\n38 17\n39 31\n33 43\n1 32\n7 27\n"}, {"stdin": "50 50 50 50 50\n19 30 6 31 17 9 48 39 46 24 3 24 22 11 41 47 44 6 33 14 14 33 3 26 24 3 48 30 40 18 40 16 44 45 11 22 10 34 4 33 6 5 25 47 2 38 2 24 45 32\n1 41\n26 11\n1 42\n42 33\n42 22\n26 10\n10 25\n26 35\n26 44\n26 17\n35 4\n1 24\n33 23\n23 43\n10 28\n17 49\n28 50\n1 34\n23 15\n4 5\n1 31\n42 18\n5 13\n4 39\n11 6\n39 38\n18 29\n11 9\n23 16\n17 21\n22 14\n14 45\n29 48\n11 27\n6 3\n26 8\n28 47\n23 37\n3 41\n31 46\n15 20\n9 12\n41 19\n3 40\n24 2\n14 30\n21 36\n20 32\n38 7\n34 27\n", "stdout": "50 50 50 50 50\n19 30 6 31 17 9 48 39 46 24 3 24 22 11 41 47 44 6 33 14 14 33 3 26 24 3 48 30 40 18 40 16 44 45 11 22 10 34 4 33 6 5 25 47 2 38 2 24 45 32\n1 41\n26 11\n1 42\n42 33\n42 22\n26 10\n10 25\n26 35\n26 44\n26 17\n35 4\n1 24\n33 23\n23 43\n10 28\n17 49\n28 50\n1 34\n23 15\n4 5\n1 31\n42 18\n5 13\n4 39\n11 6\n39 38\n18 29\n11 9\n23 16\n17 21\n22 14\n14 45\n29 48\n11 27\n6 3\n26 8\n28 47\n23 37\n3 41\n31 46\n15 20\n9 12\n41 19\n3 40\n24 2\n14 30\n21 36\n20 32\n38 7\n34 27\n"}, {"stdin": "50 49 49 7 1\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "stdout": "50 49 49 7 1\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n"}, {"stdin": "50 50 50 1 1\n37 14 23 28 15 15 42 16 15 2 42 20 45 39 12 33 38 46 43 17 9 26 11 15 2 4 28 20 4 2 33 16 44 34 17 13 22 8 13 28 43 4 7 31 32 27 49 39 8 35\n1 44\n44 15\n1 22\n1 34\n34 17\n1 2\n2 29\n22 13\n29 25\n29 21\n22 20\n2 49\n44 40\n22 9\n29 11\n34 43\n20 50\n13 42\n22 30\n30 12\n12 10\n1 37\n21 47\n2 38\n40 24\n24 45\n29 35\n15 6\n44 27\n43 48\n42 19\n27 16\n10 4\n38 8\n42 33\n4 23\n48 7\n1 3\n18 3\n19 5\n11 31\n2 46\n23 36\n48 26\n43 14\n46 39\n8 32\n38 41\n30 28\n17 29\n", "stdout": "50 50 50 1 1\n37 14 23 28 15 15 42 16 15 2 42 20 45 39 12 33 38 46 43 17 9 26 11 15 2 4 28 20 4 2 33 16 44 34 17 13 22 8 13 28 43 4 7 31 32 27 49 39 8 35\n1 44\n44 15\n1 22\n1 34\n34 17\n1 2\n2 29\n22 13\n29 25\n29 21\n22 20\n2 49\n44 40\n22 9\n29 11\n34 43\n20 50\n13 42\n22 30\n30 12\n12 10\n1 37\n21 47\n2 38\n40 24\n24 45\n29 35\n15 6\n44 27\n43 48\n42 19\n27 16\n10 4\n38 8\n42 33\n4 23\n48 7\n1 3\n18 3\n19 5\n11 31\n2 46\n23 36\n48 26\n43 14\n46 39\n8 32\n38 41\n30 28\n17 29\n"}, {"stdin": "25 50 50 50 50\n23 12 5 24 15 4 7 14 14 18 11 4 5 7 22 23 18 21 8 9 18 21 24 16 17 25 8 14 4 19 11 15 16 4 2 14 16 6 11 8 10 2 21 23 18 19 5 8 7 17\n1 24\n1 6\n1 5\n6 19\n24 15\n15 11\n11 2\n19 21\n15 8\n8 13\n15 23\n13 25\n8 18\n24 10\n6 20\n5 9\n6 16\n2 3\n3 7\n9 22\n21 14\n18 12\n23 17\n3 4\n15 7\n21 14\n3 2\n8 17\n24 1\n23 12\n18 15\n16 23\n9 20\n22 9\n4 17\n1 23\n16 19\n19 5\n19 6\n5 15\n5 15\n1 14\n17 23\n1 21\n22 13\n5 3\n22 17\n15 11\n1 13\n20 15\n", "stdout": "25 50 50 50 50\n23 12 5 24 15 4 7 14 14 18 11 4 5 7 22 23 18 21 8 9 18 21 24 16 17 25 8 14 4 19 11 15 16 4 2 14 16 6 11 8 10 2 21 23 18 19 5 8 7 17\n1 24\n1 6\n1 5\n6 19\n24 15\n15 11\n11 2\n19 21\n15 8\n8 13\n15 23\n13 25\n8 18\n24 10\n6 20\n5 9\n6 16\n2 3\n3 7\n9 22\n21 14\n18 12\n23 17\n3 4\n15 7\n21 14\n3 2\n8 17\n24 1\n23 12\n18 15\n16 23\n9 20\n22 9\n4 17\n1 23\n16 19\n19 5\n19 6\n5 15\n5 15\n1 14\n17 23\n1 21\n22 13\n5 3\n22 17\n15 11\n1 13\n20 15\n"}, {"stdin": "50 50 50 1 1\n11 4 39 10 42 24 38 34 10 33 19 20 29 32 6 18 36 31 35 12 43 49 13 37 29 2 27 38 15 26 12 23 19 14 44 9 8 5 25 29 7 18 17 46 5 4 8 10 4 23\n1 32\n1 7\n32 50\n32 17\n1 21\n1 6\n6 23\n50 9\n21 4\n17 10\n9 38\n10 46\n10 22\n9 49\n9 43\n4 45\n10 39\n39 24\n32 26\n24 14\n22 15\n21 8\n1 3\n26 20\n17 36\n32 42\n9 5\n14 35\n39 12\n43 30\n14 11\n11 37\n36 48\n39 2\n45 13\n10 16\n36 41\n26 18\n50 47\n48 44\n6 33\n3 40\n24 27\n26 19\n20 25\n37 34\n9 28\n34 29\n26 31\n37 3\n", "stdout": "50 50 50 1 1\n11 4 39 10 42 24 38 34 10 33 19 20 29 32 6 18 36 31 35 12 43 49 13 37 29 2 27 38 15 26 12 23 19 14 44 9 8 5 25 29 7 18 17 46 5 4 8 10 4 23\n1 32\n1 7\n32 50\n32 17\n1 21\n1 6\n6 23\n50 9\n21 4\n17 10\n9 38\n10 46\n10 22\n9 49\n9 43\n4 45\n10 39\n39 24\n32 26\n24 14\n22 15\n21 8\n1 3\n26 20\n17 36\n32 42\n9 5\n14 35\n39 12\n43 30\n14 11\n11 37\n36 48\n39 2\n45 13\n10 16\n36 41\n26 18\n50 47\n48 44\n6 33\n3 40\n24 27\n26 19\n20 25\n37 34\n9 28\n34 29\n26 31\n37 3\n"}, {"stdin": "2 50 50 50 1\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n", "stdout": "2 50 50 50 1\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n"}, {"stdin": "50 49 49 1 1\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n7 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n", "stdout": "50 49 49 1 1\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n7 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n"}, {"stdin": "2 1 10 50 0\n2 2 2 2 2 2 2 2 2 2\n1 2\n", "stdout": "2 1 10 50 0\n2 2 2 2 2 2 2 2 2 2\n1 2\n"}, {"stdin": "2 50 50 50 50\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n", "stdout": "2 50 50 50 50\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n2 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n"}, {"stdin": "25 50 50 50 50\n12 21 12 5 20 17 22 14 20 4 15 24 4 22 20 13 3 16 19 2 2 2 3 8 17 16 18 21 18 8 21 25 9 5 11 2 18 7 10 16 3 25 17 9 21 18 12 22 7 21\n1 12\n1 21\n21 18\n21 5\n12 11\n18 9\n11 22\n22 7\n1 19\n7 6\n16 13\n6 23\n7 25\n6 24\n22 3\n16 10\n25 17\n21 14\n25 2\n1 15\n13 8\n24 5\n24 20\n15 4\n13 23\n9 12\n6 9\n9 4\n16 6\n9 24\n23 5\n10 23\n23 17\n15 13\n10 18\n5 4\n3 15\n23 7\n19 20\n21 4\n15 18\n6 10\n17 25\n10 24\n8 12\n21 2\n9 22\n3 24\n6 13\n4 7\n", "stdout": "25 50 50 50 50\n12 21 12 5 20 17 22 14 20 4 15 24 4 22 20 13 3 16 19 2 2 2 3 8 17 16 18 21 18 8 21 25 9 5 11 2 18 7 10 16 3 25 17 9 21 18 12 22 7 21\n1 12\n1 21\n21 18\n21 5\n12 11\n18 9\n11 22\n22 7\n1 19\n7 6\n16 13\n6 23\n7 25\n6 24\n22 3\n16 10\n25 17\n21 14\n25 2\n1 15\n13 8\n24 5\n24 20\n15 4\n13 23\n9 12\n6 9\n9 4\n16 6\n9 24\n23 5\n10 23\n23 17\n15 13\n10 18\n5 4\n3 15\n23 7\n19 20\n21 4\n15 18\n6 10\n17 25\n10 24\n8 12\n21 2\n9 22\n3 24\n6 13\n4 7\n"}, {"stdin": "25 50 50 50 1\n22 17 11 3 17 2 6 15 17 15 25 23 23 13 8 6 8 9 13 8 8 13 10 22 20 4 8 22 7 20 19 25 14 16 19 20 4 9 4 15 15 17 15 9 25 6 23 17 15 14\n1 21\n21 19\n19 10\n10 18\n10 17\n17 24\n24 3\n24 25\n25 16\n24 20\n19 14\n14 13\n20 7\n10 2\n19 15\n3 23\n18 22\n14 12\n18 8\n15 5\n14 6\n23 9\n20 4\n3 11\n13 11\n23 20\n23 8\n11 7\n24 10\n17 9\n16 9\n5 8\n25 19\n12 25\n1 8\n25 2\n23 19\n19 18\n24 11\n7 19\n6 9\n25 1\n1 22\n11 5\n10 15\n18 4\n3 5\n5 7\n6 25\n13 8\n", "stdout": "25 50 50 50 1\n22 17 11 3 17 2 6 15 17 15 25 23 23 13 8 6 8 9 13 8 8 13 10 22 20 4 8 22 7 20 19 25 14 16 19 20 4 9 4 15 15 17 15 9 25 6 23 17 15 14\n1 21\n21 19\n19 10\n10 18\n10 17\n17 24\n24 3\n24 25\n25 16\n24 20\n19 14\n14 13\n20 7\n10 2\n19 15\n3 23\n18 22\n14 12\n18 8\n15 5\n14 6\n23 9\n20 4\n3 11\n13 11\n23 20\n23 8\n11 7\n24 10\n17 9\n16 9\n5 8\n25 19\n12 25\n1 8\n25 2\n23 19\n19 18\n24 11\n7 19\n6 9\n25 1\n1 22\n11 5\n10 15\n18 4\n3 5\n5 7\n6 25\n13 8\n"}, {"stdin": "50 50 50 1 50\n49 48 21 49 20 21 37 43 9 29 47 2 27 22 12 41 7 6 41 48 25 31 18 29 43 46 43 21 4 13 15 36 49 40 29 20 30 36 2 40 46 10 20 40 46 45 9 32 42 24\n1 24\n24 30\n1 15\n1 38\n1 42\n24 35\n38 49\n1 23\n42 33\n30 20\n33 48\n1 29\n38 16\n48 31\n15 7\n33 41\n15 45\n41 32\n7 6\n6 28\n15 27\n30 43\n33 4\n24 34\n16 26\n41 12\n7 8\n43 17\n38 18\n8 22\n48 3\n20 14\n45 36\n48 39\n43 44\n6 19\n36 9\n44 2\n18 5\n29 11\n17 50\n42 40\n36 25\n36 37\n22 21\n35 13\n29 47\n14 46\n3 10\n9 47\n", "stdout": "50 50 50 1 50\n49 48 21 49 20 21 37 43 9 29 47 2 27 22 12 41 7 6 41 48 25 31 18 29 43 46 43 21 4 13 15 36 49 40 29 20 30 36 2 40 46 10 20 40 46 45 9 32 42 24\n1 24\n24 30\n1 15\n1 38\n1 42\n24 35\n38 49\n1 23\n42 33\n30 20\n33 48\n1 29\n38 16\n48 31\n15 7\n33 41\n15 45\n41 32\n7 6\n6 28\n15 27\n30 43\n33 4\n24 34\n16 26\n41 12\n7 8\n43 17\n38 18\n8 22\n48 3\n20 14\n45 36\n48 39\n43 44\n6 19\n36 9\n44 2\n18 5\n29 11\n17 50\n42 40\n36 25\n36 37\n22 21\n35 13\n29 47\n14 46\n3 10\n9 47\n"}, {"stdin": "25 50 50 1 1\n2 11 11 14 14 24 12 18 2 21 17 12 13 19 20 7 2 14 2 9 8 7 23 21 5 11 13 9 7 11 25 17 10 2 15 18 5 10 8 15 12 23 11 8 15 10 10 14 18 7\n1 22\n22 11\n1 12\n22 14\n12 10\n1 16\n10 2\n10 21\n14 8\n12 15\n10 23\n8 17\n17 9\n1 5\n11 7\n12 4\n8 18\n22 24\n2 13\n10 25\n5 20\n24 6\n13 19\n24 3\n21 10\n21 8\n18 1\n4 19\n13 2\n2 14\n7 10\n22 17\n14 11\n4 22\n17 1\n5 15\n12 22\n7 5\n8 24\n18 25\n10 13\n17 23\n16 25\n25 2\n9 14\n12 17\n25 20\n18 19\n13 24\n19 8\n", "stdout": "25 50 50 1 1\n2 11 11 14 14 24 12 18 2 21 17 12 13 19 20 7 2 14 2 9 8 7 23 21 5 11 13 9 7 11 25 17 10 2 15 18 5 10 8 15 12 23 11 8 15 10 10 14 18 7\n1 22\n22 11\n1 12\n22 14\n12 10\n1 16\n10 2\n10 21\n14 8\n12 15\n10 23\n8 17\n17 9\n1 5\n11 7\n12 4\n8 18\n22 24\n2 13\n10 25\n5 20\n24 6\n13 19\n24 3\n21 10\n21 8\n18 1\n4 19\n13 2\n2 14\n7 10\n22 17\n14 11\n4 22\n17 1\n5 15\n12 22\n7 5\n8 24\n18 25\n10 13\n17 23\n16 25\n25 2\n9 14\n12 17\n25 20\n18 19\n13 24\n19 8\n"}, {"stdin": "50 50 50 1 50\n39 41 12 26 36 21 46 35 2 42 48 14 32 35 29 18 33 22 27 26 40 13 38 22 2 9 29 25 42 18 46 46 16 50 45 43 35 29 7 27 16 7 28 40 37 25 41 43 13 23\n1 25\n1 12\n25 37\n25 16\n25 5\n37 32\n25 8\n25 2\n8 29\n1 35\n25 6\n16 31\n2 9\n35 39\n29 30\n29 47\n37 49\n31 27\n35 42\n39 26\n49 24\n39 50\n26 43\n37 34\n35 11\n43 45\n25 48\n29 41\n12 28\n26 3\n45 36\n16 23\n1 22\n41 40\n1 19\n16 38\n16 44\n1 17\n36 14\n47 33\n50 4\n31 21\n39 10\n39 7\n27 46\n11 15\n34 13\n9 18\n25 20\n3 29\n", "stdout": "50 50 50 1 50\n39 41 12 26 36 21 46 35 2 42 48 14 32 35 29 18 33 22 27 26 40 13 38 22 2 9 29 25 42 18 46 46 16 50 45 43 35 29 7 27 16 7 28 40 37 25 41 43 13 23\n1 25\n1 12\n25 37\n25 16\n25 5\n37 32\n25 8\n25 2\n8 29\n1 35\n25 6\n16 31\n2 9\n35 39\n29 30\n29 47\n37 49\n31 27\n35 42\n39 26\n49 24\n39 50\n26 43\n37 34\n35 11\n43 45\n25 48\n29 41\n12 28\n26 3\n45 36\n16 23\n1 22\n41 40\n1 19\n16 38\n16 44\n1 17\n36 14\n47 33\n50 4\n31 21\n39 10\n39 7\n27 46\n11 15\n34 13\n9 18\n25 20\n3 29\n"}, {"stdin": "25 50 50 1 50\n12 14 2 6 14 11 15 11 14 11 13 10 13 10 16 24 16 9 6 8 5 7 9 19 18 11 14 11 6 20 16 6 14 9 5 9 9 25 24 3 13 5 14 13 24 25 9 17 23 15\n1 24\n1 25\n24 7\n24 15\n15 18\n15 9\n22 4\n22 12\n22 13\n1 2\n7 5\n7 16\n13 21\n12 20\n18 8\n4 6\n6 23\n8 11\n4 19\n25 3\n23 10\n6 9\n12 17\n24 14\n14 5\n20 18\n5 7\n13 11\n13 2\n23 9\n7 1\n10 22\n25 1\n17 23\n13 9\n20 4\n5 23\n18 19\n20 12\n12 13\n7 21\n18 7\n16 10\n4 24\n3 5\n11 1\n8 18\n8 19\n18 10\n9 21\n", "stdout": "25 50 50 1 50\n12 14 2 6 14 11 15 11 14 11 13 10 13 10 16 24 16 9 6 8 5 7 9 19 18 11 14 11 6 20 16 6 14 9 5 9 9 25 24 3 13 5 14 13 24 25 9 17 23 15\n1 24\n1 25\n24 7\n24 15\n15 18\n15 9\n22 4\n22 12\n22 13\n1 2\n7 5\n7 16\n13 21\n12 20\n18 8\n4 6\n6 23\n8 11\n4 19\n25 3\n23 10\n6 9\n12 17\n24 14\n14 5\n20 18\n5 7\n13 11\n13 2\n23 9\n7 1\n10 22\n25 1\n17 23\n13 9\n20 4\n5 23\n18 19\n20 12\n12 13\n7 21\n18 7\n16 10\n4 24\n3 5\n11 1\n8 18\n8 19\n18 10\n9 21\n"}, {"stdin": "25 50 50 1 50\n24 11 21 20 12 15 7 6 12 7 5 14 14 2 15 11 2 11 24 19 8 16 8 14 7 4 10 24 7 3 7 19 16 22 18 11 25 14 19 8 2 16 4 7 10 9 23 17 17 6\n1 12\n12 23\n23 9\n12 11\n11 13\n12 7\n9 16\n23 21\n9 6\n6 2\n23 18\n7 14\n7 19\n19 20\n13 22\n16 17\n2 5\n21 8\n19 15\n22 3\n20 25\n16 10\n6 24\n20 4\n4 24\n13 20\n11 20\n15 7\n1 4\n16 18\n1 9\n16 21\n20 4\n10 9\n3 21\n11 22\n18 14\n7 20\n20 18\n2 18\n8 9\n20 5\n14 24\n15 19\n23 18\n22 24\n21 16\n3 15\n1 6\n15 8\n", "stdout": "25 50 50 1 50\n24 11 21 20 12 15 7 6 12 7 5 14 14 2 15 11 2 11 24 19 8 16 8 14 7 4 10 24 7 3 7 19 16 22 18 11 25 14 19 8 2 16 4 7 10 9 23 17 17 6\n1 12\n12 23\n23 9\n12 11\n11 13\n12 7\n9 16\n23 21\n9 6\n6 2\n23 18\n7 14\n7 19\n19 20\n13 22\n16 17\n2 5\n21 8\n19 15\n22 3\n20 25\n16 10\n6 24\n20 4\n4 24\n13 20\n11 20\n15 7\n1 4\n16 18\n1 9\n16 21\n20 4\n10 9\n3 21\n11 22\n18 14\n7 20\n20 18\n2 18\n8 9\n20 5\n14 24\n15 19\n23 18\n22 24\n21 16\n3 15\n1 6\n15 8\n"}, {"stdin": "3 2 4 2 2\n3 3 3 3\n1 2\n2 3\n", "stdout": "3 2 4 2 2\n3 3 3 3\n1 2\n2 3\n"}, {"stdin": "25 50 50 50 1\n21 18 25 8 14 9 15 4 21 10 8 23 23 14 13 13 21 13 8 5 21 7 16 20 23 20 9 18 24 6 17 18 18 18 13 23 18 3 10 18 9 7 4 5 12 24 2 19 20 11\n1 15\n15 9\n1 17\n9 7\n1 25\n7 10\n17 4\n4 23\n23 12\n9 24\n1 2\n15 21\n15 11\n24 6\n11 14\n10 19\n1 16\n2 13\n9 22\n15 8\n7 5\n10 18\n18 20\n1 3\n15 25\n7 3\n8 4\n5 15\n11 20\n11 13\n15 6\n20 8\n11 15\n9 3\n25 1\n5 6\n21 17\n7 5\n5 4\n8 7\n23 18\n2 1\n13 1\n19 16\n24 3\n8 17\n10 6\n25 19\n6 23\n17 2\n", "stdout": "25 50 50 50 1\n21 18 25 8 14 9 15 4 21 10 8 23 23 14 13 13 21 13 8 5 21 7 16 20 23 20 9 18 24 6 17 18 18 18 13 23 18 3 10 18 9 7 4 5 12 24 2 19 20 11\n1 15\n15 9\n1 17\n9 7\n1 25\n7 10\n17 4\n4 23\n23 12\n9 24\n1 2\n15 21\n15 11\n24 6\n11 14\n10 19\n1 16\n2 13\n9 22\n15 8\n7 5\n10 18\n18 20\n1 3\n15 25\n7 3\n8 4\n5 15\n11 20\n11 13\n15 6\n20 8\n11 15\n9 3\n25 1\n5 6\n21 17\n7 5\n5 4\n8 7\n23 18\n2 1\n13 1\n19 16\n24 3\n8 17\n10 6\n25 19\n6 23\n17 2\n"}], "source": "codeforces", "difficulty": 2500, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\ntemplate <class T>\nbool ckmax(T& x, T y) {\n  return x < y ? x = y, 1 : 0;\n}\ntemplate <class T>\nbool ckmin(T& x, T y) {\n  return x > y ? x = y, 1 : 0;\n}\ninline int read() {\n  int x = 0, f = 1;\n  char ch = getchar();\n  while (!isdigit(ch)) {\n    if (ch == '-') f = 0;\n    ch = getchar();\n  }\n  while (isdigit(ch)) x = x * 10 + ch - '0', ch = getchar();\n  return f ? x : -x;\n}\nconst int K = 103;\nconst int N = 52 * K;\nconst int M = 2 * (K + 52 + 52 * K + 2 * 52 * 52 * K);\nconst int inf = 0x3f3f3f3f;\nint n, m, k, c, d, a[52], S, T, D;\nint dis[N], mf, mc, inc[N], pre[N];\nbool vis[N], inq[N];\nstruct edge {\n  int nx, to, fl, c;\n} e[M];\nint et = 1, hed[N];\nvoid addedge(int u, int v, int fl, int c) {\n  e[++et].nx = hed[u], e[et].to = v, e[et].fl = fl, e[et].c = c, hed[u] = et;\n}\nvoid adde(int u, int v, int fl, int c) {\n  addedge(u, v, fl, c), addedge(v, u, 0, -c);\n}\nint id(int dep, int x) { return (dep - 1) * n + x; }\nbool spfa() {\n  queue<int> q;\n  for (int i = 1, iend = T; i <= iend; ++i) dis[i] = inf, inq[i] = 0;\n  inc[S] = inf, dis[S] = 0, q.push(S);\n  while (!q.empty()) {\n    int u = q.front();\n    q.pop(), inq[u] = 0;\n    for (int i = hed[u]; i; i = e[i].nx) {\n      int v = e[i].to;\n      if (e[i].fl && ckmin(dis[v], dis[u] + e[i].c)) {\n        pre[v] = i, inc[v] = min(e[i].fl, inc[u]);\n        if (!inq[v]) inq[v] = 1, q.push(v);\n      }\n    }\n  }\n  return dis[T] < inf;\n}\nvoid EK() {\n  int rl = inc[T];\n  mf += rl;\n  for (int u = T; u != S; u = e[pre[u] ^ 1].to)\n    e[pre[u]].fl -= rl, e[pre[u] ^ 1].fl += rl, mc += e[pre[u]].c * rl;\n}\nsigned main() {\n  n = read(), m = read(), k = read(), c = read(), d = read(), D = k << 1,\n  S = id(D, n) + 1, T = S + 1;\n  for (int i = 1, iend = k; i <= iend; ++i)\n    a[i] = read(), adde(S, id(1, a[i]), 1, 0);\n  for (int i = 1, iend = m; i <= iend; ++i) {\n    int x = read(), y = read();\n    for (int j = 1, jend = D - 1; j <= jend; ++j)\n      for (int l = 0, lend = k - 1; l <= lend; ++l)\n        adde(id(j, x), id(j + 1, y), 1, (2 * l + 1) * d + c),\n            adde(id(j, y), id(j + 1, x), 1, (2 * l + 1) * d + c);\n  }\n  for (int i = 1, iend = D - 1; i <= iend; ++i)\n    for (int j = 1, jend = n; j <= jend; ++j)\n      adde(id(i, j), id(i + 1, j), k, c);\n  for (int i = 1, iend = D; i <= iend; ++i) adde(id(i, 1), T, k, 0);\n  while (spfa()) EK();\n  printf(\"%d\\n\", mc);\n  return 0;\n}\n"], "original_code": null, "language": "cpp"}, {"problem_id": 738, "question": "You have to paint with shades of grey the tiles of an n\u00d7 n wall. The wall has n rows of tiles, each with n tiles.\n\nThe tiles on the boundary of the wall (i.e., on the first row, last row, first column and last column) are already painted and you shall not change their color. All the other tiles are not painted. Some of the tiles are broken, you shall not paint those tiles. It is guaranteed that the tiles on the boundary are not broken.\n\nYou shall paint all the non-broken tiles that are not already painted. When you paint a tile you can choose from 10^9 shades of grey, indexed from 1 to 10^9. You can paint multiple tiles with the same shade. Formally, painting the wall is equivalent to assigning a shade (an integer between 1 and 10^9) to each non-broken tile that is not already painted.\n\nThe contrast between two tiles is the absolute value of the difference between the shades of the two tiles. The total contrast of the wall is the sum of the contrast of all the pairs of adjacent non-broken tiles (two tiles are adjacent if they share a side).\n\nCompute the minimum possible total contrast of the wall.\n\nInput\n\nThe first line contains n (3\u2264 n\u2264 200) \u2013 the number of rows and columns.\n\nThen n lines, each containing n integers, follow. The i-th of these lines describe the i-th row of tiles. It contains the n integers a_{ij} (-1\u2264 a_{ij} \u2264 10^9). The value of a_{ij} described the tile on the i-th row and j-th column: \n\n  * If a_{ij}=0, then the tile is not painted and shall be painted. \n  * If a_{ij}=-1, then the tile is broken and shall not be painted. \n  * If 1\u2264 a_{ij}\u2264 10^9, then the tile is already painted with the shade a_{ij}. \n\nIt is guaranteed that the tiles on the boundary are already painted, the tiles not on the boundary are not already painted, and the tiles on the boundary are not broken.\n\nOutput\n\nPrint a single integer \u2013 the minimum possible total contrast of the wall.\n\nExamples\n\nInput\n\n\n3\n1 7 6\n4 0 6\n1 1 1\n\n\nOutput\n\n\n26\n\n\nInput\n\n\n3\n10 100 1\n1 -1 100\n10 10 10\n\n\nOutput\n\n\n396\n\n\nInput\n\n\n5\n6 6 5 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 1 2 2\n\n\nOutput\n\n\n34\n\n\nInput\n\n\n7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 0 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n\n\nOutput\n\n\n10129482893\n\nNote\n\nExplanation of the first testcase: The initial configuration of the tiles is (tiles to paint are denoted by ?): \n    \n    \n      \n    1 7 6  \n    4 ? 6  \n    1 1 1  \n    \n\nA possible way to paint the tile achieving the minimum possible contrast of 26 is: \n    \n    \n      \n    1 7 6  \n    4 5 6  \n    1 1 1  \n    \n\nExplanation of the second testcase: Since all tiles are either painted or broken, there is nothing to do. The total contrast is 396.\n\nExplanation of the third testcase: The initial configuration of the tiles is (tiles to paint are denoted by ?): \n    \n    \n      \n    6 6 5 4 4  \n    6 ? ? ? 4  \n    7 ? ? ? 3  \n    8 ? ? ? 2  \n    8 8 1 2 2  \n    \n\nA possible way to paint the tiles achieving the minimum possible contrast of 34 is: \n    \n    \n      \n    6 6 5 4 4  \n    6 6 5 4 4  \n    7 7 5 3 3  \n    8 8 2 2 2  \n    8 8 1 2 2  \n    ", "tests": [{"stdin": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 0 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n", "stdout": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 0 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n"}, {"stdin": "5\n6 6 5 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 1 2 2\n", "stdout": "5\n6 6 5 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 1 2 2\n"}, {"stdin": "3\n1 7 6\n4 0 6\n1 1 1\n", "stdout": "3\n1 7 6\n4 0 6\n1 1 1\n"}, {"stdin": "3\n10 100 1\n1 -1 100\n10 10 10\n", "stdout": "3\n10 100 1\n1 -1 100\n10 10 10\n"}, {"stdin": "3\n491578248 334912711 321526023\n357822524 0 439187820\n779417694 556600213 986577710\n", "stdout": "2346302582\n"}, {"stdin": "3\n491578248 661968393 321526023\n357822524 0 439187820\n779417694 556600213 986577710\n", "stdout": "3\n491578248 661968393 321526023\n357822524 0 439187820\n779417694 556600213 986577710\n"}, {"stdin": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 0 0 166102576\n123213235 506794677 467013743 410119347 102121236 80193382 142887538\n", "stdout": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 0 0 166102576\n123213235 506794677 467013743 410119347 102121236 80193382 142887538\n"}, {"stdin": "5\n6 6 5 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 4\n8 8 1 2 2\n", "stdout": "5\n6 6 5 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 4\n8 8 1 2 2\n"}, {"stdin": "3\n1 7 6\n2 0 6\n1 1 1\n", "stdout": "3\n1 7 6\n2 0 6\n1 1 1\n"}, {"stdin": "3\n10 100 1\n1 -1 100\n4 10 10\n", "stdout": "3\n10 100 1\n1 -1 100\n4 10 10\n"}, {"stdin": "3\n491578248 661968393 321526023\n357822524 0 439187820\n779417694 985169128 986577710\n", "stdout": "3\n491578248 661968393 321526023\n357822524 0 439187820\n779417694 985169128 986577710\n"}, {"stdin": "5\n6 6 10 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 4\n8 8 1 2 2\n", "stdout": "5\n6 6 10 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 4\n8 8 1 2 2\n"}, {"stdin": "3\n10 100 1\n1 -1 100\n4 15 10\n", "stdout": "3\n10 100 1\n1 -1 100\n4 15 10\n"}, {"stdin": "3\n10 100 1\n1 -1 110\n4 15 10\n", "stdout": "3\n10 100 1\n1 -1 110\n4 15 10\n"}, {"stdin": "3\n491578248 661968393 321526023\n357822524 0 95458708\n432974623 985169128 986577710\n", "stdout": "3\n491578248 661968393 321526023\n357822524 0 95458708\n432974623 985169128 986577710\n"}, {"stdin": "3\n10 100 1\n1 -1 010\n2 15 10\n", "stdout": "3\n10 100 1\n1 -1 010\n2 15 10\n"}, {"stdin": "3\n10 110 1\n1 -1 010\n1 15 10\n", "stdout": "3\n10 110 1\n1 -1 010\n1 15 10\n"}, {"stdin": "3\n10 110 1\n1 -1 110\n1 15 10\n", "stdout": "3\n10 110 1\n1 -1 110\n1 15 10\n"}, {"stdin": "3\n10 110 1\n1 -1 110\n1 25 10\n", "stdout": "3\n10 110 1\n1 -1 110\n1 25 10\n"}, {"stdin": "3\n10 110 1\n1 0 110\n1 25 10\n", "stdout": "3\n10 110 1\n1 0 110\n1 25 10\n"}, {"stdin": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 -1 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n", "stdout": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 0 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 -1 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n"}, {"stdin": "5\n6 6 5 6 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 1 2 2\n", "stdout": "5\n6 6 5 6 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 1 2 2\n"}, {"stdin": "3\n10 100 1\n1 -1 110\n10 10 10\n", "stdout": "3\n10 100 1\n1 -1 110\n10 10 10\n"}, {"stdin": "3\n10 100 1\n1 -1 110\n4 15 9\n", "stdout": "3\n10 100 1\n1 -1 110\n4 15 9\n"}, {"stdin": "3\n491578248 661968393 321526023\n357822524 0 95458708\n203094437 985169128 986577710\n", "stdout": "3\n491578248 661968393 321526023\n357822524 0 95458708\n203094437 985169128 986577710\n"}, {"stdin": "3\n10 100 1\n1 0 110\n2 15 10\n", "stdout": "3\n10 100 1\n1 0 110\n2 15 10\n"}, {"stdin": "3\n10 110 1\n1 -1 111\n1 15 10\n", "stdout": "3\n10 110 1\n1 -1 111\n1 15 10\n"}, {"stdin": "3\n10 110 1\n1 -1 110\n1 9 10\n", "stdout": "3\n10 110 1\n1 -1 110\n1 9 10\n"}, {"stdin": "3\n10 111 1\n1 0 110\n1 25 10\n", "stdout": "3\n10 111 1\n1 0 110\n1 25 10\n"}, {"stdin": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 -1 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 -1 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n", "stdout": "7\n315055237 841510063 581663979 148389224 405375301 243686840 882512379\n683199716 -1 -1 -1 0 0 346177625\n496442279 0 0 0 0 0 815993623\n223938231 0 0 -1 0 0 16170511\n44132173 0 -1 0 0 0 130735659\n212201259 0 0 -1 -1 0 166102576\n123213235 506794677 467013743 410119347 791447348 80193382 142887538\n"}, {"stdin": "5\n6 6 5 6 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 2 2 2\n", "stdout": "5\n6 6 5 6 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 2\n8 8 2 2 2\n"}, {"stdin": "3\n2 10 6\n4 0 6\n1 1 1\n", "stdout": "3\n2 10 6\n4 0 6\n1 1 1\n"}, {"stdin": "3\n10 100 1\n1 -1 110\n10 19 10\n", "stdout": "3\n10 100 1\n1 -1 110\n10 19 10\n"}, {"stdin": "3\n10 100 1\n2 -1 100\n4 10 13\n", "stdout": "3\n10 100 1\n2 -1 100\n4 10 13\n"}, {"stdin": "3\n491578248 661968393 321526023\n357822524 0 439187820\n432974623 985169128 986577710\n", "stdout": "3\n491578248 661968393 321526023\n357822524 0 439187820\n432974623 985169128 986577710\n"}, {"stdin": "3\n10 100 1\n1 -1 110\n2 15 10\n", "stdout": "3\n10 100 1\n1 -1 110\n2 15 10\n"}, {"stdin": "3\n10 100 1\n1 -1 010\n1 15 10\n", "stdout": "3\n10 100 1\n1 -1 010\n1 15 10\n"}, {"stdin": "3\n2 7 6\n4 0 6\n1 1 1\n", "stdout": "3\n2 7 6\n4 0 6\n1 1 1\n"}, {"stdin": "3\n10 100 1\n1 -1 100\n4 10 13\n", "stdout": "3\n10 100 1\n1 -1 100\n4 10 13\n"}, {"stdin": "3\n372804623 661968393 321526023\n357822524 0 439187820\n779417694 985169128 986577710\n", "stdout": "3\n372804623 661968393 321526023\n357822524 0 439187820\n779417694 985169128 986577710\n"}, {"stdin": "5\n6 6 10 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 4\n8 8 1 2 4\n", "stdout": "5\n6 6 10 4 4\n6 0 0 0 4\n7 0 0 0 3\n8 0 0 0 4\n8 8 1 2 4\n"}, {"stdin": "3\n491578248 661968393 321526023\n357822524 0 439187820\n499262829 985169128 986577710\n", "stdout": "3\n491578248 661968393 321526023\n357822524 0 439187820\n499262829 985169128 986577710\n"}, {"stdin": "3\n10 100 1\n1 -1 010\n3 15 10\n", "stdout": "3\n10 100 1\n1 -1 010\n3 15 10\n"}, {"stdin": "3\n10 010 1\n1 -1 110\n1 15 10\n", "stdout": "3\n10 010 1\n1 -1 110\n1 15 10\n"}], "source": "codeforces", "difficulty": 3300, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nusing LL = long long;\nconst int MAX_N = 1e5 + 5;\nstruct Graph {\n  int to, cap, cost, next;\n} e[MAX_N * 50];\nint fir[MAX_N], e_cnt;\nvoid clearGraph() {\n  memset(fir, -1, sizeof(fir));\n  e_cnt = 0;\n}\nvoid Add_Edge(int u, int v, int c, int w) {\n  e[e_cnt] = (Graph){v, c, w, fir[u]}, fir[u] = e_cnt++;\n  e[e_cnt] = (Graph){u, 0, -w, fir[v]}, fir[v] = e_cnt++;\n}\nvoid AddEdge(int u, int v, int c, int w) {\n  e[e_cnt] = (Graph){v, c, w, fir[u]}, fir[u] = e_cnt++;\n  e[e_cnt] = (Graph){u, c, -w, fir[v]}, fir[v] = e_cnt++;\n}\nconst LL INF = 1e18;\nint S, T;\nLL dis[MAX_N];\nbool inq[MAX_N];\nbool spfa() {\n  queue<int> que;\n  for (int i = 0; i <= T; i++) dis[i] = INF;\n  dis[T] = 0, inq[T] = 1, que.push(T);\n  while (!que.empty()) {\n    int x = que.front();\n    que.pop();\n    for (int i = fir[x]; ~i; i = e[i].next) {\n      int v = e[i].to, w = e[i ^ 1].cost;\n      if (e[i ^ 1].cap && dis[v] > dis[x] + w) {\n        dis[v] = dis[x] + w;\n        if (!inq[v]) que.push(v), inq[v] = 1;\n      }\n    }\n    inq[x] = 0;\n  }\n  return dis[S] != INF;\n}\nint tim, vis[MAX_N];\nbool relabel() {\n  LL res = INF;\n  for (int x = 0; x <= T; x++) {\n    if (vis[x] != tim) continue;\n    for (int i = fir[x]; ~i; i = e[i].next) {\n      int v = e[i].to;\n      if (e[i].cap && vis[v] != tim)\n        res = min(res, dis[v] + e[i].cost - dis[x]);\n    }\n  }\n  if (res == INF) return 0;\n  for (int i = 0; i <= T; i++)\n    if (vis[i] == tim) dis[i] += res;\n  return 1;\n}\nint dfs(int x, int f) {\n  if (x == T || !f) return f;\n  vis[x] = tim;\n  int res = 0;\n  for (int i = fir[x]; ~i; i = e[i].next) {\n    int v = e[i].to, w = e[i].cost;\n    if (e[i].cap && dis[x] == dis[v] + w && vis[v] != tim) {\n      int d = dfs(v, min(f, e[i].cap));\n      res += d, f -= d;\n      e[i].cap -= d, e[i ^ 1].cap += d;\n      if (!f) break;\n    }\n  }\n  return res;\n}\nLL zkw() {\n  spfa();\n  LL res = 0, f = 0;\n  do do {\n      ++tim, f = dfs(S, 1e9);\n      if (dis[S] >= 0) return res;\n      res += dis[S] * f;\n    } while (f);\n  while (relabel());\n  return res;\n}\nint N, a[205][205], Id[205][205], cnt;\nint main() {\n  clearGraph();\n  scanf(\"%d\", &N);\n  for (int i = 1; i <= N; i++)\n    for (int j = 1; j <= N; j++) scanf(\"%d\", a[i] + j), Id[i][j] = ++cnt;\n  S = 0, T = cnt + 1;\n  for (int i = 1; i <= N; i++)\n    for (int j = 1; j <= N; j++) {\n      if (i != N && a[i][j] != -1 && a[i + 1][j] != -1)\n        AddEdge(Id[i][j], Id[i + 1][j], 1, 0);\n      if (j != N && a[i][j] != -1 && a[i][j + 1] != -1)\n        AddEdge(Id[i][j], Id[i][j + 1], 1, 0);\n      if (a[i][j] > 0)\n        Add_Edge(S, Id[i][j], 1e9, -a[i][j]),\n            Add_Edge(Id[i][j], T, 1e9, a[i][j]);\n    }\n  printf(\"%lld\\n\", -zkw());\n  return 0;\n}\n"], "original_code": null, "language": "cpp"}]