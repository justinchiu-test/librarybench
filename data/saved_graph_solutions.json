[{"problem": {"problem_id": 0, "question": "There are n persons who initially don't know each other. On each morning, two of them, who were not friends before, become friends.\n\nWe want to plan a trip for every evening of m days. On each trip, you have to select a group of people that will go on the trip. For every person, one of the following should hold: \n\n  * Either this person does not go on the trip, \n  * Or at least k of his friends also go on the trip. \n\n\n\nNote that the friendship is not transitive. That is, if a and b are friends and b and c are friends, it does not necessarily imply that a and c are friends.\n\nFor each day, find the maximum number of people that can go on the trip on that day.\n\nInput\n\nThe first line contains three integers n, m, and k (2 \u2264 n \u2264 2 \u22c5 10^5, 1 \u2264 m \u2264 2 \u22c5 10^5, 1 \u2264 k < n) \u2014 the number of people, the number of days and the number of friends each person on the trip should have in the group.\n\nThe i-th (1 \u2264 i \u2264 m) of the next m lines contains two integers x and y (1\u2264 x, y\u2264 n, x\u2260 y), meaning that persons x and y become friends on the morning of day i. It is guaranteed that x and y were not friends before.\n\nOutput\n\nPrint exactly m lines, where the i-th of them (1\u2264 i\u2264 m) contains the maximum number of people that can go on the trip on the evening of the day i.\n\nExamples\n\nInput\n\n4 4 2\n2 3\n1 2\n1 3\n1 4\n\n\nOutput\n\n0\n0\n3\n3\n\n\nInput\n\n5 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n4 1\n3 2\n\n\nOutput\n\n0\n0\n0\n3\n3\n4\n4\n5\n\n\nInput\n\n5 7 2\n1 5\n3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n\n\nOutput\n\n0\n0\n0\n0\n3\n4\n4\n\nNote\n\nIn the first example, \n\n  * 1,2,3 can go on day 3 and 4. \n\n\n\nIn the second example, \n\n  * 2,4,5 can go on day 4 and 5. \n  * 1,2,4,5 can go on day 6 and 7. \n  * 1,2,3,4,5 can go on day 8. \n\n\n\nIn the third example, \n\n  * 1,2,5 can go on day 5. \n  * 1,2,3,5 can go on day 6 and 7. ", "tests": [{"stdin": "4 4 2\n2 3\n1 2\n1 3\n1 4\n", "stdout": "4 4 2\n2 3\n1 2\n1 3\n1 4\n"}, {"stdin": "5 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n4 1\n3 2\n", "stdout": "5 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n4 1\n3 2\n"}, {"stdin": "5 7 2\n1 5\n3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n", "stdout": "5 7 2\n1 5\n3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "0\n0\n3\n3\n3\n3\n7\n7\n7\n7\n7\n11\n11\n11\n11\n15\n15\n15\n15\n16\n"}, {"stdin": "2 1 1\n2 1\n", "stdout": "2\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "9 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n4 1\n3 2\n", "stdout": "9 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n4 1\n3 2\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "2 1 2\n2 1\n", "stdout": "2 1 2\n2 1\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n11 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n11 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 2\n10 3\n5 3\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 2\n10 3\n5 3\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 3\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 3\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "9 7 2\n1 5\n3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n", "stdout": "9 7 2\n1 5\n3 2\n2 5\n3 4\n1 2\n5 3\n1 3\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 2\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 2\n16 2\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 12\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 12\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n9 3\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n9 3\n10 2\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n13 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n13 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 5\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 5\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 3\n14 4\n15 14\n4 13\n13 3\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 3\n14 4\n15 14\n4 13\n13 3\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n11 9\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n11 9\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n7 15\n1 7\n8 15\n"}, {"stdin": "9 7 2\n1 5\n4 2\n2 5\n3 4\n1 2\n5 3\n1 3\n", "stdout": "9 7 2\n1 5\n4 2\n2 5\n3 4\n1 2\n5 3\n1 3\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n6 12\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n6 12\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n11 9\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n3 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n11 9\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n1 14\n3 15\n1 7\n8 15\n"}, {"stdin": "9 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n7 1\n3 2\n", "stdout": "9 8 2\n2 1\n4 2\n5 4\n5 2\n4 3\n5 1\n7 1\n3 2\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 3\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 3\n14 4\n15 14\n4 13\n13 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 2\n10 3\n5 1\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 2\n10 3\n5 1\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 7\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 7\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 5\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 5\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 5\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 5\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n3 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n3 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "2 1 3\n2 1\n", "stdout": "2 1 3\n2 1\n"}, {"stdin": "27 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n19 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 2\n10 3\n5 3\n10 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n19 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 2\n10 3\n5 3\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 23\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 2\n10 3\n5 3\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 23\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 2\n10 3\n5 1\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 16\n", "stdout": "27 20 2\n10 3\n5 1\n20 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 16\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 2\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 2\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 7\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n25 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 7\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n25 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 7\n12 5\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 7\n12 5\n7 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n10 2\n14 4\n15 24\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n2 6\n1 10\n11 16\n11 1\n16 4\n10 2\n14 4\n15 24\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n3 6\n1 10\n11 16\n11 1\n16 4\n3 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n", "stdout": "27 20 3\n10 3\n5 1\n20 5\n12 5\n13 6\n12 10\n3 6\n1 10\n11 16\n11 1\n16 4\n3 2\n14 4\n15 14\n3 13\n1 15\n1 8\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 3\n5 3\n13 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n2 14\n7 15\n1 7\n8 15\n", "stdout": "16 20 2\n10 3\n5 3\n13 5\n12 7\n7 6\n9 10\n2 6\n1 10\n11 16\n11 1\n16 2\n10 2\n14 4\n15 14\n4 3\n13 15\n2 14\n7 15\n1 7\n8 15\n"}, {"stdin": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 3\n14 4\n15 14\n4 13\n13 3\n1 8\n7 15\n2 7\n8 15\n", "stdout": "16 20 2\n10 4\n5 3\n10 5\n12 7\n7 6\n9 12\n9 6\n1 10\n11 16\n11 1\n16 3\n10 3\n14 4\n15 14\n4 13\n13 3\n1 8\n7 15\n2 7\n8 15\n"}], "source": "codeforces", "difficulty": 2200, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int module = 1000000007;\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n, m, k;\n  cin >> n >> m >> k;\n  vector<set<int>> to(n, set<int>());\n  vector<pair<int, int>> edges(m);\n  vector<int> nbr(n);\n  for (int i = 0; i < m; ++i) {\n    int a, b;\n    cin >> a >> b;\n    a--;\n    b--;\n    nbr[a]++;\n    nbr[b]++;\n    to[a].insert(b);\n    to[b].insert(a);\n    edges[i] = {a, b};\n  }\n  vector<bool> vis(n);\n  int all = n;\n  for (int i = 0; i < n; ++i) {\n    if (!vis[i]) {\n      if (nbr[i] < k) {\n        queue<int> q;\n        q.push(i);\n        vis[i] = true;\n        all--;\n        while (!q.empty()) {\n          int cur = q.front();\n          q.pop();\n          for (int t : to[cur]) {\n            nbr[t]--;\n            to[t].erase(cur);\n            if (nbr[t] < k && !vis[t]) {\n              q.push(t);\n              vis[t] = true;\n              all--;\n            }\n          }\n        }\n      }\n    }\n  }\n  queue<int> q;\n  vector<int> answer;\n  answer.push_back(all);\n  for (int i = m - 1; i > 0; i--) {\n    auto [a, b] = edges[i];\n    if (!vis[a] && !vis[b]) {\n      to[a].erase(b);\n      to[b].erase(a);\n      nbr[a]--;\n      nbr[b]--;\n      if (nbr[a] < k) {\n        q.push(a);\n        vis[a] = true;\n        all--;\n      }\n      if (nbr[b] < k) {\n        q.push(b);\n        vis[b] = true;\n        all--;\n      }\n      while (!q.empty()) {\n        int cur = q.front();\n        q.pop();\n        for (int t : to[cur]) {\n          nbr[t]--;\n          to[t].erase(cur);\n          if (nbr[t] < k && !vis[t]) {\n            q.push(t);\n            vis[t] = true;\n            all--;\n          }\n        }\n      }\n    }\n    answer.push_back(all);\n  }\n  for (int i = answer.size() - 1; i >= 0; i--) {\n    cout << answer[i] << \"\\n\";\n  }\n}\n", "#include <bits/stdc++.h>\n#pragma GCC optimize(3, \"Ofast\", \"inline\")\nusing namespace std;\nconst long long maxn = (long long)1e6 + 5;\nconst long long mod = (long long)998244353;\nconst long long inf = 0x3f3f3f3f3f3f3f3f;\npair<long long, long long> a[maxn];\nlong long in[maxn];\nvector<long long> v[maxn];\nbool vis[maxn];\nlong long n, m, k;\nlong long ans;\nvoid f(long long x) {\n  queue<long long> q;\n  q.push(x);\n  vis[x] = true;\n  --ans;\n  while (!q.empty()) {\n    long long now = q.front();\n    q.pop();\n    for (auto &i : v[now])\n      if (!vis[i] && --in[i] < k) ans--, q.push(i), vis[i] = true;\n  }\n}\nlong long fin[maxn];\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  ;\n  cin >> n >> m >> k;\n  ans = n;\n  for (long long i = 1; i <= m; ++i) {\n    cin >> a[i].first >> a[i].second;\n    ++in[a[i].first], ++in[a[i].second];\n    v[a[i].first].push_back(a[i].second);\n    v[a[i].second].push_back(a[i].first);\n  }\n  for (long long i = 1; i <= n; ++i)\n    if (!vis[i] && in[i] < k) f(i);\n  fin[m] = ans;\n  for (long long i = m; i >= 1; --i) {\n    if (!vis[a[i].first]) --in[a[i].second];\n    if (!vis[a[i].second]) --in[a[i].first];\n    v[a[i].first].pop_back();\n    v[a[i].second].pop_back();\n    if (in[a[i].first] < k && !vis[a[i].first]) f(a[i].first);\n    if (in[a[i].second] < k && !vis[a[i].second]) f(a[i].second);\n    fin[i - 1] = ans;\n  }\n  for (long long i = 1; i <= m; ++i) cout << fin[i] << '\\n';\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst long long MOD = 1e9 + 7;\nconst long long N = 3e5 + 10;\nlong long x[N], y[N], deg[N];\nvector<long long> vp[N];\nint32_t main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  long long n, m, k;\n  cin >> n >> m >> k;\n  for (long long i = 1; i <= m; i++) {\n    cin >> x[i] >> y[i];\n    vp[x[i]].push_back(y[i]);\n    vp[y[i]].push_back(x[i]);\n    deg[x[i]]++;\n    deg[y[i]]++;\n  }\n  set<pair<long long, long long> > s;\n  for (long long i = 1; i <= n; i++) {\n    s.insert({deg[i], i});\n  }\n  long long ans = n;\n  set<pair<long long, long long> > ae;\n  vector<long long> v;\n  for (long long i = m; i >= 1; i--) {\n    while (s.size() > 0) {\n      auto it = *s.begin();\n      s.erase(it);\n      if (it.first >= k) break;\n      for (auto it1 : vp[it.second]) {\n        if (ae.find({it1, it.second}) == ae.end()) {\n          ae.insert({it1, it.second});\n          ae.insert({it.second, it1});\n          s.erase({deg[it1], it1});\n          deg[it1]--;\n          s.insert({deg[it1], it1});\n        }\n      }\n      ans--;\n    }\n    if (ae.find({x[i], y[i]}) == ae.end()) {\n      ae.insert({x[i], y[i]});\n      ae.insert({y[i], x[i]});\n      s.erase({deg[x[i]], x[i]});\n      s.erase({deg[y[i]], y[i]});\n      deg[x[i]]--;\n      s.insert({deg[x[i]], x[i]});\n      deg[y[i]]--;\n      s.insert({deg[y[i]], y[i]});\n    }\n    v.push_back(ans);\n  }\n  reverse(v.begin(), v.end());\n  for (auto it : v) {\n    cout << it << \"\\n\";\n  }\n}\n"], "original_code": "#include <bits/stdc++.h>\n#pragma GCC optimize(3, \"Ofast\", \"inline\")\nusing namespace std;\nconst long long maxn = (long long)1e6 + 5;\nconst long long mod = (long long)998244353;\nconst long long inf = 0x3f3f3f3f3f3f3f3f;\npair<long long, long long> a[maxn];\nlong long in[maxn];\nvector<long long> v[maxn];\nbool vis[maxn];\nlong long n, m, k;\nlong long ans;\nvoid f(long long x) {\n  queue<long long> q;\n  q.push(x);\n  vis[x] = true;\n  --ans;\n  while (!q.empty()) {\n    long long now = q.front();\n    q.pop();\n    for (auto &i : v[now])\n      if (!vis[i] && --in[i] < k) ans--, q.push(i), vis[i] = true;\n  }\n}\nlong long fin[maxn];\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  ;\n  cin >> n >> m >> k;\n  ans = n;\n  for (long long i = 1; i <= m; ++i) {\n    cin >> a[i].first >> a[i].second;\n    ++in[a[i].first], ++in[a[i].second];\n    v[a[i].first].push_back(a[i].second);\n    v[a[i].second].push_back(a[i].first);\n  }\n  for (long long i = 1; i <= n; ++i)\n    if (!vis[i] && in[i] < k) f(i);\n  fin[m] = ans;\n  for (long long i = m; i >= 1; --i) {\n    if (!vis[a[i].first]) --in[a[i].second];\n    if (!vis[a[i].second]) --in[a[i].first];\n    v[a[i].first].pop_back();\n    v[a[i].second].pop_back();\n    if (in[a[i].first] < k && !vis[a[i].first]) f(a[i].first);\n    if (in[a[i].second] < k && !vis[a[i].second]) f(a[i].second);\n    fin[i - 1] = ans;\n  }\n  for (long long i = 1; i <= m; ++i) cout << fin[i] << '\\n';\n  return 0;\n}\n", "language": "cpp"}, "status": "success", "code": "#include <bits/stdc++.h>\n#pragma GCC optimize(3, \"Ofast\", \"inline\")\nusing namespace std;\nconst long long maxn = (long long)1e6 + 5;\nconst long long mod = (long long)998244353;\nconst long long inf = 0x3f3f3f3f3f3f3f3f;\npair<long long, long long> a[maxn];\nlong long in[maxn];\nvector<long long> v[maxn];\nbool vis[maxn];\nlong long n, m, k;\nlong long ans;\nvoid f(long long x) {\n  queue<long long> q;\n  q.push(x);\n  vis[x] = true;\n  --ans;\n  while (!q.empty()) {\n    long long now = q.front();\n    q.pop();\n    for (auto &i : v[now])\n      if (!vis[i] && --in[i] < k) ans--, q.push(i), vis[i] = true;\n  }\n}\nlong long fin[maxn];\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  ;\n  cin >> n >> m >> k;\n  ans = n;\n  for (long long i = 1; i <= m; ++i) {\n    cin >> a[i].first >> a[i].second;\n    ++in[a[i].first], ++in[a[i].second];\n    v[a[i].first].push_back(a[i].second);\n    v[a[i].second].push_back(a[i].first);\n  }\n  for (long long i = 1; i <= n; ++i)\n    if (!vis[i] && in[i] < k) f(i);\n  fin[m] = ans;\n  for (long long i = m; i >= 1; --i) {\n    if (!vis[a[i].first]) --in[a[i].second];\n    if (!vis[a[i].second]) --in[a[i].first];\n    v[a[i].first].pop_back();\n    v[a[i].second].pop_back();\n    if (in[a[i].first] < k && !vis[a[i].first]) f(a[i].first);\n    if (in[a[i].second] < k && !vis[a[i].second]) f(a[i].second);\n    fin[i - 1] = ans;\n  }\n  for (long long i = 1; i <= m; ++i) cout << fin[i] << '\\n';\n  return 0;\n}\n", "pass_ratio": 1.0, "tests_passed": 1, "tests_total": 1, "iterations": 1, "history": [], "model_type": "human", "model_name": "human"}, {"problem": {"problem_id": 683, "question": "Jzzhu is the president of country A. There are n cities numbered from 1 to n in his country. City 1 is the capital of A. Also there are m roads connecting the cities. One can go from city ui to vi (and vise versa) using the i-th road, the length of this road is xi. Finally, there are k train routes in the country. One can use the i-th train route to go from capital of the country to city si (and vise versa), the length of this route is yi.\n\nJzzhu doesn't want to waste the money of the country, so he is going to close some of the train routes. Please tell Jzzhu the maximum number of the train routes which can be closed under the following condition: the length of the shortest path from every city to the capital mustn't change.\n\nInput\n\nThe first line contains three integers n, m, k (2 \u2264 n \u2264 105; 1 \u2264 m \u2264 3\u00b7105; 1 \u2264 k \u2264 105).\n\nEach of the next m lines contains three integers ui, vi, xi (1 \u2264 ui, vi \u2264 n; ui \u2260 vi; 1 \u2264 xi \u2264 109).\n\nEach of the next k lines contains two integers si and yi (2 \u2264 si \u2264 n; 1 \u2264 yi \u2264 109).\n\nIt is guaranteed that there is at least one way from every city to the capital. Note, that there can be multiple roads between two cities. Also, there can be multiple routes going to the same city from the capital.\n\nOutput\n\nOutput a single integer representing the maximum number of the train routes which can be closed.\n\nExamples\n\nInput\n\n5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n\n\nOutput\n\n2\n\n\nInput\n\n2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n\n\nOutput\n\n2", "tests": [{"stdin": "2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n", "stdout": "2 2 3\n1 2 2\n2 1 3\n2 1\n2 2\n2 3\n"}, {"stdin": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n", "stdout": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n"}, {"stdin": "5 5 3\n1 2 999999999\n2 3 1000000000\n3 4 529529529\n5 1 524524524\n5 3 1000000000\n5 524444444\n5 529999999\n2 1000000000\n", "stdout": "2\n"}, {"stdin": "3 2 2\n1 2 4\n2 3 4\n2 2\n3 6\n", "stdout": "1\n"}, {"stdin": "5 5 2\n1 2 100\n2 3 100\n3 4 100\n4 5 20\n2 5 5\n5 50\n4 1\n", "stdout": "1\n"}, {"stdin": "3 2 5\n1 2 2\n2 3 4\n3 5\n3 5\n3 5\n3 6\n3 7\n", "stdout": "4\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n1 3 999999999\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "6\n"}, {"stdin": "3 2 2\n1 2 100\n2 3 1\n2 1\n3 3\n", "stdout": "1\n"}, {"stdin": "2 1 1\n1 2 1\n2 1000000000\n", "stdout": "1\n"}, {"stdin": "5 4 3\n1 2 999999999\n2 3 1000000000\n3 4 529529529\n5 1 524524524\n5 524444444\n5 529999999\n2 1000000000\n", "stdout": "2\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 5\n2 4\n2 4\n2 5\n", "stdout": "4\n"}, {"stdin": "3 2 5\n1 2 3\n2 3 4\n3 5\n3 5\n3 5\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 3\n2 3 4\n3 5\n3 5\n3 5\n3 6\n3 7\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 999999999\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 999999999\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "3 2 2\n1 2 100\n2 3 1\n2 1\n2 3\n", "stdout": "3 2 2\n1 2 100\n2 3 1\n2 1\n2 3\n"}, {"stdin": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 9\n", "stdout": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 9\n"}, {"stdin": "2 1 5\n1 2 4\n2 5\n2 5\n2 4\n2 4\n2 5\n", "stdout": "2 1 5\n1 2 4\n2 5\n2 5\n2 4\n2 4\n2 5\n"}, {"stdin": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n1 4 4\n1 5 5\n3 5\n4 5\n5 9\n", "stdout": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n1 4 4\n1 5 5\n3 5\n4 5\n5 9\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 5\n2 4\n2 4\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 5\n2 4\n2 4\n2 6\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "3 2 2\n1 2 100\n2 3 1\n2 2\n2 3\n", "stdout": "3 2 2\n1 2 100\n2 3 1\n2 2\n2 3\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 9\n2 4\n2 4\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 9\n2 4\n2 4\n2 6\n"}, {"stdin": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 1\n", "stdout": "5 5 3\n1 2 1\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 1\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 9\n2 4\n2 5\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 9\n2 4\n2 5\n2 6\n"}, {"stdin": "3 2 5\n1 2 2\n2 3 4\n3 5\n3 4\n3 5\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 2\n2 3 4\n3 5\n3 4\n3 5\n3 6\n3 7\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n1 2 999999999\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n1 2 999999999\n2 499999999\n2 500000000\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "2 2 3\n1 2 2\n2 1 3\n2 1\n2 1\n2 3\n", "stdout": "2 2 3\n1 2 2\n2 1 3\n2 1\n2 1\n2 3\n"}, {"stdin": "5 5 3\n1 2 2\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n", "stdout": "5 5 3\n1 2 2\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 5\n"}, {"stdin": "3 2 5\n1 2 3\n2 3 4\n3 5\n3 5\n3 10\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 3\n2 3 4\n3 5\n3 5\n3 10\n3 6\n3 7\n"}, {"stdin": "3 2 2\n1 2 100\n2 3 1\n3 1\n2 3\n", "stdout": "3 2 2\n1 2 100\n2 3 1\n3 1\n2 3\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 5\n2 5\n2 4\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 5\n2 5\n2 4\n2 6\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 231258995\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 231258995\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 9\n2 4\n2 3\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 9\n2 4\n2 3\n2 6\n"}, {"stdin": "5 5 3\n1 2 2\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 1\n", "stdout": "5 5 3\n1 2 2\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 1\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 10\n2 4\n2 5\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 10\n2 4\n2 5\n2 6\n"}, {"stdin": "2 2 3\n1 2 2\n2 1 3\n2 2\n2 1\n2 3\n", "stdout": "2 2 3\n1 2 2\n2 1 3\n2 2\n2 1\n2 3\n"}, {"stdin": "3 2 5\n1 2 3\n2 3 3\n3 5\n3 5\n3 10\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 3\n2 3 3\n3 5\n3 5\n3 10\n3 6\n3 7\n"}, {"stdin": "2 1 5\n1 2 4\n2 5\n2 5\n2 5\n2 4\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 5\n2 5\n2 5\n2 4\n2 6\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 1\n2 4\n2 3\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 1\n2 4\n2 3\n2 6\n"}, {"stdin": "5 5 3\n2 2 2\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 1\n", "stdout": "5 5 3\n2 2 2\n2 3 2\n1 3 3\n3 4 4\n1 5 5\n3 5\n4 5\n5 1\n"}, {"stdin": "2 1 5\n1 2 2\n2 3\n2 10\n2 4\n2 5\n2 6\n", "stdout": "2 1 5\n1 2 2\n2 3\n2 10\n2 4\n2 5\n2 6\n"}, {"stdin": "3 2 5\n1 2 3\n2 3 3\n3 5\n3 6\n3 10\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 3\n2 3 3\n3 5\n3 6\n3 10\n3 6\n3 7\n"}, {"stdin": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 21503095\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 21503095\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 21503095\n3 1503080597\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 21503095\n3 1503080597\n3 1000000000\n3 1000000000\n"}, {"stdin": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 21503095\n3 1503080597\n3 1000000000\n3 1000000100\n", "stdout": "3 3 6\n1 2 499999999\n3 3 500000000\n2 3 904159011\n2 499999999\n2 14015974\n2 21503095\n3 1503080597\n3 1000000000\n3 1000000100\n"}, {"stdin": "5 5 2\n1 2 100\n2 3 100\n3 4 100\n4 5 20\n2 5 5\n5 49\n4 1\n", "stdout": "5 5 2\n1 2 100\n2 3 100\n3 4 100\n4 5 20\n2 5 5\n5 49\n4 1\n"}, {"stdin": "3 2 2\n1 2 100\n1 3 1\n2 1\n3 3\n", "stdout": "3 2 2\n1 2 100\n1 3 1\n2 1\n3 3\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 5\n2 8\n2 4\n2 5\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 5\n2 8\n2 4\n2 5\n"}, {"stdin": "3 2 5\n1 2 1\n2 3 4\n3 5\n3 5\n3 5\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 1\n2 3 4\n3 5\n3 5\n3 5\n3 6\n3 7\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 999999999\n2 499999999\n2 770375722\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 999999999\n2 499999999\n2 770375722\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 5\n2 4\n2 1\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 5\n2 4\n2 1\n2 6\n"}, {"stdin": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 72057510\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n", "stdout": "3 3 6\n1 2 499999999\n2 3 500000000\n2 3 904159011\n2 499999999\n2 72057510\n2 499999999\n3 999999999\n3 1000000000\n3 1000000000\n"}, {"stdin": "3 2 5\n1 2 4\n2 3 4\n3 5\n3 4\n3 5\n3 6\n3 7\n", "stdout": "3 2 5\n1 2 4\n2 3 4\n3 5\n3 4\n3 5\n3 6\n3 7\n"}, {"stdin": "3 2 2\n1 2 100\n2 3 1\n3 1\n2 2\n", "stdout": "3 2 2\n1 2 100\n2 3 1\n3 1\n2 2\n"}, {"stdin": "2 1 5\n1 2 4\n2 3\n2 10\n2 4\n2 10\n2 6\n", "stdout": "2 1 5\n1 2 4\n2 3\n2 10\n2 4\n2 10\n2 6\n"}, {"stdin": "2 2 3\n1 2 2\n2 1 4\n2 2\n2 1\n2 3\n", "stdout": "2 2 3\n1 2 2\n2 1 4\n2 2\n2 1\n2 3\n"}, {"stdin": "2 1 5\n1 2 4\n2 5\n2 5\n2 5\n2 4\n2 7\n", "stdout": "2 1 5\n1 2 4\n2 5\n2 5\n2 5\n2 4\n2 7\n"}], "source": "codeforces", "difficulty": 2000, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 100001;\nconst long long MAX = 123456897213124;\nint n, m, k, ans;\nvector<pair<int, long long> > a[N];\npriority_queue<pair<long long, int> > q;\nbool Visited[N];\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin >> n >> m >> k;\n  for (int i = 1; i <= m; i++) {\n    int u, v;\n    long long x;\n    cin >> u >> v >> x;\n    a[u].push_back(make_pair(v, x));\n    a[v].push_back(make_pair(u, x));\n  }\n  for (int i = 1; i <= k; i++) {\n    int u;\n    long long x;\n    cin >> u >> x;\n    q.push(make_pair(-x, u - N));\n  }\n  q.push(make_pair(0, 1));\n  while (!q.empty()) {\n    pair<long long, int> u = q.top();\n    q.pop();\n    if (u.second < 0) {\n      u.second += N;\n      if (Visited[u.second]) ans++;\n    }\n    if (Visited[u.second]) continue;\n    Visited[u.second] = 1;\n    for (int i = 0; i < (int)a[u.second].size(); i++)\n      q.push(make_pair(u.first - a[u.second][i].second, a[u.second][i].first));\n  }\n  cout << ans;\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nvector<pair<int, int> > g[111111];\nbool used[111111];\nint main() {\n  int n, m, k;\n  scanf(\"%d%d%d\", &n, &m, &k);\n  for (int i = 0; i < m; i++) {\n    int x, y, z;\n    scanf(\"%d%d%d\", &x, &y, &z);\n    --x;\n    --y;\n    g[x].push_back({y, z});\n    g[y].push_back({x, z});\n  }\n  int ans = 0;\n  vector<int> rw(n, -1);\n  for (int i = 0; i < k; i++) {\n    int x, y;\n    scanf(\"%d%d\", &x, &y);\n    --x;\n    if (rw[x] != -1) {\n      ans++;\n      rw[x] = min(rw[x], y);\n    } else {\n      rw[x] = y;\n    }\n  }\n  vector<long long> d(n, 1e18);\n  priority_queue<pair<long long, int> > q;\n  d[0] = 0;\n  q.push({0, 0});\n  for (int i = 0; i < n; i++) {\n    if (rw[i] != -1) {\n      d[i] = rw[i];\n      q.push({-d[i], i});\n    }\n  }\n  while (!q.empty()) {\n    auto v = q.top();\n    q.pop();\n    int from = v.second;\n    if (used[from]) {\n      continue;\n    }\n    used[from] = true;\n    for (auto& i : g[from]) {\n      if (d[i.first] > d[from] + i.second) {\n        d[i.first] = d[from] + i.second;\n        q.push({-d[i.first], i.first});\n      }\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    if (rw[i] == -1) {\n      continue;\n    }\n    for (auto& v : g[i]) {\n      if (d[i] == d[v.first] + v.second) {\n        ans++;\n        break;\n      }\n    }\n  }\n  cout << ans;\n  return 0;\n}\n", "#include <bits/stdc++.h>\n#pragma comment(linker, \"/STACK:102400000,102400000\")\nusing namespace std;\nconst long long inf = 0x3f3f3f3f3f3f3f3f;\nconst double pi = acos(-1.0);\nconst int maxn = 1e5;\nint ans = 0;\nstruct node {\n  long long n, d;\n  bool train;\n  node(long long nn, long long dd) : n(nn), d(dd) {}\n  node(long long nn, long long dd, bool t) : n(nn), d(dd), train(t) {}\n  bool friend operator<(node a, node b) { return a.d > b.d; }\n};\nvector<node> vec[maxn + 5];\nint n;\nlong long dist[maxn + 5], dists[maxn + 5];\nbool vis[maxn + 5];\nint num[maxn + 5];\nvoid djs(int v0) {\n  memset(vis, 0, sizeof(vis));\n  memset(dist, 0x3f, sizeof(dist));\n  dist[v0] = 0;\n  priority_queue<node> q;\n  q.push(node(v0, 0));\n  int cnt = 0;\n  while (!q.empty()) {\n    if (vis[q.top().n]) {\n      q.pop();\n      continue;\n    }\n    node temp = q.top();\n    q.pop();\n    vis[temp.n] = 1;\n    for (int i = 0; i < vec[temp.n].size(); i++) {\n      if (vis[vec[temp.n][i].n] &&\n          vec[temp.n][i].d + dist[vec[temp.n][i].n] == dist[temp.n])\n        num[temp.n]++;\n      if (vis[vec[temp.n][i].n] &&\n          dist[vec[temp.n][i].n] == temp.d + vec[temp.n][i].d) {\n        num[vec[temp.n][i].n]++;\n      }\n      if (!vis[vec[temp.n][i].n] &&\n          dist[vec[temp.n][i].n] > temp.d + vec[temp.n][i].d) {\n        dist[vec[temp.n][i].n] = temp.d + vec[temp.n][i].d;\n        q.push(node(vec[temp.n][i].n, dist[vec[temp.n][i].n]));\n      }\n    }\n  }\n  return;\n}\nlong long train[maxn + 5];\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int m, k;\n  cin >> n >> m >> k;\n  for (int i = 1; i <= m; i++) {\n    int u, v, d;\n    cin >> u >> v >> d;\n    vec[u].push_back(node(v, d, 0));\n    vec[v].push_back(node(u, d, 0));\n  }\n  memset(train, 0x3f, sizeof(train));\n  for (int i = 1; i <= k; i++) {\n    long long v, d;\n    cin >> v >> d;\n    if (train[v] != inf) ans++;\n    train[v] = min(train[v], d);\n  }\n  for (int i = 1; i <= n; i++) {\n    if (train[i] != inf) {\n      vec[1].push_back(node(i, train[i], 1));\n      vec[i].push_back(node(1, train[i], 1));\n    }\n  }\n  djs(1);\n  for (int i = 2; i <= n; i++) {\n    if (train[i] != inf) {\n      if (train[i] > dist[i])\n        ans++;\n      else if (train[i] == dist[i] && num[i] >= 2)\n        ans++;\n    }\n  }\n  cout << ans << endl;\n  return 0;\n}\n"], "original_code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 100001;\nconst long long MAX = 123456897213124;\nint n, m, k, ans;\nvector<pair<int, long long> > a[N];\npriority_queue<pair<long long, int> > q;\nbool Visited[N];\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin >> n >> m >> k;\n  for (int i = 1; i <= m; i++) {\n    int u, v;\n    long long x;\n    cin >> u >> v >> x;\n    a[u].push_back(make_pair(v, x));\n    a[v].push_back(make_pair(u, x));\n  }\n  for (int i = 1; i <= k; i++) {\n    int u;\n    long long x;\n    cin >> u >> x;\n    q.push(make_pair(-x, u - N));\n  }\n  q.push(make_pair(0, 1));\n  while (!q.empty()) {\n    pair<long long, int> u = q.top();\n    q.pop();\n    if (u.second < 0) {\n      u.second += N;\n      if (Visited[u.second]) ans++;\n    }\n    if (Visited[u.second]) continue;\n    Visited[u.second] = 1;\n    for (int i = 0; i < (int)a[u.second].size(); i++)\n      q.push(make_pair(u.first - a[u.second][i].second, a[u.second][i].first));\n  }\n  cout << ans;\n  return 0;\n}\n", "language": "cpp"}, "status": "success", "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 100001;\nconst long long MAX = 123456897213124;\nint n, m, k, ans;\nvector<pair<int, long long> > a[N];\npriority_queue<pair<long long, int> > q;\nbool Visited[N];\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin >> n >> m >> k;\n  for (int i = 1; i <= m; i++) {\n    int u, v;\n    long long x;\n    cin >> u >> v >> x;\n    a[u].push_back(make_pair(v, x));\n    a[v].push_back(make_pair(u, x));\n  }\n  for (int i = 1; i <= k; i++) {\n    int u;\n    long long x;\n    cin >> u >> x;\n    q.push(make_pair(-x, u - N));\n  }\n  q.push(make_pair(0, 1));\n  while (!q.empty()) {\n    pair<long long, int> u = q.top();\n    q.pop();\n    if (u.second < 0) {\n      u.second += N;\n      if (Visited[u.second]) ans++;\n    }\n    if (Visited[u.second]) continue;\n    Visited[u.second] = 1;\n    for (int i = 0; i < (int)a[u.second].size(); i++)\n      q.push(make_pair(u.first - a[u.second][i].second, a[u.second][i].first));\n  }\n  cout << ans;\n  return 0;\n}\n", "pass_ratio": 1.0, "tests_passed": 1, "tests_total": 1, "iterations": 1, "history": [], "model_type": "human", "model_name": "human"}, {"problem": {"problem_id": 515, "question": "Olya loves energy drinks. She loves them so much that her room is full of empty cans from energy drinks.\n\nFormally, her room can be represented as a field of n \u00d7 m cells, each cell of which is empty or littered with cans.\n\nOlya drank a lot of energy drink, so now she can run k meters per second. Each second she chooses one of the four directions (up, down, left or right) and runs from 1 to k meters in this direction. Of course, she can only run through empty cells.\n\nNow Olya needs to get from cell (x1, y1) to cell (x2, y2). How many seconds will it take her if she moves optimally?\n\nIt's guaranteed that cells (x1, y1) and (x2, y2) are empty. These cells can coincide.\n\nInput\n\nThe first line contains three integers n, m and k (1 \u2264 n, m, k \u2264 1000) \u2014 the sizes of the room and Olya's speed.\n\nThen n lines follow containing m characters each, the i-th of them contains on j-th position \"#\", if the cell (i, j) is littered with cans, and \".\" otherwise.\n\nThe last line contains four integers x1, y1, x2, y2 (1 \u2264 x1, x2 \u2264 n, 1 \u2264 y1, y2 \u2264 m) \u2014 the coordinates of the first and the last cells.\n\nOutput\n\nPrint a single integer \u2014 the minimum time it will take Olya to get from (x1, y1) to (x2, y2).\n\nIf it's impossible to get from (x1, y1) to (x2, y2), print -1.\n\nExamples\n\nInput\n\n3 4 4\n....\n###.\n....\n1 1 3 1\n\n\nOutput\n\n3\n\nInput\n\n3 4 1\n....\n###.\n....\n1 1 3 1\n\n\nOutput\n\n8\n\nInput\n\n2 2 1\n.#\n#.\n1 1 2 2\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample Olya should run 3 meters to the right in the first second, 2 meters down in the second second and 3 meters to the left in the third second.\n\nIn second sample Olya should run to the right for 3 seconds, then down for 2 seconds and then to the left for 3 seconds.\n\nOlya does not recommend drinking energy drinks and generally believes that this is bad.", "tests": [{"stdin": "3 4 4\n....\n###.\n....\n1 1 3 1\n", "stdout": "3 4 4\n....\n###.\n....\n1 1 3 1\n"}, {"stdin": "2 2 1\n.#\n#.\n1 1 2 2\n", "stdout": "2 2 1\n.#\n#.\n1 1 2 2\n"}, {"stdin": "3 4 1\n....\n###.\n....\n1 1 3 1\n", "stdout": "3 4 1\n....\n###.\n....\n1 1 3 1\n"}, {"stdin": "4 4 4\n...#\n.#.#\n....\n##..\n1 1 3 4\n", "stdout": "2"}, {"stdin": "10 10 1\n##########\n#.........\n#.#######.\n#.#.....#.\n#.#.###.#.\n#.#.#.#.#.\n#.#.#.#.#.\n#.#.#...#.\n#.#.#####.\n#.#.......\n6 6 10 2\n", "stdout": "48"}, {"stdin": "2 5 5\n#####\n##.##\n2 3 2 3\n", "stdout": "0"}, {"stdin": "6 6 100\n....##\n.##.##\n.##.##\n......\n###.##\n###.##\n1 1 4 6\n", "stdout": "2"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n.#####.###\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n##########\n1 1 1 10\n", "stdout": "17"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n.....#....\n3 9 5 1\n", "stdout": "2"}, {"stdin": "10 10 3\n...##..#..\n#.#..#...#\n..#.##.#..\n##..#..#.#\n..#...##..\n.#.#.#....\n#......#..\n.#.####.##\n......#...\n.#.##...##\n4 6 8 1\n", "stdout": "7"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n7 6 1 3\n", "stdout": "2"}, {"stdin": "10 10 3\n##########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n", "stdout": "1\n"}, {"stdin": "4 4 4\n...#\n#.#.\n....\n##..\n1 1 3 4\n", "stdout": "4 4 4\n...#\n#.#.\n....\n##..\n1 1 3 4\n"}, {"stdin": "6 6 100\n....##\n.##.##\n.##.##\n......\n###.##\n###.##\n1 1 4 4\n", "stdout": "6 6 100\n....##\n.##.##\n.##.##\n......\n###.##\n###.##\n1 1 4 4\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n##########\n1 1 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n##########\n1 1 1 10\n"}, {"stdin": "10 10 3\n...##..#..\n#.#..#...#\n..#.##.#..\n##..#..#.#\n..#...##..\n.#.#.#....\n#......#..\n.#.####.##\n...#......\n.#.##...##\n4 6 8 1\n", "stdout": "10 10 3\n...##..#..\n#.#..#...#\n..#.##.#..\n##..#..#.#\n..#...##..\n.#.#.#....\n#......#..\n.#.####.##\n...#......\n.#.##...##\n4 6 8 1\n"}, {"stdin": "10 10 3\n$#########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n", "stdout": "10 10 3\n$#########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n"}, {"stdin": "3 4 2\n....\n###.\n....\n1 1 3 1\n", "stdout": "3 4 2\n....\n###.\n....\n1 1 3 1\n"}, {"stdin": "10 10 2\n##########\n#.........\n#.#######.\n#.#.....#.\n#.#.###.#.\n#.#.#.#.#.\n#.#.#.#.#.\n#.#.#...#.\n#.#.#####.\n#.#.......\n6 6 10 2\n", "stdout": "10 10 2\n##########\n#.........\n#.#######.\n#.#.....#.\n#.#.###.#.\n#.#.#.#.#.\n#.#.#.#.#.\n#.#.#...#.\n#.#.#####.\n#.#.......\n6 6 10 2\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n.#####.###\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n#########$\n1 1 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n.#####.###\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n#########$\n1 1 1 10\n"}, {"stdin": "10 10 3\n...##..#..\n#.#..#...#\n..#.##.#..\n##..#..#.#\n..#...##..\n.#.#.#....\n..#......#\n.#.####.##\n......#...\n.#.##...##\n4 6 8 1\n", "stdout": "10 10 3\n...##..#..\n#.#..#...#\n..#.##.#..\n##..#..#.#\n..#...##..\n.#.#.#....\n..#......#\n.#.####.##\n......#...\n.#.##...##\n4 6 8 1\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..../.....\n..........\n..........\n.....#....\n3 9 5 1\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..../.....\n..........\n..........\n.....#....\n3 9 5 1\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n..........\n..........\n..........\n7 6 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n..........\n..........\n..........\n7 6 1 3\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####.###\n.......###\n##########\n1 1 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####.###\n.......###\n##########\n1 1 1 10\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n..........\n..........\n..........\n7 10 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n..........\n..........\n..........\n7 10 1 3\n"}, {"stdin": "10 10 3\n$#########\n##########\n##########\n###$######\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n", "stdout": "10 10 3\n$#########\n##########\n##########\n###$######\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####.###\n.#.....#.#\n##########\n1 1 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####.###\n.#.....#.#\n##########\n1 1 1 10\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n........./\n..........\n..........\n7 10 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n........./\n..........\n..........\n7 10 1 3\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####.###\n.#.....#.#\n##########\n1 2 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####.###\n.#.....#.#\n##########\n1 2 1 10\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n........./\n..........\n..........\n10 10 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n........./\n..........\n..........\n10 10 1 3\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n......-...\n..........\n........./\n..........\n..........\n10 10 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n......-...\n..........\n........./\n..........\n..........\n10 10 1 3\n"}, {"stdin": "4 4 4\n...#\n.#.#\n....\n##..\n1 1 3 1\n", "stdout": "4 4 4\n...#\n.#.#\n....\n##..\n1 1 3 1\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n.........-\n.....#....\n3 9 5 1\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n.........-\n.....#....\n3 9 5 1\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n......./..\n7 6 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n......./..\n7 6 1 3\n"}, {"stdin": "10 10 3\n##########\n##########\n###$######\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n", "stdout": "10 10 3\n##########\n##########\n###$######\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..###.\n10 6 10 5\n"}, {"stdin": "3 4 4\n....\n.###\n....\n1 1 3 1\n", "stdout": "3 4 4\n....\n.###\n....\n1 1 3 1\n"}, {"stdin": "4 4 6\n...#\n#.#.\n....\n##..\n1 1 3 4\n", "stdout": "4 4 6\n...#\n#.#.\n....\n##..\n1 1 3 4\n"}, {"stdin": "6 6 100\n....##\n/##.##\n.##.##\n......\n###.##\n###.##\n1 1 4 4\n", "stdout": "6 6 100\n....##\n/##.##\n.##.##\n......\n###.##\n###.##\n1 1 4 4\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..../.....\n..........\n..........\n.....#....\n3 7 5 1\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n..........\n..../.....\n..........\n..........\n.....#....\n3 7 5 1\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n......./..\n...-......\n..........\n..........\n..........\n..........\n7 6 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n......./..\n...-......\n..........\n..........\n..........\n..........\n7 6 1 3\n"}, {"stdin": "10 10 3\n$#########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n.#########\n####..###.\n10 6 10 5\n", "stdout": "10 10 3\n$#########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n.#########\n####..###.\n10 6 10 5\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n-#####.###\n.......###\n##########\n1 1 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n-#####.###\n.......###\n##########\n1 1 1 10\n"}, {"stdin": "10 10 3\n$#########\n##########\n##########\n###$######\n##########\n##########\n##########\n######$##.\n#########.\n####..###.\n10 6 10 5\n", "stdout": "10 10 3\n$#########\n##########\n##########\n###$######\n##########\n##########\n##########\n######$##.\n#########.\n####..###.\n10 6 10 5\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n###...#...\n.#####.###\n.#.....#.#\n##########\n1 1 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n###...#...\n.#####.###\n.#.....#.#\n##########\n1 1 1 10\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n........./\n...-......\n..........\n7 10 1 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n...-......\n..........\n........./\n...-......\n..........\n7 10 1 3\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####-###\n.#.....#.#\n##########\n1 2 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n###.#####.\n...#...###\n#####.#.##\n...#...###\n.#####-###\n.#.....#.#\n##########\n1 2 1 10\n"}, {"stdin": "10 10 1000\n..........\n......./..\n..........\n..........\n..........\n...-......\n..........\n........./\n..........\n..........\n10 10 1 3\n", "stdout": "10 10 1000\n..........\n......./..\n..........\n..........\n..........\n...-......\n..........\n........./\n..........\n..........\n10 10 1 3\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n......-...\n..........\n........./\n..........\n..........\n10 10 2 3\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n......-...\n..........\n........./\n..........\n..........\n10 10 2 3\n"}, {"stdin": "10 10 10\n...#......\n##.#.#####\n...#...###\n.#####.###\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n#########$\n1 2 1 10\n", "stdout": "10 10 10\n...#......\n##.#.#####\n...#...###\n.#####.###\n...#...###\n##.#.#####\n...#...###\n.#####.###\n.......###\n#########$\n1 2 1 10\n"}, {"stdin": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n........-.\n..........\n..........\n.........-\n.....#....\n3 9 5 1\n", "stdout": "10 10 1000\n..........\n..........\n..........\n..........\n..........\n........-.\n..........\n..........\n.........-\n.....#....\n3 9 5 1\n"}, {"stdin": "10 10 3\n##########\n##########\n###$######\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..#.##\n10 6 10 5\n", "stdout": "10 10 3\n##########\n##########\n###$######\n##########\n##########\n##########\n##########\n#########.\n#########.\n####..#.##\n10 6 10 5\n"}, {"stdin": "6 6 100\n....##\n/##.##\n.##.##\n...../\n###.##\n###.##\n1 1 4 4\n", "stdout": "6 6 100\n....##\n/##.##\n.##.##\n...../\n###.##\n###.##\n1 1 4 4\n"}, {"stdin": "10 10 3\n$#########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n.#########\n####..###-\n10 6 10 5\n", "stdout": "10 10 3\n$#########\n##########\n##########\n##########\n##########\n##########\n##########\n#########.\n.#########\n####..###-\n10 6 10 5\n"}], "source": "codeforces", "difficulty": 2100, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1e3 + 5;\nconst int INF = 1e9 + 7;\nint cnt[maxn][maxn];\nchar board[maxn][maxn];\nint dx[4] = {1, -1, 0, 0};\nint dy[4] = {0, 0, 1, -1};\nint n, m, k;\npair<int, int> st, ed;\nint bfs() {\n  queue<pair<int, int> > que;\n  que.push(st);\n  cnt[st.first][st.second] = 0;\n  auto check = [](int x, int y) {\n    if (x < 0 || y < 0 || x >= n || y >= m || board[x][y] == '#') return false;\n    return true;\n  };\n  while (!que.empty()) {\n    auto top = que.front();\n    que.pop();\n    for (int j = 0; j < 4; j++) {\n      for (int i = 1; i <= k; i++) {\n        int xx = top.first + i * dx[j], yy = top.second + i * dy[j];\n        if (!check(xx, yy)) break;\n        if (cnt[xx][yy] <= cnt[top.first][top.second] + 1) continue;\n        cnt[xx][yy] = cnt[top.first][top.second] + 1;\n        que.push(make_pair(xx, yy));\n        if (make_pair(xx, yy) == ed) {\n          return cnt[xx][yy];\n        }\n      }\n    }\n  }\n  return -1;\n}\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n  cout.precision(15);\n  cout << fixed;\n  cin >> n >> m >> k;\n  for (int i = 0; i < n; i++) {\n    cin >> board[i];\n    for (int j = 0; j < m; j++) {\n      cnt[i][j] = INF;\n    }\n  }\n  cin >> st.first >> st.second;\n  cin >> ed.first >> ed.second;\n  st.first--;\n  st.second--;\n  ed.first--;\n  ed.second--;\n  if (st == ed) {\n    cout << 0 << '\\n';\n    return 0;\n  }\n  cout << bfs() << '\\n';\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst int NR = 1005;\nvoid Min(int& x, int y) { x = min(x, y); }\nvoid Max(int& x, int y) { x = max(x, y); }\nint read() {\n  int x = 0, f = 1;\n  char ch = getchar();\n  while (ch < '0' || ch > '9') {\n    if (ch == '-') f = -1;\n    ch = getchar();\n  }\n  while (ch >= '0' && ch <= '9') {\n    x = (x << 3) + (x << 1) + (ch ^ 48);\n    ch = getchar();\n  }\n  return x * f;\n}\nint n, m, K;\nbool vis[NR][NR];\nstruct Nd {\n  int x, y;\n};\nNd md(int x, int y) {\n  Nd tmp;\n  tmp.x = x, tmp.y = y;\n  return tmp;\n}\nstruct LB {\n  Nd l[NR][NR], r[NR][NR], u[NR][NR], d[NR][NR];\n  void init() {\n    for (int i = 1; i <= n; i++)\n      for (int j = 1; j <= m; j++) l[i][j] = md(i, j - 1);\n    for (int i = 1; i <= n; i++)\n      for (int j = 1; j <= m; j++) r[i][j] = md(i, j + 1);\n    for (int i = 1; i <= n; i++)\n      for (int j = 1; j <= m; j++) u[i][j] = md(i - 1, j);\n    for (int i = 1; i <= n; i++)\n      for (int j = 1; j <= m; j++) d[i][j] = md(i + 1, j);\n  }\n  void del(int x, int y) {\n    l[r[x][y].x][r[x][y].y] = l[x][y];\n    r[l[x][y].x][l[x][y].y] = r[x][y];\n    u[d[x][y].x][d[x][y].y] = u[x][y];\n    d[u[x][y].x][u[x][y].y] = d[x][y];\n  }\n} T;\nstruct Bjc {\n  Nd l[NR][NR], r[NR][NR], u[NR][NR], d[NR][NR];\n  void init() {\n    for (int i = 1; i <= n; i++)\n      for (int j = 1; j <= m; j++)\n        l[i][j] = r[i][j] = u[i][j] = d[i][j] = md(i, j);\n  }\n  Nd findl(Nd x) {\n    return (x.x == l[x.x][x.y].x && x.y == l[x.x][x.y].y)\n               ? x\n               : l[x.x][x.y] = findl(l[x.x][x.y]);\n  }\n  Nd findr(Nd x) {\n    return (x.x == r[x.x][x.y].x && x.y == r[x.x][x.y].y)\n               ? x\n               : r[x.x][x.y] = findr(r[x.x][x.y]);\n  }\n  Nd findu(Nd x) {\n    return (x.x == u[x.x][x.y].x && x.y == u[x.x][x.y].y)\n               ? x\n               : u[x.x][x.y] = findu(u[x.x][x.y]);\n  }\n  Nd findd(Nd x) {\n    return (x.x == d[x.x][x.y].x && x.y == d[x.x][x.y].y)\n               ? x\n               : d[x.x][x.y] = findd(d[x.x][x.y]);\n  }\n  Nd L(Nd x) { return md(x.x, x.y - 1); }\n  Nd R(Nd x) { return md(x.x, x.y + 1); }\n  Nd U(Nd x) { return md(x.x - 1, x.y); }\n  Nd D(Nd x) { return md(x.x + 1, x.y); }\n  void mergel(Nd x, Nd y) { l[y.x][y.y] = x; }\n  void merger(Nd x, Nd y) { r[y.x][y.y] = x; }\n  void mergeu(Nd x, Nd y) { u[y.x][y.y] = x; }\n  void merged(Nd x, Nd y) { d[y.x][y.y] = x; }\n  void del(Nd x) {\n    if (x.y < m) mergel(x, md(x.x, x.y + 1));\n    if (x.y > 1) merger(x, md(x.x, x.y - 1));\n    if (x.x < n) mergeu(x, md(x.x + 1, x.y));\n    if (x.x > 1) merged(x, md(x.x - 1, x.y));\n  }\n} F;\nchar a[NR][NR];\nint p, q;\nNd S, TT;\nint main() {\n  n = read(), m = read(), K = read();\n  T.init();\n  F.init();\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) scanf(\" %c\", &a[i][j]);\n  p = read(), q = read();\n  S = md(p, q);\n  p = read(), q = read();\n  TT = md(p, q);\n  queue<pair<Nd, int> > q;\n  q.push(make_pair(S, 0));\n  while (!q.empty()) {\n    int x = q.front().first.x, y = q.front().first.y, z = q.front().second;\n    q.pop();\n    if (x == TT.x && y == TT.y) {\n      printf(\"%d\\n\", z);\n      return 0;\n    }\n    for (Nd t = F.L(F.findl(md(x, y)));\n         a[t.x][t.y] != '#' && t.y > 0 && y - t.y <= K; t = T.l[t.x][t.y]) {\n      if (!vis[t.x][t.y]) F.del(md(t.x, t.y));\n      if (!vis[t.x][t.y])\n        vis[t.x][t.y] = 1, q.push(make_pair(md(t.x, t.y), z + 1)),\n        T.del(t.x, t.y);\n    }\n    for (Nd t = F.R(F.findr(md(x, y)));\n         a[t.x][t.y] != '#' && t.y <= m && t.y - y <= K; t = T.r[t.x][t.y]) {\n      if (!vis[t.x][t.y]) F.del(md(t.x, t.y));\n      if (!vis[t.x][t.y])\n        vis[t.x][t.y] = 1, q.push(make_pair(md(t.x, t.y), z + 1)),\n        T.del(t.x, t.y);\n    }\n    for (Nd t = F.U(F.findu(md(x, y)));\n         a[t.x][t.y] != '#' && t.x > 0 && x - t.x <= K; t = T.u[t.x][t.y]) {\n      if (!vis[t.x][t.y]) F.del(md(t.x, t.y));\n      if (!vis[t.x][t.y])\n        vis[t.x][t.y] = 1, q.push(make_pair(md(t.x, t.y), z + 1)),\n        T.del(t.x, t.y);\n    }\n    for (Nd t = F.D(F.findd(md(x, y)));\n         a[t.x][t.y] != '#' && t.x <= n && t.x - x <= K; t = T.d[t.x][t.y]) {\n      if (!vis[t.x][t.y]) F.del(md(t.x, t.y));\n      if (!vis[t.x][t.y])\n        vis[t.x][t.y] = 1, q.push(make_pair(md(t.x, t.y), z + 1)),\n        T.del(t.x, t.y);\n    }\n  }\n  puts(\"-1\");\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst long long mod = 1e9 + 7;\ninline long long ksm(long long a, long long b) {\n  long long ans = 1;\n  for (; b; b >>= 1, a = a * a % mod)\n    if (b & 1) ans = ans * a % mod;\n  return ans;\n}\ntemplate <typename T>\ninline void read(T &x) {\n  x = 0;\n  long long fu = 1;\n  char c = getchar();\n  while (c > 57 || c < 48) {\n    if (c == 45) fu = -1;\n    c = getchar();\n  }\n  while (c <= 57 && c >= 48) {\n    x = (x << 3) + (x << 1) + c - 48;\n    c = getchar();\n  }\n  x *= fu;\n}\ntemplate <typename T, typename... Args>\ninline void read(T &x, Args &...arg) {\n  read(x);\n  read(arg...);\n}\ntemplate <typename T>\ninline void write(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\nlong long n, m, k;\nchar a[2000][2000];\nlong long vis[2000][2000];\nlong long dis[4][2] = {1, 0, -1, 0, 0, 1, 0, -1};\nlong long ok(long long x, long long y) {\n  return x > 0 && x <= n && y > 0 && y <= m && a[x][y] == '.';\n}\nsigned main() {\n  queue<pair<long long, long long> > q;\n  read(n, m, k);\n  for (long long i = 1; i <= n; i++) {\n    for (long long j = 1; j <= m; j++) cin >> a[i][j];\n  }\n  long long x2, y2, x3, y3;\n  read(x2, y2, x3, y3);\n  for (long long i = 1; i <= n; i++)\n    for (long long j = 1; j <= m; j++) vis[i][j] = 1e9;\n  q.push(make_pair(x2, y2));\n  vis[x2][y2] = 0;\n  while (!q.empty()) {\n    auto t = q.front();\n    q.pop();\n    for (long long i = 0; i <= 3; i++) {\n      long long nx = t.first + dis[i][0];\n      long long ny = t.second + dis[i][1];\n      long long cnt = k;\n      while (cnt--) {\n        if (!ok(nx, ny) || vis[nx][ny] < vis[t.first][t.second] + 1) break;\n        if (vis[nx][ny] == 1e9) {\n          q.push(make_pair(nx, ny));\n          vis[nx][ny] = vis[t.first][t.second] + 1;\n          ;\n        }\n        nx = nx + dis[i][0];\n        ny = ny + dis[i][1];\n      }\n    }\n  }\n  if (vis[x3][y3] < 1e9)\n    cout << vis[x3][y3] << endl;\n  else\n    cout << -1 << endl;\n  getchar();\n  getchar();\n  return 0;\n}\n"], "original_code": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long mod = 1e9 + 7;\ninline long long ksm(long long a, long long b) {\n  long long ans = 1;\n  for (; b; b >>= 1, a = a * a % mod)\n    if (b & 1) ans = ans * a % mod;\n  return ans;\n}\ntemplate <typename T>\ninline void read(T &x) {\n  x = 0;\n  long long fu = 1;\n  char c = getchar();\n  while (c > 57 || c < 48) {\n    if (c == 45) fu = -1;\n    c = getchar();\n  }\n  while (c <= 57 && c >= 48) {\n    x = (x << 3) + (x << 1) + c - 48;\n    c = getchar();\n  }\n  x *= fu;\n}\ntemplate <typename T, typename... Args>\ninline void read(T &x, Args &...arg) {\n  read(x);\n  read(arg...);\n}\ntemplate <typename T>\ninline void write(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\nlong long n, m, k;\nchar a[2000][2000];\nlong long vis[2000][2000];\nlong long dis[4][2] = {1, 0, -1, 0, 0, 1, 0, -1};\nlong long ok(long long x, long long y) {\n  return x > 0 && x <= n && y > 0 && y <= m && a[x][y] == '.';\n}\nsigned main() {\n  queue<pair<long long, long long> > q;\n  read(n, m, k);\n  for (long long i = 1; i <= n; i++) {\n    for (long long j = 1; j <= m; j++) cin >> a[i][j];\n  }\n  long long x2, y2, x3, y3;\n  read(x2, y2, x3, y3);\n  for (long long i = 1; i <= n; i++)\n    for (long long j = 1; j <= m; j++) vis[i][j] = 1e9;\n  q.push(make_pair(x2, y2));\n  vis[x2][y2] = 0;\n  while (!q.empty()) {\n    auto t = q.front();\n    q.pop();\n    for (long long i = 0; i <= 3; i++) {\n      long long nx = t.first + dis[i][0];\n      long long ny = t.second + dis[i][1];\n      long long cnt = k;\n      while (cnt--) {\n        if (!ok(nx, ny) || vis[nx][ny] < vis[t.first][t.second] + 1) break;\n        if (vis[nx][ny] == 1e9) {\n          q.push(make_pair(nx, ny));\n          vis[nx][ny] = vis[t.first][t.second] + 1;\n          ;\n        }\n        nx = nx + dis[i][0];\n        ny = ny + dis[i][1];\n      }\n    }\n  }\n  if (vis[x3][y3] < 1e9)\n    cout << vis[x3][y3] << endl;\n  else\n    cout << -1 << endl;\n  getchar();\n  getchar();\n  return 0;\n}\n", "language": "cpp"}, "status": "success", "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst long long mod = 1e9 + 7;\ninline long long ksm(long long a, long long b) {\n  long long ans = 1;\n  for (; b; b >>= 1, a = a * a % mod)\n    if (b & 1) ans = ans * a % mod;\n  return ans;\n}\ntemplate <typename T>\ninline void read(T &x) {\n  x = 0;\n  long long fu = 1;\n  char c = getchar();\n  while (c > 57 || c < 48) {\n    if (c == 45) fu = -1;\n    c = getchar();\n  }\n  while (c <= 57 && c >= 48) {\n    x = (x << 3) + (x << 1) + c - 48;\n    c = getchar();\n  }\n  x *= fu;\n}\ntemplate <typename T, typename... Args>\ninline void read(T &x, Args &...arg) {\n  read(x);\n  read(arg...);\n}\ntemplate <typename T>\ninline void write(T x) {\n  if (x < 0) putchar('-'), x = -x;\n  if (x >= 10) write(x / 10);\n  putchar(x % 10 + '0');\n}\nlong long n, m, k;\nchar a[2000][2000];\nlong long vis[2000][2000];\nlong long dis[4][2] = {1, 0, -1, 0, 0, 1, 0, -1};\nlong long ok(long long x, long long y) {\n  return x > 0 && x <= n && y > 0 && y <= m && a[x][y] == '.';\n}\nsigned main() {\n  queue<pair<long long, long long> > q;\n  read(n, m, k);\n  for (long long i = 1; i <= n; i++) {\n    for (long long j = 1; j <= m; j++) cin >> a[i][j];\n  }\n  long long x2, y2, x3, y3;\n  read(x2, y2, x3, y3);\n  for (long long i = 1; i <= n; i++)\n    for (long long j = 1; j <= m; j++) vis[i][j] = 1e9;\n  q.push(make_pair(x2, y2));\n  vis[x2][y2] = 0;\n  while (!q.empty()) {\n    auto t = q.front();\n    q.pop();\n    for (long long i = 0; i <= 3; i++) {\n      long long nx = t.first + dis[i][0];\n      long long ny = t.second + dis[i][1];\n      long long cnt = k;\n      while (cnt--) {\n        if (!ok(nx, ny) || vis[nx][ny] < vis[t.first][t.second] + 1) break;\n        if (vis[nx][ny] == 1e9) {\n          q.push(make_pair(nx, ny));\n          vis[nx][ny] = vis[t.first][t.second] + 1;\n          ;\n        }\n        nx = nx + dis[i][0];\n        ny = ny + dis[i][1];\n      }\n    }\n  }\n  if (vis[x3][y3] < 1e9)\n    cout << vis[x3][y3] << endl;\n  else\n    cout << -1 << endl;\n  getchar();\n  getchar();\n  return 0;\n}\n", "pass_ratio": 1.0, "tests_passed": 1, "tests_total": 1, "iterations": 1, "history": [], "model_type": "human", "model_name": "human"}, {"problem": {"problem_id": 339, "question": "Arseniy is already grown-up and independent. His mother decided to leave him alone for m days and left on a vacation. She have prepared a lot of food, left some money and washed all Arseniy's clothes. \n\nTen minutes before her leave she realized that it would be also useful to prepare instruction of which particular clothes to wear on each of the days she will be absent. Arseniy's family is a bit weird so all the clothes is enumerated. For example, each of Arseniy's n socks is assigned a unique integer from 1 to n. Thus, the only thing his mother had to do was to write down two integers li and ri for each of the days \u2014 the indices of socks to wear on the day i (obviously, li stands for the left foot and ri for the right). Each sock is painted in one of k colors.\n\nWhen mother already left Arseniy noticed that according to instruction he would wear the socks of different colors on some days. Of course, that is a terrible mistake cause by a rush. Arseniy is a smart boy, and, by some magical coincidence, he posses k jars with the paint \u2014 one for each of k colors.\n\nArseniy wants to repaint some of the socks in such a way, that for each of m days he can follow the mother's instructions and wear the socks of the same color. As he is going to be very busy these days he will have no time to change the colors of any socks so he has to finalize the colors now.\n\nThe new computer game Bota-3 was just realised and Arseniy can't wait to play it. What is the minimum number of socks that need their color to be changed in order to make it possible to follow mother's instructions and wear the socks of the same color during each of m days.\n\nInput\n\nThe first line of input contains three integers n, m and k (2 \u2264 n \u2264 200 000, 0 \u2264 m \u2264 200 000, 1 \u2264 k \u2264 200 000) \u2014 the number of socks, the number of days and the number of available colors respectively.\n\nThe second line contain n integers c1, c2, ..., cn (1 \u2264 ci \u2264 k) \u2014 current colors of Arseniy's socks.\n\nEach of the following m lines contains two integers li and ri (1 \u2264 li, ri \u2264 n, li \u2260 ri) \u2014 indices of socks which Arseniy should wear during the i-th day.\n\nOutput\n\nPrint one integer \u2014 the minimum number of socks that should have their colors changed in order to be able to obey the instructions and not make people laugh from watching the socks of different colors.\n\nExamples\n\nInput\n\n3 2 3\n1 2 3\n1 2\n2 3\n\n\nOutput\n\n2\n\n\nInput\n\n3 2 2\n1 1 2\n1 2\n2 1\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, Arseniy can repaint the first and the third socks to the second color.\n\nIn the second sample, there is no need to change any colors.", "tests": [{"stdin": "3 2 3\n1 2 3\n1 2\n2 3\n", "stdout": "3 2 3\n1 2 3\n1 2\n2 3\n"}, {"stdin": "3 2 2\n1 1 2\n1 2\n2 1\n", "stdout": "3 2 2\n1 1 2\n1 2\n2 1\n"}, {"stdin": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n4 10\n9 3\n5 7\n", "stdout": "2"}, {"stdin": "4 3 2\n1 1 2 2\n1 2\n3 4\n2 3\n", "stdout": "2"}, {"stdin": "4 2 4\n1 2 3 4\n1 2\n3 4\n", "stdout": "2"}, {"stdin": "3 3 3\n1 2 3\n1 2\n2 3\n3 1\n", "stdout": "2"}, {"stdin": "10 3 3\n2 2 1 3 1 2 1 2 2 2\n10 8\n9 6\n8 10\n", "stdout": "0"}, {"stdin": "4 3 4\n1 2 3 4\n1 2\n3 4\n4 1\n", "stdout": "3"}, {"stdin": "10 3 2\n2 1 1 2 1 1 2 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 2 1 1 2 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 2\n1 2\n3 4\n2 3\n", "stdout": "4 0 2\n1 1 2 2\n1 2\n3 4\n2 3\n"}, {"stdin": "4 2 4\n1 2 3 4\n1 3\n3 4\n", "stdout": "4 2 4\n1 2 3 4\n1 3\n3 4\n"}, {"stdin": "4 2 4\n1 2 1 4\n1 3\n3 4\n", "stdout": "4 2 4\n1 2 1 4\n1 3\n3 4\n"}, {"stdin": "3 3 3\n1 4 3\n1 2\n2 3\n3 1\n", "stdout": "3 3 3\n1 4 3\n1 2\n2 3\n3 1\n"}, {"stdin": "10 3 2\n2 1 1 2 1 1 3 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 2 1 1 3 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 1\n1 2\n3 4\n2 3\n", "stdout": "4 0 2\n1 1 2 1\n1 2\n3 4\n2 3\n"}, {"stdin": "10 3 2\n2 1 1 2 0 1 3 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 2 0 1 3 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 1\n1 2\n3 4\n2 1\n", "stdout": "4 0 2\n1 1 2 1\n1 2\n3 4\n2 1\n"}, {"stdin": "4 2 4\n1 0 1 4\n1 3\n3 4\n", "stdout": "4 2 4\n1 0 1 4\n1 3\n3 4\n"}, {"stdin": "10 3 2\n2 1 1 0 0 1 3 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 0 0 1 3 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 2 2 1\n1 2\n3 4\n2 1\n", "stdout": "4 0 2\n1 2 2 1\n1 2\n3 4\n2 1\n"}, {"stdin": "4 0 1\n1 1 2 1\n1 2\n3 4\n2 1\n", "stdout": "4 0 1\n1 1 2 1\n1 2\n3 4\n2 1\n"}, {"stdin": "4 0 1\n1 1 2 1\n0 2\n3 4\n2 1\n", "stdout": "4 0 1\n1 1 2 1\n0 2\n3 4\n2 1\n"}, {"stdin": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n1 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n1 10\n9 3\n5 7\n"}, {"stdin": "4 3 2\n1 1 2 2\n1 4\n3 4\n2 3\n", "stdout": "4 3 2\n1 1 2 2\n1 4\n3 4\n2 3\n"}, {"stdin": "3 3 3\n1 2 3\n1 2\n2 2\n3 1\n", "stdout": "3 3 3\n1 2 3\n1 2\n2 2\n3 1\n"}, {"stdin": "10 1 3\n2 2 1 3 1 2 1 2 2 2\n10 8\n9 6\n8 10\n", "stdout": "10 1 3\n2 2 1 3 1 2 1 2 2 2\n10 8\n9 6\n8 10\n"}, {"stdin": "10 3 2\n2 2 1 2 1 1 2 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 2 1 2 1 1 2 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 2\n1 2\n3 5\n2 3\n", "stdout": "4 0 2\n1 1 2 2\n1 2\n3 5\n2 3\n"}, {"stdin": "4 2 1\n1 2 3 4\n1 3\n3 4\n", "stdout": "4 2 1\n1 2 3 4\n1 3\n3 4\n"}, {"stdin": "10 3 2\n2 1 2 2 1 1 3 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 2 2 1 1 3 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 1 1 1\n1 2\n3 4\n2 3\n", "stdout": "4 0 2\n1 1 1 1\n1 2\n3 4\n2 3\n"}, {"stdin": "10 3 2\n2 1 1 2 0 1 3 1 3 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 2 0 1 3 1 3 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 1\n0 2\n3 4\n2 1\n", "stdout": "4 0 2\n1 1 2 1\n0 2\n3 4\n2 1\n"}, {"stdin": "4 2 4\n2 0 1 4\n1 3\n3 4\n", "stdout": "4 2 4\n2 0 1 4\n1 3\n3 4\n"}, {"stdin": "10 3 2\n2 1 1 0 0 1 2 1 2 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 1 0 0 1 2 1 2 4\n4 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 2 2 2\n1 2\n3 4\n2 1\n", "stdout": "4 0 2\n1 2 2 2\n1 2\n3 4\n2 1\n"}, {"stdin": "4 1 1\n1 1 2 1\n1 2\n3 4\n2 1\n", "stdout": "4 1 1\n1 1 2 1\n1 2\n3 4\n2 1\n"}, {"stdin": "4 0 0\n1 1 2 1\n0 2\n3 4\n2 1\n", "stdout": "4 0 0\n1 1 2 1\n0 2\n3 4\n2 1\n"}, {"stdin": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n1 10\n8 3\n5 7\n", "stdout": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n1 10\n8 3\n5 7\n"}, {"stdin": "4 3 2\n1 1 0 2\n1 4\n3 4\n2 3\n", "stdout": "4 3 2\n1 1 0 2\n1 4\n3 4\n2 3\n"}, {"stdin": "3 3 0\n1 2 3\n1 2\n2 2\n3 1\n", "stdout": "3 3 0\n1 2 3\n1 2\n2 2\n3 1\n"}, {"stdin": "10 1 3\n2 2 1 3 1 2 1 2 2 2\n10 8\n9 6\n3 10\n", "stdout": "10 1 3\n2 2 1 3 1 2 1 2 2 2\n10 8\n9 6\n3 10\n"}, {"stdin": "10 3 2\n2 2 1 2 1 1 2 1 2 4\n4 10\n9 3\n9 7\n", "stdout": "10 3 2\n2 2 1 2 1 1 2 1 2 4\n4 10\n9 3\n9 7\n"}, {"stdin": "4 0 2\n1 1 3 2\n1 2\n3 5\n2 3\n", "stdout": "4 0 2\n1 1 3 2\n1 2\n3 5\n2 3\n"}, {"stdin": "10 3 2\n2 1 2 2 1 1 3 1 2 4\n1 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 2 2 1 1 3 1 2 4\n1 10\n9 3\n5 7\n"}, {"stdin": "4 0 2\n1 2 1 1\n1 2\n3 4\n2 3\n", "stdout": "4 0 2\n1 2 1 1\n1 2\n3 4\n2 3\n"}, {"stdin": "10 3 2\n2 1 2 2 0 1 3 1 3 4\n4 10\n9 3\n5 7\n", "stdout": "10 3 2\n2 1 2 2 0 1 3 1 3 4\n4 10\n9 3\n5 7\n"}, {"stdin": "10 3 2\n2 1 1 0 0 1 2 1 2 4\n4 10\n9 3\n2 7\n", "stdout": "10 3 2\n2 1 1 0 0 1 2 1 2 4\n4 10\n9 3\n2 7\n"}, {"stdin": "4 0 2\n1 1 2 2\n1 2\n3 4\n2 1\n", "stdout": "4 0 2\n1 1 2 2\n1 2\n3 4\n2 1\n"}, {"stdin": "4 0 1\n1 1 2 1\n1 2\n3 4\n3 1\n", "stdout": "4 0 1\n1 1 2 1\n1 2\n3 4\n3 1\n"}, {"stdin": "4 0 0\n1 1 2 1\n1 2\n3 4\n2 1\n", "stdout": "4 0 0\n1 1 2 1\n1 2\n3 4\n2 1\n"}, {"stdin": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n1 10\n8 2\n5 7\n", "stdout": "10 3 2\n2 1 1 2 1 1 2 1 2 2\n1 10\n8 2\n5 7\n"}, {"stdin": "4 3 2\n1 1 0 1\n1 4\n3 4\n2 3\n", "stdout": "4 3 2\n1 1 0 1\n1 4\n3 4\n2 3\n"}, {"stdin": "3 3 0\n1 2 1\n1 2\n2 2\n3 1\n", "stdout": "3 3 0\n1 2 1\n1 2\n2 2\n3 1\n"}, {"stdin": "10 1 3\n2 2 1 3 1 2 1 2 3 2\n10 8\n9 6\n3 10\n", "stdout": "10 1 3\n2 2 1 3 1 2 1 2 3 2\n10 8\n9 6\n3 10\n"}, {"stdin": "10 3 2\n2 2 1 2 2 1 2 1 2 4\n4 10\n9 3\n9 7\n", "stdout": "10 3 2\n2 2 1 2 2 1 2 1 2 4\n4 10\n9 3\n9 7\n"}, {"stdin": "4 0 2\n1 1 1 2\n1 2\n3 5\n2 3\n", "stdout": "4 0 2\n1 1 1 2\n1 2\n3 5\n2 3\n"}, {"stdin": "4 0 2\n1 2 1 1\n1 2\n3 4\n2 6\n", "stdout": "4 0 2\n1 2 1 1\n1 2\n3 4\n2 6\n"}, {"stdin": "10 3 2\n2 1 2 2 0 1 3 1 3 4\n4 10\n9 1\n5 7\n", "stdout": "10 3 2\n2 1 2 2 0 1 3 1 3 4\n4 10\n9 1\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 2\n1 2\n3 4\n3 1\n", "stdout": "4 0 2\n1 1 2 2\n1 2\n3 4\n3 1\n"}, {"stdin": "4 0 1\n1 1 2 0\n1 2\n3 4\n3 1\n", "stdout": "4 0 1\n1 1 2 0\n1 2\n3 4\n3 1\n"}, {"stdin": "10 3 2\n2 1 2 2 1 1 2 1 2 2\n1 10\n8 2\n5 7\n", "stdout": "10 3 2\n2 1 2 2 1 1 2 1 2 2\n1 10\n8 2\n5 7\n"}, {"stdin": "4 3 4\n1 1 0 1\n1 4\n3 4\n2 3\n", "stdout": "4 3 4\n1 1 0 1\n1 4\n3 4\n2 3\n"}, {"stdin": "3 3 0\n1 2 1\n1 2\n2 1\n3 1\n", "stdout": "3 3 0\n1 2 1\n1 2\n2 1\n3 1\n"}, {"stdin": "10 1 3\n2 2 1 0 1 2 1 2 3 2\n10 8\n9 6\n3 10\n", "stdout": "10 1 3\n2 2 1 0 1 2 1 2 3 2\n10 8\n9 6\n3 10\n"}, {"stdin": "10 3 2\n2 2 1 2 2 1 2 1 2 4\n4 10\n9 3\n1 7\n", "stdout": "10 3 2\n2 2 1 2 2 1 2 1 2 4\n4 10\n9 3\n1 7\n"}, {"stdin": "4 0 2\n0 1 1 2\n1 2\n3 5\n2 3\n", "stdout": "4 0 2\n0 1 1 2\n1 2\n3 5\n2 3\n"}, {"stdin": "10 3 2\n2 1 2 2 0 1 3 1 5 4\n4 10\n9 1\n5 7\n", "stdout": "10 3 2\n2 1 2 2 0 1 3 1 5 4\n4 10\n9 1\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 2\n1 2\n3 4\n6 1\n", "stdout": "4 0 2\n1 1 2 2\n1 2\n3 4\n6 1\n"}, {"stdin": "4 0 1\n1 1 4 0\n1 2\n3 4\n3 1\n", "stdout": "4 0 1\n1 1 4 0\n1 2\n3 4\n3 1\n"}, {"stdin": "10 3 2\n2 0 2 2 1 1 2 1 2 2\n1 10\n8 2\n5 7\n", "stdout": "10 3 2\n2 0 2 2 1 1 2 1 2 2\n1 10\n8 2\n5 7\n"}, {"stdin": "3 1 0\n1 2 1\n1 2\n2 1\n3 1\n", "stdout": "3 1 0\n1 2 1\n1 2\n2 1\n3 1\n"}, {"stdin": "10 3 4\n2 2 1 2 2 1 2 1 2 4\n4 10\n9 3\n1 7\n", "stdout": "10 3 4\n2 2 1 2 2 1 2 1 2 4\n4 10\n9 3\n1 7\n"}, {"stdin": "4 0 2\n0 1 2 2\n1 2\n3 5\n2 3\n", "stdout": "4 0 2\n0 1 2 2\n1 2\n3 5\n2 3\n"}, {"stdin": "10 0 2\n2 1 2 2 0 1 3 1 5 4\n4 10\n9 1\n5 7\n", "stdout": "10 0 2\n2 1 2 2 0 1 3 1 5 4\n4 10\n9 1\n5 7\n"}, {"stdin": "4 0 2\n1 1 2 2\n1 2\n1 4\n6 1\n", "stdout": "4 0 2\n1 1 2 2\n1 2\n1 4\n6 1\n"}, {"stdin": "4 0 1\n1 1 4 -1\n1 2\n3 4\n3 1\n", "stdout": "4 0 1\n1 1 4 -1\n1 2\n3 4\n3 1\n"}, {"stdin": "3 1 0\n1 2 1\n1 2\n2 1\n6 1\n", "stdout": "3 1 0\n1 2 1\n1 2\n2 1\n6 1\n"}], "source": "codeforces", "difficulty": 1600, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 200050;\nint n, m, k, mx;\nint a[maxn], ans;\nint l, r, fa[maxn], siz[maxn];\nvector<int> G[maxn];\nmap<int, int> mp;\nint f(int x) { return fa[x] == x ? x : fa[x] = f(fa[x]); }\nint main() {\n  scanf(\"%d%d%d\", &n, &m, &k);\n  for (int i = 1; i <= n; ++i) scanf(\"%d\", &a[i]), fa[i] = i;\n  for (int i = 1; i <= m; ++i) {\n    scanf(\"%d%d\", &l, &r);\n    if (f(l) != f(r)) fa[f(l)] = f(r);\n  }\n  for (int i = 1; i <= n; ++i) siz[f(i)]++, G[f(i)].push_back(a[i]);\n  for (int i = 1; i <= n; ++i)\n    if (siz[i]) {\n      mp.clear();\n      mx = 0;\n      for (int j = 0; j <= G[i].size() - 1; ++j)\n        mp[G[i][j]]++, mx = max(mx, mp[G[i][j]]);\n      ans += siz[i] - mx;\n    }\n  printf(\"%d\", ans);\n  return 0;\n}\n", "#include <bits/stdc++.h>\nint sum;\nint num;\nint clor[200010];\nint numclor[200010];\nint cao[200010];\nbool use[200010];\nstruct node {\n  int pre, e;\n} v[400010];\nint last[200010] = {0};\nint gan = 0;\nvoid dfs(int id) {\n  use[id] = false;\n  num++;\n  int now = last[id];\n  if (cao[clor[id]] != gan) {\n    cao[clor[id]] = gan;\n    numclor[clor[id]] = 1;\n  } else {\n    numclor[clor[id]]++;\n  }\n  if (numclor[clor[id]] > sum) sum = numclor[clor[id]];\n  while (now) {\n    if (use[v[now].e]) dfs(v[now].e);\n    now = v[now].pre;\n  }\n}\nint main() {\n  int n, m, k;\n  scanf(\"%d %d %d\", &n, &m, &k);\n  for (int i = 1; i <= n; i++) {\n    scanf(\"%d\", &clor[i]);\n    last[i] = 0;\n  }\n  int a, b;\n  for (int i = 1; i <= m; i++) {\n    scanf(\"%d %d\", &a, &b);\n    use[a] = true;\n    use[b] = true;\n    v[i * 2 - 1].e = b;\n    v[i * 2 - 1].pre = last[a];\n    last[a] = i * 2 - 1;\n    v[i * 2].e = a;\n    v[i * 2].pre = last[b];\n    last[b] = i * 2;\n  }\n  int res = 0;\n  memset(cao, 0, sizeof(cao));\n  for (int i = 1; i <= n; i++) {\n    if (use[i]) {\n      gan++;\n      num = 0, sum = 0;\n      dfs(i);\n      res += num - sum;\n    }\n  }\n  printf(\"%d\", res);\n  scanf(\"%d\", &n);\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nint color[200010];\nvector<int> save[200010];\nint mark[200010];\nmap<long long, long long> mark_color;\nint main() {\n  int n, m, k, cnt = 0;\n  scanf(\"%d %d %d\", &n, &m, &k);\n  memset(mark, 0, sizeof(mark));\n  for (int i = (1); i < (n + 1); i++) scanf(\"%d\", &color[i]);\n  for (int ca = (0); ca < (m); ca++) {\n    int l, r;\n    scanf(\"%d %d\", &l, &r);\n    save[min(l, r)].push_back(max(l, r));\n    save[max(l, r)].push_back(min(l, r));\n  }\n  long long ans = 0;\n  for (int i = (1); i < (n + 1); i++) {\n    if (mark[i]) continue;\n    mark_color.clear();\n    queue<int> Q;\n    Q.push(i);\n    mark_color[color[i]]++;\n    while (!Q.empty()) {\n      int now = Q.front();\n      Q.pop();\n      int size = save[now].size();\n      mark[now] = 1;\n      for (int j = (0); j < (size); j++) {\n        int iterm = save[now][j];\n        if (mark[iterm]) continue;\n        mark_color[color[iterm]]++;\n        mark[iterm] = 1;\n        Q.push(iterm);\n      }\n    }\n    long long temp = 0;\n    long long maxnum = 0;\n    for (auto it = mark_color.begin(); it != mark_color.end(); it++) {\n      maxnum = max(maxnum, it->second);\n      temp += it->second;\n    }\n    ans += (temp - maxnum);\n  }\n  printf(\"%lld\\n\", ans);\n  return 0;\n}\n"], "original_code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 200050;\nint n, m, k, mx;\nint a[maxn], ans;\nint l, r, fa[maxn], siz[maxn];\nvector<int> G[maxn];\nmap<int, int> mp;\nint f(int x) { return fa[x] == x ? x : fa[x] = f(fa[x]); }\nint main() {\n  scanf(\"%d%d%d\", &n, &m, &k);\n  for (int i = 1; i <= n; ++i) scanf(\"%d\", &a[i]), fa[i] = i;\n  for (int i = 1; i <= m; ++i) {\n    scanf(\"%d%d\", &l, &r);\n    if (f(l) != f(r)) fa[f(l)] = f(r);\n  }\n  for (int i = 1; i <= n; ++i) siz[f(i)]++, G[f(i)].push_back(a[i]);\n  for (int i = 1; i <= n; ++i)\n    if (siz[i]) {\n      mp.clear();\n      mx = 0;\n      for (int j = 0; j <= G[i].size() - 1; ++j)\n        mp[G[i][j]]++, mx = max(mx, mp[G[i][j]]);\n      ans += siz[i] - mx;\n    }\n  printf(\"%d\", ans);\n  return 0;\n}\n", "language": "cpp"}, "status": "success", "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 200050;\nint n, m, k, mx;\nint a[maxn], ans;\nint l, r, fa[maxn], siz[maxn];\nvector<int> G[maxn];\nmap<int, int> mp;\nint f(int x) { return fa[x] == x ? x : fa[x] = f(fa[x]); }\nint main() {\n  scanf(\"%d%d%d\", &n, &m, &k);\n  for (int i = 1; i <= n; ++i) scanf(\"%d\", &a[i]), fa[i] = i;\n  for (int i = 1; i <= m; ++i) {\n    scanf(\"%d%d\", &l, &r);\n    if (f(l) != f(r)) fa[f(l)] = f(r);\n  }\n  for (int i = 1; i <= n; ++i) siz[f(i)]++, G[f(i)].push_back(a[i]);\n  for (int i = 1; i <= n; ++i)\n    if (siz[i]) {\n      mp.clear();\n      mx = 0;\n      for (int j = 0; j <= G[i].size() - 1; ++j)\n        mp[G[i][j]]++, mx = max(mx, mp[G[i][j]]);\n      ans += siz[i] - mx;\n    }\n  printf(\"%d\", ans);\n  return 0;\n}\n", "pass_ratio": 1.0, "tests_passed": 1, "tests_total": 1, "iterations": 1, "history": [], "model_type": "human", "model_name": "human"}, {"problem": {"problem_id": 528, "question": "Arthur owns a ski resort on a mountain. There are n landing spots on the mountain numbered from 1 to n from the top to the foot of the mountain. The spots are connected with one-directional ski tracks. All tracks go towards the foot of the mountain, so there are no directed cycles formed by the tracks. There are at most two tracks leaving each spot, but many tracks may enter the same spot.\n\nA skier can start skiing from one spot and stop in another spot if there is a sequence of tracks that lead from the starting spot and end in the ending spot. Unfortunately, recently there were many accidents, because the structure of the resort allows a skier to go through dangerous paths, by reaching high speed and endangering himself and the other customers. Here, a path is called dangerous, if it consists of at least two tracks.\n\nArthur wants to secure his customers by closing some of the spots in a way that there are no dangerous paths in the resort. When a spot is closed, all tracks entering and leaving that spot become unusable. \n\nFormally, after closing some of the spots, there should not be a path that consists of two or more tracks.\n\nArthur doesn't want to close too many spots. He will be happy to find any way to close at most 4/7n spots so that the remaining part is safe. Help him find any suitable way to do so.\n\nInput\n\nThe first line contains a single positive integer T \u2014 the number of test cases. T test case description follows.\n\nThe first line of each description contains two integers n and m (1 \u2264 n \u2264 2 \u22c5 10^5) \u2014 the number of landing spots and tracks respectively.\n\nThe following m lines describe the tracks. Each of these lines contains two integers x and y (1 \u2264 x < y \u2264 n) \u2014 indices of the starting and finishing spots for the respective track. It is guaranteed that at most two tracks start at each spot. There may be tracks in which starting and finishing spots both coincide.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 \u22c5 10^5.\n\nOutput\n\nFor each test case, print a single integer k (0 \u2264 k \u2264 4/7n) \u2014 the number of spots to be closed. In the next line, print k distinct integers \u2014 indices of all spots to be closed, in any order.\n\nIf there are several answers, you may output any of them. Note that you don't have to minimize k. It can be shown that a suitable answer always exists.\n\nExample\n\nInput\n\n\n2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n\n\nOutput\n\n\n2\n3 4 \n4\n4 5 6 7 \n\nNote\n\nIn the first sample case, closing any two spots is suitable.\n\nIn the second sample case, closing only the spot 1 is also suitable.", "tests": [{"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n1 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n1 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 3\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 3\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n9 6\n1 2\n1 2\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n9 6\n1 2\n1 2\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 3\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 3\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 3\n1 3\n1 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 3\n1 3\n1 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 2\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 2\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n2 3\n1 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n2 3\n1 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 4\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 4\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n9 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n9 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n1 4\n1 4\n3 4\n9 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n1 4\n1 4\n3 4\n9 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 2\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 2\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n2 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n2 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n1 3\n2 4\n0 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n1 3\n2 4\n0 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 0\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 0\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n9 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n9 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 1\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n12 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n12 6\n1 2\n1 3\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 3\n4 5\n1 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 3\n2 3\n4 5\n1 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 0\n1 2\n1 3\n1 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 0\n1 2\n1 3\n1 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 6\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 6\n3 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n3 4\n1 4\n3 4\n7 6\n1 2\n1 6\n3 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n12 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n12 6\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 5\n2 4\n4 5\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n2 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 5\n2 4\n4 5\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 3\n1 3\n2 4\n2 6\n3 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n3 4\n3 4\n7 6\n1 3\n1 3\n2 4\n2 6\n3 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n2 4\n3 4\n7 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n2 4\n3 4\n7 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 2\n2 4\n4 5\n3 4\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 2\n2 4\n4 5\n3 4\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n10 1\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n10 1\n1 2\n1 3\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n1 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n1 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n2 4\n3 4\n14 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n2 4\n3 4\n14 6\n1 2\n1 3\n1 4\n2 5\n4 6\n3 6\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n10 1\n1 2\n1 3\n2 4\n2 5\n0 6\n3 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n10 1\n1 2\n1 3\n2 4\n2 5\n0 6\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n1 4\n2 5\n4 6\n5 7\n", "stdout": "2\n4 6\n1 2\n1 4\n2 3\n2 4\n1 4\n3 4\n7 6\n1 2\n1 6\n1 4\n2 5\n4 6\n5 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 4\n3 7\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 4\n3 7\n"}, {"stdin": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 4\n3 0\n", "stdout": "2\n4 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 4\n3 0\n"}, {"stdin": "2\n6 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 4\n3 0\n", "stdout": "2\n6 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n2 4\n2 4\n2 5\n4 4\n3 0\n"}, {"stdin": "2\n6 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n0 4\n2 4\n2 5\n4 4\n3 0\n", "stdout": "2\n6 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n0 4\n2 4\n2 5\n4 4\n3 0\n"}, {"stdin": "2\n6 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n0 8\n2 4\n2 5\n4 4\n3 0\n", "stdout": "2\n6 6\n1 2\n1 3\n2 3\n3 4\n1 4\n3 4\n7 1\n1 2\n0 8\n2 4\n2 5\n4 4\n3 0\n"}], "source": "codeforces", "difficulty": 2500, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 100;\nconst long long mod = 998244353;\nvector<int> vec[N];\nvector<int> ans;\nint vis[N];\nint main() {\n  int t, n, m;\n  cin >> t;\n  while (t--) {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n      vec[i].clear();\n      vis[i] = 0;\n    }\n    for (int i = 0; i < m; i++) {\n      int u, v;\n      scanf(\"%d%d\", &u, &v);\n      vec[v].push_back(u);\n    }\n    ans.clear();\n    for (int i = 1; i <= n; i++) {\n      int f = 1;\n      for (int j : vec[i]) {\n        if (!vis[j]) {\n          for (int k : vec[j]) {\n            if (!vis[k]) {\n              vis[i] = 1;\n              ans.push_back(i);\n              f = 0;\n              break;\n            }\n          }\n        }\n        if (!f) break;\n      }\n    }\n    printf(\"%d\\n\", ans.size());\n    for (int i : ans) {\n      printf(\"%d \", i);\n    }\n    puts(\"\");\n  }\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst long long MOD = 1e9 + 7, N = 5e5 + 10;\nconst double PI = acos(-1);\nconst long long LINF = LLONG_MAX;\nvoid test() {\n  long long n, m, x, y;\n  cin >> n >> m;\n  vector<long long> adj[n + 1];\n  vector<long long> cd(n + 1, 0);\n  for (long long i = 0; i < m; i++) {\n    cin >> x >> y;\n    adj[x].push_back(y);\n  }\n  vector<long long> ans;\n  for (long long i = 1; i < n + 1; i++) {\n    long long cur = cd[i];\n    if (cur == 2) {\n      ans.push_back(i);\n      continue;\n    }\n    for (auto s : adj[i]) {\n      cd[s] = max(cd[s], cd[i] + 1);\n    }\n  }\n  cout << ans.size() << \"\\n\";\n  for (auto s : ans) {\n    cout << s << \" \";\n  }\n  cout << \"\\n\";\n}\nint32_t main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  long long tt = 1;\n  cin >> tt;\n  for (long long i = 0; i < tt; i++) test();\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nvoid solve() {\n  int n, m, ans = 0, x, y;\n  cin >> n >> m;\n  vector<int> inc[n + 1];\n  int assigned[n + 1];\n  for (int i = 1; i <= n; ++i) inc[i].clear();\n  while (m--) {\n    cin >> x >> y;\n    inc[y].push_back(x);\n  }\n  for (int i = 1; i <= n; ++i) {\n    assigned[i] = 0;\n    for (int j : inc[i]) {\n      if (assigned[j] == 1) {\n        assigned[i] = 2;\n        ++ans;\n        break;\n      }\n      if (assigned[j] == 0) assigned[i] = 1;\n    }\n  }\n  cout << ans << \"\\n\";\n  for (int i = 1; i <= n; ++i)\n    if (assigned[i] == 2) cout << i << \" \";\n  cout << \"\\n\";\n}\nint main() {\n  ios_base::sync_with_stdio(0);\n  cin.tie(0);\n  int n;\n  cin >> n;\n  while (n--) solve();\n  return 0;\n}\n"], "original_code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 100;\nconst long long mod = 998244353;\nvector<int> vec[N];\nvector<int> ans;\nint vis[N];\nint main() {\n  int t, n, m;\n  cin >> t;\n  while (t--) {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n      vec[i].clear();\n      vis[i] = 0;\n    }\n    for (int i = 0; i < m; i++) {\n      int u, v;\n      scanf(\"%d%d\", &u, &v);\n      vec[v].push_back(u);\n    }\n    ans.clear();\n    for (int i = 1; i <= n; i++) {\n      int f = 1;\n      for (int j : vec[i]) {\n        if (!vis[j]) {\n          for (int k : vec[j]) {\n            if (!vis[k]) {\n              vis[i] = 1;\n              ans.push_back(i);\n              f = 0;\n              break;\n            }\n          }\n        }\n        if (!f) break;\n      }\n    }\n    printf(\"%d\\n\", ans.size());\n    for (int i : ans) {\n      printf(\"%d \", i);\n    }\n    puts(\"\");\n  }\n  return 0;\n}\n", "language": "cpp"}, "status": "success", "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 2e5 + 100;\nconst long long mod = 998244353;\nvector<int> vec[N];\nvector<int> ans;\nint vis[N];\nint main() {\n  int t, n, m;\n  cin >> t;\n  while (t--) {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; i++) {\n      vec[i].clear();\n      vis[i] = 0;\n    }\n    for (int i = 0; i < m; i++) {\n      int u, v;\n      scanf(\"%d%d\", &u, &v);\n      vec[v].push_back(u);\n    }\n    ans.clear();\n    for (int i = 1; i <= n; i++) {\n      int f = 1;\n      for (int j : vec[i]) {\n        if (!vis[j]) {\n          for (int k : vec[j]) {\n            if (!vis[k]) {\n              vis[i] = 1;\n              ans.push_back(i);\n              f = 0;\n              break;\n            }\n          }\n        }\n        if (!f) break;\n      }\n    }\n    printf(\"%d\\n\", ans.size());\n    for (int i : ans) {\n      printf(\"%d \", i);\n    }\n    puts(\"\");\n  }\n  return 0;\n}\n", "pass_ratio": 1.0, "tests_passed": 1, "tests_total": 1, "iterations": 1, "history": [], "model_type": "human", "model_name": "human"}, {"problem": {"problem_id": 481, "question": "You are given n integers a_1, a_2, ..., a_n, such that for each 1\u2264 i \u2264 n holds i-n\u2264 a_i\u2264 i-1.\n\nFind some nonempty subset of these integers, whose sum is equal to 0. It can be shown that such a subset exists under given constraints. If there are several possible subsets with zero-sum, you can find any of them.\n\nInput\n\nEach test contains multiple test cases. The first line contains the number of test cases t (1 \u2264 t \u2264 10^6). The description of the test cases follows.\n\nThe first line of each test case contains a single integer n (1\u2264 n \u2264 10^6).\n\nThe second line of each test case contains n integers a_1, a_2, ..., a_n (i-n \u2264 a_i \u2264 i-1).\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^6.\n\nOutput\n\nFor each test case, output two lines.\n\nIn the first line, output s (1\u2264 s \u2264 n) \u2014 the number of elements in your subset.\n\nIn the second line, output s integers i_1, i_2, ..., i_s (1\u2264 i_k \u2264 n). All integers have to be pairwise different, and a_{i_1} + a_{i_2} + ... + a_{i_s} has to be equal to 0. If there are several possible subsets with zero-sum, you can find any of them.\n\nExample\n\nInput\n\n\n2\n5\n0 1 2 3 4\n4\n-3 1 1 1\n\n\nOutput\n\n\n1\n1 \n4\n1 4 3 2 \n\nNote\n\nIn the first example, we get sum is a_1 = 0.\n\nIn the second example, we get sum is a_1 + a_4 + a_3 + a_2 = 0.", "tests": [{"stdin": "2\n5\n0 1 2 3 4\n4\n-3 1 1 1\n", "stdout": "2\n5\n0 1 2 3 4\n4\n-3 1 1 1\n"}, {"stdin": "1\n10\n-3 -3 -3 -3 -3 -3 -3 -2 7 7\n", "stdout": "7\n10 3 6 9 2 5 8\n"}, {"stdin": "1\n10\n-9 1 -7 -6 2 2 1 1 5 1\n", "stdout": "3\n10 9 4\n"}, {"stdin": "1\n10\n-9 1 -1 -6 0 -4 4 4 8 2\n", "stdout": "3\n10 8 4\n"}, {"stdin": "1\n10\n-3 -3 -3 -3 0 -3 -3 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 -3 0 -3 -3 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 0 2 1 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 0 2 1 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 -3 0 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 0 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -1 -6 0 -4 3 4 8 2\n", "stdout": "1\n10\n-9 1 -1 -6 0 -4 3 4 8 2\n"}, {"stdin": "1\n10\n-3 0 -3 -3 0 -3 -3 -2 7 7\n", "stdout": "1\n10\n-3 0 -3 -3 0 -3 -3 -2 7 7\n"}, {"stdin": "1\n10\n-5 -3 0 0 0 0 -2 -2 7 7\n", "stdout": "1\n10\n-5 -3 0 0 0 0 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -3 0 1 0 1 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 0 1 0 1 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -3 -4 -2 0 -2 -2 -2 7 0\n", "stdout": "1\n10\n-3 -3 -4 -2 0 -2 -2 -2 7 0\n"}, {"stdin": "1\n10\n-9 1 -7 -6 4 0 2 1 6 1\n", "stdout": "1\n10\n-9 1 -7 -6 4 0 2 1 6 1\n"}, {"stdin": "1\n10\n-1 1 -7 -6 -1 2 1 3 5 1\n", "stdout": "1\n10\n-1 1 -7 -6 -1 2 1 3 5 1\n"}, {"stdin": "1\n10\n-3 0 -6 1 0 -3 -2 -2 1 7\n", "stdout": "1\n10\n-3 0 -6 1 0 -3 -2 -2 1 7\n"}, {"stdin": "1\n10\n-1 -5 -3 -1 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-1 -5 -3 -1 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 0 -6 0 -4 3 4 0 1\n", "stdout": "1\n10\n-9 1 0 -6 0 -4 3 4 0 1\n"}, {"stdin": "1\n10\n-9 1 -7 -6 2 2 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 2 2 2 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 -3 -3 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 -3 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 2 4 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 2 4 2 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 -3 -2 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 -2 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 4 4 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 4 4 2 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 -3 0 0 0 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 0 0 0 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -3 0 0 0 0 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 0 0 0 0 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 0 2 1 2 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 0 2 1 2 5 1\n"}, {"stdin": "1\n10\n-9 1 -7 -6 1 4 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 1 4 2 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 -4 -2 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -4 -2 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -3 -3 1 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 1 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -3 0 0 0 1 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 0 0 0 1 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 -1 2 1 2 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 -1 2 1 2 5 1\n"}, {"stdin": "1\n10\n-3 0 -3 1 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 0 -3 1 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-5 -3 0 0 0 1 -2 -2 7 7\n", "stdout": "1\n10\n-5 -3 0 0 0 1 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -3 -6 -1 2 1 2 5 1\n", "stdout": "1\n10\n-9 1 -3 -6 -1 2 1 2 5 1\n"}, {"stdin": "1\n10\n-9 1 -7 -6 0 4 1 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 0 4 1 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 -3 -1 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 -3 -1 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -3 -4 -2 0 -3 -2 -2 7 0\n", "stdout": "1\n10\n-3 -3 -4 -2 0 -3 -2 -2 7 0\n"}, {"stdin": "1\n10\n-9 1 -7 -6 4 0 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 4 0 2 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 0 0 0 0 -2 -2 8 7\n", "stdout": "1\n10\n-3 -3 0 0 0 0 -2 -2 8 7\n"}, {"stdin": "1\n10\n-9 1 -1 -6 0 -4 3 4 0 2\n", "stdout": "1\n10\n-9 1 -1 -6 0 -4 3 4 0 2\n"}, {"stdin": "1\n10\n-9 1 -7 -6 1 2 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 1 2 2 1 5 1\n"}, {"stdin": "1\n10\n-9 1 -7 -6 -1 2 1 3 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 -1 2 1 3 5 1\n"}, {"stdin": "1\n10\n-3 0 -6 1 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-3 0 -6 1 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -3 -6 -1 3 1 2 5 1\n", "stdout": "1\n10\n-9 1 -3 -6 -1 3 1 2 5 1\n"}, {"stdin": "1\n10\n-5 -3 0 0 0 0 -2 -2 3 7\n", "stdout": "1\n10\n-5 -3 0 0 0 0 -2 -2 3 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 0 4 2 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 0 4 2 1 5 1\n"}, {"stdin": "1\n10\n-1 -3 -3 -1 0 -3 -2 -2 7 7\n", "stdout": "1\n10\n-1 -3 -3 -1 0 -3 -2 -2 7 7\n"}, {"stdin": "1\n10\n-3 -2 0 0 0 0 -2 -2 8 7\n", "stdout": "1\n10\n-3 -2 0 0 0 0 -2 -2 8 7\n"}, {"stdin": "1\n10\n-9 1 0 -6 0 -4 3 4 0 2\n", "stdout": "1\n10\n-9 1 0 -6 0 -4 3 4 0 2\n"}, {"stdin": "1\n10\n-9 1 -7 -6 1 2 4 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 1 2 4 1 5 1\n"}, {"stdin": "1\n10\n-3 -3 0 1 0 0 -2 -2 7 7\n", "stdout": "1\n10\n-3 -3 0 1 0 0 -2 -2 7 7\n"}, {"stdin": "1\n10\n-9 1 -3 -6 -1 0 1 2 5 1\n", "stdout": "1\n10\n-9 1 -3 -6 -1 0 1 2 5 1\n"}, {"stdin": "1\n10\n-3 -2 0 -1 0 0 -2 -2 8 7\n", "stdout": "1\n10\n-3 -2 0 -1 0 0 -2 -2 8 7\n"}, {"stdin": "1\n10\n-9 1 -7 -6 1 2 3 1 5 1\n", "stdout": "1\n10\n-9 1 -7 -6 1 2 3 1 5 1\n"}, {"stdin": "1\n10\n-1 1 -7 -6 -1 2 1 3 5 2\n", "stdout": "1\n10\n-1 1 -7 -6 -1 2 1 3 5 2\n"}, {"stdin": "1\n10\n-3 0 -6 1 0 -3 -2 -2 0 7\n", "stdout": "1\n10\n-3 0 -6 1 0 -3 -2 -2 0 7\n"}, {"stdin": "1\n10\n-1 -5 -3 -1 0 -3 -2 -2 7 6\n", "stdout": "1\n10\n-1 -5 -3 -1 0 -3 -2 -2 7 6\n"}], "source": "codeforces", "difficulty": 2700, "human_solutions": ["#include <bits/stdc++.h>\nusing namespace std;\nint const oo = 1000000007, e5 = 100007, e6 = 1000007;\nint N;\nint edge[e6];\nbool check[e6];\nvector<int> loops;\nvoid __init__() {\n  for (int i = 1; i <= int(N); i++) {\n    check[i] = 0;\n  }\n  loops.erase((loops).begin(), (loops).end());\n}\nint findLoop(int node) {\n  int next;\n  check[node] = 1;\n  next = edge[node];\n  if (check[next] == 1) return next;\n  return findLoop(next);\n}\nvoid printLoop(int loopElement) {\n  int firstElement = loopElement;\n  loops.push_back(loopElement);\n  loopElement = edge[loopElement];\n  while (loopElement != firstElement) {\n    loops.push_back(loopElement);\n    loopElement = edge[loopElement];\n  }\n  cout << loops.size() << \"\\n\";\n  for (int i = 0; i < int(loops.size()); i++) {\n    cout << loops[i] << \" \";\n  }\n  cout << \"\\n\";\n}\nvoid runTest() {\n  int a;\n  int loopElement;\n  cin >> N;\n  __init__();\n  for (int i = 1; i <= int(N); i++) {\n    cin >> a;\n    edge[i] = i - a;\n  }\n  for (int i = 1; i <= int(N); i++) {\n    loopElement = findLoop(i);\n    if (loopElement != 0) break;\n  }\n  printLoop(loopElement);\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(0);\n  int T;\n  cin >> T;\n  while (T--) {\n    runTest();\n  }\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000005;\nconst long long Mod = 1e9 + 7;\nint t, n, a[maxn];\nvector<int> g[maxn];\nint v[maxn];\nvector<int> ans;\nint main() {\n  scanf(\"%d\", &t);\n  while (t--) {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n      scanf(\"%d\", &a[i]);\n      a[i] = i - a[i];\n    }\n    for (int i = 1; i <= n; i++) {\n      v[i] = 0;\n    }\n    int now = 1;\n    do {\n      v[now] = 1;\n      now = a[now];\n    } while (v[now] == 0);\n    int u = now;\n    ans.clear();\n    do {\n      ans.push_back(u);\n      u = a[u];\n    } while (u != now);\n    printf(\"%d\\n\", ans.size());\n    for (auto x : ans) printf(\"%d \", x);\n    puts(\"\");\n  }\n  return 0;\n}\n", "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e6 + 100;\nint t, n, ans, a[N];\nbool mark[N];\nvoid dfs(int v = 0) {\n  if (~ans) return;\n  mark[v] = true;\n  if (mark[v - a[v]])\n    ans = v - a[v];\n  else\n    dfs(v - a[v]);\n}\nvoid solve() {\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    cin >> a[i];\n    mark[i] = false;\n  }\n  ans = -1;\n  dfs();\n  int x = ans;\n  vector<int> vec = {ans};\n  while (true) {\n    x = x - a[x];\n    if (x == ans) break;\n    vec.push_back(x);\n  }\n  cout << vec.size() << '\\n';\n  for (int x : vec) cout << ++x << ' ';\n  cout << '\\n';\n}\nint main() {\n  ios::sync_with_stdio(false), cin.tie(0);\n  cin >> t;\n  while (t--) solve();\n}\n"], "original_code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000005;\nconst long long Mod = 1e9 + 7;\nint t, n, a[maxn];\nvector<int> g[maxn];\nint v[maxn];\nvector<int> ans;\nint main() {\n  scanf(\"%d\", &t);\n  while (t--) {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n      scanf(\"%d\", &a[i]);\n      a[i] = i - a[i];\n    }\n    for (int i = 1; i <= n; i++) {\n      v[i] = 0;\n    }\n    int now = 1;\n    do {\n      v[now] = 1;\n      now = a[now];\n    } while (v[now] == 0);\n    int u = now;\n    ans.clear();\n    do {\n      ans.push_back(u);\n      u = a[u];\n    } while (u != now);\n    printf(\"%d\\n\", ans.size());\n    for (auto x : ans) printf(\"%d \", x);\n    puts(\"\");\n  }\n  return 0;\n}\n", "language": "cpp"}, "status": "success", "code": "#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn = 1000005;\nconst long long Mod = 1e9 + 7;\nint t, n, a[maxn];\nvector<int> g[maxn];\nint v[maxn];\nvector<int> ans;\nint main() {\n  scanf(\"%d\", &t);\n  while (t--) {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n      scanf(\"%d\", &a[i]);\n      a[i] = i - a[i];\n    }\n    for (int i = 1; i <= n; i++) {\n      v[i] = 0;\n    }\n    int now = 1;\n    do {\n      v[now] = 1;\n      now = a[now];\n    } while (v[now] == 0);\n    int u = now;\n    ans.clear();\n    do {\n      ans.push_back(u);\n      u = a[u];\n    } while (u != now);\n    printf(\"%d\\n\", ans.size());\n    for (auto x : ans) printf(\"%d \", x);\n    puts(\"\");\n  }\n  return 0;\n}\n", "pass_ratio": 1.0, "tests_passed": 1, "tests_total": 1, "iterations": 1, "history": [], "model_type": "human", "model_name": "human"}]