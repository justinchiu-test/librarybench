============================================== test session starts ==============================================
platform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/celine/Research/librarybench
configfile: pyproject.toml
plugins: anyio-4.9.0, json-report-1.5.0, metadata-3.1.1
collected 17 items

tests.py ............FFF.F                                                                                [100%]

=================================================== FAILURES ====================================================
__________________________________ TestPackageManagerV2.test_version_conflict ___________________________________

self = <tests.TestPackageManagerV2 testMethod=test_version_conflict>

    def test_version_conflict(self):
        """Test that version conflicts are properly detected"""
        self.pm.add_to_registry("A", "1.0", [])
        self.pm.add_to_registry("A", "2.0", [])
        self.pm.add_to_registry("B", "1.0", ["A==1.0"])
        self.pm.add_to_registry("C", "1.0", ["A==2.0"])
    
        # Install the first package
>       self.pm.install("B==1.0")

tests.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <package_manager.PackageManager object at 0x1063de7b0>, requirement = 'B==1.0'

    def install(self, requirement):
        """Install using dependency solver, requirement like 'A>=1.0,<3.0' or 'B==1.0'."""
        env = self._get_current_env()
        if env is None:
            # no env: nothing to do
>           raise Exception("No environment selected")
E           Exception: No environment selected

package_manager.py:158: Exception
______________________________ TestPackageManagerV2.test_version_constraint_solver ______________________________

self = <tests.TestPackageManagerV2 testMethod=test_version_constraint_solver>

    def test_version_constraint_solver(self):
        """Test that the dependency solver can resolve appropriate versions"""
        # Add multiple versions to the registry
        self.pm.add_to_registry("A", "1.0", [])
        self.pm.add_to_registry("A", "1.5", [])
        self.pm.add_to_registry("A", "2.0", [])
        self.pm.add_to_registry("A", "3.0", [])
        self.pm.add_to_registry("B", "1.0", ["A>=1.0,<3.0"])
    
        # Install with constraints
>       self.pm.install("B==1.0")

tests.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <package_manager.PackageManager object at 0x1063de350>, requirement = 'B==1.0'

    def install(self, requirement):
        """Install using dependency solver, requirement like 'A>=1.0,<3.0' or 'B==1.0'."""
        env = self._get_current_env()
        if env is None:
            # no env: nothing to do
>           raise Exception("No environment selected")
E           Exception: No environment selected

package_manager.py:158: Exception
___________________________________ TestPackageManagerV2.test_version_support ___________________________________

self = <tests.TestPackageManagerV2 testMethod=test_version_support>

    def test_version_support(self):
        """Test that packages can be installed with specific versions"""
>       self.pm.install_package("A", "1.0", [])

tests.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
package_manager.py:151: in install_package
    self.install(req)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <package_manager.PackageManager object at 0x10643ed00>, requirement = 'A==1.0'

    def install(self, requirement):
        """Install using dependency solver, requirement like 'A>=1.0,<3.0' or 'B==1.0'."""
        env = self._get_current_env()
        if env is None:
            # no env: nothing to do
>           raise Exception("No environment selected")
E           Exception: No environment selected

package_manager.py:158: Exception
_____________________________________ TestPackageManagerV2.test_why_package _____________________________________

self = <tests.TestPackageManagerV2 testMethod=test_why_package>

    def test_why_package(self):
        """Test finding why a package was installed"""
        # Set up registry with the packages we need
        self.pm.add_to_registry("A", "1.0", ["B==1.0", "C==1.0"])
        self.pm.add_to_registry("B", "1.0", ["D==1.0"])
        self.pm.add_to_registry("C", "1.0", [])
        self.pm.add_to_registry("D", "1.0", [])
    
        # Create a dependency chain
>       self.pm.install("A==1.0")

tests.py:238: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <package_manager.PackageManager object at 0x10625ea50>, requirement = 'A==1.0'

    def install(self, requirement):
        """Install using dependency solver, requirement like 'A>=1.0,<3.0' or 'B==1.0'."""
        env = self._get_current_env()
        if env is None:
            # no env: nothing to do
>           raise Exception("No environment selected")
E           Exception: No environment selected

package_manager.py:158: Exception
-------------------------------------------------- JSON report --------------------------------------------------
report saved to: report.json
============================================ short test summary info ============================================
FAILED tests.py::TestPackageManagerV2::test_version_conflict - Exception: No environment selected
FAILED tests.py::TestPackageManagerV2::test_version_constraint_solver - Exception: No environment selected
FAILED tests.py::TestPackageManagerV2::test_version_support - Exception: No environment selected
FAILED tests.py::TestPackageManagerV2::test_why_package - Exception: No environment selected
========================================= 4 failed, 13 passed in 0.13s ==========================================
