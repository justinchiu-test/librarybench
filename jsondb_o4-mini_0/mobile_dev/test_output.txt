=============================================== test session starts ===============================================
platform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/celine/Research/librarybench
configfile: pyproject.toml
plugins: anyio-4.9.0, json-report-1.5.0, metadata-3.1.1
collected 21 items

test_crypto.py ..                                                                                           [  9%]
test_plugins.py .                                                                                           [ 14%]
test_db.py .......                                                                                          [ 47%]
test_schema.py ..........                                                                                   [ 95%]
test_server.py E                                                                                            [100%]

===================================================== ERRORS ======================================================
________________________________________ ERROR at setup of test_rest_crud _________________________________________

tmp_path = PosixPath('/var/folders/y3/jvd7wbrj6z7b2s97x7yyp_jc0000gn/T/tmpkbx9ja_k')

    @pytest.fixture(scope='module')
    def server(tmp_path):
        key = os.urandom(32)
        db = JournalDB(str(tmp_path), key)
        port = 8001
>       server = db.startRestServer(port)

test_server.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
journaling/db.py:136: in startRestServer
    app = make_app(self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

db = <journaling.db.JournalDB object at 0x106d6d850>

    def make_app(db):
        class RequestHandler(BaseHTTPRequestHandler):
            def _send(self, code, data):
                self.send_response(code)
                self.send_header('Content-Type', 'application/json')
                self.end_headers()
                if data is not None:
                    self.wfile.write(json.dumps(data).encode('utf-8'))
    
            def do_GET(self):
                parsed = urlparse(self.path)
                parts = parsed.path.strip('/').split('/')
                if parts[0] == 'entries':
                    if len(parts) == 1:
                        entries = list(db.entries.values())
                        self._send(200, entries)
                    elif len(parts) == 2:
                        eid = parts[1]
                        entry = db.entries.get(eid)
                        if entry:
                            self._send(200, entry)
                        else:
                            self._send(404, {'error': 'Not found'})
                    else:
                        self._send(404, {'error': 'Not found'})
                else:
                    self._send(404, {'error': 'Not found'})
    
            def do_POST(self):
                parsed = urlparse(self.path)
                parts = parsed.path.strip('/').split('/')
                length = int(self.headers.get('Content-Length', 0))
                body = self.rfile.read(length) if length > 0 else b''
                try:
                    data = json.loads(body.decode('utf-8')) if body else None
                except:
                    data = None
                if parts[0] == 'entries':
                    if len(parts) == 1:
                        try:
                            db.upsert(data)
                            self._send(200, {'status': 'ok'})
                        except Exception as e:
                            self._send(400, {'error': str(e)})
                    elif len(parts) == 2 and parts[1] == 'batch':
                        try:
                            db.batchUpsert(data or [])
                            self._send(200, {'status': 'ok'})
                        except Exception as e:
                            self._send(400, {'error': str(e)})
                    else:
                        self._send(404, {'error': 'Not found'})
                else:
                    self._send(404, {'error': 'Not found'})
    
            def do_DELETE(self):
                parsed = urlparse(self.path)
                parts = parsed.path.strip('/').split('/')
                if parts[0] == 'entries' and len(parts) == 2:
                    eid = parts[1]
                    db.delete_by_id(eid)
                    self._send(200, {'status': 'deleted'})
                else:
                    self._send(404, {'error': 'Not found'})
    
            def log_message(self, format, *args):
                return
    
>       server = HTTPServer(('localhost', port), RequestHandler)
E       NameError: name 'port' is not defined

journaling/server.py:73: NameError
--------------------------------------------------- JSON report ---------------------------------------------------
report saved to: report.json
============================================= short test summary info =============================================
ERROR test_server.py::test_rest_crud - NameError: name 'port' is not defined
=========================================== 20 passed, 1 error in 0.10s ===========================================
