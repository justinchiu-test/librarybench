"""
Configuration file for pytest.

This file contains shared fixtures and configuration for the test suite.
"""

import os
import json
import pytest


def pytest_configure(config):
    """Configure pytest before test execution."""
    # Set up any custom test configuration here if needed
    pass


def pytest_sessionfinish(session, exitstatus):
    """Execute after the test session is finished."""
    report_file = os.path.join(os.getcwd(), "report.json")
    
    # Check if report.json exists (generated by pytest-json-report)
    if os.path.exists(report_file):
        try:
            # Read the json report
            with open(report_file, 'r') as f:
                report_data = json.load(f)
            
            # Print a summary of the test results
            summary = report_data.get('summary', {})
            
            print("\n==== TEST RESULTS SUMMARY ====")
            print(f"Total: {summary.get('total', 0)}")
            print(f"Passed: {summary.get('passed', 0)}")
            print(f"Failed: {summary.get('failed', 0)}")
            print(f"Skipped: {summary.get('skipped', 0)}")
            print(f"Errors: {summary.get('error', 0)}")
            print(f"Duration: {summary.get('duration', 0):.2f}s")
            print("=============================\n")
            
            # Optionally process or modify the report data here
            # For example, generate a custom format or extract specific metrics
            
        except Exception as e:
            print(f"Error processing JSON report: {e}")


@pytest.fixture(scope="session")
def test_data_dir():
    """Return the path to the test data directory."""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(base_dir, "tests", "data")


@pytest.fixture
def large_test_dataset(test_data_dir):
    """Return test data for performance tests."""
    # This is a placeholder - in a real implementation, 
    # this could load data from files in the test_data_dir
    return {
        "records": [
            {"id": i, "name": f"Item {i}", "value": i * 10}
            for i in range(1, 1001)
        ]
    }