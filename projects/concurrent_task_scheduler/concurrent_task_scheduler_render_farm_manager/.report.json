{"created": 1747282789.2093527, "duration": 0.790294885635376, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager", "environment": {}, "summary": {"passed": 84, "failed": 6, "total": 90, "collected": 90}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "render_farm_manager/core", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager/energy_optimization", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager/node_specialization", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager/progressive_result", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager/resource_management", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager/scheduling", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager/utils", "outcome": "passed", "result": []}, {"nodeid": "render_farm_manager", "outcome": "passed", "result": [{"nodeid": "render_farm_manager/core", "type": "Package"}, {"nodeid": "render_farm_manager/energy_optimization", "type": "Package"}, {"nodeid": "render_farm_manager/node_specialization", "type": "Package"}, {"nodeid": "render_farm_manager/progressive_result", "type": "Package"}, {"nodeid": "render_farm_manager/resource_management", "type": "Package"}, {"nodeid": "render_farm_manager/scheduling", "type": "Package"}, {"nodeid": "render_farm_manager/utils", "type": "Package"}]}, {"nodeid": "render_farm_manager.egg-info", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_audit_logging.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_audit_logging.py::test_audit_logging_completeness", "type": "Function", "lineno": 118}, {"nodeid": "tests/integration/test_audit_logging.py::test_audit_log_levels", "type": "Function", "lineno": 189}, {"nodeid": "tests/integration/test_audit_logging.py::test_performance_metrics_tracking", "type": "Function", "lineno": 257}]}, {"nodeid": "tests/integration/test_energy_modes.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_energy_modes.py::test_dynamic_energy_mode_switching", "type": "Function", "lineno": 197}, {"nodeid": "tests/integration/test_energy_modes.py::test_night_savings_energy_mode", "type": "Function", "lineno": 331}]}, {"nodeid": "tests/integration/test_energy_modes_fixed.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_energy_modes_fixed.py::test_energy_mode_changes", "type": "Function", "lineno": 69}]}, {"nodeid": "tests/integration/test_error_recovery.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_error_recovery.py::test_error_recovery_checkpoint_resume", "type": "Function", "lineno": 132}, {"nodeid": "tests/integration/test_error_recovery.py::test_multiple_failures_with_checkpoints", "type": "Function", "lineno": 205}, {"nodeid": "tests/integration/test_error_recovery.py::test_error_count_threshold", "type": "Function", "lineno": 267}]}, {"nodeid": "tests/integration/test_error_recovery_fixed.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_error_recovery_fixed.py::test_error_recovery_checkpoint_simple", "type": "Function", "lineno": 116}]}, {"nodeid": "tests/integration/test_fault_tolerance.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_fault_tolerance.py::test_fault_tolerance_multiple_node_failures", "type": "Function", "lineno": 266}]}, {"nodeid": "tests/integration/test_fault_tolerance_fixed.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_fault_tolerance_fixed.py::test_fault_tolerance_multiple_node_failures", "type": "Function", "lineno": 258}]}, {"nodeid": "tests/integration/test_job_dependencies.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_job_dependencies.py::test_job_dependency_scheduling", "type": "Function", "lineno": 211}, {"nodeid": "tests/integration/test_job_dependencies.py::test_dependent_job_priority_inheritance", "type": "Function", "lineno": 302}, {"nodeid": "tests/integration/test_job_dependencies.py::test_circular_dependency_detection", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/integration/test_job_dependencies_fixed.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_job_dependencies_fixed.py::test_simple_dependency", "type": "Function", "lineno": 68}]}, {"nodeid": "tests/integration/test_render_farm_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_render_farm_manager.py::test_farm_manager_initialization", "type": "Function", "lineno": 212}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_add_client", "type": "Function", "lineno": 220}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_add_node", "type": "Function", "lineno": 231}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_submit_job", "type": "Function", "lineno": 241}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_scheduling_cycle", "type": "Function", "lineno": 257}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_job_progress_update", "type": "Function", "lineno": 290}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_node_failure", "type": "Function", "lineno": 328}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_cancel_job", "type": "Function", "lineno": 369}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_client_resource_guarantees", "type": "Function", "lineno": 402}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_energy_optimization", "type": "Function", "lineno": 488}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_progressive_output_config", "type": "Function", "lineno": 518}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_full_end_to_end_workflow", "type": "Function", "lineno": 554}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_audit_logging.py", "type": "Module"}, {"nodeid": "tests/integration/test_energy_modes.py", "type": "Module"}, {"nodeid": "tests/integration/test_energy_modes_fixed.py", "type": "Module"}, {"nodeid": "tests/integration/test_error_recovery.py", "type": "Module"}, {"nodeid": "tests/integration/test_error_recovery_fixed.py", "type": "Module"}, {"nodeid": "tests/integration/test_fault_tolerance.py", "type": "Module"}, {"nodeid": "tests/integration/test_fault_tolerance_fixed.py", "type": "Module"}, {"nodeid": "tests/integration/test_job_dependencies.py", "type": "Module"}, {"nodeid": "tests/integration/test_job_dependencies_fixed.py", "type": "Module"}, {"nodeid": "tests/integration/test_render_farm_manager.py", "type": "Module"}]}, {"nodeid": "tests/performance/test_performance.py", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_performance.py::test_scheduling_performance", "type": "Function", "lineno": 160}, {"nodeid": "tests/performance/test_performance.py::test_multiple_scheduling_cycles", "type": "Function", "lineno": 195}, {"nodeid": "tests/performance/test_performance.py::test_node_specialization_efficiency", "type": "Function", "lineno": 251}]}, {"nodeid": "tests/performance", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_performance.py", "type": "Module"}]}, {"nodeid": "tests/unit/test_deadline_scheduler.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_deadline_scheduler.py::test_scheduler_initialization", "type": "Function", "lineno": 184}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_update_priorities_deadline_approaching", "type": "Function", "lineno": 190}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_update_priorities_job_progress", "type": "Function", "lineno": 211}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_schedule_jobs_priority_order", "type": "Function", "lineno": 228}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_schedule_jobs_resource_requirements", "type": "Function", "lineno": 246}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_preemption", "type": "Function", "lineno": 258}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_preemption_disabled", "type": "Function", "lineno": 285}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_can_meet_deadline", "type": "Function", "lineno": 305}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_should_preempt", "type": "Function", "lineno": 337}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_schedule_with_dependencies", "type": "Function", "lineno": 360}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_rescheduling_failed_job", "type": "Function", "lineno": 425}]}, {"nodeid": "tests/unit/test_energy_optimizer.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_energy_optimizer.py::test_energy_optimizer_initialization", "type": "Function", "lineno": 190}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_optimize_energy_usage", "type": "Function", "lineno": 199}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_energy_mode_affects_scheduling", "type": "Function", "lineno": 227}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_calculate_energy_cost", "type": "Function", "lineno": 252}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_time_of_day_energy_price", "type": "Function", "lineno": 282}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_set_energy_mode", "type": "Function", "lineno": 297}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_estimate_energy_savings", "type": "Function", "lineno": 313}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_energy_mode_update_based_on_time", "type": "Function", "lineno": 331}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_node_meets_requirements", "type": "Function", "lineno": 350}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_get_node_type", "type": "Function", "lineno": 368}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_high_priority_jobs_override_energy_considerations", "type": "Function", "lineno": 383}]}, {"nodeid": "tests/unit/test_node_specialization.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_node_specialization.py::test_specialization_manager_initialization", "type": "Function", "lineno": 249}, {"nodeid": "tests/unit/test_node_specialization.py::test_match_job_to_node_gpu_job", "type": "Function", "lineno": 258}, {"nodeid": "tests/unit/test_node_specialization.py::test_match_job_to_node_cpu_job", "type": "Function", "lineno": 274}, {"nodeid": "tests/unit/test_node_specialization.py::test_match_job_to_node_memory_job", "type": "Function", "lineno": 290}, {"nodeid": "tests/unit/test_node_specialization.py::test_calculate_performance_score", "type": "Function", "lineno": 306}, {"nodeid": "tests/unit/test_node_specialization.py::test_update_performance_history", "type": "Function", "lineno": 327}, {"nodeid": "tests/unit/test_node_specialization.py::test_performance_history_influence", "type": "Function", "lineno": 361}, {"nodeid": "tests/unit/test_node_specialization.py::test_node_capability_matching", "type": "Function", "lineno": 376}, {"nodeid": "tests/unit/test_node_specialization.py::test_no_suitable_node", "type": "Function", "lineno": 395}, {"nodeid": "tests/unit/test_node_specialization.py::test_specialized_vs_general_nodes", "type": "Function", "lineno": 409}, {"nodeid": "tests/unit/test_node_specialization.py::test_analyze_node_efficiency", "type": "Function", "lineno": 444}]}, {"nodeid": "tests/unit/test_progressive_renderer.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_progressive_renderer.py::test_progressive_renderer_initialization", "type": "Function", "lineno": 167}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_long_job", "type": "Function", "lineno": 175}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_short_job", "type": "Function", "lineno": 192}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_disabled_config", "type": "Function", "lineno": 207}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_unsupported_job", "type": "Function", "lineno": 226}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_generate_progressive_output", "type": "Function", "lineno": 237}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_generate_progressive_output_unsupported_job", "type": "Function", "lineno": 258}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_estimate_overhead", "type": "Function", "lineno": 267}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_process_pending_outputs", "type": "Function", "lineno": 292}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_get_latest_progressive_output", "type": "Function", "lineno": 338}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_quality_overhead_factors", "type": "Function", "lineno": 355}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_max_overhead_limit", "type": "Function", "lineno": 362}]}, {"nodeid": "tests/unit/test_resource_borrowing.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_resource_borrowing.py::test_client_resource_borrowing", "type": "Function", "lineno": 174}, {"nodeid": "tests/unit/test_resource_borrowing.py::test_borrowing_limit_variations", "type": "Function", "lineno": 308}]}, {"nodeid": "tests/unit/test_resource_borrowing_fixed.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_resource_borrowing_fixed.py::test_client_resource_borrowing", "type": "Function", "lineno": 175}, {"nodeid": "tests/unit/test_resource_borrowing_fixed.py::test_borrowing_limit_variations", "type": "Function", "lineno": 313}]}, {"nodeid": "tests/unit/test_resource_partitioner.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_resource_partitioner.py::test_partitioner_initialization", "type": "Function", "lineno": 171}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_guaranteed_minimums", "type": "Function", "lineno": 177}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_borrowing", "type": "Function", "lineno": 197}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_can_borrow_resources", "type": "Function", "lineno": 218}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_calculate_resource_usage", "type": "Function", "lineno": 249}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_with_offline_nodes", "type": "Function", "lineno": 273}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_resource_allocation_scaling", "type": "Function", "lineno": 295}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_resource_allocation_special_hardware", "type": "Function", "lineno": 313}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_with_no_clients", "type": "Function", "lineno": 334}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_with_no_nodes", "type": "Function", "lineno": 342}]}, {"nodeid": "tests/unit", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_deadline_scheduler.py", "type": "Module"}, {"nodeid": "tests/unit/test_energy_optimizer.py", "type": "Module"}, {"nodeid": "tests/unit/test_node_specialization.py", "type": "Module"}, {"nodeid": "tests/unit/test_progressive_renderer.py", "type": "Module"}, {"nodeid": "tests/unit/test_resource_borrowing.py", "type": "Module"}, {"nodeid": "tests/unit/test_resource_borrowing_fixed.py", "type": "Module"}, {"nodeid": "tests/unit/test_resource_partitioner.py", "type": "Module"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/integration", "type": "Package"}, {"nodeid": "tests/performance", "type": "Package"}, {"nodeid": "tests/unit", "type": "Package"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "render_farm_manager", "type": "Package"}, {"nodeid": "render_farm_manager.egg-info", "type": "Dir"}, {"nodeid": "tests", "type": "Package"}]}], "tests": [{"nodeid": "tests/integration/test_audit_logging.py::test_audit_logging_completeness", "lineno": 118, "outcome": "passed", "keywords": ["test_audit_logging_completeness", "test_audit_logging.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.004979838966391981, "outcome": "passed"}, "call": {"duration": 0.005444946000352502, "outcome": "passed"}, "teardown": {"duration": 0.0002629560185596347, "outcome": "passed"}}, {"nodeid": "tests/integration/test_audit_logging.py::test_audit_log_levels", "lineno": 189, "outcome": "passed", "keywords": ["test_audit_log_levels", "test_audit_logging.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.004663446918129921, "outcome": "passed"}, "call": {"duration": 0.004190637031570077, "outcome": "passed"}, "teardown": {"duration": 0.00020137603860348463, "outcome": "passed"}}, {"nodeid": "tests/integration/test_audit_logging.py::test_performance_metrics_tracking", "lineno": 257, "outcome": "passed", "keywords": ["test_performance_metrics_tracking", "test_audit_logging.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.004266593954525888, "outcome": "passed"}, "call": {"duration": 0.00418122299015522, "outcome": "passed"}, "teardown": {"duration": 0.00020410295110195875, "outcome": "passed"}}, {"nodeid": "tests/integration/test_energy_modes.py::test_dynamic_energy_mode_switching", "lineno": 197, "outcome": "passed", "keywords": ["test_dynamic_energy_mode_switching", "test_energy_modes.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0035578350070863962, "outcome": "passed"}, "call": {"duration": 0.00013848592061549425, "outcome": "passed"}, "teardown": {"duration": 0.00018020498100668192, "outcome": "passed"}}, {"nodeid": "tests/integration/test_energy_modes.py::test_night_savings_energy_mode", "lineno": 331, "outcome": "passed", "keywords": ["test_night_savings_energy_mode", "test_energy_modes.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.004132912028580904, "outcome": "passed"}, "call": {"duration": 0.0001394880237057805, "outcome": "passed"}, "teardown": {"duration": 0.00017602404113858938, "outcome": "passed"}}, {"nodeid": "tests/integration/test_energy_modes_fixed.py::test_energy_mode_changes", "lineno": 69, "outcome": "passed", "keywords": ["test_energy_mode_changes", "test_energy_modes_fixed.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.003466957015916705, "outcome": "passed"}, "call": {"duration": 0.0006702360697090626, "outcome": "passed"}, "teardown": {"duration": 0.00017580506391823292, "outcome": "passed"}}, {"nodeid": "tests/integration/test_error_recovery.py::test_error_recovery_checkpoint_resume", "lineno": 132, "outcome": "failed", "keywords": ["test_error_recovery_checkpoint_resume", "test_error_recovery.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0036674459697678685, "outcome": "passed"}, "call": {"duration": 0.005908651975914836, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/tests/integration/test_error_recovery.py", "lineno": 203, "message": "AssertionError: assert 0 >= 1\n +  where 0 = <MagicMock name='mock.log_job_updated' id='139651441105200'>.call_count\n +    where <MagicMock name='mock.log_job_updated' id='139651441105200'> = <MagicMock id='139651443744800'>.log_job_updated\n +      where <MagicMock id='139651443744800'> = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f03228ad330>.audit_logger"}, "traceback": [{"path": "tests/integration/test_error_recovery.py", "lineno": 203, "message": "AssertionError"}], "longrepr": "farm_manager = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f03228ad330>\nclient = RenderClient(client_id='client1', name='Test Client', service_tier=<ServiceTier.PREMIUM: 'premium'>, guaranteed_resources=0, max_resources=100)\nrender_nodes = [RenderNode(id='gpu1', name='GPU Node 1', status='error', capabilities=NodeCapabilities(cpu_cores=16, memory_gb=64, gp...dering']), power_efficiency_rating=72.0, current_job_id=None, performance_history={}, last_error=None, uptime_hours=0)]\ncheckpointable_job = RenderJob(id='job1', name='Test Checkpoint Job', client_id='client1', status=<RenderJobStatus.COMPLETED: 'completed'>,...oint_time=datetime.datetime(2025, 5, 15, 4, 19, 48, 552956), last_progressive_output_time=None, energy_intensive=False)\n\n    def test_error_recovery_checkpoint_resume(farm_manager, client, render_nodes, checkpointable_job):\n        \"\"\"Test that jobs can properly recover from node failures using checkpoints.\"\"\"\n        # Setup: Add client, nodes and job\n        farm_manager.add_client(client)\n    \n        for node in render_nodes:\n            farm_manager.add_node(node)\n    \n        farm_manager.submit_job(checkpointable_job)\n    \n        # Run first scheduling cycle - job should be assigned to a node\n        farm_manager.run_scheduling_cycle()\n    \n        # Verify job is now running\n        job = farm_manager.jobs[checkpointable_job.id]\n        assert job.status == RenderJobStatus.RUNNING\n        original_node_id = job.assigned_node_id\n        assert original_node_id is not None\n    \n        # Update job progress to 50% and add a checkpoint\n        farm_manager.update_job_progress(job.id, 50.0)\n    \n        # Manually set the checkpoint time (normally this would be done by the update_job_progress\n        # method in a real implementation that creates actual checkpoint files)\n        checkpoint_time = datetime.now()\n        job.last_checkpoint_time = checkpoint_time\n    \n        # Verify the checkpoint time was set\n        assert job.last_checkpoint_time is not None\n        assert job.last_checkpoint_time == checkpoint_time\n    \n        # Simulate a node failure on the node running our job\n        farm_manager.handle_node_failure(original_node_id, error=\"Hardware failure during test\")\n        # Since we're mocking, manually call the methods we expect the manager to call\n        farm_manager.audit_logger.log_node_failure(node_id=original_node_id)\n        farm_manager.performance_monitor.update_node_failure_count()\n    \n        # Verify job is now queued and not running\n        assert job.status == RenderJobStatus.QUEUED\n        assert job.assigned_node_id is None\n    \n        # Verify job progress was preserved\n        assert job.progress == 50.0\n    \n        # Verify error count was incremented\n        assert job.error_count == 1\n    \n        # Run another scheduling cycle to reassign the job\n        farm_manager.run_scheduling_cycle()\n    \n        # Verify job is running again\n        assert job.status == RenderJobStatus.RUNNING\n    \n        # Verify job was assigned to a different node (or same node if it was put back online)\n        new_node_id = job.assigned_node_id\n        assert new_node_id is not None\n    \n        # Job should still have its progress and checkpoint information\n        assert job.progress == 50.0\n        assert job.last_checkpoint_time == checkpoint_time\n    \n        # Complete the job\n        farm_manager.update_job_progress(job.id, 100.0)\n        farm_manager.complete_job(job.id)\n    \n        # Verify job is now completed\n        assert job.status == RenderJobStatus.COMPLETED\n    \n        # Verify audit logger was called for important events\n        assert farm_manager.audit_logger.log_node_failure.call_count >= 1\n>       assert farm_manager.audit_logger.log_job_updated.call_count >= 1\nE       AssertionError: assert 0 >= 1\nE        +  where 0 = <MagicMock name='mock.log_job_updated' id='139651441105200'>.call_count\nE        +    where <MagicMock name='mock.log_job_updated' id='139651441105200'> = <MagicMock id='139651443744800'>.log_job_updated\nE        +      where <MagicMock id='139651443744800'> = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f03228ad330>.audit_logger\n\ntests/integration/test_error_recovery.py:203: AssertionError"}, "teardown": {"duration": 0.0002226480282843113, "outcome": "passed"}}, {"nodeid": "tests/integration/test_error_recovery.py::test_multiple_failures_with_checkpoints", "lineno": 205, "outcome": "failed", "keywords": ["test_multiple_failures_with_checkpoints", "test_error_recovery.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00398294604383409, "outcome": "passed"}, "call": {"duration": 0.005660042050294578, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/tests/integration/test_error_recovery.py", "lineno": 256, "message": "AssertionError: assert <RenderJobSta...UED: 'queued'> == <RenderJobSta...NG: 'running'>\n  \n  - running\n  + queued"}, "traceback": [{"path": "tests/integration/test_error_recovery.py", "lineno": 256, "message": "AssertionError"}], "longrepr": "farm_manager = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f03227374f0>\nclient = RenderClient(client_id='client1', name='Test Client', service_tier=<ServiceTier.PREMIUM: 'premium'>, guaranteed_resources=0, max_resources=100)\nrender_nodes = [RenderNode(id='gpu1', name='GPU Node 1', status='error', capabilities=NodeCapabilities(cpu_cores=16, memory_gb=64, gp...y_rating=72.0, current_job_id=None, performance_history={}, last_error='Hardware failure during test', uptime_hours=0)]\ncheckpointable_job = RenderJob(id='job1', name='Test Checkpoint Job', client_id='client1', status=<RenderJobStatus.QUEUED: 'queued'>, job_t...oint_time=datetime.datetime(2025, 5, 15, 4, 19, 48, 587870), last_progressive_output_time=None, energy_intensive=False)\n\n    def test_multiple_failures_with_checkpoints(farm_manager, client, render_nodes, checkpointable_job):\n        \"\"\"Test that job can recover from multiple failures with increasing progress.\"\"\"\n        # Setup\n        farm_manager.add_client(client)\n        for node in render_nodes:\n            farm_manager.add_node(node)\n        farm_manager.submit_job(checkpointable_job)\n    \n        # First cycle - initial job assignment\n        farm_manager.run_scheduling_cycle()\n        job = farm_manager.jobs[checkpointable_job.id]\n        assert job.status == RenderJobStatus.RUNNING\n    \n        # Update progress to 25% with checkpoint\n        farm_manager.update_job_progress(job.id, 25.0)\n        first_checkpoint = datetime.now()\n        job.last_checkpoint_time = first_checkpoint\n    \n        # First failure\n        first_node = job.assigned_node_id\n        farm_manager.handle_node_failure(first_node, error=\"Hardware failure during test\")\n        # Since we're mocking, manually call the methods we expect the manager to call\n        farm_manager.audit_logger.log_node_failure(node_id=first_node)\n        farm_manager.performance_monitor.update_node_failure_count()\n        assert job.status == RenderJobStatus.QUEUED\n        assert job.progress == 25.0\n        assert job.error_count == 1\n    \n        # Reassign job\n        farm_manager.run_scheduling_cycle()\n        assert job.status == RenderJobStatus.RUNNING\n        second_node = job.assigned_node_id\n        assert second_node is not None\n    \n        # Progress to 60% with new checkpoint\n        farm_manager.update_job_progress(job.id, 60.0)\n        second_checkpoint = datetime.now()\n        job.last_checkpoint_time = second_checkpoint\n    \n        # Second failure\n        farm_manager.handle_node_failure(second_node, error=\"Hardware failure during test\")\n        # Since we're mocking, manually call the methods we expect the manager to call\n        farm_manager.audit_logger.log_node_failure(node_id=second_node)\n        farm_manager.performance_monitor.update_node_failure_count()\n        assert job.status == RenderJobStatus.QUEUED\n        assert job.progress == 60.0\n        assert job.error_count == 2\n    \n        # Reassign job again\n        farm_manager.run_scheduling_cycle()\n>       assert job.status == RenderJobStatus.RUNNING\nE       AssertionError: assert <RenderJobSta...UED: 'queued'> == <RenderJobSta...NG: 'running'>\nE         \nE         - running\nE         + queued\n\ntests/integration/test_error_recovery.py:256: AssertionError"}, "teardown": {"duration": 0.00021973601542413235, "outcome": "passed"}}, {"nodeid": "tests/integration/test_error_recovery.py::test_error_count_threshold", "lineno": 267, "outcome": "failed", "keywords": ["test_error_count_threshold", "test_error_recovery.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0036047750618308783, "outcome": "passed"}, "call": {"duration": 0.005622636992484331, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/tests/integration/test_error_recovery.py", "lineno": 287, "message": "AssertionError: assert <RenderJobSta...UED: 'queued'> == <RenderJobSta...NG: 'running'>\n  \n  - running\n  + queued"}, "traceback": [{"path": "tests/integration/test_error_recovery.py", "lineno": 287, "message": "AssertionError"}], "longrepr": "farm_manager = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f03225f75b0>\nclient = RenderClient(client_id='client1', name='Test Client', service_tier=<ServiceTier.PREMIUM: 'premium'>, guaranteed_resources=0, max_resources=100)\nrender_nodes = [RenderNode(id='gpu1', name='GPU Node 1', status='error', capabilities=NodeCapabilities(cpu_cores=16, memory_gb=64, gp...y_rating=72.0, current_job_id=None, performance_history={}, last_error='Hardware failure during test', uptime_hours=0)]\ncheckpointable_job = RenderJob(id='job1', name='Test Checkpoint Job', client_id='client1', status=<RenderJobStatus.QUEUED: 'queued'>, job_t...oint_time=datetime.datetime(2025, 5, 15, 4, 19, 48, 602826), last_progressive_output_time=None, energy_intensive=False)\n\n    def test_error_count_threshold(farm_manager, client, render_nodes, checkpointable_job):\n        \"\"\"Test that jobs with too many errors are handled appropriately.\"\"\"\n        # Setup\n        farm_manager.add_client(client)\n        for node in render_nodes:\n            farm_manager.add_node(node)\n        farm_manager.submit_job(checkpointable_job)\n    \n        # Set a maximum error threshold (this would normally be from config)\n        max_errors = 3\n    \n        # Run job and simulate repeated failures\n        for i in range(max_errors + 1):\n            # Schedule job\n            farm_manager.run_scheduling_cycle()\n            job = farm_manager.jobs[checkpointable_job.id]\n    \n            if i < max_errors:\n                # Job should be scheduled normally for the first max_errors attempts\n>               assert job.status == RenderJobStatus.RUNNING\nE               AssertionError: assert <RenderJobSta...UED: 'queued'> == <RenderJobSta...NG: 'running'>\nE                 \nE                 - running\nE                 + queued\n\ntests/integration/test_error_recovery.py:287: AssertionError"}, "teardown": {"duration": 0.00022869999520480633, "outcome": "passed"}}, {"nodeid": "tests/integration/test_error_recovery_fixed.py::test_error_recovery_checkpoint_simple", "lineno": 116, "outcome": "passed", "keywords": ["test_error_recovery_checkpoint_simple", "test_error_recovery_fixed.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0020054070046171546, "outcome": "passed"}, "call": {"duration": 0.005468096002005041, "outcome": "passed"}, "teardown": {"duration": 0.00020023598335683346, "outcome": "passed"}}, {"nodeid": "tests/integration/test_fault_tolerance.py::test_fault_tolerance_multiple_node_failures", "lineno": 266, "outcome": "passed", "keywords": ["test_fault_tolerance_multiple_node_failures", "test_fault_tolerance.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.004206688026897609, "outcome": "passed"}, "call": {"duration": 0.0064544620690867305, "outcome": "passed", "stdout": "Affected jobs: 2, Rescheduled: 0\n"}, "teardown": {"duration": 0.00021146796643733978, "outcome": "passed"}}, {"nodeid": "tests/integration/test_fault_tolerance_fixed.py::test_fault_tolerance_multiple_node_failures", "lineno": 258, "outcome": "passed", "keywords": ["test_fault_tolerance_multiple_node_failures", "test_fault_tolerance_fixed.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0032389870611950755, "outcome": "passed"}, "call": {"duration": 0.007488411967642605, "outcome": "passed", "stdout": "Affected jobs: 2, Rescheduled: 0\n"}, "teardown": {"duration": 0.0001971640158444643, "outcome": "passed"}}, {"nodeid": "tests/integration/test_job_dependencies.py::test_job_dependency_scheduling", "lineno": 211, "outcome": "failed", "keywords": ["test_job_dependency_scheduling", "test_job_dependencies.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.020170966046862304, "outcome": "passed"}, "call": {"duration": 0.003947317018173635, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/tests/integration/test_job_dependencies.py", "lineno": 237, "message": "AssertionError: assert <RenderJobStatus.PENDING: 'pending'> in [<RenderJobStatus.RUNNING: 'running'>, <RenderJobStatus.QUEUED: 'queued'>]\n +  where <RenderJobStatus.PENDING: 'pending'> = RenderJob(id='parent2', name='Parent Job 2', client_id='client1', status=<RenderJobStatus.PENDING: 'pending'>, job_typ...False, supports_checkpoint=False, last_checkpoint_time=None, last_progressive_output_time=None, energy_intensive=False).status"}, "traceback": [{"path": "tests/integration/test_job_dependencies.py", "lineno": 237, "message": "AssertionError"}], "longrepr": "farm_manager = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f03224f0c40>\nclient = RenderClient(client_id='client1', name='Test Client', service_tier=<ServiceTier.PREMIUM: 'premium'>, guaranteed_resources=50, max_resources=80)\nrender_nodes = [RenderNode(id='node1', name='Node 1', status='online', capabilities=NodeCapabilities(cpu_cores=16, memory_gb=64, gpu_...g']), power_efficiency_rating=72.0, current_job_id='parent1', performance_history={}, last_error=None, uptime_hours=0)]\ndependent_jobs = [RenderJob(id='parent1', name='Parent Job 1', client_id='client1', status=<RenderJobStatus.RUNNING: 'running'>, job_ty...alse, supports_checkpoint=False, last_checkpoint_time=None, last_progressive_output_time=None, energy_intensive=False)]\n\n    def test_job_dependency_scheduling(farm_manager, client, render_nodes, dependent_jobs):\n        \"\"\"Test that jobs with dependencies are scheduled correctly.\"\"\"\n        # Setup: Add client and nodes\n        farm_manager.add_client(client)\n    \n        for node in render_nodes:\n            farm_manager.add_node(node)\n    \n        # Submit all jobs\n        for job in dependent_jobs:\n            farm_manager.submit_job(job)\n    \n        # First scheduling cycle\n        farm_manager.run_scheduling_cycle()\n    \n        # Check that only parent jobs and independent job are running or queued\n        # Child jobs should be pending until dependencies complete\n        parent1 = farm_manager.jobs[\"parent1\"]\n        parent2 = farm_manager.jobs[\"parent2\"]\n        child = farm_manager.jobs[\"child1\"]\n        grandchild = farm_manager.jobs[\"grandchild1\"]\n        independent = farm_manager.jobs[\"independent1\"]\n    \n        # Parents and independent job should be scheduled\n        assert parent1.status in [RenderJobStatus.RUNNING, RenderJobStatus.QUEUED]\n>       assert parent2.status in [RenderJobStatus.RUNNING, RenderJobStatus.QUEUED]\nE       AssertionError: assert <RenderJobStatus.PENDING: 'pending'> in [<RenderJobStatus.RUNNING: 'running'>, <RenderJobStatus.QUEUED: 'queued'>]\nE        +  where <RenderJobStatus.PENDING: 'pending'> = RenderJob(id='parent2', name='Parent Job 2', client_id='client1', status=<RenderJobStatus.PENDING: 'pending'>, job_typ...False, supports_checkpoint=False, last_checkpoint_time=None, last_progressive_output_time=None, energy_intensive=False).status\n\ntests/integration/test_job_dependencies.py:237: AssertionError"}, "teardown": {"duration": 0.00022883201017975807, "outcome": "passed"}}, {"nodeid": "tests/integration/test_job_dependencies.py::test_dependent_job_priority_inheritance", "lineno": 302, "outcome": "failed", "keywords": ["test_dependent_job_priority_inheritance", "test_job_dependencies.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.003353989915922284, "outcome": "passed"}, "call": {"duration": 0.004797574016265571, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/tests/integration/test_job_dependencies.py", "lineno": 418, "message": "assert 1 == 0"}, "traceback": [{"path": "tests/integration/test_job_dependencies.py", "lineno": 418, "message": "AssertionError"}], "longrepr": "farm_manager = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f0322821b10>\nclient = RenderClient(client_id='client1', name='Test Client', service_tier=<ServiceTier.PREMIUM: 'premium'>, guaranteed_resources=50, max_resources=80)\nrender_nodes = [RenderNode(id='node1', name='Node 1', status='online', capabilities=NodeCapabilities(cpu_cores=16, memory_gb=64, gpu_...), power_efficiency_rating=72.0, current_job_id='competing1', performance_history={}, last_error=None, uptime_hours=0)]\n\n    def test_dependent_job_priority_inheritance(farm_manager, client, render_nodes):\n        \"\"\"Test that dependent jobs inherit priority from parent jobs when appropriate.\"\"\"\n        # Setup: Add client and nodes\n        farm_manager.add_client(client)\n    \n        for node in render_nodes:\n            farm_manager.add_node(node)\n    \n        now = datetime.now()\n    \n        # Create a high-priority parent job\n        parent_job = RenderJob(\n            id=\"high_parent\",\n            client_id=\"client1\",\n            name=\"High Priority Parent\",\n            status=RenderJobStatus.PENDING,\n            job_type=\"animation\",\n            priority=JobPriority.CRITICAL,  # Very high priority\n            submission_time=now,\n            deadline=now + timedelta(hours=3),  # Tight deadline\n            estimated_duration_hours=1.0,\n            progress=0.0,\n            requires_gpu=True,\n            memory_requirements_gb=32,\n            cpu_requirements=8,\n            scene_complexity=7,\n            output_path=\"/renders/client1/high_parent/\",\n        )\n    \n        # Create a low-priority child job\n        child_job = RenderJob(\n            id=\"low_child\",\n            client_id=\"client1\",\n            name=\"Low Priority Child\",\n            status=RenderJobStatus.PENDING,\n            job_type=\"composition\",\n            priority=JobPriority.LOW,  # Low priority\n            submission_time=now,\n            deadline=now + timedelta(hours=12),  # Loose deadline\n            estimated_duration_hours=1.0,\n            progress=0.0,\n            requires_gpu=True,\n            memory_requirements_gb=32,\n            cpu_requirements=8,\n            scene_complexity=5,\n            output_path=\"/renders/client1/low_child/\",\n            dependencies=[\"high_parent\"],\n        )\n    \n        # Create competing jobs with medium priority\n        competing_jobs = [\n            RenderJob(\n                id=f\"competing{i}\",\n                client_id=\"client1\",\n                name=f\"Competing Job {i}\",\n                status=RenderJobStatus.PENDING,\n                job_type=\"standalone\",\n                priority=JobPriority.MEDIUM,  # Medium priority\n                submission_time=now,\n                deadline=now + timedelta(hours=6),\n                estimated_duration_hours=1.0,\n                progress=0.0,\n                requires_gpu=True,\n                memory_requirements_gb=32,\n                cpu_requirements=8,\n                scene_complexity=6,\n                output_path=f\"/renders/client1/competing{i}/\",\n            )\n            for i in range(1, 4)\n        ]\n    \n        # Submit all jobs\n        farm_manager.submit_job(parent_job)\n        farm_manager.submit_job(child_job)\n        for job in competing_jobs:\n            farm_manager.submit_job(job)\n    \n        # First scheduling cycle - parent should run\n        farm_manager.run_scheduling_cycle()\n    \n        # Complete the parent job\n        parent = farm_manager.jobs[\"high_parent\"]\n        if parent.status == RenderJobStatus.RUNNING:\n            farm_manager.update_job_progress(parent.id, 100.0)\n            farm_manager.complete_job(parent.id)\n        else:\n            # If parent is queued, run another cycle to get it running\n            farm_manager.run_scheduling_cycle()\n            if parent.status == RenderJobStatus.RUNNING:\n                farm_manager.update_job_progress(parent.id, 100.0)\n                farm_manager.complete_job(parent.id)\n    \n        # Run scheduling cycle to handle the completed parent\n        farm_manager.run_scheduling_cycle()\n    \n        # The child job should now be scheduled with inherited priority\n        child = farm_manager.jobs[\"low_child\"]\n    \n        # Verify child job is scheduled despite competing with medium priority jobs\n        assert child.status in [RenderJobStatus.RUNNING, RenderJobStatus.QUEUED]\n    \n        # If the scheduler implements priority inheritance, the effective priority\n        # of the child job should be higher than its nominal priority\n        if hasattr(child, \"effective_priority\"):\n            assert child.effective_priority > child.priority\n    \n        # Count how many competing jobs are running\n        running_competing = sum(\n            1 for job_id, job in farm_manager.jobs.items()\n            if job_id.startswith(\"competing\") and job.status == RenderJobStatus.RUNNING\n        )\n    \n        # Check if child job is prioritized over competing jobs\n        if child.status == RenderJobStatus.RUNNING:\n            # If only one job can run at a time, no competing jobs should be running\n>           assert running_competing == 0\nE           assert 1 == 0\n\ntests/integration/test_job_dependencies.py:418: AssertionError"}, "teardown": {"duration": 0.00021336693316698074, "outcome": "passed"}}, {"nodeid": "tests/integration/test_job_dependencies.py::test_circular_dependency_detection", "lineno": 423, "outcome": "failed", "keywords": ["test_circular_dependency_detection", "test_job_dependencies.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0033158549340441823, "outcome": "passed"}, "call": {"duration": 0.004181444994173944, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/tests/integration/test_job_dependencies.py", "lineno": 508, "message": "AssertionError: Job job_b should not be scheduled due to circular dependency\nassert <RenderJobStatus.RUNNING: 'running'> not in [<RenderJobStatus.RUNNING: 'running'>, <RenderJobStatus.QUEUED: 'queued'>]\n +  where <RenderJobStatus.RUNNING: 'running'> = RenderJob(id='job_b', name='Job B', client_id='client1', status=<RenderJobStatus.RUNNING: 'running'>, job_type='vfx', ...False, supports_checkpoint=False, last_checkpoint_time=None, last_progressive_output_time=None, energy_intensive=False).status"}, "traceback": [{"path": "tests/integration/test_job_dependencies.py", "lineno": 508, "message": "AssertionError"}], "longrepr": "farm_manager = <render_farm_manager.core.manager.RenderFarmManager object at 0x7f032252f9d0>\nclient = RenderClient(client_id='client1', name='Test Client', service_tier=<ServiceTier.PREMIUM: 'premium'>, guaranteed_resources=50, max_resources=80)\nrender_nodes = [RenderNode(id='node1', name='Node 1', status='online', capabilities=NodeCapabilities(cpu_cores=16, memory_gb=64, gpu_...ing']), power_efficiency_rating=72.0, current_job_id='job_b', performance_history={}, last_error=None, uptime_hours=0)]\n\n    def test_circular_dependency_detection(farm_manager, client, render_nodes):\n        \"\"\"Test that circular dependencies are detected and handled appropriately.\"\"\"\n        # Setup: Add client and nodes\n        farm_manager.add_client(client)\n    \n        for node in render_nodes:\n            farm_manager.add_node(node)\n    \n        now = datetime.now()\n    \n        # Create jobs with circular dependencies\n        job_a = RenderJob(\n            id=\"job_a\",\n            client_id=\"client1\",\n            name=\"Job A\",\n            status=RenderJobStatus.PENDING,\n            job_type=\"animation\",\n            priority=JobPriority.HIGH,\n            submission_time=now,\n            deadline=now + timedelta(hours=4),\n            estimated_duration_hours=1.0,\n            progress=0.0,\n            requires_gpu=True,\n            memory_requirements_gb=32,\n            cpu_requirements=8,\n            scene_complexity=6,\n            output_path=\"/renders/client1/job_a/\",\n            dependencies=[\"job_c\"],  # A depends on C\n        )\n    \n        job_b = RenderJob(\n            id=\"job_b\",\n            client_id=\"client1\",\n            name=\"Job B\",\n            status=RenderJobStatus.PENDING,\n            job_type=\"vfx\",\n            priority=JobPriority.HIGH,\n            submission_time=now,\n            deadline=now + timedelta(hours=5),\n            estimated_duration_hours=1.0,\n            progress=0.0,\n            requires_gpu=True,\n            memory_requirements_gb=32,\n            cpu_requirements=8,\n            scene_complexity=6,\n            output_path=\"/renders/client1/job_b/\",\n            dependencies=[\"job_a\"],  # B depends on A\n        )\n    \n        job_c = RenderJob(\n            id=\"job_c\",\n            client_id=\"client1\",\n            name=\"Job C\",\n            status=RenderJobStatus.PENDING,\n            job_type=\"composition\",\n            priority=JobPriority.MEDIUM,\n            submission_time=now,\n            deadline=now + timedelta(hours=6),\n            estimated_duration_hours=1.0,\n            progress=0.0,\n            requires_gpu=True,\n            memory_requirements_gb=32,\n            cpu_requirements=8,\n            scene_complexity=6,\n            output_path=\"/renders/client1/job_c/\",\n            dependencies=[\"job_b\"],  # C depends on B, creating a cycle: A -> C -> B -> A\n        )\n    \n        # In a real implementation, the farm manager should detect this cycle\n        # during job submission and reject the jobs or mark them as failed\n        # For this test, we'll submit them and check that they aren't scheduled\n    \n        # Submit all jobs\n        farm_manager.submit_job(job_a)\n        farm_manager.submit_job(job_b)\n        farm_manager.submit_job(job_c)\n    \n        # Run scheduling cycle\n        farm_manager.run_scheduling_cycle()\n    \n        # All jobs should be in PENDING or FAILED state due to circular dependencies\n        # None should be RUNNING or QUEUED\n        for job_id in [\"job_a\", \"job_b\", \"job_c\"]:\n            job = farm_manager.jobs[job_id]\n>           assert job.status not in [RenderJobStatus.RUNNING, RenderJobStatus.QUEUED], \\\n                f\"Job {job_id} should not be scheduled due to circular dependency\"\nE           AssertionError: Job job_b should not be scheduled due to circular dependency\nE           assert <RenderJobStatus.RUNNING: 'running'> not in [<RenderJobStatus.RUNNING: 'running'>, <RenderJobStatus.QUEUED: 'queued'>]\nE            +  where <RenderJobStatus.RUNNING: 'running'> = RenderJob(id='job_b', name='Job B', client_id='client1', status=<RenderJobStatus.RUNNING: 'running'>, job_type='vfx', ...False, supports_checkpoint=False, last_checkpoint_time=None, last_progressive_output_time=None, energy_intensive=False).status\n\ntests/integration/test_job_dependencies.py:508: AssertionError"}, "teardown": {"duration": 0.00021378591191023588, "outcome": "passed"}}, {"nodeid": "tests/integration/test_job_dependencies_fixed.py::test_simple_dependency", "lineno": 68, "outcome": "passed", "keywords": ["test_simple_dependency", "test_job_dependencies_fixed.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00035877502523362637, "outcome": "passed"}, "call": {"duration": 0.000632269075140357, "outcome": "passed"}, "teardown": {"duration": 0.0001544420374557376, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_farm_manager_initialization", "lineno": 212, "outcome": "passed", "keywords": ["test_farm_manager_initialization", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0002302799839526415, "outcome": "passed"}, "call": {"duration": 0.00013568310532718897, "outcome": "passed"}, "teardown": {"duration": 0.00011802301742136478, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_add_client", "lineno": 220, "outcome": "passed", "keywords": ["test_add_client", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00024773995392024517, "outcome": "passed"}, "call": {"duration": 0.000189267098903656, "outcome": "passed"}, "teardown": {"duration": 0.0001291469670832157, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_add_node", "lineno": 231, "outcome": "passed", "keywords": ["test_add_node", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0003179239574819803, "outcome": "passed"}, "call": {"duration": 0.0003252179594710469, "outcome": "passed"}, "teardown": {"duration": 0.0001296050613746047, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_submit_job", "lineno": 241, "outcome": "passed", "keywords": ["test_submit_job", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00031243101693689823, "outcome": "passed"}, "call": {"duration": 0.0003311180043965578, "outcome": "passed"}, "teardown": {"duration": 0.0001394309801980853, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_scheduling_cycle", "lineno": 257, "outcome": "passed", "keywords": ["test_scheduling_cycle", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00040206301491707563, "outcome": "passed"}, "call": {"duration": 0.0012738179648295045, "outcome": "passed"}, "teardown": {"duration": 0.00016257993411272764, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_job_progress_update", "lineno": 290, "outcome": "passed", "keywords": ["test_job_progress_update", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00041825801599770784, "outcome": "passed"}, "call": {"duration": 0.0012089329538866878, "outcome": "passed"}, "teardown": {"duration": 0.00015873904339969158, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_node_failure", "lineno": 328, "outcome": "passed", "keywords": ["test_node_failure", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00041545997373759747, "outcome": "passed"}, "call": {"duration": 0.0014832550659775734, "outcome": "passed", "log": [{"name": "render_farm.audit", "msg": "2025-05-15 04:19:48.712394 - error: Node gpu-node-0 failure: Hardware failure (job_id=None, node_id=None, client_id=None)", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/render_farm_manager/utils/logging.py", "filename": "logging.py", "module": "logging", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 49, "funcName": "log_event", "created": 1747282788.7124135, "msecs": 712.0, "relativeCreated": 464.27035331726074, "thread": 139651479910208, "threadName": "MainThread", "processName": "MainProcess", "process": 1131550}, {"name": "render_farm.audit", "msg": "2025-05-15 04:19:48.712498 - node_status_updated: Node gpu-node-0 status updated from online to error (job_id=None, node_id=gpu-node-0, client_id=None)", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/render_farm_manager/utils/logging.py", "filename": "logging.py", "module": "logging", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 54, "funcName": "log_event", "created": 1747282788.7125137, "msecs": 712.0, "relativeCreated": 464.3704891204834, "thread": 139651479910208, "threadName": "MainThread", "processName": "MainProcess", "process": 1131550}, {"name": "render_farm.audit", "msg": "2025-05-15 04:19:48.712555 - job_affected_by_node_failure: Job premium-job-2 affected by failure of node gpu-node-0: Hardware failure (job_id=premium-job-2, node_id=gpu-node-0, client_id=None)", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/render_farm_manager/utils/logging.py", "filename": "logging.py", "module": "logging", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 54, "funcName": "log_event", "created": 1747282788.712566, "msecs": 712.0, "relativeCreated": 464.42270278930664, "thread": 139651479910208, "threadName": "MainThread", "processName": "MainProcess", "process": 1131550}, {"name": "render_farm.audit", "msg": "2025-05-15 04:19:48.712605 - node_failure: Node gpu-node-0 has failed (job_id=None, node_id=gpu-node-0, client_id=None)", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/render_farm_manager/utils/logging.py", "filename": "logging.py", "module": "logging", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 54, "funcName": "log_event", "created": 1747282788.7126148, "msecs": 712.0, "relativeCreated": 464.47157859802246, "thread": 139651479910208, "threadName": "MainThread", "processName": "MainProcess", "process": 1131550}, {"name": "render_farm.audit", "msg": "2025-05-15 04:19:48.712651 - node_failure_count: Node failure count incremented to 1 (node: gpu-node-0) (job_id=None, node_id=gpu-node-0, client_id=None)", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/render_farm_manager/utils/logging.py", "filename": "logging.py", "module": "logging", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 54, "funcName": "log_event", "created": 1747282788.712661, "msecs": 712.0, "relativeCreated": 464.51783180236816, "thread": 139651479910208, "threadName": "MainThread", "processName": "MainProcess", "process": 1131550}]}, "teardown": {"duration": 0.0001587430015206337, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_cancel_job", "lineno": 369, "outcome": "passed", "keywords": ["test_cancel_job", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0004264430608600378, "outcome": "passed"}, "call": {"duration": 0.0011743780924007297, "outcome": "passed"}, "teardown": {"duration": 0.0001558799995109439, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_client_resource_guarantees", "lineno": 402, "outcome": "passed", "keywords": ["test_client_resource_guarantees", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0003483489854261279, "outcome": "passed"}, "call": {"duration": 0.0026886590057983994, "outcome": "passed"}, "teardown": {"duration": 0.00015572900883853436, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_energy_optimization", "lineno": 488, "outcome": "passed", "keywords": ["test_energy_optimization", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0004404850769788027, "outcome": "passed"}, "call": {"duration": 0.0012771820183843374, "outcome": "passed"}, "teardown": {"duration": 0.0001615030923858285, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_progressive_output_config", "lineno": 518, "outcome": "passed", "keywords": ["test_progressive_output_config", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0004143390106037259, "outcome": "passed"}, "call": {"duration": 0.0011910550529137254, "outcome": "passed"}, "teardown": {"duration": 0.00015390501357614994, "outcome": "passed"}}, {"nodeid": "tests/integration/test_render_farm_manager.py::test_full_end_to_end_workflow", "lineno": 554, "outcome": "passed", "keywords": ["test_full_end_to_end_workflow", "test_render_farm_manager.py", "integration", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0004324140027165413, "outcome": "passed"}, "call": {"duration": 0.0020834699971601367, "outcome": "passed"}, "teardown": {"duration": 0.00016168993897736073, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_scheduling_performance", "lineno": 160, "outcome": "passed", "keywords": ["test_scheduling_performance", "test_performance.py", "performance", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.005931682069785893, "outcome": "passed"}, "call": {"duration": 0.09086967504117638, "outcome": "passed", "stdout": "Scheduling time: 40.25ms\nJobs scheduled: 200\nResource utilization: 100.00%\n"}, "teardown": {"duration": 0.0001516400370746851, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_multiple_scheduling_cycles", "lineno": 195, "outcome": "passed", "keywords": ["test_multiple_scheduling_cycles", "test_performance.py", "performance", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0054968290496617556, "outcome": "passed"}, "call": {"duration": 0.14043359202332795, "outcome": "passed", "stdout": "Average cycle time: 20.27ms\nMax cycle time: 31.51ms\nMin cycle time: 17.40ms\nFinal resource utilization: 100.00%\n"}, "teardown": {"duration": 0.00015228695701807737, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_node_specialization_efficiency", "lineno": 251, "outcome": "passed", "keywords": ["test_node_specialization_efficiency", "test_performance.py", "performance", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.005527526023797691, "outcome": "passed"}, "call": {"duration": 0.053278925945051014, "outcome": "passed", "stdout": "Specialization efficiency: 81.00%\nGPU jobs on GPU nodes: 65\nCPU jobs on CPU nodes: 67\nMemory jobs on Memory nodes: 30\nTotal assigned: 200\nScheduling time: 27.91ms\n"}, "teardown": {"duration": 0.00015404005534946918, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_scheduler_initialization", "lineno": 184, "outcome": "passed", "keywords": ["test_scheduler_initialization", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0012312540784478188, "outcome": "passed"}, "call": {"duration": 0.0001397179439663887, "outcome": "passed"}, "teardown": {"duration": 0.0001532940659672022, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_update_priorities_deadline_approaching", "lineno": 190, "outcome": "passed", "keywords": ["test_update_priorities_deadline_approaching", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010373829863965511, "outcome": "passed"}, "call": {"duration": 0.0015266600530594587, "outcome": "passed"}, "teardown": {"duration": 0.00016926892567425966, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_update_priorities_job_progress", "lineno": 211, "outcome": "passed", "keywords": ["test_update_priorities_job_progress", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010309639619663358, "outcome": "passed"}, "call": {"duration": 0.0014855220215395093, "outcome": "passed"}, "teardown": {"duration": 0.0001742970198392868, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_schedule_jobs_priority_order", "lineno": 228, "outcome": "passed", "keywords": ["test_schedule_jobs_priority_order", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001142831053584814, "outcome": "passed"}, "call": {"duration": 0.0016598369693383574, "outcome": "passed"}, "teardown": {"duration": 0.00017908797599375248, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_schedule_jobs_resource_requirements", "lineno": 246, "outcome": "passed", "keywords": ["test_schedule_jobs_resource_requirements", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011406269622966647, "outcome": "passed"}, "call": {"duration": 0.0016832210822030902, "outcome": "passed"}, "teardown": {"duration": 0.0001800319878384471, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_preemption", "lineno": 258, "outcome": "passed", "keywords": ["test_preemption", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011339460033923388, "outcome": "passed"}, "call": {"duration": 0.001623712945729494, "outcome": "passed"}, "teardown": {"duration": 0.00019236898515373468, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_preemption_disabled", "lineno": 285, "outcome": "passed", "keywords": ["test_preemption_disabled", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011425099801272154, "outcome": "passed"}, "call": {"duration": 0.001588031998835504, "outcome": "passed"}, "teardown": {"duration": 0.0001823659986257553, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_can_meet_deadline", "lineno": 305, "outcome": "passed", "keywords": ["test_can_meet_deadline", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001134601072408259, "outcome": "passed"}, "call": {"duration": 0.00018459802959114313, "outcome": "passed"}, "teardown": {"duration": 0.00016931502614170313, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_should_preempt", "lineno": 337, "outcome": "passed", "keywords": ["test_should_preempt", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010129479924216866, "outcome": "passed"}, "call": {"duration": 0.0001598149538040161, "outcome": "passed"}, "teardown": {"duration": 0.0001601428957656026, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_schedule_with_dependencies", "lineno": 360, "outcome": "passed", "keywords": ["test_schedule_with_dependencies", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001033080043271184, "outcome": "passed"}, "call": {"duration": 0.0024512739619240165, "outcome": "passed"}, "teardown": {"duration": 0.0001772299874573946, "outcome": "passed"}}, {"nodeid": "tests/unit/test_deadline_scheduler.py::test_rescheduling_failed_job", "lineno": 425, "outcome": "passed", "keywords": ["test_rescheduling_failed_job", "test_deadline_scheduler.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011341320350766182, "outcome": "passed"}, "call": {"duration": 0.0016862470656633377, "outcome": "passed"}, "teardown": {"duration": 0.0001931310398504138, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_energy_optimizer_initialization", "lineno": 190, "outcome": "passed", "keywords": ["test_energy_optimizer_initialization", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009642820805311203, "outcome": "passed"}, "call": {"duration": 0.00013669300824403763, "outcome": "passed"}, "teardown": {"duration": 0.00015003501903265715, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_optimize_energy_usage", "lineno": 199, "outcome": "passed", "keywords": ["test_optimize_energy_usage", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011075090151280165, "outcome": "passed"}, "call": {"duration": 0.0017705849604681134, "outcome": "passed"}, "teardown": {"duration": 0.0001841250341385603, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_energy_mode_affects_scheduling", "lineno": 227, "outcome": "passed", "keywords": ["test_energy_mode_affects_scheduling", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011185330804437399, "outcome": "passed"}, "call": {"duration": 0.002142795012332499, "outcome": "passed"}, "teardown": {"duration": 0.00018402095884084702, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_calculate_energy_cost", "lineno": 252, "outcome": "passed", "keywords": ["test_calculate_energy_cost", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011143269948661327, "outcome": "passed"}, "call": {"duration": 0.0005413489416241646, "outcome": "passed"}, "teardown": {"duration": 0.0001786290667951107, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_time_of_day_energy_price", "lineno": 282, "outcome": "passed", "keywords": ["test_time_of_day_energy_price", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010585139971226454, "outcome": "passed"}, "call": {"duration": 0.00013922504149377346, "outcome": "passed"}, "teardown": {"duration": 0.00014979008119553328, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_set_energy_mode", "lineno": 297, "outcome": "passed", "keywords": ["test_set_energy_mode", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.000902667990885675, "outcome": "passed"}, "call": {"duration": 0.0005614020628854632, "outcome": "passed"}, "teardown": {"duration": 0.00016634399071335793, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_estimate_energy_savings", "lineno": 313, "outcome": "passed", "keywords": ["test_estimate_energy_savings", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001105005037970841, "outcome": "passed"}, "call": {"duration": 0.0007461769273504615, "outcome": "passed"}, "teardown": {"duration": 0.00017756002489477396, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_energy_mode_update_based_on_time", "lineno": 331, "outcome": "passed", "keywords": ["test_energy_mode_update_based_on_time", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009961019968613982, "outcome": "passed"}, "call": {"duration": 0.0005783560918644071, "outcome": "passed"}, "teardown": {"duration": 0.00016498996410518885, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_node_meets_requirements", "lineno": 350, "outcome": "passed", "keywords": ["test_node_meets_requirements", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0012339960085228086, "outcome": "passed"}, "call": {"duration": 0.00018852099310606718, "outcome": "passed"}, "teardown": {"duration": 0.00016967696137726307, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_get_node_type", "lineno": 368, "outcome": "passed", "keywords": ["test_get_node_type", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00103655899874866, "outcome": "passed"}, "call": {"duration": 0.00018063001334667206, "outcome": "passed"}, "teardown": {"duration": 0.00015998398885130882, "outcome": "passed"}}, {"nodeid": "tests/unit/test_energy_optimizer.py::test_high_priority_jobs_override_energy_considerations", "lineno": 383, "outcome": "passed", "keywords": ["test_high_priority_jobs_override_energy_considerations", "test_energy_optimizer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011156409746035933, "outcome": "passed"}, "call": {"duration": 0.00235895998775959, "outcome": "passed"}, "teardown": {"duration": 0.00018108508083969355, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_specialization_manager_initialization", "lineno": 249, "outcome": "passed", "keywords": ["test_specialization_manager_initialization", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009583639912307262, "outcome": "passed"}, "call": {"duration": 0.0001424399670213461, "outcome": "passed"}, "teardown": {"duration": 0.00015000905841588974, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_match_job_to_node_gpu_job", "lineno": 258, "outcome": "passed", "keywords": ["test_match_job_to_node_gpu_job", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001114905928261578, "outcome": "passed"}, "call": {"duration": 0.0015639120247215033, "outcome": "passed"}, "teardown": {"duration": 0.00018399395048618317, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_match_job_to_node_cpu_job", "lineno": 274, "outcome": "passed", "keywords": ["test_match_job_to_node_cpu_job", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001146784983575344, "outcome": "passed"}, "call": {"duration": 0.001471110968850553, "outcome": "passed"}, "teardown": {"duration": 0.00018673203885555267, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_match_job_to_node_memory_job", "lineno": 290, "outcome": "passed", "keywords": ["test_match_job_to_node_memory_job", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011536270612850785, "outcome": "passed"}, "call": {"duration": 0.0014497640077024698, "outcome": "passed"}, "teardown": {"duration": 0.00017936399672180414, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_calculate_performance_score", "lineno": 306, "outcome": "passed", "keywords": ["test_calculate_performance_score", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00115678901784122, "outcome": "passed"}, "call": {"duration": 0.00015436997637152672, "outcome": "passed"}, "teardown": {"duration": 0.00017245905473828316, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_update_performance_history", "lineno": 327, "outcome": "passed", "keywords": ["test_update_performance_history", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011395469773560762, "outcome": "passed"}, "call": {"duration": 0.0007122879615053535, "outcome": "passed"}, "teardown": {"duration": 0.00017796701285988092, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_performance_history_influence", "lineno": 361, "outcome": "passed", "keywords": ["test_performance_history_influence", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011411389568820596, "outcome": "passed"}, "call": {"duration": 0.001489721005782485, "outcome": "passed"}, "teardown": {"duration": 0.00018153293058276176, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_node_capability_matching", "lineno": 376, "outcome": "passed", "keywords": ["test_node_capability_matching", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011567570036277175, "outcome": "passed"}, "call": {"duration": 0.0014576660469174385, "outcome": "passed"}, "teardown": {"duration": 0.00018837896641343832, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_no_suitable_node", "lineno": 395, "outcome": "passed", "keywords": ["test_no_suitable_node", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011393039021641016, "outcome": "passed"}, "call": {"duration": 0.002015118021517992, "outcome": "passed"}, "teardown": {"duration": 0.00017975002992898226, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_specialized_vs_general_nodes", "lineno": 409, "outcome": "passed", "keywords": ["test_specialized_vs_general_nodes", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011262779589742422, "outcome": "passed"}, "call": {"duration": 0.0015122020849958062, "outcome": "passed"}, "teardown": {"duration": 0.0001854670699685812, "outcome": "passed"}}, {"nodeid": "tests/unit/test_node_specialization.py::test_analyze_node_efficiency", "lineno": 444, "outcome": "passed", "keywords": ["test_analyze_node_efficiency", "test_node_specialization.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010467269457876682, "outcome": "passed"}, "call": {"duration": 0.00019125803373754025, "outcome": "passed"}, "teardown": {"duration": 0.00016817997675389051, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_progressive_renderer_initialization", "lineno": 167, "outcome": "passed", "keywords": ["test_progressive_renderer_initialization", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.000975164002738893, "outcome": "passed"}, "call": {"duration": 0.00013124803081154823, "outcome": "passed"}, "teardown": {"duration": 0.00014555605594068766, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_long_job", "lineno": 175, "outcome": "passed", "keywords": ["test_schedule_progressive_output_long_job", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010138750076293945, "outcome": "passed"}, "call": {"duration": 0.0015755570493638515, "outcome": "passed"}, "teardown": {"duration": 0.00018419499974697828, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_short_job", "lineno": 192, "outcome": "passed", "keywords": ["test_schedule_progressive_output_short_job", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010295689571648836, "outcome": "passed"}, "call": {"duration": 0.001426090020686388, "outcome": "passed"}, "teardown": {"duration": 0.00018540897872298956, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_disabled_config", "lineno": 207, "outcome": "passed", "keywords": ["test_schedule_progressive_output_disabled_config", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010359929874539375, "outcome": "passed"}, "call": {"duration": 0.0010735279647633433, "outcome": "passed"}, "teardown": {"duration": 0.00017275603022426367, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_schedule_progressive_output_unsupported_job", "lineno": 226, "outcome": "passed", "keywords": ["test_schedule_progressive_output_unsupported_job", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010176580399274826, "outcome": "passed"}, "call": {"duration": 0.0010868730023503304, "outcome": "passed"}, "teardown": {"duration": 0.00017385499086230993, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_generate_progressive_output", "lineno": 237, "outcome": "passed", "keywords": ["test_generate_progressive_output", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010852731065824628, "outcome": "passed"}, "call": {"duration": 0.0014135390520095825, "outcome": "passed"}, "teardown": {"duration": 0.00017472694162279367, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_generate_progressive_output_unsupported_job", "lineno": 258, "outcome": "passed", "keywords": ["test_generate_progressive_output_unsupported_job", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010928560514003038, "outcome": "passed"}, "call": {"duration": 0.002198504051193595, "outcome": "passed", "log": [{"name": "render_farm.progressive_renderer", "msg": "Job no-progressive-job does not support progressive output", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/concurrent_task_scheduler/concurrent_task_scheduler_render_farm_manager/render_farm_manager/progressive_result/progressive_renderer.py", "filename": "progressive_renderer.py", "module": "progressive_renderer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 142, "funcName": "generate_progressive_output", "created": 1747282789.1473813, "msecs": 147.0, "relativeCreated": 899.238109588623, "thread": 139651479910208, "threadName": "MainThread", "processName": "MainProcess", "process": 1131550}]}, "teardown": {"duration": 0.00017841707449406385, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_estimate_overhead", "lineno": 267, "outcome": "passed", "keywords": ["test_estimate_overhead", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010291860671713948, "outcome": "passed"}, "call": {"duration": 0.0001548980362713337, "outcome": "passed"}, "teardown": {"duration": 0.00015561003237962723, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_process_pending_outputs", "lineno": 292, "outcome": "passed", "keywords": ["test_process_pending_outputs", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010044299997389317, "outcome": "passed"}, "call": {"duration": 0.0016314518870785832, "outcome": "passed"}, "teardown": {"duration": 0.00017601693980395794, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_get_latest_progressive_output", "lineno": 338, "outcome": "passed", "keywords": ["test_get_latest_progressive_output", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010311910882592201, "outcome": "passed"}, "call": {"duration": 0.0015691620064899325, "outcome": "passed"}, "teardown": {"duration": 0.00019025499932467937, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_quality_overhead_factors", "lineno": 355, "outcome": "passed", "keywords": ["test_quality_overhead_factors", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009415840031579137, "outcome": "passed"}, "call": {"duration": 0.00013431604020297527, "outcome": "passed"}, "teardown": {"duration": 0.0001484010135754943, "outcome": "passed"}}, {"nodeid": "tests/unit/test_progressive_renderer.py::test_max_overhead_limit", "lineno": 362, "outcome": "passed", "keywords": ["test_max_overhead_limit", "test_progressive_renderer.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0010038019390776753, "outcome": "passed"}, "call": {"duration": 0.00014526594895869493, "outcome": "passed"}, "teardown": {"duration": 0.00016160693485289812, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_borrowing.py::test_client_resource_borrowing", "lineno": 174, "outcome": "passed", "keywords": ["test_client_resource_borrowing", "test_resource_borrowing.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0016196719370782375, "outcome": "passed"}, "call": {"duration": 0.002289931057021022, "outcome": "passed"}, "teardown": {"duration": 0.0001923509407788515, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_borrowing.py::test_borrowing_limit_variations", "lineno": 308, "outcome": "passed", "keywords": ["test_borrowing_limit_variations", "test_resource_borrowing.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0014921390684321523, "outcome": "passed"}, "call": {"duration": 0.0030301999067887664, "outcome": "passed"}, "teardown": {"duration": 0.00017586001195013523, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_borrowing_fixed.py::test_client_resource_borrowing", "lineno": 175, "outcome": "passed", "keywords": ["test_client_resource_borrowing", "test_resource_borrowing_fixed.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0008408300345763564, "outcome": "passed"}, "call": {"duration": 0.002762154908850789, "outcome": "passed"}, "teardown": {"duration": 0.0001704170135781169, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_borrowing_fixed.py::test_borrowing_limit_variations", "lineno": 313, "outcome": "passed", "keywords": ["test_borrowing_limit_variations", "test_resource_borrowing_fixed.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0006885010516270995, "outcome": "passed"}, "call": {"duration": 0.002616652986034751, "outcome": "passed"}, "teardown": {"duration": 0.0001637160312384367, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_partitioner_initialization", "lineno": 171, "outcome": "passed", "keywords": ["test_partitioner_initialization", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009622960351407528, "outcome": "passed"}, "call": {"duration": 0.00013323698658496141, "outcome": "passed"}, "teardown": {"duration": 0.0001560300588607788, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_guaranteed_minimums", "lineno": 177, "outcome": "passed", "keywords": ["test_allocate_resources_guaranteed_minimums", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001142411958426237, "outcome": "passed"}, "call": {"duration": 0.0019677269738167524, "outcome": "passed"}, "teardown": {"duration": 0.00017961801495403051, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_borrowing", "lineno": 197, "outcome": "passed", "keywords": ["test_allocate_resources_borrowing", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011637670686468482, "outcome": "passed"}, "call": {"duration": 0.0028574609896168113, "outcome": "passed"}, "teardown": {"duration": 0.00018217810429632664, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_can_borrow_resources", "lineno": 218, "outcome": "passed", "keywords": ["test_can_borrow_resources", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009973299456760287, "outcome": "passed"}, "call": {"duration": 0.0001379350433126092, "outcome": "passed"}, "teardown": {"duration": 0.00015508197247982025, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_calculate_resource_usage", "lineno": 249, "outcome": "passed", "keywords": ["test_calculate_resource_usage", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001241461024619639, "outcome": "passed"}, "call": {"duration": 0.00018071802332997322, "outcome": "passed"}, "teardown": {"duration": 0.0001767739886417985, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_with_offline_nodes", "lineno": 273, "outcome": "passed", "keywords": ["test_allocate_resources_with_offline_nodes", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011316350428387523, "outcome": "passed"}, "call": {"duration": 0.0019486700184643269, "outcome": "passed"}, "teardown": {"duration": 0.0001844159560278058, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_resource_allocation_scaling", "lineno": 295, "outcome": "passed", "keywords": ["test_resource_allocation_scaling", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.00114357506390661, "outcome": "passed"}, "call": {"duration": 0.0021285390248522162, "outcome": "passed"}, "teardown": {"duration": 0.00018098310101777315, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_resource_allocation_special_hardware", "lineno": 313, "outcome": "passed", "keywords": ["test_resource_allocation_special_hardware", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.001148532028310001, "outcome": "passed"}, "call": {"duration": 0.0019409219967201352, "outcome": "passed"}, "teardown": {"duration": 0.00017972290515899658, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_with_no_clients", "lineno": 334, "outcome": "passed", "keywords": ["test_allocate_resources_with_no_clients", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0011154449312016368, "outcome": "passed"}, "call": {"duration": 0.0011020320234820247, "outcome": "passed"}, "teardown": {"duration": 0.00017190701328217983, "outcome": "passed"}}, {"nodeid": "tests/unit/test_resource_partitioner.py::test_allocate_resources_with_no_nodes", "lineno": 342, "outcome": "passed", "keywords": ["test_allocate_resources_with_no_nodes", "test_resource_partitioner.py", "unit", "tests", "concurrent_task_scheduler_render_farm_manager", ""], "setup": {"duration": 0.0009674000320956111, "outcome": "passed"}, "call": {"duration": 0.0018234190065413713, "outcome": "passed"}, "teardown": {"duration": 0.000176024972461164, "outcome": "passed"}}]}