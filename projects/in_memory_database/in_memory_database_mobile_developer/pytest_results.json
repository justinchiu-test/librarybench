{"created": 1746948747.535371, "duration": 0.16271591186523438, "exitcode": 1, "root": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer", "environment": {}, "summary": {"passed": 93, "failed": 2, "total": 95, "collected": 154, "deselected": 59}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/integration/test_sync_workflow.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_sync_workflow.py::test_basic_sync_workflow", "type": "Function", "lineno": 23, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_changes_on_both_sides", "type": "Function", "lineno": 60, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_last_write_wins", "type": "Function", "lineno": 102, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_server_wins", "type": "Function", "lineno": 151, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_field_merge", "type": "Function", "lineno": 200, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_delete_conflict", "type": "Function", "lineno": 253, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_network_interruption", "type": "Function", "lineno": 297, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_differential_sync_efficiency", "type": "Function", "lineno": 349, "deselected": true}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_status_reporting", "type": "Function", "lineno": 407, "deselected": true}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_sync_workflow.py", "type": "Module"}]}, {"nodeid": "tests/performance/test_performance.py", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.PLUGGED_IN]", "type": "Function", "lineno": 118, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_NORMAL]", "type": "Function", "lineno": 118, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_LOW]", "type": "Function", "lineno": 118, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_CRITICAL]", "type": "Function", "lineno": 118, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.NONE]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.LOW]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.MEDIUM]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.HIGH]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-10]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-100]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-1000]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-10]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-100]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-1000]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-10]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-100]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-1000]", "type": "Function", "lineno": 277, "deselected": true}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[10-1000]", "type": "Function", "lineno": 349}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[100-1000]", "type": "Function", "lineno": 349}]}, {"nodeid": "tests/performance", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_performance.py", "type": "Module"}]}, {"nodeid": "tests/unit/test_change_tracker.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_change_tracker.py::test_change_tracker_creation", "type": "Function", "lineno": 10}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_change", "type": "Function", "lineno": 18}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_multiple_changes", "type": "Function", "lineno": 47}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_changes_different_tables", "type": "Function", "lineno": 79}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since", "type": "Function", "lineno": 113}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since_with_client_exclusion", "type": "Function", "lineno": 154}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_latest_change_id", "type": "Function", "lineno": 195}, {"nodeid": "tests/unit/test_change_tracker.py::test_serialize_deserialize_changes", "type": "Function", "lineno": 225}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_to_dict", "type": "Function", "lineno": 272}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_from_dict", "type": "Function", "lineno": 300}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_creation", "type": "Function", "lineno": 328}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_increment", "type": "Function", "lineno": 335}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_update", "type": "Function", "lineno": 351}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_dominates", "type": "Function", "lineno": 368}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_dominates", "type": "Function", "lineno": 383}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_concurrent", "type": "Function", "lineno": 396}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_concurrent", "type": "Function", "lineno": 411}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_to_dict", "type": "Function", "lineno": 426}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_from_dict", "type": "Function", "lineno": 438}]}, {"nodeid": "tests/unit/test_compression.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_compression.py::test_int_compressor", "type": "Function", "lineno": 17}, {"nodeid": "tests/unit/test_compression.py::test_float_compressor", "type": "Function", "lineno": 47}, {"nodeid": "tests/unit/test_compression.py::test_text_compressor", "type": "Function", "lineno": 77}, {"nodeid": "tests/unit/test_compression.py::test_binary_compressor", "type": "Function", "lineno": 112}, {"nodeid": "tests/unit/test_compression.py::test_datetime_compressor", "type": "Function", "lineno": 144}, {"nodeid": "tests/unit/test_compression.py::test_boolean_compressor", "type": "Function", "lineno": 169}, {"nodeid": "tests/unit/test_compression.py::test_none_compressor", "type": "Function", "lineno": 194}, {"nodeid": "tests/unit/test_compression.py::test_list_compressor", "type": "Function", "lineno": 214}, {"nodeid": "tests/unit/test_compression.py::test_dict_compressor", "type": "Function", "lineno": 252}, {"nodeid": "tests/unit/test_compression.py::test_compressor_factory", "type": "Function", "lineno": 288}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor", "type": "Function", "lineno": 325}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_changes", "type": "Function", "lineno": 366}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_set_compression_level", "type": "Function", "lineno": 415}, {"nodeid": "tests/unit/test_compression.py::test_compression_efficiency", "type": "Function", "lineno": 440}]}, {"nodeid": "tests/unit/test_conflict_resolution.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_creation", "type": "Function", "lineno": 16}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_to_dict", "type": "Function", "lineno": 38}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_from_dict", "type": "Function", "lineno": 65}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_creation", "type": "Function", "lineno": 92}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_log_conflict", "type": "Function", "lineno": 99}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_table", "type": "Function", "lineno": 123}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_record", "type": "Function", "lineno": 161}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_client", "type": "Function", "lineno": 199}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_export_import", "type": "Function", "lineno": 237}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_last_write_wins_resolver", "type": "Function", "lineno": 276}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_server_wins_resolver", "type": "Function", "lineno": 302}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_client_wins_resolver", "type": "Function", "lineno": 328}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_merge_fields_resolver", "type": "Function", "lineno": 354}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_custom_merge_resolver", "type": "Function", "lineno": 386}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_creation", "type": "Function", "lineno": 449}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_register_resolver", "type": "Function", "lineno": 459}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_set_default_resolver", "type": "Function", "lineno": 469}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_conflict", "type": "Function", "lineno": 479}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_with_specific_resolver", "type": "Function", "lineno": 512}]}, {"nodeid": "tests/unit/test_database.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_database.py::test_database_creation", "type": "Function", "lineno": 11}, {"nodeid": "tests/unit/test_database.py::test_insert_record", "type": "Function", "lineno": 20}, {"nodeid": "tests/unit/test_database.py::test_insert_duplicate_primary_key", "type": "Function", "lineno": 43}, {"nodeid": "tests/unit/test_database.py::test_update_record", "type": "Function", "lineno": 57}, {"nodeid": "tests/unit/test_database.py::test_update_nonexistent_record", "type": "Function", "lineno": 80}, {"nodeid": "tests/unit/test_database.py::test_delete_record", "type": "Function", "lineno": 94}, {"nodeid": "tests/unit/test_database.py::test_delete_nonexistent_record", "type": "Function", "lineno": 106}, {"nodeid": "tests/unit/test_database.py::test_get_record", "type": "Function", "lineno": 113}, {"nodeid": "tests/unit/test_database.py::test_get_nonexistent_record", "type": "Function", "lineno": 124}, {"nodeid": "tests/unit/test_database.py::test_query_records", "type": "Function", "lineno": 133}, {"nodeid": "tests/unit/test_database.py::test_query_with_limit", "type": "Function", "lineno": 144}, {"nodeid": "tests/unit/test_database.py::test_query_no_results", "type": "Function", "lineno": 154}, {"nodeid": "tests/unit/test_database.py::test_transaction_commit", "type": "Function", "lineno": 163}, {"nodeid": "tests/unit/test_database.py::test_transaction_rollback", "type": "Function", "lineno": 186}, {"nodeid": "tests/unit/test_database.py::test_transaction_explicit_rollback", "type": "Function", "lineno": 210}, {"nodeid": "tests/unit/test_database.py::test_change_log", "type": "Function", "lineno": 232}]}, {"nodeid": "tests/unit/test_power_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_power_manager.py::test_power_mode_from_battery_level", "type": "Function", "lineno": 40, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_profile_creation", "type": "Function", "lineno": 62, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_profile_get_default_profile", "type": "Function", "lineno": 79, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_deferred_operation_creation", "type": "Function", "lineno": 105, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_deferred_operation_execute", "type": "Function", "lineno": 127, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_creation", "type": "Function", "lineno": 163, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_set_power_mode", "type": "Function", "lineno": 176, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_set_custom_profile", "type": "Function", "lineno": 191, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_update_battery_status", "type": "Function", "lineno": 215, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_should_defer_operation", "type": "Function", "lineno": 235, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_enqueue_operation", "type": "Function", "lineno": 254, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_worker", "type": "Function", "lineno": 275, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_should_execute_now", "type": "Function", "lineno": 302, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_creation", "type": "Function", "lineno": 345, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_method_proxy", "type": "Function", "lineno": 363, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_deferred_operation", "type": "Function", "lineno": 382, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_sync_timer", "type": "Function", "lineno": 409, "deselected": true}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_force_sync", "type": "Function", "lineno": 450, "deselected": true}]}, {"nodeid": "tests/unit/test_schema_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_creation", "type": "Function", "lineno": 86}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_to_from_dict", "type": "Function", "lineno": 100}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_creation", "type": "Function", "lineno": 129}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_to_from_dict", "type": "Function", "lineno": 154}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_creation", "type": "Function", "lineno": 185}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_to_from_dict", "type": "Function", "lineno": 224}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_creation", "type": "Function", "lineno": 264}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_to_from_dict", "type": "Function", "lineno": 309}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_creation", "type": "Function", "lineno": 363}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_schema", "type": "Function", "lineno": 372}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_migration_plan", "type": "Function", "lineno": 395}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_can_migrate", "type": "Function", "lineno": 422}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_find_migration_path", "type": "Function", "lineno": 465}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_creation", "type": "Function", "lineno": 501}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_create_migration_plan", "type": "Function", "lineno": 509}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_schema_changes", "type": "Function", "lineno": 554}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_column_changes", "type": "Function", "lineno": 583}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_apply_migration", "type": "Function", "lineno": 607}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_creation", "type": "Function", "lineno": 658}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_client_upgrade_plan", "type": "Function", "lineno": 668}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_schema_compatibility", "type": "Function", "lineno": 710}]}, {"nodeid": "tests/unit/test_sync_protocol.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_no_loss", "type": "Function", "lineno": 17, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_with_loss", "type": "Function", "lineno": 25, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_with_latency", "type": "Function", "lineno": 33, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_creation", "type": "Function", "lineno": 48, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_update_table_change_id", "type": "Function", "lineno": 58, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_get_table_change_id", "type": "Function", "lineno": 75, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_update_version_vector", "type": "Function", "lineno": 87, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_get_version_vector", "type": "Function", "lineno": 114, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_mark_sync_complete", "type": "Function", "lineno": 131, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_request_from_dict", "type": "Function", "lineno": 147, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_request_to_dict", "type": "Function", "lineno": 183, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_response_from_dict", "type": "Function", "lineno": 209, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_response_to_dict", "type": "Function", "lineno": 247, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_creation", "type": "Function", "lineno": 275, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_get_or_create_client_state", "type": "Function", "lineno": 289, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_process_sync_request", "type": "Function", "lineno": 308, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_create_sync_request", "type": "Function", "lineno": 344, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_process_sync_response", "type": "Function", "lineno": 366, "deselected": true}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_with_changes", "type": "Function", "lineno": 416, "deselected": true}]}, {"nodeid": "tests/unit", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_change_tracker.py", "type": "Module"}, {"nodeid": "tests/unit/test_compression.py", "type": "Module"}, {"nodeid": "tests/unit/test_conflict_resolution.py", "type": "Module"}, {"nodeid": "tests/unit/test_database.py", "type": "Module"}, {"nodeid": "tests/unit/test_power_manager.py", "type": "Module"}, {"nodeid": "tests/unit/test_schema_manager.py", "type": "Module"}, {"nodeid": "tests/unit/test_sync_protocol.py", "type": "Module"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/integration", "type": "Package"}, {"nodeid": "tests/performance", "type": "Package"}, {"nodeid": "tests/unit", "type": "Package"}]}], "tests": [{"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.NONE]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.NONE]", "parametrize", "pytestmark", "CompressionLevel.NONE", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00031133322045207024, "outcome": "passed"}, "call": {"duration": 0.0023423749953508377, "outcome": "passed"}, "teardown": {"duration": 0.00011175032705068588, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.LOW]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.LOW]", "parametrize", "pytestmark", "CompressionLevel.LOW", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012341700494289398, "outcome": "passed"}, "call": {"duration": 0.002164625097066164, "outcome": "passed"}, "teardown": {"duration": 0.00011029094457626343, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.MEDIUM]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.MEDIUM]", "parametrize", "pytestmark", "CompressionLevel.MEDIUM", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012174993753433228, "outcome": "passed"}, "call": {"duration": 0.0021902075968682766, "outcome": "passed"}, "teardown": {"duration": 0.00011300016194581985, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.HIGH]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.HIGH]", "parametrize", "pytestmark", "CompressionLevel.HIGH", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012375041842460632, "outcome": "passed"}, "call": {"duration": 0.002169291954487562, "outcome": "passed"}, "teardown": {"duration": 0.00010179076343774796, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[10-1000]", "lineno": 349, "outcome": "failed", "keywords": ["test_conflict_resolution_performance[10-1000]", "parametrize", "pytestmark", "10-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012583378702402115, "outcome": "passed"}, "call": {"duration": 0.020568375010043383, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 69, "message": "ValueError: Record with primary key (0,) does not exist"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 402, "message": ""}, {"path": "syncdb/client.py", "lineno": 202, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 329, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 69, "message": "ValueError"}], "longrepr": "record_count = 1000, conflict_count = 10\n\n    @pytest.mark.parametrize(\"record_count\", [1000])\n    @pytest.mark.parametrize(\"conflict_count\", [10, 100])\n    def test_conflict_resolution_performance(record_count, conflict_count):\n        \"\"\"Test the performance of conflict resolution with different conflict volumes.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 100)\n    \n        # Set up conflict resolvers\n        field_priorities = {\n            \"users\": [\"username\", \"email\"]  # Prioritize these fields from client\n        }\n        client.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n        server.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n    \n        # Initial sync to get baseline data\n        client.sync()\n    \n        # First, let's get a list of existing records to avoid errors\n        existing_records = []\n        for i in range(min(record_count, 100)):  # Limit to 100 records for test purposes\n            try:\n                if server.get(\"users\", [i]) is not None:\n                    existing_records.append(i)\n            except:\n                pass\n    \n        # Ensure we have enough records for the test\n        test_count = min(conflict_count, len(existing_records))\n        if test_count == 0:\n            # Create at least one record if needed\n            record_id = 0\n            server.insert(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"test_user_{record_id}\",\n                \"email\": f\"test_{record_id}@example.com\"\n            })\n            existing_records.append(record_id)\n            test_count = 1\n    \n        # Create conflicts by updating the same records on both client and server\n        for i in range(test_count):\n            record_id = existing_records[i % len(existing_records)]\n    \n            # Update on server\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"server_{record_id}\",\n                \"email\": f\"server_{record_id}@example.com\",\n                \"description\": f\"Server description {record_id}\"\n            })\n    \n            # Update on client\n>           client.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"client_{record_id}\",\n                \"email\": f\"client_{record_id}@example.com\",\n                \"description\": f\"Client description {record_id}\"\n            })\n\ntests/performance/test_performance.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:202: in update\n    return self.database.update(table_name, record, client_id=self.client_id)\nsyncdb/db/database.py:329: in update\n    return table.update(record, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101ddfe20>\nrecord = {'description': 'Client description 0', 'email': 'client_0@example.com', 'id': 0, 'username': 'client_0'}\nclient_id = 'perf_test_client'\n\n    def update(self, record: Dict[str, Any], client_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"\n        Update an existing record in the table.\n        Returns the updated record.\n        \"\"\"\n        self._validate_record(record)\n        pk_tuple = self._get_primary_key_tuple(record)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (0,) does not exist\n\nsyncdb/db/database.py:69: ValueError"}, "teardown": {"duration": 0.00013908278197050095, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[100-1000]", "lineno": 349, "outcome": "failed", "keywords": ["test_conflict_resolution_performance[100-1000]", "parametrize", "pytestmark", "100-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001432918943464756, "outcome": "passed"}, "call": {"duration": 0.018894542008638382, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 69, "message": "ValueError: Record with primary key (0,) does not exist"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 402, "message": ""}, {"path": "syncdb/client.py", "lineno": 202, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 329, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 69, "message": "ValueError"}], "longrepr": "record_count = 1000, conflict_count = 100\n\n    @pytest.mark.parametrize(\"record_count\", [1000])\n    @pytest.mark.parametrize(\"conflict_count\", [10, 100])\n    def test_conflict_resolution_performance(record_count, conflict_count):\n        \"\"\"Test the performance of conflict resolution with different conflict volumes.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 100)\n    \n        # Set up conflict resolvers\n        field_priorities = {\n            \"users\": [\"username\", \"email\"]  # Prioritize these fields from client\n        }\n        client.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n        server.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n    \n        # Initial sync to get baseline data\n        client.sync()\n    \n        # First, let's get a list of existing records to avoid errors\n        existing_records = []\n        for i in range(min(record_count, 100)):  # Limit to 100 records for test purposes\n            try:\n                if server.get(\"users\", [i]) is not None:\n                    existing_records.append(i)\n            except:\n                pass\n    \n        # Ensure we have enough records for the test\n        test_count = min(conflict_count, len(existing_records))\n        if test_count == 0:\n            # Create at least one record if needed\n            record_id = 0\n            server.insert(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"test_user_{record_id}\",\n                \"email\": f\"test_{record_id}@example.com\"\n            })\n            existing_records.append(record_id)\n            test_count = 1\n    \n        # Create conflicts by updating the same records on both client and server\n        for i in range(test_count):\n            record_id = existing_records[i % len(existing_records)]\n    \n            # Update on server\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"server_{record_id}\",\n                \"email\": f\"server_{record_id}@example.com\",\n                \"description\": f\"Server description {record_id}\"\n            })\n    \n            # Update on client\n>           client.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"client_{record_id}\",\n                \"email\": f\"client_{record_id}@example.com\",\n                \"description\": f\"Client description {record_id}\"\n            })\n\ntests/performance/test_performance.py:402: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:202: in update\n    return self.database.update(table_name, record, client_id=self.client_id)\nsyncdb/db/database.py:329: in update\n    return table.update(record, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101e89bd0>\nrecord = {'description': 'Client description 0', 'email': 'client_0@example.com', 'id': 0, 'username': 'client_0'}\nclient_id = 'perf_test_client'\n\n    def update(self, record: Dict[str, Any], client_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"\n        Update an existing record in the table.\n        Returns the updated record.\n        \"\"\"\n        self._validate_record(record)\n        pk_tuple = self._get_primary_key_tuple(record)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (0,) does not exist\n\nsyncdb/db/database.py:69: ValueError"}, "teardown": {"duration": 0.00020804163068532944, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_tracker_creation", "lineno": 10, "outcome": "passed", "keywords": ["test_change_tracker_creation", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00021179113537073135, "outcome": "passed"}, "call": {"duration": 0.00011779088526964188, "outcome": "passed"}, "teardown": {"duration": 0.00010904204100370407, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_change", "lineno": 18, "outcome": "passed", "keywords": ["test_record_change", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011274963617324829, "outcome": "passed"}, "call": {"duration": 0.00012537464499473572, "outcome": "passed"}, "teardown": {"duration": 0.00010370789095759392, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_multiple_changes", "lineno": 47, "outcome": "passed", "keywords": ["test_record_multiple_changes", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001093749888241291, "outcome": "passed"}, "call": {"duration": 0.00013683410361409187, "outcome": "passed"}, "teardown": {"duration": 0.00010520871728658676, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_changes_different_tables", "lineno": 79, "outcome": "passed", "keywords": ["test_record_changes_different_tables", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001094588078558445, "outcome": "passed"}, "call": {"duration": 0.00011729216203093529, "outcome": "passed"}, "teardown": {"duration": 0.00010470813140273094, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since", "lineno": 113, "outcome": "passed", "keywords": ["test_get_changes_since", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010816706344485283, "outcome": "passed"}, "call": {"duration": 0.000120542012155056, "outcome": "passed"}, "teardown": {"duration": 0.00010812468826770782, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since_with_client_exclusion", "lineno": 154, "outcome": "passed", "keywords": ["test_get_changes_since_with_client_exclusion", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011904211714863777, "outcome": "passed"}, "call": {"duration": 0.00012091593816876411, "outcome": "passed"}, "teardown": {"duration": 0.00010495772585272789, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_latest_change_id", "lineno": 195, "outcome": "passed", "keywords": ["test_get_latest_change_id", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010512489825487137, "outcome": "passed"}, "call": {"duration": 0.00011904072016477585, "outcome": "passed"}, "teardown": {"duration": 0.00010737497359514236, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_serialize_deserialize_changes", "lineno": 225, "outcome": "passed", "keywords": ["test_serialize_deserialize_changes", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001117088831961155, "outcome": "passed"}, "call": {"duration": 0.00016337493434548378, "outcome": "passed"}, "teardown": {"duration": 0.00010391604155302048, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_to_dict", "lineno": 272, "outcome": "passed", "keywords": ["test_change_record_to_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011579180136322975, "outcome": "passed"}, "call": {"duration": 0.00011404138058423996, "outcome": "passed"}, "teardown": {"duration": 0.00010841572657227516, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_from_dict", "lineno": 300, "outcome": "passed", "keywords": ["test_change_record_from_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001043747179210186, "outcome": "passed"}, "call": {"duration": 0.00011108396574854851, "outcome": "passed"}, "teardown": {"duration": 0.00010045897215604782, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_creation", "lineno": 328, "outcome": "passed", "keywords": ["test_version_vector_creation", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010245805606245995, "outcome": "passed"}, "call": {"duration": 0.00011012516915798187, "outcome": "passed"}, "teardown": {"duration": 0.00010241707786917686, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_increment", "lineno": 335, "outcome": "passed", "keywords": ["test_version_vector_increment", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010358262807130814, "outcome": "passed"}, "call": {"duration": 0.00011249957606196404, "outcome": "passed"}, "teardown": {"duration": 0.00010737497359514236, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_update", "lineno": 351, "outcome": "passed", "keywords": ["test_version_vector_update", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010779174044728279, "outcome": "passed"}, "call": {"duration": 0.00010962504893541336, "outcome": "passed"}, "teardown": {"duration": 0.00010316725820302963, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_dominates", "lineno": 368, "outcome": "passed", "keywords": ["test_version_vector_dominates", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010133301839232445, "outcome": "passed"}, "call": {"duration": 0.00011416710913181305, "outcome": "passed"}, "teardown": {"duration": 0.00010487530380487442, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_dominates", "lineno": 383, "outcome": "passed", "keywords": ["test_version_vector_not_dominates", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010891677811741829, "outcome": "passed"}, "call": {"duration": 0.00012191664427518845, "outcome": "passed"}, "teardown": {"duration": 0.00010791700333356857, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_concurrent", "lineno": 396, "outcome": "passed", "keywords": ["test_version_vector_concurrent", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011758273467421532, "outcome": "passed"}, "call": {"duration": 0.00010987510904669762, "outcome": "passed"}, "teardown": {"duration": 0.00010654190555214882, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_concurrent", "lineno": 411, "outcome": "passed", "keywords": ["test_version_vector_not_concurrent", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012912508100271225, "outcome": "passed"}, "call": {"duration": 0.00011541694402694702, "outcome": "passed"}, "teardown": {"duration": 0.00011900020763278008, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_to_dict", "lineno": 426, "outcome": "passed", "keywords": ["test_version_vector_to_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010320870205760002, "outcome": "passed"}, "call": {"duration": 0.00011108396574854851, "outcome": "passed"}, "teardown": {"duration": 0.00010449998080730438, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_from_dict", "lineno": 438, "outcome": "passed", "keywords": ["test_version_vector_from_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011041620746254921, "outcome": "passed"}, "call": {"duration": 0.00013370811939239502, "outcome": "passed"}, "teardown": {"duration": 0.00010916683822870255, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_int_compressor", "lineno": 17, "outcome": "passed", "keywords": ["test_int_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011241668835282326, "outcome": "passed"}, "call": {"duration": 0.0001166248694062233, "outcome": "passed"}, "teardown": {"duration": 0.00010624993592500687, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_float_compressor", "lineno": 47, "outcome": "passed", "keywords": ["test_float_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011004181578755379, "outcome": "passed"}, "call": {"duration": 0.00011283392086625099, "outcome": "passed"}, "teardown": {"duration": 0.0001077079214155674, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_text_compressor", "lineno": 77, "outcome": "passed", "keywords": ["test_text_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010945787653326988, "outcome": "passed"}, "call": {"duration": 0.00014674989506602287, "outcome": "passed"}, "teardown": {"duration": 0.00010524969547986984, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_binary_compressor", "lineno": 112, "outcome": "passed", "keywords": ["test_binary_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010562501847743988, "outcome": "passed"}, "call": {"duration": 0.00011708401143550873, "outcome": "passed"}, "teardown": {"duration": 0.00010008411481976509, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_datetime_compressor", "lineno": 144, "outcome": "passed", "keywords": ["test_datetime_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010179169476032257, "outcome": "passed"}, "call": {"duration": 0.000128875020891428, "outcome": "passed"}, "teardown": {"duration": 0.00010025035589933395, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_boolean_compressor", "lineno": 169, "outcome": "passed", "keywords": ["test_boolean_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 9.950017556548119e-05, "outcome": "passed"}, "call": {"duration": 0.00011312495917081833, "outcome": "passed"}, "teardown": {"duration": 0.00010433327406644821, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_none_compressor", "lineno": 194, "outcome": "passed", "keywords": ["test_none_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010920781642198563, "outcome": "passed"}, "call": {"duration": 0.00010670814663171768, "outcome": "passed"}, "teardown": {"duration": 0.00010066712275147438, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_list_compressor", "lineno": 214, "outcome": "passed", "keywords": ["test_list_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013266736641526222, "outcome": "passed"}, "call": {"duration": 0.00013441592454910278, "outcome": "passed"}, "teardown": {"duration": 0.00011462531983852386, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_dict_compressor", "lineno": 252, "outcome": "passed", "keywords": ["test_dict_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010733306407928467, "outcome": "passed"}, "call": {"duration": 0.0001810002140700817, "outcome": "passed"}, "teardown": {"duration": 0.00010987464338541031, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_compressor_factory", "lineno": 288, "outcome": "passed", "keywords": ["test_compressor_factory", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011124974116683006, "outcome": "passed"}, "call": {"duration": 0.00012283306568861008, "outcome": "passed"}, "teardown": {"duration": 0.00010170787572860718, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor", "lineno": 325, "outcome": "passed", "keywords": ["test_payload_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010258285328745842, "outcome": "passed"}, "call": {"duration": 0.00016645807772874832, "outcome": "passed"}, "teardown": {"duration": 0.00010149972513318062, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_changes", "lineno": 366, "outcome": "passed", "keywords": ["test_payload_compressor_changes", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001043328084051609, "outcome": "passed"}, "call": {"duration": 0.00015700003132224083, "outcome": "passed"}, "teardown": {"duration": 0.00010120915248990059, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_set_compression_level", "lineno": 415, "outcome": "passed", "keywords": ["test_payload_compressor_set_compression_level", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011133309453725815, "outcome": "passed"}, "call": {"duration": 0.0001571248285472393, "outcome": "passed"}, "teardown": {"duration": 0.00010375026613473892, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_compression_efficiency", "lineno": 440, "outcome": "passed", "keywords": ["test_compression_efficiency", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010366598144173622, "outcome": "passed"}, "call": {"duration": 0.0002054581418633461, "outcome": "passed"}, "teardown": {"duration": 0.00010262476280331612, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_creation", "lineno": 16, "outcome": "passed", "keywords": ["test_conflict_metadata_creation", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001105419360101223, "outcome": "passed"}, "call": {"duration": 0.00011641718447208405, "outcome": "passed"}, "teardown": {"duration": 0.0001044170930981636, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_to_dict", "lineno": 38, "outcome": "passed", "keywords": ["test_conflict_metadata_to_dict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011250004172325134, "outcome": "passed"}, "call": {"duration": 0.00011508306488394737, "outcome": "passed"}, "teardown": {"duration": 0.00010504201054573059, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_from_dict", "lineno": 65, "outcome": "passed", "keywords": ["test_conflict_metadata_from_dict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010754074901342392, "outcome": "passed"}, "call": {"duration": 0.00012262491509318352, "outcome": "passed"}, "teardown": {"duration": 0.0001105000264942646, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_creation", "lineno": 92, "outcome": "passed", "keywords": ["test_conflict_audit_log_creation", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011120783165097237, "outcome": "passed"}, "call": {"duration": 0.0001165410503745079, "outcome": "passed"}, "teardown": {"duration": 9.933300316333771e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_log_conflict", "lineno": 99, "outcome": "passed", "keywords": ["test_conflict_audit_log_log_conflict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010454095900058746, "outcome": "passed"}, "call": {"duration": 0.00011033331975340843, "outcome": "passed"}, "teardown": {"duration": 0.0001071668229997158, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_table", "lineno": 123, "outcome": "passed", "keywords": ["test_conflict_audit_log_get_conflicts_for_table", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010470906272530556, "outcome": "passed"}, "call": {"duration": 0.00012104073539376259, "outcome": "passed"}, "teardown": {"duration": 0.00012025004252791405, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_record", "lineno": 161, "outcome": "passed", "keywords": ["test_conflict_audit_log_get_conflicts_for_record", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001316666603088379, "outcome": "passed"}, "call": {"duration": 0.00011974992230534554, "outcome": "passed"}, "teardown": {"duration": 0.00010808417573571205, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_client", "lineno": 199, "outcome": "passed", "keywords": ["test_conflict_audit_log_get_conflicts_for_client", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011262483894824982, "outcome": "passed"}, "call": {"duration": 0.00012104073539376259, "outcome": "passed"}, "teardown": {"duration": 0.00010850001126527786, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_export_import", "lineno": 237, "outcome": "passed", "keywords": ["test_conflict_audit_log_export_import", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011250004172325134, "outcome": "passed"}, "call": {"duration": 0.00014366675168275833, "outcome": "passed"}, "teardown": {"duration": 0.0001222500577569008, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_last_write_wins_resolver", "lineno": 276, "outcome": "passed", "keywords": ["test_last_write_wins_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010362500324845314, "outcome": "passed"}, "call": {"duration": 0.0001204577274620533, "outcome": "passed"}, "teardown": {"duration": 0.00010712491348385811, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_server_wins_resolver", "lineno": 302, "outcome": "passed", "keywords": ["test_server_wins_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011245906352996826, "outcome": "passed"}, "call": {"duration": 0.0001372080296278, "outcome": "passed"}, "teardown": {"duration": 0.00011108396574854851, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_client_wins_resolver", "lineno": 328, "outcome": "passed", "keywords": ["test_client_wins_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011116731911897659, "outcome": "passed"}, "call": {"duration": 0.00011133309453725815, "outcome": "passed"}, "teardown": {"duration": 0.00012579234316945076, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_merge_fields_resolver", "lineno": 354, "outcome": "passed", "keywords": ["test_merge_fields_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012920796871185303, "outcome": "passed"}, "call": {"duration": 0.00011654198169708252, "outcome": "passed"}, "teardown": {"duration": 0.00010579079389572144, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_custom_merge_resolver", "lineno": 386, "outcome": "passed", "keywords": ["test_custom_merge_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011874968186020851, "outcome": "passed"}, "call": {"duration": 0.0001227501779794693, "outcome": "passed"}, "teardown": {"duration": 0.00012354226782917976, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_creation", "lineno": 449, "outcome": "passed", "keywords": ["test_conflict_manager_creation", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013787485659122467, "outcome": "passed"}, "call": {"duration": 0.00011108303442597389, "outcome": "passed"}, "teardown": {"duration": 0.00010883435606956482, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_register_resolver", "lineno": 459, "outcome": "passed", "keywords": ["test_conflict_manager_register_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014999974519014359, "outcome": "passed"}, "call": {"duration": 0.00011895876377820969, "outcome": "passed"}, "teardown": {"duration": 0.00012012524530291557, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_set_default_resolver", "lineno": 469, "outcome": "passed", "keywords": ["test_conflict_manager_set_default_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014966586604714394, "outcome": "passed"}, "call": {"duration": 0.0001449580304324627, "outcome": "passed"}, "teardown": {"duration": 0.00011424999684095383, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_conflict", "lineno": 479, "outcome": "passed", "keywords": ["test_conflict_manager_resolve_conflict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001572081819176674, "outcome": "passed"}, "call": {"duration": 0.00011737504974007607, "outcome": "passed"}, "teardown": {"duration": 0.00012904219329357147, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_with_specific_resolver", "lineno": 512, "outcome": "passed", "keywords": ["test_conflict_manager_resolve_with_specific_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014404207468032837, "outcome": "passed"}, "call": {"duration": 0.00011974992230534554, "outcome": "passed"}, "teardown": {"duration": 0.00012062489986419678, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_database_creation", "lineno": 11, "outcome": "passed", "keywords": ["test_database_creation", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014133378863334656, "outcome": "passed"}, "call": {"duration": 0.00011954130604863167, "outcome": "passed"}, "teardown": {"duration": 0.00011845817789435387, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_insert_record", "lineno": 20, "outcome": "passed", "keywords": ["test_insert_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018858304247260094, "outcome": "passed"}, "call": {"duration": 0.00013191625475883484, "outcome": "passed"}, "teardown": {"duration": 0.00012908270582556725, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_insert_duplicate_primary_key", "lineno": 43, "outcome": "passed", "keywords": ["test_insert_duplicate_primary_key", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00020399969071149826, "outcome": "passed"}, "call": {"duration": 0.00016933400183916092, "outcome": "passed"}, "teardown": {"duration": 0.0001250840723514557, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_update_record", "lineno": 57, "outcome": "passed", "keywords": ["test_update_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018591666594147682, "outcome": "passed"}, "call": {"duration": 0.000120584387332201, "outcome": "passed"}, "teardown": {"duration": 0.00012762518599629402, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_update_nonexistent_record", "lineno": 80, "outcome": "passed", "keywords": ["test_update_nonexistent_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018241675570607185, "outcome": "passed"}, "call": {"duration": 0.00011766701936721802, "outcome": "passed"}, "teardown": {"duration": 0.00012029241770505905, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_delete_record", "lineno": 94, "outcome": "passed", "keywords": ["test_delete_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019016675651073456, "outcome": "passed"}, "call": {"duration": 0.00013287505134940147, "outcome": "passed"}, "teardown": {"duration": 0.00011891685426235199, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_delete_nonexistent_record", "lineno": 106, "outcome": "passed", "keywords": ["test_delete_nonexistent_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018554087728261948, "outcome": "passed"}, "call": {"duration": 0.00012708408758044243, "outcome": "passed"}, "teardown": {"duration": 0.00011625001206994057, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_get_record", "lineno": 113, "outcome": "passed", "keywords": ["test_get_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018645869567990303, "outcome": "passed"}, "call": {"duration": 0.00013029202818870544, "outcome": "passed"}, "teardown": {"duration": 0.00012183329090476036, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_get_nonexistent_record", "lineno": 124, "outcome": "passed", "keywords": ["test_get_nonexistent_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001755421981215477, "outcome": "passed"}, "call": {"duration": 0.0001254160888493061, "outcome": "passed"}, "teardown": {"duration": 0.00012300023809075356, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_query_records", "lineno": 133, "outcome": "passed", "keywords": ["test_query_records", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001843748614192009, "outcome": "passed"}, "call": {"duration": 0.00012766709551215172, "outcome": "passed"}, "teardown": {"duration": 0.00011241715401411057, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_query_with_limit", "lineno": 144, "outcome": "passed", "keywords": ["test_query_with_limit", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018983334302902222, "outcome": "passed"}, "call": {"duration": 0.00012312503531575203, "outcome": "passed"}, "teardown": {"duration": 0.0001294165849685669, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_query_no_results", "lineno": 154, "outcome": "passed", "keywords": ["test_query_no_results", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002043750137090683, "outcome": "passed"}, "call": {"duration": 9.89171676337719e-05, "outcome": "passed"}, "teardown": {"duration": 0.000132082961499691, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_transaction_commit", "lineno": 163, "outcome": "passed", "keywords": ["test_transaction_commit", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019412487745285034, "outcome": "passed"}, "call": {"duration": 0.00015849992632865906, "outcome": "passed"}, "teardown": {"duration": 0.0001527089625597, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_transaction_rollback", "lineno": 186, "outcome": "passed", "keywords": ["test_transaction_rollback", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00021125003695487976, "outcome": "passed"}, "call": {"duration": 0.00016125012189149857, "outcome": "passed"}, "teardown": {"duration": 0.00012166611850261688, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_transaction_explicit_rollback", "lineno": 210, "outcome": "passed", "keywords": ["test_transaction_explicit_rollback", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019241729751229286, "outcome": "passed"}, "call": {"duration": 0.0001277080737054348, "outcome": "passed"}, "teardown": {"duration": 0.00014120759442448616, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_change_log", "lineno": 232, "outcome": "passed", "keywords": ["test_change_log", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00020829075947403908, "outcome": "passed"}, "call": {"duration": 0.00010779174044728279, "outcome": "passed"}, "teardown": {"duration": 0.00011574989184737206, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_creation", "lineno": 86, "outcome": "passed", "keywords": ["test_schema_migration_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010116677731275558, "outcome": "passed"}, "call": {"duration": 9.766686707735062e-05, "outcome": "passed"}, "teardown": {"duration": 0.0001054997555911541, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_to_from_dict", "lineno": 100, "outcome": "passed", "keywords": ["test_schema_migration_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 9.120767936110497e-05, "outcome": "passed"}, "call": {"duration": 0.0001105000264942646, "outcome": "passed"}, "teardown": {"duration": 0.00011900020763278008, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_creation", "lineno": 129, "outcome": "passed", "keywords": ["test_column_change_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010720919817686081, "outcome": "passed"}, "call": {"duration": 0.00010770885273814201, "outcome": "passed"}, "teardown": {"duration": 0.00010687531903386116, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_to_from_dict", "lineno": 154, "outcome": "passed", "keywords": ["test_column_change_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010499963536858559, "outcome": "passed"}, "call": {"duration": 0.00013837497681379318, "outcome": "passed"}, "teardown": {"duration": 0.00014025019481778145, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_creation", "lineno": 185, "outcome": "passed", "keywords": ["test_table_change_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012191664427518845, "outcome": "passed"}, "call": {"duration": 0.00010199984535574913, "outcome": "passed"}, "teardown": {"duration": 9.854184463620186e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_to_from_dict", "lineno": 224, "outcome": "passed", "keywords": ["test_table_change_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 9.337533265352249e-05, "outcome": "passed"}, "call": {"duration": 0.000124999787658453, "outcome": "passed"}, "teardown": {"duration": 0.00011499971151351929, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_creation", "lineno": 264, "outcome": "passed", "keywords": ["test_migration_plan_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001032920554280281, "outcome": "passed"}, "call": {"duration": 0.00010683340951800346, "outcome": "passed"}, "teardown": {"duration": 9.300000965595245e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_to_from_dict", "lineno": 309, "outcome": "passed", "keywords": ["test_migration_plan_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010016700252890587, "outcome": "passed"}, "call": {"duration": 0.00015687523409724236, "outcome": "passed"}, "teardown": {"duration": 9.770924225449562e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_creation", "lineno": 363, "outcome": "passed", "keywords": ["test_schema_version_manager_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 9.508337825536728e-05, "outcome": "passed"}, "call": {"duration": 8.962489664554596e-05, "outcome": "passed"}, "teardown": {"duration": 7.870933040976524e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_schema", "lineno": 372, "outcome": "passed", "keywords": ["test_schema_version_manager_register_schema", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.683325722813606e-05, "outcome": "passed"}, "call": {"duration": 9.920820593833923e-05, "outcome": "passed"}, "teardown": {"duration": 8.999975398182869e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_migration_plan", "lineno": 395, "outcome": "passed", "keywords": ["test_schema_version_manager_register_migration_plan", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010574981570243835, "outcome": "passed"}, "call": {"duration": 8.862512186169624e-05, "outcome": "passed"}, "teardown": {"duration": 8.133286610245705e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_can_migrate", "lineno": 422, "outcome": "passed", "keywords": ["test_schema_version_manager_can_migrate", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.124997839331627e-05, "outcome": "passed"}, "call": {"duration": 9.195879101753235e-05, "outcome": "passed"}, "teardown": {"duration": 8.758390322327614e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_find_migration_path", "lineno": 465, "outcome": "passed", "keywords": ["test_schema_version_manager_find_migration_path", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 7.950002327561378e-05, "outcome": "passed"}, "call": {"duration": 8.929194882512093e-05, "outcome": "passed"}, "teardown": {"duration": 7.54999928176403e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_creation", "lineno": 501, "outcome": "passed", "keywords": ["test_schema_migrator_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014391588047146797, "outcome": "passed"}, "call": {"duration": 0.00013187481090426445, "outcome": "passed"}, "teardown": {"duration": 8.800020441412926e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_create_migration_plan", "lineno": 509, "outcome": "passed", "keywords": ["test_schema_migrator_create_migration_plan", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.525000885128975e-05, "outcome": "passed"}, "call": {"duration": 0.00011308398097753525, "outcome": "passed"}, "teardown": {"duration": 9.66251827776432e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_schema_changes", "lineno": 554, "outcome": "passed", "keywords": ["test_schema_migrator_analyze_schema_changes", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.083274587988853e-05, "outcome": "passed"}, "call": {"duration": 0.00010616704821586609, "outcome": "passed"}, "teardown": {"duration": 8.029118180274963e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_column_changes", "lineno": 583, "outcome": "passed", "keywords": ["test_schema_migrator_analyze_column_changes", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 7.950002327561378e-05, "outcome": "passed"}, "call": {"duration": 0.00011154171079397202, "outcome": "passed"}, "teardown": {"duration": 0.00010537495836615562, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_apply_migration", "lineno": 607, "outcome": "passed", "keywords": ["test_schema_migrator_apply_migration", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.150003850460052e-05, "outcome": "passed"}, "call": {"duration": 0.0001339167356491089, "outcome": "passed"}, "teardown": {"duration": 7.650023326277733e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_creation", "lineno": 658, "outcome": "passed", "keywords": ["test_schema_synchronizer_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.462509140372276e-05, "outcome": "passed"}, "call": {"duration": 8.087465539574623e-05, "outcome": "passed"}, "teardown": {"duration": 7.77500681579113e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_client_upgrade_plan", "lineno": 668, "outcome": "passed", "keywords": ["test_schema_synchronizer_get_client_upgrade_plan", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.170772343873978e-05, "outcome": "passed"}, "call": {"duration": 0.00011687492951750755, "outcome": "passed"}, "teardown": {"duration": 9.375018998980522e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_schema_compatibility", "lineno": 710, "outcome": "passed", "keywords": ["test_schema_synchronizer_get_schema_compatibility", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.987495675683022e-05, "outcome": "passed"}, "call": {"duration": 0.00010304199531674385, "outcome": "passed"}, "teardown": {"duration": 8.191680535674095e-05, "outcome": "passed"}}], "warnings": [{"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.NONE] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 12038, 'compression_ratio': 0.9993358791300017, 'compression_time': 1.71661376953125e-05, 'decompression_time': 2.002716064453125e-05}, {'record_type': 2, 'json_size': 4916, 'compressed_size': 3897, 'compression_ratio': 0.7927176566314077, 'compression_time': 0.0005888938903808594, 'decompression_time': 0.0004968643188476562}, {'record_type': 3, 'json_size': 5472, 'compressed_size': 2052, 'compression_ratio': 0.375, 'compression_time': 0.00024509429931640625, 'decompression_time': 0.0003039836883544922}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.LOW] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 133, 'compression_ratio': 0.011041009463722398, 'compression_time': 2.3126602172851562e-05, 'decompression_time': 1.71661376953125e-05}, {'record_type': 2, 'json_size': 4929, 'compressed_size': 3910, 'compression_ratio': 0.7932643538243052, 'compression_time': 0.0005259513854980469, 'decompression_time': 0.0004680156707763672}, {'record_type': 3, 'json_size': 5440, 'compressed_size': 2060, 'compression_ratio': 0.3786764705882353, 'compression_time': 0.00022482872009277344, 'decompression_time': 0.00030493736267089844}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.MEDIUM] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 96, 'compression_ratio': 0.007969450439980076, 'compression_time': 4.291534423828125e-05, 'decompression_time': 1.52587890625e-05}, {'record_type': 2, 'json_size': 4904, 'compressed_size': 3891, 'compression_ratio': 0.7934339314845025, 'compression_time': 0.0005371570587158203, 'decompression_time': 0.00047469139099121094}, {'record_type': 3, 'json_size': 5444, 'compressed_size': 2060, 'compression_ratio': 0.3783982365907421, 'compression_time': 0.00022792816162109375, 'decompression_time': 0.00030303001403808594}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.HIGH] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 96, 'compression_ratio': 0.007969450439980076, 'compression_time': 4.291534423828125e-05, 'decompression_time': 1.4066696166992188e-05}, {'record_type': 2, 'json_size': 4906, 'compressed_size': 3893, 'compression_ratio': 0.7935181410517733, 'compression_time': 0.0005269050598144531, 'decompression_time': 0.0004699230194091797}, {'record_type': 3, 'json_size': 5462, 'compressed_size': 2060, 'compression_ratio': 0.37715122665690226, 'compression_time': 0.000225067138671875, 'decompression_time': 0.0003008842468261719}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}]}