{"created": 1747285119.5247035, "duration": 1.0975956916809082, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer", "environment": {}, "summary": {"passed": 46, "failed": 14, "total": 60, "collected": 60}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer", "outcome": "passed", "result": [{"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "type": "Function", "lineno": 28}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "type": "Function", "lineno": 36}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "type": "Function", "lineno": 78}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "type": "Function", "lineno": 129}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "type": "Function", "lineno": 163}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "type": "Function", "lineno": 187}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "type": "Function", "lineno": 311}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "type": "Function", "lineno": 370}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "type": "Function", "lineno": 407}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "type": "Function", "lineno": 459}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "type": "Function", "lineno": 512}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "type": "Function", "lineno": 551}]}, {"nodeid": "tests/expense/test_categorizer.py", "outcome": "passed", "result": [{"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer", "type": "Class"}]}, {"nodeid": "tests/expense", "outcome": "passed", "result": [{"nodeid": "tests/expense/test_categorizer.py", "type": "Module"}]}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager", "outcome": "passed", "result": [{"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_init", "type": "Function", "lineno": 20}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "type": "Function", "lineno": 36}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "type": "Function", "lineno": 54}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "type": "Function", "lineno": 86}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "type": "Function", "lineno": 113}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "type": "Function", "lineno": 144}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "type": "Function", "lineno": 171}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "type": "Function", "lineno": 196}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "type": "Function", "lineno": 223}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "type": "Function", "lineno": 243}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "type": "Function", "lineno": 302}]}, {"nodeid": "tests/income/test_income_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/income/test_income_manager.py::TestIncomeManager", "type": "Class"}]}, {"nodeid": "tests/income", "outcome": "passed", "result": [{"nodeid": "tests/income/test_income_manager.py", "type": "Module"}]}, {"nodeid": "tests/integration/test_categorization_recovery.py::TestCategorizationRecovery", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 172}]}, {"nodeid": "tests/integration/test_categorization_recovery.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_categorization_recovery.py::TestCategorizationRecovery", "type": "Class"}]}, {"nodeid": "tests/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "type": "Function", "lineno": 29}, {"nodeid": "tests/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "type": "Function", "lineno": 181}]}, {"nodeid": "tests/integration/test_expense_tax_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "type": "Class"}]}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "type": "Function", "lineno": 227}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "type": "Function", "lineno": 324}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "type": "Function", "lineno": 477}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "type": "Function", "lineno": 567}]}, {"nodeid": "tests/integration/test_multi_year_projects.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects", "type": "Class"}]}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 234}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 345}]}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "type": "Class"}]}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "type": "Function", "lineno": 323}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "type": "Function", "lineno": 389}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "type": "Function", "lineno": 475}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "type": "Function", "lineno": 584}]}, {"nodeid": "tests/integration/test_year_over_year_comparison.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_categorization_recovery.py", "type": "Module"}, {"nodeid": "tests/integration/test_expense_tax_integration.py", "type": "Module"}, {"nodeid": "tests/integration/test_multi_year_projects.py", "type": "Module"}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py", "type": "Module"}, {"nodeid": "tests/integration/test_year_over_year_comparison.py", "type": "Module"}]}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler", "outcome": "passed", "result": [{"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "type": "Function", "lineno": 25}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "type": "Function", "lineno": 30}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "type": "Function", "lineno": 63}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "type": "Function", "lineno": 100}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "type": "Function", "lineno": 120}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "type": "Function", "lineno": 171}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "type": "Function", "lineno": 191}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "type": "Function", "lineno": 214}]}, {"nodeid": "tests/project/test_profitability_analyzer.py", "outcome": "passed", "result": [{"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler", "type": "Class"}]}, {"nodeid": "tests/project", "outcome": "passed", "result": [{"nodeid": "tests/project/test_profitability_analyzer.py", "type": "Module"}]}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector", "outcome": "passed", "result": [{"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_init", "type": "Function", "lineno": 30}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "type": "Function", "lineno": 35}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "type": "Function", "lineno": 145}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "type": "Function", "lineno": 217}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "type": "Function", "lineno": 236}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "type": "Function", "lineno": 279}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "type": "Function", "lineno": 309}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "type": "Function", "lineno": 332}]}, {"nodeid": "tests/projection/test_financial_projector.py", "outcome": "passed", "result": [{"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector", "type": "Class"}]}, {"nodeid": "tests/projection", "outcome": "passed", "result": [{"nodeid": "tests/projection/test_financial_projector.py", "type": "Module"}]}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "outcome": "passed", "result": [{"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "type": "Function", "lineno": 19}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "type": "Function", "lineno": 29}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "type": "Function", "lineno": 60}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "type": "Function", "lineno": 71}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "type": "Function", "lineno": 114}]}, {"nodeid": "tests/tax/test_tax_manager_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "type": "Class"}]}, {"nodeid": "tests/tax", "outcome": "passed", "result": [{"nodeid": "tests/tax/test_tax_manager_simple.py", "type": "Module"}]}, {"nodeid": "tests/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/test_main.py::test_main", "type": "Function", "lineno": 3}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/expense", "type": "Package"}, {"nodeid": "tests/income", "type": "Package"}, {"nodeid": "tests/integration", "type": "Dir"}, {"nodeid": "tests/project", "type": "Package"}, {"nodeid": "tests/projection", "type": "Package"}, {"nodeid": "tests/tax", "type": "Package"}, {"nodeid": "tests/test_main.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "lineno": 28, "outcome": "passed", "keywords": ["test_init", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00043549900874495506, "outcome": "passed"}, "call": {"duration": 0.00014233205001801252, "outcome": "passed"}, "teardown": {"duration": 0.00010594702325761318, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "lineno": 36, "outcome": "passed", "keywords": ["test_add_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.732204489409924e-05, "outcome": "passed"}, "call": {"duration": 0.000290547963231802, "outcome": "passed"}, "teardown": {"duration": 9.25740459933877e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "lineno": 78, "outcome": "passed", "keywords": ["test_update_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.31319484859705e-05, "outcome": "passed"}, "call": {"duration": 0.00020807504188269377, "outcome": "passed"}, "teardown": {"duration": 8.127291221171618e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "lineno": 129, "outcome": "passed", "keywords": ["test_remove_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.096006397157907e-05, "outcome": "passed"}, "call": {"duration": 0.00012957199942320585, "outcome": "passed"}, "teardown": {"duration": 8.325907401740551e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "lineno": 163, "outcome": "passed", "keywords": ["test_add_mixed_use_item", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.205207996070385e-05, "outcome": "passed"}, "call": {"duration": 0.0001554819755256176, "outcome": "passed"}, "teardown": {"duration": 8.667097426950932e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "lineno": 187, "outcome": "passed", "keywords": ["test_categorize_transaction", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0012117179576307535, "outcome": "passed"}, "call": {"duration": 0.0005092510255053639, "outcome": "passed"}, "teardown": {"duration": 0.00011795596219599247, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "lineno": 311, "outcome": "passed", "keywords": ["test_categorize_transactions", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.128300007432699e-05, "outcome": "passed"}, "call": {"duration": 0.00020660704467445612, "outcome": "passed"}, "teardown": {"duration": 8.560495916754007e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "lineno": 370, "outcome": "passed", "keywords": ["test_apply_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.702091872692108e-05, "outcome": "passed"}, "call": {"duration": 0.00014911603648215532, "outcome": "passed"}, "teardown": {"duration": 8.048396557569504e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "lineno": 407, "outcome": "passed", "keywords": ["test_generate_expense_summary", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0009891940280795097, "outcome": "passed"}, "call": {"duration": 0.0002447349252179265, "outcome": "passed"}, "teardown": {"duration": 0.0001060370123013854, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "lineno": 459, "outcome": "passed", "keywords": ["test_get_audit_trail", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.515396621078253e-05, "outcome": "passed"}, "call": {"duration": 0.00016826495993882418, "outcome": "passed"}, "teardown": {"duration": 7.95009545981884e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "lineno": 512, "outcome": "passed", "keywords": ["test_correct_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.76840204000473e-05, "outcome": "passed"}, "call": {"duration": 0.00012592889834195375, "outcome": "passed"}, "teardown": {"duration": 7.535901386290789e-05, "outcome": "passed"}}, {"nodeid": "tests/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "lineno": 551, "outcome": "passed", "keywords": ["test_rule_matching", "TestExpenseCategorizer", "test_categorizer.py", "expense", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.060701657086611e-05, "outcome": "passed"}, "call": {"duration": 0.0003929190570488572, "outcome": "passed"}, "teardown": {"duration": 9.213597513735294e-05, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_init", "lineno": 20, "outcome": "passed", "keywords": ["test_init", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0002530260244384408, "outcome": "passed"}, "call": {"duration": 0.00012826593592762947, "outcome": "passed"}, "teardown": {"duration": 7.757393177598715e-05, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "lineno": 36, "outcome": "passed", "keywords": ["test_calculate_monthly_income", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0009866139153018594, "outcome": "passed"}, "call": {"duration": 0.00016759498976171017, "outcome": "passed"}, "teardown": {"duration": 0.00010137399658560753, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "lineno": 54, "outcome": "passed", "keywords": ["test_smooth_income_moving_average", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0015398469986394048, "outcome": "passed"}, "call": {"duration": 0.0014982029097154737, "outcome": "passed"}, "teardown": {"duration": 0.00013274606317281723, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "lineno": 86, "outcome": "passed", "keywords": ["test_smooth_income_exponential_smoothing", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0010327529162168503, "outcome": "passed"}, "call": {"duration": 0.0009560409234836698, "outcome": "passed"}, "teardown": {"duration": 0.00011626002378761768, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "lineno": 113, "outcome": "passed", "keywords": ["test_smooth_income_percentile_based", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.001026646001264453, "outcome": "passed"}, "call": {"duration": 0.001290012034587562, "outcome": "passed"}, "teardown": {"duration": 0.00013094802852720022, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "lineno": 144, "outcome": "passed", "keywords": ["test_smooth_income_seasonal_adjustment", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0010303889866918325, "outcome": "passed"}, "call": {"duration": 0.0022710749180987477, "outcome": "passed"}, "teardown": {"duration": 0.00013001402840018272, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "lineno": 171, "outcome": "passed", "keywords": ["test_smooth_income_rolling_median", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0010039289481937885, "outcome": "passed"}, "call": {"duration": 0.0009589970577508211, "outcome": "passed"}, "teardown": {"duration": 0.00013038900215178728, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "lineno": 196, "outcome": "passed", "keywords": ["test_smooth_income_with_target", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0010191600304096937, "outcome": "passed"}, "call": {"duration": 0.0009459409629926085, "outcome": "passed"}, "teardown": {"duration": 0.00011658004950731993, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "lineno": 223, "outcome": "passed", "keywords": ["test_forecast_revenue", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.001144123962149024, "outcome": "passed"}, "call": {"duration": 0.43377118604257703, "outcome": "passed"}, "teardown": {"duration": 0.000181852956302464, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "lineno": 243, "outcome": "passed", "keywords": ["test_extremely_irregular_income", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00011855794582515955, "outcome": "passed"}, "call": {"duration": 0.004385101958177984, "outcome": "passed"}, "teardown": {"duration": 0.0015612940769642591, "outcome": "passed"}}, {"nodeid": "tests/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "lineno": 302, "outcome": "passed", "keywords": ["test_income_smoothing_with_large_dataset", "TestIncomeManager", "test_income_manager.py", "income", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00010302604641765356, "outcome": "passed"}, "call": {"duration": 0.005379336886107922, "outcome": "passed"}, "teardown": {"duration": 0.00011157593689858913, "outcome": "passed"}}, {"nodeid": "tests/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00012184702791273594, "outcome": "passed"}, "call": {"duration": 0.0006420980207622051, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py", "lineno": 93, "message": "AssertionError: assert <ExpenseCateg...ess_supplies'> == <ExpenseCateg...L: 'personal'>\n  \n  - personal\n  + business_supplies"}, "traceback": [{"path": "tests/integration/test_categorization_recovery.py", "lineno": 93, "message": "AssertionError"}], "longrepr": "self = <test_categorization_recovery.TestCategorizationRecovery object at 0x7f2e30775340>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        categorizer.add_categorization_rule(business_rule)\n    \n        # Create transactions for Q1 2022\n        transactions = []\n    \n        # Transaction that should be business but will be miscategorized as personal\n        miscategorized_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 15),\n            amount=1200.0,\n            description=\"Equipment purchase\",  # Missing \"business\" keyword\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Correctly categorized transaction\n        correct_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 20),\n            amount=500.0,\n            description=\"Business supplies purchase\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Income transaction\n        income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 10),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        transactions.extend([miscategorized_transaction, correct_transaction, income_transaction])\n    \n        # Apply initial categorization\n        categorization_results = categorizer.categorize_transactions(transactions)\n    \n        categorized_transactions = []\n        for transaction in transactions:\n            if transaction.transaction_type == TransactionType.EXPENSE:\n                # Find matching result\n                for result in categorization_results:\n                    if result.transaction_id == transaction.id:\n                        transaction = categorizer.apply_categorization(transaction, result)\n                        break\n            categorized_transactions.append(transaction)\n    \n        # Verify the miscategorized transaction (should be PERSONAL by default)\n        miscategorized_tx = next(t for t in categorized_transactions\n                               if t.id == miscategorized_transaction.id)\n>       assert miscategorized_tx.category == ExpenseCategory.PERSONAL\nE       AssertionError: assert <ExpenseCateg...ess_supplies'> == <ExpenseCateg...L: 'personal'>\nE         \nE         - personal\nE         + business_supplies\n\ntests/integration/test_categorization_recovery.py:93: AssertionError"}, "teardown": {"duration": 0.00013347191270440817, "outcome": "passed"}}, {"nodeid": "tests/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "lineno": 172, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00011660903692245483, "outcome": "passed"}, "call": {"duration": 0.0006658179918304086, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py", "lineno": 319, "message": "AssertionError: assert 1 == 2\n +  where 1 = len([{'business_percentage': 100.0, 'correct_category': <ExpenseCategory.MARKETING: 'marketing'>, 'receipt': 'facebook_ads...usiness_use_percentage=0.0, project_id=None, client_id=None, invoice_id=None, receipt_path=None, notes=None, tags=[])}])"}, "traceback": [{"path": "tests/integration/test_categorization_recovery.py", "lineno": 319, "message": "AssertionError"}], "longrepr": "self = <test_categorization_recovery.TestCategorizationRecovery object at 0x7f2e30775f40>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test recovering from multiple categorization errors discovered later.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Marketing Rule\",\n                category=ExpenseCategory.MARKETING,\n                keyword_patterns=[\"marketing\", \"advertising\", \"promotion\"],\n                business_use_percentage=100.0,\n                priority=8,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"dining\"],\n                business_use_percentage=50.0,  # 50% business use for meals\n                priority=5,\n            ),\n        ]\n    \n        for rule in rules:\n            categorizer.add_categorization_rule(rule)\n    \n        # Create a large set of transactions, including some that will be miscategorized\n        transactions = []\n    \n        # Two miscategorized transactions\n        miscategorized_transactions = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 2, 10),\n                amount=200.0,\n                description=\"Adobe CC subscription\",  # Missing \"software\" keyword\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 2, 15),\n                amount=500.0,\n                description=\"Facebook ads campaign\",  # Missing \"marketing\" keyword\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        # Correctly categorized transactions\n        correct_transactions = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 2, 5),\n                amount=100.0,\n                description=\"Software subscription for design tools\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 2, 20),\n                amount=80.0,\n                description=\"Client lunch meeting at restaurant\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        # Income transaction\n        income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 2, 1),\n            amount=6000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        transactions.extend(miscategorized_transactions)\n        transactions.extend(correct_transactions)\n        transactions.append(income_transaction)\n    \n        # Apply initial categorization\n        categorization_results = categorizer.categorize_transactions(transactions)\n    \n        categorized_transactions = []\n        for transaction in transactions:\n            if transaction.transaction_type == TransactionType.EXPENSE:\n                # Find matching result\n                for result in categorization_results:\n                    if result.transaction_id == transaction.id:\n                        transaction = categorizer.apply_categorization(transaction, result)\n                        break\n            categorized_transactions.append(transaction)\n    \n        # Create receipts with correct metadata\n        receipts = {\n            miscategorized_transactions[0].id: {\n                \"filename\": \"adobe_receipt.pdf\",\n                \"merchant\": \"Adobe Inc.\",\n                \"category\": \"Software\",\n                \"date\": datetime(2022, 2, 10),\n            },\n            miscategorized_transactions[1].id: {\n                \"filename\": \"facebook_ads_receipt.pdf\",\n                \"merchant\": \"Facebook Ads\",\n                \"category\": \"Marketing\",\n                \"date\": datetime(2022, 2, 15),\n            },\n        }\n    \n        # Simulate discovering errors during receipt scanning months later\n        # We're now in Q3, reviewing Q1 and Q2 data for tax preparation\n        current_date = datetime(2022, 7, 15)\n    \n        # Process receipts and identify discrepancies\n        corrections = []\n    \n        for transaction in categorized_transactions:\n            if transaction.id in receipts:\n                receipt_info = receipts[transaction.id]\n    \n                # Compare receipt category with transaction category\n                if receipt_info[\"category\"] == \"Software\" and transaction.category != ExpenseCategory.SOFTWARE:\n                    corrections.append({\n                        \"transaction\": transaction,\n                        \"correct_category\": ExpenseCategory.SOFTWARE,\n                        \"business_percentage\": 100.0,\n                        \"receipt\": receipt_info[\"filename\"],\n                    })\n                elif receipt_info[\"category\"] == \"Marketing\" and transaction.category != ExpenseCategory.MARKETING:\n                    corrections.append({\n                        \"transaction\": transaction,\n                        \"correct_category\": ExpenseCategory.MARKETING,\n                        \"business_percentage\": 100.0,\n                        \"receipt\": receipt_info[\"filename\"],\n                    })\n    \n        # Verify we identified both miscategorized transactions\n>       assert len(corrections) == 2\nE       AssertionError: assert 1 == 2\nE        +  where 1 = len([{'business_percentage': 100.0, 'correct_category': <ExpenseCategory.MARKETING: 'marketing'>, 'receipt': 'facebook_ads...usiness_use_percentage=0.0, project_id=None, client_id=None, invoice_id=None, receipt_path=None, notes=None, tags=[])}])\n\ntests/integration/test_categorization_recovery.py:319: AssertionError"}, "teardown": {"duration": 0.0001396159641444683, "outcome": "passed"}}, {"nodeid": "tests/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "lineno": 29, "outcome": "failed", "keywords": ["test_business_expenses_impact_on_tax_liability", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00011514697689563036, "outcome": "passed"}, "call": {"duration": 0.0004821749171242118, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_expense_tax_integration.py", "lineno": 149, "message": "TypeError: TaxManager.calculate_tax_liability() got an unexpected keyword argument 'income'"}, "traceback": [{"path": "tests/integration/test_expense_tax_integration.py", "lineno": 149, "message": "TypeError"}], "longrepr": "self = <test_expense_tax_integration.TestExpenseTaxIntegration object at 0x7f2e307767b0>\n\n    def test_business_expenses_impact_on_tax_liability(self):\n        \"\"\"Test how business expense categorization impacts tax liability.\"\"\"\n        # Set up the expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n        business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        mixed_use_rule = CategorizationRule(\n            name=\"Mixed Use Rule\",\n            category=ExpenseCategory.INTERNET,\n            keyword_patterns=[\"internet\", \"phone\"],\n            business_use_percentage=80.0,\n            priority=5,\n        )\n    \n        personal_rule = CategorizationRule(\n            name=\"Personal Expense Rule\",\n            category=ExpenseCategory.PERSONAL,\n            keyword_patterns=[\"personal\", \"groceries\"],\n            business_use_percentage=0.0,\n            priority=3,\n        )\n    \n        categorizer.add_categorization_rule(business_rule)\n        categorizer.add_categorization_rule(mixed_use_rule)\n        categorizer.add_categorization_rule(personal_rule)\n    \n        # Set up the tax manager\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Create test transactions\n        transactions = [\n            # Business transaction - 100% deductible\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 15),\n                amount=1000.0,\n                description=\"Business supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n    \n            # Mixed-use transaction - partially deductible\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 20),\n                amount=200.0,\n                description=\"Internet bill payment\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n    \n            # Personal transaction - not deductible\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 25),\n                amount=500.0,\n                description=\"Personal groceries\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n    \n            # Income transaction\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 10),\n                amount=5000.0,\n                description=\"Client payment\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        # Categorize the expenses\n        categorization_results = categorizer.categorize_transactions(transactions)\n    \n        # Apply categorizations\n        categorized_transactions = []\n        for i, transaction in enumerate(transactions):\n            if transaction.transaction_type == TransactionType.EXPENSE:\n                # Find matching categorization result\n                for result in categorization_results:\n                    if result.transaction_id == transaction.id:\n                        transaction = categorizer.apply_categorization(transaction, result)\n                        break\n            categorized_transactions.append(transaction)\n    \n        # Calculate taxable income with categorized expenses\n        taxable_income = 0\n        business_expenses = 0\n        personal_expenses = 0\n    \n        for transaction in categorized_transactions:\n            if transaction.transaction_type == TransactionType.INCOME:\n                taxable_income += transaction.amount\n            elif transaction.transaction_type == TransactionType.EXPENSE:\n                # Apply business use percentage\n                if hasattr(transaction, 'business_use_percentage') and transaction.business_use_percentage > 0:\n                    business_amount = transaction.amount * (transaction.business_use_percentage / 100)\n                    personal_amount = transaction.amount - business_amount\n    \n                    business_expenses += business_amount\n                    personal_expenses += personal_amount\n                else:\n                    # Default to personal if no business use percentage\n                    personal_expenses += transaction.amount\n    \n        # Subtract business expenses from taxable income\n        adjusted_taxable_income = taxable_income - business_expenses\n    \n        # Calculate tax on full income (no deductions)\n>       full_tax_calculation: TaxLiability = tax_manager.calculate_tax_liability(\n            income=taxable_income,\n            tax_year=2022,\n            jurisdiction=TaxJurisdiction.FEDERAL\n        )\nE       TypeError: TaxManager.calculate_tax_liability() got an unexpected keyword argument 'income'\n\ntests/integration/test_expense_tax_integration.py:149: TypeError"}, "teardown": {"duration": 0.000140976975671947, "outcome": "passed"}}, {"nodeid": "tests/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "lineno": 181, "outcome": "failed", "keywords": ["test_expense_recategorization_tax_impact", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00010016199667006731, "outcome": "passed"}, "call": {"duration": 0.00018693192396312952, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_expense_tax_integration.py", "lineno": 215, "message": "TypeError: TaxManager.calculate_tax_liability() got an unexpected keyword argument 'income'"}, "traceback": [{"path": "tests/integration/test_expense_tax_integration.py", "lineno": 215, "message": "TypeError"}], "longrepr": "self = <test_expense_tax_integration.TestExpenseTaxIntegration object at 0x7f2e30776930>\n\n    def test_expense_recategorization_tax_impact(self):\n        \"\"\"Test how correcting expense categorization affects tax liability.\"\"\"\n        # Set up expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Set up tax manager\n        tax_manager = TaxManager()\n        tax_manager.load_default_brackets()\n    \n        # Create a transaction that's initially categorized as personal\n        transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 15),\n            amount=1000.0,\n            description=\"Equipment purchase initially miscategorized\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        )\n    \n        # Create income transaction\n        income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 10),\n            amount=10000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        # Calculate initial tax with personal categorization\n        initial_taxable_income = income_transaction.amount\n>       initial_tax: TaxLiability = tax_manager.calculate_tax_liability(\n            income=initial_taxable_income,\n            tax_year=2022,\n            jurisdiction=TaxJurisdiction.FEDERAL\n        )\nE       TypeError: TaxManager.calculate_tax_liability() got an unexpected keyword argument 'income'\n\ntests/integration/test_expense_tax_integration.py:215: TypeError"}, "teardown": {"duration": 0.00012733798939734697, "outcome": "passed"}}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "lineno": 227, "outcome": "failed", "keywords": ["test_project_profitability_across_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.001363229937851429, "outcome": "passed"}, "call": {"duration": 0.00014135707169771194, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_multi_year_projects.py", "lineno": 237, "message": "TypeError: ProjectProfiler.record_time_entry() got an unexpected keyword argument 'project_id'"}, "traceback": [{"path": "tests/integration/test_multi_year_projects.py", "lineno": 237, "message": "TypeError"}], "longrepr": "self = <test_multi_year_projects.TestMultiYearProjects object at 0x7f2e305c88f0>\ncross_year_project = Project(id='cross_year_project', name='Long-term Website Redesign', client_id='client1', start_date=datetime.datetime(...3, 31, 0, 0), status='completed', hourly_rate=90.0, fixed_price=None, estimated_hours=160.0, description=None, tags=[])\ncross_year_time_entries = [TimeEntry(id=UUID('a722b8f9-c51c-48a6-bc26-fdb64c3a51c7'), project_id='cross_year_project', start_time=datetime.datet...8, 12, 56, 23, 945598), duration_minutes=236.3990933, description='Discovery phase work', billable=True, tags=[]), ...]\ncross_year_expenses = [Transaction(id=UUID('ab954715-acad-4aba-8cf2-30cdfc12dd1a'), date=datetime.datetime(2022, 11, 10, 0, 0), amount=300.0...ntage=100.0, project_id='cross_year_project', client_id=None, invoice_id=None, receipt_path=None, notes=None, tags=[])]\ncross_year_invoices = [Invoice(id='inv-cross_year_project-1', client_id='client1', project_id='cross_year_project', issue_date=datetime.date...bsite redesign project', line_items=[{'description': 'Final payment for website redesign project', 'amount': 3600.0}])]\n\n    def test_project_profitability_across_tax_years(\n        self, cross_year_project, cross_year_time_entries, cross_year_expenses, cross_year_invoices\n    ):\n        \"\"\"Test profitability analysis for a project spanning multiple tax years.\"\"\"\n        # Set up project profiler\n        profiler = ProjectProfiler()\n    \n        # Record time entries\n        for time_entry in cross_year_time_entries:\n>           profiler.record_time_entry(\n                project_id=time_entry.project_id,\n                start_time=time_entry.start_time,\n                end_time=time_entry.end_time,\n                description=time_entry.description,\n                billable=time_entry.billable,\n            )\nE           TypeError: ProjectProfiler.record_time_entry() got an unexpected keyword argument 'project_id'\n\ntests/integration/test_multi_year_projects.py:237: TypeError"}, "teardown": {"duration": 0.0001695629907771945, "outcome": "passed"}}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "lineno": 324, "outcome": "failed", "keywords": ["test_tax_implications_of_cross_year_project", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0012948630610480905, "outcome": "passed"}, "call": {"duration": 0.00016207201406359673, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_multi_year_projects.py", "lineno": 338, "message": "TypeError: ProjectProfiler.record_time_entry() got an unexpected keyword argument 'project_id'"}, "traceback": [{"path": "tests/integration/test_multi_year_projects.py", "lineno": 338, "message": "TypeError"}], "longrepr": "self = <test_multi_year_projects.TestMultiYearProjects object at 0x7f2e305c8b00>\ncross_year_project = Project(id='cross_year_project', name='Long-term Website Redesign', client_id='client1', start_date=datetime.datetime(...3, 31, 0, 0), status='completed', hourly_rate=90.0, fixed_price=None, estimated_hours=160.0, description=None, tags=[])\ncross_year_time_entries = [TimeEntry(id=UUID('6d5dfa5c-8cd1-4e75-bcbb-a9f5a97b4da0'), project_id='cross_year_project', start_time=datetime.datet...45, 53, 676892), duration_minutes=285.89461486666664, description='Discovery phase work', billable=True, tags=[]), ...]\ncross_year_expenses = [Transaction(id=UUID('2242f96c-26e1-44c5-9572-80405d66d0ea'), date=datetime.datetime(2022, 11, 10, 0, 0), amount=300.0...ntage=100.0, project_id='cross_year_project', client_id=None, invoice_id=None, receipt_path=None, notes=None, tags=[])]\ncross_year_invoices = [Invoice(id='inv-cross_year_project-1', client_id='client1', project_id='cross_year_project', issue_date=datetime.date...bsite redesign project', line_items=[{'description': 'Final payment for website redesign project', 'amount': 3600.0}])]\n\n    def test_tax_implications_of_cross_year_project(\n        self, cross_year_project, cross_year_time_entries, cross_year_expenses, cross_year_invoices\n    ):\n        \"\"\"Test tax implications of a project spanning multiple tax years.\"\"\"\n        # Set up tax manager\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Set up project profiler\n        profiler = ProjectProfiler()\n    \n        # Record time entries\n        for time_entry in cross_year_time_entries:\n>           profiler.record_time_entry(\n                project_id=time_entry.project_id,\n                start_time=time_entry.start_time,\n                end_time=time_entry.end_time,\n                description=time_entry.description,\n                billable=time_entry.billable,\n            )\nE           TypeError: ProjectProfiler.record_time_entry() got an unexpected keyword argument 'project_id'\n\ntests/integration/test_multi_year_projects.py:338: TypeError"}, "teardown": {"duration": 0.00016749894712120295, "outcome": "passed"}}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "lineno": 477, "outcome": "passed", "keywords": ["test_cross_year_project_cash_flow", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0012534409761428833, "outcome": "passed"}, "call": {"duration": 0.0008784550009295344, "outcome": "passed"}, "teardown": {"duration": 0.00014449493028223515, "outcome": "passed"}}, {"nodeid": "tests/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "lineno": 567, "outcome": "failed", "keywords": ["test_project_spanning_three_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0001048229169100523, "outcome": "passed"}, "call": {"duration": 0.000320476945489645, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_multi_year_projects.py", "lineno": 667, "message": "TypeError: ProjectProfiler.analyze_project_profitability() got an unexpected keyword argument 'start_date'"}, "traceback": [{"path": "tests/integration/test_multi_year_projects.py", "lineno": 667, "message": "TypeError"}], "longrepr": "self = <test_multi_year_projects.TestMultiYearProjects object at 0x7f2e305c8e90>\n\n    def test_project_spanning_three_tax_years(self):\n        \"\"\"Test handling of a project spanning three tax years.\"\"\"\n        # Create a three-year project\n        long_project = Project(\n            id=\"three_year_project\",\n            name=\"Enterprise System Overhaul\",\n            client_id=\"major_client\",\n            start_date=datetime(2021, 8, 1),\n            end_date=datetime(2023, 7, 31),\n            status=\"completed\",\n            hourly_rate=110.0,\n            estimated_hours=1200.0,\n        )\n    \n        # Create quarterly invoices over three years\n        invoices = []\n        expenses = []\n    \n        # Define quarterly schedule\n        quarters = [\n            # Year 1 (2021)\n            {\"year\": 2021, \"quarter\": 3, \"invoice_pct\": 0.10, \"expense_pct\": 0.08},\n            {\"year\": 2021, \"quarter\": 4, \"invoice_pct\": 0.10, \"expense_pct\": 0.12},\n            # Year 2 (2022)\n            {\"year\": 2022, \"quarter\": 1, \"invoice_pct\": 0.15, \"expense_pct\": 0.15},\n            {\"year\": 2022, \"quarter\": 2, \"invoice_pct\": 0.15, \"expense_pct\": 0.15},\n            {\"year\": 2022, \"quarter\": 3, \"invoice_pct\": 0.15, \"expense_pct\": 0.15},\n            {\"year\": 2022, \"quarter\": 4, \"invoice_pct\": 0.15, \"expense_pct\": 0.15},\n            # Year 3 (2023)\n            {\"year\": 2023, \"quarter\": 1, \"invoice_pct\": 0.10, \"expense_pct\": 0.10},\n            {\"year\": 2023, \"quarter\": 2, \"invoice_pct\": 0.10, \"expense_pct\": 0.10},\n        ]\n    \n        # Total project value and expenses\n        total_value = long_project.hourly_rate * long_project.estimated_hours\n        total_expenses = total_value * 0.3  # 30% of project value is expenses\n    \n        # Create invoices and expenses for each quarter\n        for i, quarter in enumerate(quarters):\n            # Define dates for this quarter\n            quarter_month = (quarter[\"quarter\"] - 1) * 3 + 2  # Middle month of quarter\n            invoice_date = datetime(quarter[\"year\"], quarter_month, 15)\n            payment_date = invoice_date + timedelta(days=15)\n    \n            # Create invoice\n            invoice_amount = total_value * quarter[\"invoice_pct\"]\n            invoice = Invoice(\n                id=f\"inv-{long_project.id}-{i+1}\",\n                client_id=long_project.client_id,\n                project_id=long_project.id,\n                issue_date=invoice_date,\n                due_date=invoice_date + timedelta(days=30),\n                amount=invoice_amount,\n                status=\"paid\",\n                payment_date=payment_date,\n                description=f\"Q{quarter['quarter']} {quarter['year']} progress payment\",\n                line_items=[{\"description\": f\"Project milestone {i+1}\", \"amount\": invoice_amount}],\n            )\n            invoices.append(invoice)\n    \n            # Create expense\n            expense_amount = total_expenses * quarter[\"expense_pct\"]\n            expense = Transaction(\n                id=uuid.uuid4(),\n                date=invoice_date - timedelta(days=15),  # Expense before invoice\n                amount=expense_amount,\n                description=f\"Q{quarter['quarter']} {quarter['year']} project expenses\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                business_use_percentage=100.0,\n                project_id=long_project.id,\n            )\n            expenses.append(expense)\n    \n        # Set up project profiler\n        profiler = ProjectProfiler()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Allocate expenses\n        for expense in expenses:\n            profiler.allocate_expense(\n                project_id=expense.project_id,\n                transaction=expense,\n            )\n    \n        # Create time entries spread across project duration\n        # Skip for brevity as we've demonstrated time entries in other tests\n    \n        # Analyze project by each tax year\n        tax_years = [2021, 2022, 2023]\n        year_results = {}\n    \n        for year in tax_years:\n            year_start = datetime(year, 1, 1)\n            year_end = datetime(year, 12, 31)\n    \n            # Analyze this year's portion\n>           result = profiler.analyze_project_profitability(\n                long_project.id,\n                start_date=year_start,\n                end_date=year_end\n            )\nE           TypeError: ProjectProfiler.analyze_project_profitability() got an unexpected keyword argument 'start_date'\n\ntests/integration/test_multi_year_projects.py:667: TypeError"}, "teardown": {"duration": 0.00013917800970375538, "outcome": "passed"}}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0012049248907715082, "outcome": "passed"}, "call": {"duration": 0.0021169979590922594, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation.py", "lineno": 183, "message": "AttributeError: 'TaxManager' object has no attribute 'calculate_quarterly_tax_payment'"}, "traceback": [{"path": "tests/integration/test_quarterly_tax_preparation.py", "lineno": 183, "message": "AttributeError"}], "longrepr": "self = <test_quarterly_tax_preparation.TestQuarterlyTaxPreparation object at 0x7f2e305c9760>\nsample_transactions = [Transaction(id=UUID('327140a9-b0ae-4321-a88f-89cc8af13e7a'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...entage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None, notes=None, tags=[]), ...]\nsample_date = datetime.datetime(2022, 1, 1, 0, 0)\n\n    def test_comprehensive_quarterly_tax_preparation(self, sample_transactions, sample_date):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process.\"\"\"\n        # Set up the required components\n        expense_categorizer = ExpenseCategorizer()\n        income_manager = IncomeManager()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n    \n        # Load default tax brackets\n        tax_manager.load_default_brackets()\n    \n        # Add expense categorization rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Internet Rule\",\n                category=ExpenseCategory.INTERNET,\n                keyword_patterns=[\"internet\", \"wifi\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=70.0,\n                priority=8,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"food\"],\n                business_use_percentage=50.0,  # 50% business use\n                priority=3,\n            ),\n        ]\n    \n        for rule in rules:\n            expense_categorizer.add_categorization_rule(rule)\n    \n        # Define the quarter to prepare taxes for (Q2 2022)\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Calculate quarter dates\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n        current_quarter = next(q for q in quarters if q.quarter == quarter_number)\n    \n        # Filter transactions for the current quarter\n        quarter_transactions = [\n            tx for tx in sample_transactions\n            if current_quarter.start_date <= tx.date <= current_quarter.end_date\n        ]\n    \n        # Step 1: Categorize all expenses for the quarter\n        expense_transactions = [\n            tx for tx in quarter_transactions\n            if tx.transaction_type == TransactionType.EXPENSE\n        ]\n    \n        categorization_results = expense_categorizer.categorize_transactions(expense_transactions)\n    \n        # Apply categorizations\n        categorized_expenses = []\n        for transaction in expense_transactions:\n            for result in categorization_results:\n                if result.transaction_id == transaction.id:\n                    categorized_tx = expense_categorizer.apply_categorization(transaction, result)\n                    categorized_expenses.append(categorized_tx)\n                    break\n    \n        # Step 2: Calculate income for the quarter\n        income_transactions = [\n            tx for tx in quarter_transactions\n            if tx.transaction_type == TransactionType.INCOME\n        ]\n    \n        # Calculate total quarterly income\n        quarterly_income = sum(tx.amount for tx in income_transactions)\n    \n        # Step 3: Generate an expense summary for the quarter\n        expense_summary = expense_categorizer.generate_expense_summary(\n            categorized_expenses,\n            current_quarter.start_date,\n            current_quarter.end_date\n        )\n    \n        # Step 4: Calculate taxable income (income - business expenses)\n        business_expenses = expense_summary.business_expenses\n        taxable_income = quarterly_income - business_expenses\n    \n        # Calculate year-to-date values\n        # For Q2, we need Q1 + Q2\n        ytd_start_date = datetime(tax_year, 1, 1)\n        ytd_end_date = current_quarter.end_date\n    \n        ytd_transactions = [\n            tx for tx in sample_transactions\n            if ytd_start_date <= tx.date <= ytd_end_date\n        ]\n    \n        ytd_income_transactions = [\n            tx for tx in ytd_transactions\n            if tx.transaction_type == TransactionType.INCOME\n        ]\n    \n        ytd_expense_transactions = [\n            tx for tx in ytd_transactions\n            if tx.transaction_type == TransactionType.EXPENSE\n        ]\n    \n        # Categorize YTD expenses\n        ytd_categorization_results = expense_categorizer.categorize_transactions(ytd_expense_transactions)\n    \n        ytd_categorized_expenses = []\n        for transaction in ytd_expense_transactions:\n            for result in ytd_categorization_results:\n                if result.transaction_id == transaction.id:\n                    categorized_tx = expense_categorizer.apply_categorization(transaction, result)\n                    ytd_categorized_expenses.append(categorized_tx)\n                    break\n    \n        # Generate YTD expense summary\n        ytd_expense_summary = expense_categorizer.generate_expense_summary(\n            ytd_categorized_expenses,\n            ytd_start_date,\n            ytd_end_date\n        )\n    \n        # Calculate YTD income\n        ytd_income = sum(tx.amount for tx in ytd_income_transactions)\n    \n        # Calculate YTD taxable income\n        ytd_business_expenses = ytd_expense_summary.business_expenses\n        ytd_taxable_income = ytd_income - ytd_business_expenses\n    \n        # Step 5: Calculate estimated quarterly tax payment\n>       quarterly_tax_calculation: EstimatedPayment = tax_manager.calculate_quarterly_tax_payment(\n            quarterly_taxable_income=taxable_income,\n            ytd_taxable_income=ytd_taxable_income,\n            tax_year=tax_year,\n            quarter=quarter_number\n        )\nE       AttributeError: 'TaxManager' object has no attribute 'calculate_quarterly_tax_payment'\n\ntests/integration/test_quarterly_tax_preparation.py:183: AttributeError"}, "teardown": {"duration": 0.00014782894868403673, "outcome": "passed"}}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "lineno": 234, "outcome": "failed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.733496699482203e-05, "outcome": "passed"}, "call": {"duration": 0.00016451196279376745, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation.py", "lineno": 285, "message": "AttributeError: 'TaxManager' object has no attribute 'calculate_quarterly_tax_payment'"}, "traceback": [{"path": "tests/integration/test_quarterly_tax_preparation.py", "lineno": 285, "message": "AttributeError"}], "longrepr": "self = <test_quarterly_tax_preparation.TestQuarterlyTaxPreparation object at 0x7f2e305c98e0>\n\n    def test_quarterly_tax_with_prior_payments(self):\n        \"\"\"Test quarterly tax preparation with prior quarterly payments.\"\"\"\n        # Set up components\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Define tax year and quarters\n        tax_year = 2022\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n    \n        # Simulate income and expenses for each quarter\n        quarterly_data = [\n            # Q1\n            {\n                \"income\": 15000.0,\n                \"business_expenses\": 4000.0,\n                \"taxable_income\": 11000.0,\n            },\n            # Q2\n            {\n                \"income\": 18000.0,\n                \"business_expenses\": 4500.0,\n                \"taxable_income\": 13500.0,\n            },\n            # Q3\n            {\n                \"income\": 22000.0,\n                \"business_expenses\": 5500.0,\n                \"taxable_income\": 16500.0,\n            },\n            # Q4\n            {\n                \"income\": 20000.0,\n                \"business_expenses\": 5000.0,\n                \"taxable_income\": 15000.0,\n            },\n        ]\n    \n        # Track prior payments and YTD values\n        prior_payments = 0.0\n        ytd_taxable_income = 0.0\n    \n        for quarter_idx, quarter_info in enumerate(quarterly_data):\n            quarter_number = quarter_idx + 1\n            current_quarter = quarters[quarter_idx]\n    \n            # Add current quarter income to YTD\n            ytd_taxable_income += quarter_info[\"taxable_income\"]\n    \n            # Calculate quarterly tax\n>           quarterly_tax: EstimatedPayment = tax_manager.calculate_quarterly_tax_payment(\n                quarterly_taxable_income=quarter_info[\"taxable_income\"],\n                ytd_taxable_income=ytd_taxable_income,\n                tax_year=tax_year,\n                quarter=quarter_number,\n                prior_payments=prior_payments\n            )\nE           AttributeError: 'TaxManager' object has no attribute 'calculate_quarterly_tax_payment'\n\ntests/integration/test_quarterly_tax_preparation.py:285: AttributeError"}, "teardown": {"duration": 0.0001265769824385643, "outcome": "passed"}}, {"nodeid": "tests/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "lineno": 345, "outcome": "failed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.936990682035685e-05, "outcome": "passed"}, "call": {"duration": 0.0003040749579668045, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation.py", "lineno": 410, "message": "TypeError: IncomeManager.smooth_income() got an unexpected keyword argument 'window_size'"}, "traceback": [{"path": "tests/integration/test_quarterly_tax_preparation.py", "lineno": 410, "message": "TypeError"}], "longrepr": "self = <test_quarterly_tax_preparation.TestQuarterlyTaxPreparation object at 0x7f2e305c9a60>\n\n    def test_quarterly_tax_with_income_smoothing(self):\n        \"\"\"Test quarterly tax preparation with income smoothing.\"\"\"\n        # Set up components\n        income_manager = IncomeManager()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Create fluctuating monthly income for the year\n        monthly_income = [\n            3000.0,   # Jan\n            2000.0,   # Feb\n            1500.0,   # Mar\n            5000.0,   # Apr\n            4500.0,   # May\n            2000.0,   # Jun\n            1000.0,   # Jul\n            1500.0,   # Aug\n            6000.0,   # Sep\n            4000.0,   # Oct\n            3500.0,   # Nov\n            8000.0,   # Dec\n        ]\n    \n        # Convert to monthly transaction data\n        monthly_transactions = []\n    \n        for i, amount in enumerate(monthly_income):\n            month = i + 1  # 1-12\n            year = 2022\n    \n            # Create transaction for this month\n            tx = Transaction(\n                id=uuid.uuid4(),\n                date=datetime(year, month, 15),\n                amount=amount,\n                description=f\"Income for {datetime(year, month, 1).strftime('%B %Y')}\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            )\n    \n            monthly_transactions.append(tx)\n    \n        # Define quarterly periods\n        quarters = tax_manager.calculate_tax_quarters(2022)\n    \n        # Process each quarter\n        for quarter_idx, quarter in enumerate(quarters):\n            quarter_number = quarter_idx + 1\n    \n            # Get transactions for this quarter\n            quarter_transactions = [\n                tx for tx in monthly_transactions\n                if quarter.start_date <= tx.date <= quarter.end_date\n            ]\n    \n            # Calculate actual quarterly income\n            actual_quarterly_income = sum(tx.amount for tx in quarter_transactions)\n    \n            # Calculate smoothed income using moving average\n            # First generate all monthly income up to current quarter\n            month_end = 3 * quarter_number  # Last month of current quarter\n            income_data = monthly_income[:month_end]\n    \n            # Apply income smoothing\n>           smoothed_monthly_income = income_manager.smooth_income(\n                income_data,\n                method=SmoothingMethod.MOVING_AVERAGE,\n                window_size=6  # 6-month moving average\n            )\nE           TypeError: IncomeManager.smooth_income() got an unexpected keyword argument 'window_size'\n\ntests/integration/test_quarterly_tax_preparation.py:410: TypeError"}, "teardown": {"duration": 0.00012917793355882168, "outcome": "passed"}}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "lineno": 323, "outcome": "failed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.003426551935262978, "outcome": "passed"}, "call": {"duration": 0.00020101794507354498, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py", "lineno": 339, "message": "TypeError: IncomeManager.calculate_monthly_income() missing 2 required positional arguments: 'start_date' and 'end_date'"}, "traceback": [{"path": "tests/integration/test_year_over_year_comparison.py", "lineno": 339, "message": "TypeError"}], "longrepr": "self = <test_year_over_year_comparison.TestYearOverYearComparison object at 0x7f2e305ca4b0>\nmulti_year_transactions = [Transaction(id=UUID('7bb369a2-c9ba-4608-b49d-1592136ef31a'), date=datetime.datetime(2021, 1, 15, 0, 0), amount=2000.0...entage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None, notes=None, tags=[]), ...]\n\n    def test_income_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing income patterns across multiple years.\"\"\"\n        income_manager = IncomeManager()\n    \n        # Process transactions by year\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter income transactions for this year\n            year_transactions = [\n                tx for tx in multi_year_transactions\n                if tx.date.year == year and tx.transaction_type == TransactionType.INCOME\n            ]\n    \n            # Calculate monthly income for the year\n>           monthly_income = income_manager.calculate_monthly_income(year_transactions)\nE           TypeError: IncomeManager.calculate_monthly_income() missing 2 required positional arguments: 'start_date' and 'end_date'\n\ntests/integration/test_year_over_year_comparison.py:339: TypeError"}, "teardown": {"duration": 0.00014104298315942287, "outcome": "passed"}}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "lineno": 389, "outcome": "failed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0033768550492823124, "outcome": "passed"}, "call": {"duration": 0.0006054550176486373, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py", "lineno": 437, "message": "assert 0.033957880989742215 > 0.05310404225857728"}, "traceback": [{"path": "tests/integration/test_year_over_year_comparison.py", "lineno": 437, "message": "AssertionError"}], "longrepr": "self = <test_year_over_year_comparison.TestYearOverYearComparison object at 0x7f2e30777bc0>\nmulti_year_transactions = [Transaction(id=UUID('19acdee8-f40c-426a-b3f4-a4d5d9bafba6'), date=datetime.datetime(2021, 1, 15, 0, 0), amount=2000.0...entage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None, notes=None, tags=[]), ...]\n\n    def test_expense_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing expense patterns across multiple years.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Process expenses by year and category\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter expense transactions for this year\n            year_transactions = [\n                tx for tx in multi_year_transactions\n                if tx.date.year == year and tx.transaction_type == TransactionType.EXPENSE\n            ]\n    \n            # Generate expense summary for the year\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            expense_summary = categorizer.generate_expense_summary(\n                year_transactions, start_date, end_date\n            )\n    \n            # Store data for analysis\n            year_data[year] = {\n                \"transactions\": year_transactions,\n                \"summary\": expense_summary,\n                \"total_expenses\": expense_summary.total_expenses,\n                \"business_expenses\": expense_summary.business_expenses,\n                \"personal_expenses\": expense_summary.personal_expenses,\n                \"by_category\": expense_summary.by_category,\n            }\n    \n        # Compare total expenses year-over-year\n        # Should increase due to inflation and business growth\n        assert year_data[2022][\"total_expenses\"] > year_data[2021][\"total_expenses\"]\n        assert year_data[2023][\"total_expenses\"] > year_data[2022][\"total_expenses\"]\n    \n        # Calculate expense growth rates\n        expense_growth_2021_to_2022 = (\n            year_data[2022][\"total_expenses\"] - year_data[2021][\"total_expenses\"]\n        ) / year_data[2021][\"total_expenses\"]\n    \n        expense_growth_2022_to_2023 = (\n            year_data[2023][\"total_expenses\"] - year_data[2022][\"total_expenses\"]\n        ) / year_data[2022][\"total_expenses\"]\n    \n        # Inflation was higher in 2023, so expense growth should be higher\n>       assert expense_growth_2022_to_2023 > expense_growth_2021_to_2022\nE       assert 0.033957880989742215 > 0.05310404225857728\n\ntests/integration/test_year_over_year_comparison.py:437: AssertionError"}, "teardown": {"duration": 0.00014409597497433424, "outcome": "passed"}}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "lineno": 475, "outcome": "failed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.003381122020073235, "outcome": "passed"}, "call": {"duration": 0.000334165059030056, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py", "lineno": 520, "message": "TypeError: TaxManager.calculate_tax_liability() got an unexpected keyword argument 'income'"}, "traceback": [{"path": "tests/integration/test_year_over_year_comparison.py", "lineno": 520, "message": "TypeError"}], "longrepr": "self = <test_year_over_year_comparison.TestYearOverYearComparison object at 0x7f2e305ca360>\nmulti_year_transactions = [Transaction(id=UUID('6b79471f-28b2-4411-b919-cc819e3d1fdc'), date=datetime.datetime(2021, 1, 15, 0, 0), amount=2000.0...entage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None, notes=None, tags=[]), ...]\n\n    def test_tax_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing tax liabilities across multiple years.\"\"\"\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n        categorizer = ExpenseCategorizer()\n    \n        # Process taxes by year\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter transactions for this year\n            year_transactions = [tx for tx in multi_year_transactions if tx.date.year == year]\n    \n            # Split into income and expenses\n            income_transactions = [\n                tx for tx in year_transactions\n                if tx.transaction_type == TransactionType.INCOME\n            ]\n    \n            expense_transactions = [\n                tx for tx in year_transactions\n                if tx.transaction_type == TransactionType.EXPENSE\n            ]\n    \n            tax_transactions = [\n                tx for tx in year_transactions\n                if tx.transaction_type == TransactionType.TAX_PAYMENT\n            ]\n    \n            # Calculate total income\n            total_income = sum(tx.amount for tx in income_transactions)\n    \n            # Generate expense summary\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            expense_summary = categorizer.generate_expense_summary(\n                expense_transactions, start_date, end_date\n            )\n    \n            # Calculate taxable income\n            taxable_income = total_income - expense_summary.business_expenses\n    \n            # Calculate tax liability\n>           tax_calculation = tax_manager.calculate_tax_liability(\n                income=taxable_income,\n                tax_year=year,\n                jurisdiction=TaxJurisdiction.FEDERAL\n            )\nE           TypeError: TaxManager.calculate_tax_liability() got an unexpected keyword argument 'income'\n\ntests/integration/test_year_over_year_comparison.py:520: TypeError"}, "teardown": {"duration": 0.00014216301497071981, "outcome": "passed"}}, {"nodeid": "tests/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "lineno": 584, "outcome": "failed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00255022500641644, "outcome": "passed"}, "call": {"duration": 0.00013522605877369642, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py", "lineno": 591, "message": "TypeError: ProjectProfiler.record_time_entry() got an unexpected keyword argument 'project_id'"}, "traceback": [{"path": "tests/integration/test_year_over_year_comparison.py", "lineno": 591, "message": "TypeError"}], "longrepr": "self = <test_year_over_year_comparison.TestYearOverYearComparison object at 0x7f2e305c99d0>\nmulti_year_projects = [Project(id='project2021_1', name='Website Redesign 2021', client_id='client1', start_date=datetime.datetime(2021, 1, ...0, 0), status='completed', hourly_rate=None, fixed_price=3500.0, estimated_hours=40.0, description=None, tags=[]), ...]\ntime_entries_for_projects = [{'billable': True, 'description': 'Work on Website Redesign 2021', 'duration_minutes': 240, 'end_time': datetime.date...'Work on Website Redesign 2021', 'duration_minutes': 240, 'end_time': datetime.datetime(2021, 1, 31, 13, 0), ...}, ...]\n\n    def test_project_profitability_across_years(self, multi_year_projects, time_entries_for_projects):\n        \"\"\"Test comparing project profitability across multiple years.\"\"\"\n        profiler = ProjectProfiler()\n    \n        # Add time entries\n        for entry in time_entries_for_projects:\n>           profiler.record_time_entry(\n                project_id=entry[\"project_id\"],\n                start_time=entry[\"start_time\"],\n                end_time=entry[\"end_time\"],\n                description=entry[\"description\"],\n                billable=entry[\"billable\"]\n            )\nE           TypeError: ProjectProfiler.record_time_entry() got an unexpected keyword argument 'project_id'\n\ntests/integration/test_year_over_year_comparison.py:591: TypeError"}, "teardown": {"duration": 0.00017463904805481434, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "lineno": 25, "outcome": "passed", "keywords": ["test_init", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.000317147932946682, "outcome": "passed"}, "call": {"duration": 0.00011473195627331734, "outcome": "passed"}, "teardown": {"duration": 9.163899812847376e-05, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "lineno": 30, "outcome": "passed", "keywords": ["test_analyze_project_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.002021873020567, "outcome": "passed"}, "call": {"duration": 0.00036993902176618576, "outcome": "passed"}, "teardown": {"duration": 0.00015702098608016968, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "lineno": 63, "outcome": "passed", "keywords": ["test_analyze_client_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0019741009455174208, "outcome": "passed"}, "call": {"duration": 0.00041015201713889837, "outcome": "passed"}, "teardown": {"duration": 0.0001554300542920828, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "lineno": 100, "outcome": "passed", "keywords": ["test_analyze_all_projects", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0019394580740481615, "outcome": "passed"}, "call": {"duration": 0.00032521295361220837, "outcome": "passed"}, "teardown": {"duration": 0.000143303070217371, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "lineno": 120, "outcome": "passed", "keywords": ["test_generate_trend_analysis", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.0019659000681713223, "outcome": "passed"}, "call": {"duration": 0.001902761054225266, "outcome": "passed"}, "teardown": {"duration": 0.0001538849901407957, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "lineno": 171, "outcome": "passed", "keywords": ["test_record_time_entry", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00011452590115368366, "outcome": "passed"}, "call": {"duration": 0.00013401894830167294, "outcome": "passed"}, "teardown": {"duration": 9.54529969021678e-05, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "lineno": 191, "outcome": "passed", "keywords": ["test_allocate_expense", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.252096060663462e-05, "outcome": "passed"}, "call": {"duration": 0.0001255630049854517, "outcome": "passed"}, "teardown": {"duration": 8.52169468998909e-05, "outcome": "passed"}}, {"nodeid": "tests/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "lineno": 214, "outcome": "passed", "keywords": ["test_analyze_large_project_set", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.426195174455643e-05, "outcome": "passed"}, "call": {"duration": 0.044206485035829246, "outcome": "passed"}, "teardown": {"duration": 0.0001135099446401, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_init", "lineno": 30, "outcome": "passed", "keywords": ["test_init", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00032201502472162247, "outcome": "passed"}, "call": {"duration": 0.00011229596566408873, "outcome": "passed"}, "teardown": {"duration": 8.926598820835352e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "lineno": 35, "outcome": "passed", "keywords": ["test_project_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.19840531423688e-05, "outcome": "passed"}, "call": {"duration": 0.00037103600334376097, "outcome": "passed"}, "teardown": {"duration": 9.110895916819572e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "lineno": 145, "outcome": "passed", "keywords": ["test_project_cash_flow_different_scenarios", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.896291885524988e-05, "outcome": "passed"}, "call": {"duration": 0.0005505699664354324, "outcome": "passed"}, "teardown": {"duration": 9.66900261119008e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "lineno": 217, "outcome": "passed", "keywords": ["test_calculate_runway_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.068299550563097e-05, "outcome": "passed"}, "call": {"duration": 0.00015396997332572937, "outcome": "passed"}, "teardown": {"duration": 9.023596066981554e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "lineno": 236, "outcome": "passed", "keywords": ["test_create_what_if_scenario", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.115797001868486e-05, "outcome": "passed"}, "call": {"duration": 0.00014199200086295605, "outcome": "passed"}, "teardown": {"duration": 8.609797805547714e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "lineno": 279, "outcome": "passed", "keywords": ["test_create_what_if_scenario_with_evaluation", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.961500134319067e-05, "outcome": "passed"}, "call": {"duration": 0.00012587895616889, "outcome": "passed"}, "teardown": {"duration": 8.338806219398975e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "lineno": 309, "outcome": "passed", "keywords": ["test_assess_emergency_fund_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.607597555965185e-05, "outcome": "passed"}, "call": {"duration": 0.0001289809588342905, "outcome": "passed"}, "teardown": {"duration": 8.571799844503403e-05, "outcome": "passed"}}, {"nodeid": "tests/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "lineno": 332, "outcome": "passed", "keywords": ["test_negative_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.77799466252327e-05, "outcome": "passed"}, "call": {"duration": 0.0003239730140194297, "outcome": "passed"}, "teardown": {"duration": 9.990297257900238e-05, "outcome": "passed"}}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "lineno": 19, "outcome": "passed", "keywords": ["test_init", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00029421504586935043, "outcome": "passed"}, "call": {"duration": 0.00010772899258881807, "outcome": "passed"}, "teardown": {"duration": 8.424208499491215e-05, "outcome": "passed"}}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "lineno": 29, "outcome": "passed", "keywords": ["test_calculate_tax_quarters", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 9.605998639017344e-05, "outcome": "passed"}, "call": {"duration": 0.0001315850531682372, "outcome": "passed"}, "teardown": {"duration": 8.578598499298096e-05, "outcome": "passed"}}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "lineno": 60, "outcome": "passed", "keywords": ["test_get_current_quarter", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.587096817791462e-05, "outcome": "passed"}, "call": {"duration": 0.00012169091496616602, "outcome": "passed"}, "teardown": {"duration": 8.363509550690651e-05, "outcome": "passed"}}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "lineno": 71, "outcome": "passed", "keywords": ["test_tax_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.479808457195759e-05, "outcome": "passed"}, "call": {"duration": 0.00013771094381809235, "outcome": "passed"}, "teardown": {"duration": 8.46110051497817e-05, "outcome": "passed"}}, {"nodeid": "tests/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "lineno": 114, "outcome": "passed", "keywords": ["test_load_default_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 8.412997703999281e-05, "outcome": "passed"}, "call": {"duration": 0.00012750306632369757, "outcome": "passed"}, "teardown": {"duration": 8.783303201198578e-05, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_main", "lineno": 3, "outcome": "passed", "keywords": ["test_main", "test_main.py", "tests", "personal_finance_tracker_freelancer", ""], "setup": {"duration": 0.00010283396113663912, "outcome": "passed"}, "call": {"duration": 9.098299778997898e-05, "outcome": "passed"}, "teardown": {"duration": 9.06139612197876e-05, "outcome": "passed"}}], "warnings": [{"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/models/common.py", "lineno": 81}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "config", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/models/common.py", "lineno": 129}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/expense/models.py", "lineno": 39}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/expense/models.py", "lineno": 102}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/expense/models.py", "lineno": 123}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/expense/models.py", "lineno": 130}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/income/models.py", "lineno": 36}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/income/models.py", "lineno": 43}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/income/models.py", "lineno": 50}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/income/models.py", "lineno": 57}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/income/models.py", "lineno": 64}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/tax/models.py", "lineno": 50}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/tax/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/tax/models.py", "lineno": 120}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/project/models.py", "lineno": 51}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/projection/models.py", "lineno": 40}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/projection/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/personal_finance_tracker/projection/models.py", "lineno": 99}]}