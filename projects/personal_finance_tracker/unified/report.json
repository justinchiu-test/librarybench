{"created": 1747353055.1260695, "duration": 2.031937837600708, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified", "environment": {}, "summary": {"passed": 82, "failed": 71, "total": 153, "collected": 153}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "type": "Function", "lineno": 28}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "type": "Function", "lineno": 36}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "type": "Function", "lineno": 78}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "type": "Function", "lineno": 129}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "type": "Function", "lineno": 163}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "type": "Function", "lineno": 187}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "type": "Function", "lineno": 311}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "type": "Function", "lineno": 370}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "type": "Function", "lineno": 407}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "type": "Function", "lineno": 459}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "type": "Function", "lineno": 512}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "type": "Function", "lineno": 551}]}, {"nodeid": "tests/freelancer/expense/test_categorizer.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer", "type": "Class"}]}, {"nodeid": "tests/freelancer/expense", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init", "type": "Function", "lineno": 20}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "type": "Function", "lineno": 36}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "type": "Function", "lineno": 54}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "type": "Function", "lineno": 86}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "type": "Function", "lineno": 113}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "type": "Function", "lineno": 144}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "type": "Function", "lineno": 171}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "type": "Function", "lineno": 196}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "type": "Function", "lineno": 223}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "type": "Function", "lineno": 243}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "type": "Function", "lineno": 302}]}, {"nodeid": "tests/freelancer/income/test_income_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager", "type": "Class"}]}, {"nodeid": "tests/freelancer/income", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 214}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 24}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 125}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 127}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "type": "Function", "lineno": 31}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "type": "Function", "lineno": 170}]}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability", "type": "Function", "lineno": 18}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact", "type": "Function", "lineno": 95}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation", "type": "Function", "lineno": 162}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability", "type": "Function", "lineno": 304}]}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "type": "Function", "lineno": 232}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "type": "Function", "lineno": 342}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "type": "Function", "lineno": 463}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "type": "Function", "lineno": 553}]}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 139}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 190}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 285}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 30}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 152}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 209}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "type": "Function", "lineno": 330}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "type": "Function", "lineno": 403}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "type": "Function", "lineno": 494}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "type": "Function", "lineno": 582}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis", "type": "Function", "lineno": 18}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends", "type": "Function", "lineno": 90}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison", "type": "Function", "lineno": 226}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends", "type": "Function", "lineno": 352}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years", "type": "Function", "lineno": 28}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years", "type": "Function", "lineno": 70}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years", "type": "Function", "lineno": 148}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years", "type": "Function", "lineno": 170}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years", "type": "Function", "lineno": 29}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years", "type": "Function", "lineno": 91}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years", "type": "Function", "lineno": 175}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years", "type": "Function", "lineno": 205}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "type": "Function", "lineno": 31}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "type": "Function", "lineno": 64}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "type": "Function", "lineno": 101}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "type": "Function", "lineno": 121}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "type": "Function", "lineno": 172}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "type": "Function", "lineno": 192}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "type": "Function", "lineno": 215}]}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler", "type": "Class"}]}, {"nodeid": "tests/freelancer/project", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init", "type": "Function", "lineno": 30}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "type": "Function", "lineno": 35}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "type": "Function", "lineno": 145}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "type": "Function", "lineno": 217}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "type": "Function", "lineno": 236}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "type": "Function", "lineno": 279}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "type": "Function", "lineno": 309}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "type": "Function", "lineno": 332}]}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector", "type": "Class"}]}, {"nodeid": "tests/freelancer/projection", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "type": "Function", "lineno": 19}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "type": "Function", "lineno": 29}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "type": "Function", "lineno": 60}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "type": "Function", "lineno": 71}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "type": "Function", "lineno": 114}]}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "type": "Class"}]}, {"nodeid": "tests/freelancer/tax", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/test_main.py::test_main", "type": "Function", "lineno": 3}]}, {"nodeid": "tests/freelancer", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense", "type": "Package"}, {"nodeid": "tests/freelancer/income", "type": "Package"}, {"nodeid": "tests/freelancer/integration", "type": "Package"}, {"nodeid": "tests/freelancer/project", "type": "Package"}, {"nodeid": "tests/freelancer/projection", "type": "Package"}, {"nodeid": "tests/freelancer/tax", "type": "Package"}, {"nodeid": "tests/freelancer/test_main.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria", "type": "Function", "lineno": 15}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey", "type": "Function", "lineno": 153}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria", "type": "Function", "lineno": 263}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria", "type": "Function", "lineno": 16}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener", "type": "Function", "lineno": 40}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing", "type": "Function", "lineno": 46}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions", "type": "Function", "lineno": 133}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions", "type": "Function", "lineno": 178}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch", "type": "Function", "lineno": 222}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria", "type": "Function", "lineno": 258}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria", "type": "Function", "lineno": 300}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria", "type": "Function", "lineno": 342}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments", "type": "Function", "lineno": 384}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics", "type": "Function", "lineno": 20}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine", "type": "Function", "lineno": 35}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact", "type": "Function", "lineno": 48}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact", "type": "Function", "lineno": 130}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact", "type": "Function", "lineno": 205}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation", "type": "Function", "lineno": 244}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric", "type": "Function", "lineno": 285}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark", "type": "Function", "lineno": 307}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data", "type": "Function", "lineno": 332}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds", "type": "Function", "lineno": 369}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis", "type": "Function", "lineno": 17}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar", "type": "Function", "lineno": 75}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis", "type": "Function", "lineno": 164}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis", "type": "Function", "lineno": 18}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance", "type": "Function", "lineno": 188}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system", "type": "Function", "lineno": 21}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition", "type": "Function", "lineno": 33}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening", "type": "Function", "lineno": 96}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification", "type": "Function", "lineno": 175}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints", "type": "Function", "lineno": 239}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio", "type": "Function", "lineno": 306}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme", "type": "Function", "lineno": 402}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints", "type": "Function", "lineno": 417}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit", "type": "Function", "lineno": 436}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio", "type": "Function", "lineno": 480}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker", "type": "Function", "lineno": 19}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions", "type": "Function", "lineno": 41}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions", "type": "Function", "lineno": 84}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns", "type": "Function", "lineno": 123}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions", "type": "Function", "lineno": 162}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations", "type": "Function", "lineno": 200}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities", "type": "Function", "lineno": 268}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment", "type": "Function", "lineno": 331}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions", "type": "Function", "lineno": 381}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories", "type": "Function", "lineno": 21}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system", "type": "Function", "lineno": 42}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags", "type": "Function", "lineno": 56}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags", "type": "Function", "lineno": 99}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions", "type": "Function", "lineno": 132}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns", "type": "Function", "lineno": 163}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter", "type": "Function", "lineno": 209}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors", "type": "Function", "lineno": 248}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction", "type": "Function", "lineno": 280}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment", "type": "Function", "lineno": 309}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions", "type": "Function", "lineno": 336}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values", "type": "Function", "lineno": 382}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories", "type": "Function", "lineno": 20}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time", "type": "Function", "lineno": 74}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis", "type": "Function", "lineno": 163}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting", "type": "Package"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/freelancer", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor", "type": "Package"}]}], "tests": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "lineno": 28, "outcome": "passed", "keywords": ["test_init", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0005782039370387793, "outcome": "passed"}, "call": {"duration": 0.0001846600789576769, "outcome": "passed"}, "teardown": {"duration": 0.00012607895769178867, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "lineno": 36, "outcome": "failed", "keywords": ["test_add_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011815712787210941, "outcome": "passed"}, "call": {"duration": 0.00023614102974534035, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 42, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 42, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d1ff0>\n\n    def test_add_categorization_rule(self):\n        \"\"\"Test adding a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a rule\n>       rule = CategorizationRule(\n            name=\"Office Supplies Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"office\", \"supplies\", \"paper\", \"ink\", \"toner\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:42: ValidationError"}, "teardown": {"duration": 0.00016858801245689392, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "lineno": 78, "outcome": "failed", "keywords": ["test_update_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012647290714085102, "outcome": "passed"}, "call": {"duration": 0.0001955609768629074, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 84, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 84, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d2170>\n\n    def test_update_categorization_rule(self):\n        \"\"\"Test updating a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create and add a rule\n>       rule = CategorizationRule(\n            name=\"Original Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"original\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:84: ValidationError"}, "teardown": {"duration": 0.00015541911125183105, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "lineno": 129, "outcome": "failed", "keywords": ["test_remove_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012776697985827923, "outcome": "passed"}, "call": {"duration": 0.00018350593745708466, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 135, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 135, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d22f0>\n\n    def test_remove_categorization_rule(self):\n        \"\"\"Test removing a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create and add rules\n>       rule1 = CategorizationRule(\n            name=\"Rule 1\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"rule1\"],\n            business_use_percentage=100.0,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:135: ValidationError"}, "teardown": {"duration": 0.00015365006402134895, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "lineno": 163, "outcome": "passed", "keywords": ["test_add_mixed_use_item", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013895798474550247, "outcome": "passed"}, "call": {"duration": 0.0004336829297244549, "outcome": "passed"}, "teardown": {"duration": 0.000120548065751791, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "lineno": 187, "outcome": "failed", "keywords": ["test_categorize_transaction", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.001549659064039588, "outcome": "passed"}, "call": {"duration": 0.00018880609422922134, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 194, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 194, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d2620>\nsample_transactions = [Transaction(id=UUID('cf451345-6163-432f-81df-f46ed2722410'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_categorize_transaction(self, sample_transactions):\n        \"\"\"Test categorizing a transaction.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add some rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"food\"],\n                business_use_percentage=50.0,  # 50% business use\n                priority=3,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:194: ValidationError"}, "teardown": {"duration": 0.0002096190582960844, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "lineno": 311, "outcome": "failed", "keywords": ["test_categorize_transactions", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012827105820178986, "outcome": "passed"}, "call": {"duration": 0.0001815559808164835, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 317, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 317, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d27a0>\n\n    def test_categorize_transactions(self):\n        \"\"\"Test categorizing multiple transactions at once.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       rule = CategorizationRule(\n            name=\"Office Supplies Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"office\", \"supplies\"],\n            business_use_percentage=100.0,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:317: ValidationError"}, "teardown": {"duration": 0.00015786313451826572, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "lineno": 370, "outcome": "passed", "keywords": ["test_apply_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012628803960978985, "outcome": "passed"}, "call": {"duration": 0.0002351237926632166, "outcome": "passed"}, "teardown": {"duration": 0.00011761300265789032, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "lineno": 407, "outcome": "failed", "keywords": ["test_generate_expense_summary", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0015309620648622513, "outcome": "passed"}, "call": {"duration": 0.0001999370288103819, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 414, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 414, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d2ad0>\nsample_transactions = [Transaction(id=UUID('b2d034e2-4877-4179-8811-fc9d7a8058d2'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_generate_expense_summary(self, sample_transactions):\n        \"\"\"Test generating an expense summary.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules for test categories\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\"],\n                business_use_percentage=100.0,\n            ),\n            CategorizationRule(\n                name=\"Internet Rule\",\n                category=ExpenseCategory.INTERNET,\n                keyword_patterns=[\"internet\"],\n                business_use_percentage=80.0,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:414: ValidationError"}, "teardown": {"duration": 0.00020219292491674423, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "lineno": 459, "outcome": "passed", "keywords": ["test_get_audit_trail", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012318207882344723, "outcome": "passed"}, "call": {"duration": 0.00025288318283855915, "outcome": "passed"}, "teardown": {"duration": 0.00011779810301959515, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "lineno": 512, "outcome": "passed", "keywords": ["test_correct_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011806306429207325, "outcome": "passed"}, "call": {"duration": 0.00019847298972308636, "outcome": "passed"}, "teardown": {"duration": 0.00011289911344647408, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "lineno": 551, "outcome": "failed", "keywords": ["test_rule_matching", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011077197268605232, "outcome": "passed"}, "call": {"duration": 0.0001722171436995268, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 559, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 559, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7f7d7f3d2f50>\n\n    def test_rule_matching(self):\n        \"\"\"Test rule matching logic in more detail.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create rules with different conditions\n        rules = [\n            # Rule with keyword patterns only\n>           CategorizationRule(\n                name=\"Keyword Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            # Rule with merchant patterns only\n            CategorizationRule(\n                name=\"Merchant Rule\",\n                category=ExpenseCategory.MEALS,\n                merchant_patterns=[\"restaurant\", \"cafe\"],\n                business_use_percentage=50.0,\n                priority=8,\n            ),\n            # Rule with amount range only\n            CategorizationRule(\n                name=\"Amount Rule\",\n                category=ExpenseCategory.EQUIPMENT,\n                amount_min=500.0,\n                amount_max=2000.0,\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            # Rule with multiple conditions\n            CategorizationRule(\n                name=\"Complex Rule\",\n                category=ExpenseCategory.MARKETING,\n                keyword_patterns=[\"marketing\", \"advertising\"],\n                merchant_patterns=[\"facebook\", \"google\"],\n                amount_max=300.0,\n                business_use_percentage=100.0,\n                priority=15,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/expense/test_categorizer.py:559: ValidationError"}, "teardown": {"duration": 0.00015671481378376484, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init", "lineno": 20, "outcome": "passed", "keywords": ["test_init", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00031167897395789623, "outcome": "passed"}, "call": {"duration": 0.000177453039214015, "outcome": "passed"}, "teardown": {"duration": 0.00011685979552567005, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "lineno": 36, "outcome": "passed", "keywords": ["test_calculate_monthly_income", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014987050089985132, "outcome": "passed"}, "call": {"duration": 0.00025504804216325283, "outcome": "passed"}, "teardown": {"duration": 0.00016437307931482792, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "lineno": 54, "outcome": "failed", "keywords": ["test_smooth_income_moving_average", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0015021080616861582, "outcome": "passed"}, "call": {"duration": 0.00021821982227265835, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 68, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4100880>\nsample_transactions = [Transaction(id=UUID('8035b47b-0b3e-447c-a8fc-5f20d72cdcc1'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_moving_average(self, sample_transactions):\n        \"\"\"Test income smoothing with moving average method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(method=SmoothingMethod.MOVING_AVERAGE, window_size=3)\n    \n        # Run smoothing\n        start_time = time.time()\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.MOVING_AVERAGE,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\ntests/freelancer/income/test_income_manager.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7ccfd06cb0>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.0002073650248348713, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "lineno": 86, "outcome": "failed", "keywords": ["test_smooth_income_exponential_smoothing", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.001545693026855588, "outcome": "passed"}, "call": {"duration": 0.0002214270643889904, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 101, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4100a60>\nsample_transactions = [Transaction(id=UUID('6c8b1cff-7197-41d1-874b-69ff0579ebe1'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_exponential_smoothing(self, sample_transactions):\n        \"\"\"Test income smoothing with exponential smoothing method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(\n            method=SmoothingMethod.EXPONENTIAL_SMOOTHING, alpha=0.3\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.EXPONENTIAL_SMOOTHING,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\ntests/freelancer/income/test_income_manager.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7d7f3836a0>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00021835300140082836, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "lineno": 113, "outcome": "failed", "keywords": ["test_smooth_income_percentile_based", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0015253177843987942, "outcome": "passed"}, "call": {"duration": 0.00022053811699151993, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 128, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4100c10>\nsample_transactions = [Transaction(id=UUID('4b252b66-b371-4044-8c35-b9d70a3b3b91'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_percentile_based(self, sample_transactions):\n        \"\"\"Test income smoothing with percentile-based method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(\n            method=SmoothingMethod.PERCENTILE_BASED, percentile=25.0\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.PERCENTILE_BASED,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\ntests/freelancer/income/test_income_manager.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7d7f38da20>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00020477012731134892, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "lineno": 144, "outcome": "failed", "keywords": ["test_smooth_income_seasonal_adjustment", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0015111209359019995, "outcome": "passed"}, "call": {"duration": 0.00021996581926941872, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 159, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4100dc0>\nsample_transactions = [Transaction(id=UUID('672dec73-b688-4a0a-8aa7-40bf11864f10'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_seasonal_adjustment(self, sample_transactions):\n        \"\"\"Test income smoothing with seasonal adjustment method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(\n            method=SmoothingMethod.SEASONAL_ADJUSTMENT, seasonal_periods=12\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.SEASONAL_ADJUSTMENT,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\ntests/freelancer/income/test_income_manager.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7ccfd05510>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00020456919446587563, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "lineno": 171, "outcome": "failed", "keywords": ["test_smooth_income_rolling_median", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014975210651755333, "outcome": "passed"}, "call": {"duration": 0.00022209202870726585, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 184, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4100f70>\nsample_transactions = [Transaction(id=UUID('b1687346-dd4b-4a59-9232-4ff537b8b4d5'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_rolling_median(self, sample_transactions):\n        \"\"\"Test income smoothing with rolling median method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(method=SmoothingMethod.ROLLING_MEDIAN, window_size=3)\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.ROLLING_MEDIAN,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\ntests/freelancer/income/test_income_manager.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7ccfdc94e0>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00020402390509843826, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "lineno": 196, "outcome": "failed", "keywords": ["test_smooth_income_with_target", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014888751320540905, "outcome": "passed"}, "call": {"duration": 0.00021962705068290234, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 214, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4101120>\nsample_transactions = [Transaction(id=UUID('25ff0a3a-3250-4864-ad22-ca1c177c4e64'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_with_target(self, sample_transactions):\n        \"\"\"Test income smoothing with target monthly income override.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing with target income\n        target_income = 3000.0\n        config = SmoothingConfig(\n            method=SmoothingMethod.MOVING_AVERAGE,\n            window_size=3,\n            target_monthly_income=target_income,\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions, config=config, start_date=start_date, end_date=end_date\n        )\n\ntests/freelancer/income/test_income_manager.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7ccfd05c00>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00020567188039422035, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "lineno": 223, "outcome": "passed", "keywords": ["test_forecast_revenue", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0017461900133639574, "outcome": "passed"}, "call": {"duration": 0.39756795088760555, "outcome": "passed"}, "teardown": {"duration": 0.00031125987879931927, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "lineno": 243, "outcome": "failed", "keywords": ["test_extremely_irregular_income", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001527720596641302, "outcome": "passed"}, "call": {"duration": 0.0002987158950418234, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 289, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd41014b0>\n\n    def test_extremely_irregular_income(self):\n        \"\"\"Test handling of extremely irregular income patterns.\"\"\"\n        manager = IncomeManager()\n    \n        # Create test data with extreme irregularity\n        transactions = []\n        dates = [\n            datetime(2022, 1, 15),  # 10000\n            datetime(2022, 2, 15),  # 0\n            datetime(2022, 3, 15),  # 0\n            datetime(2022, 4, 15),  # 15000\n            datetime(2022, 5, 15),  # 0\n            datetime(2022, 6, 15),  # 0\n            datetime(2022, 7, 15),  # 0\n            datetime(2022, 8, 15),  # 20000\n            datetime(2022, 9, 15),  # 0\n            datetime(2022, 10, 15),  # 0\n            datetime(2022, 11, 15),  # 0\n            datetime(2022, 12, 15),  # 30000\n        ]\n        amounts = [10000, 0, 0, 15000, 0, 0, 0, 20000, 0, 0, 0, 30000]\n    \n        for date, amount in zip(dates, amounts):\n            if amount > 0:\n                transactions.append(\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=date,\n                        amount=amount,\n                        description=\"Irregular income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                    )\n                )\n    \n        # Test different smoothing methods\n        methods = [\n            SmoothingMethod.MOVING_AVERAGE,\n            SmoothingMethod.EXPONENTIAL_SMOOTHING,\n            SmoothingMethod.PERCENTILE_BASED,\n            SmoothingMethod.ROLLING_MEDIAN,\n        ]\n    \n        for method in methods:\n            config = SmoothingConfig(method=method)\n>           smoothed = manager.smooth_income(transactions, method=method, config=config)\n\ntests/freelancer/income/test_income_manager.py:289: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7ccfdcbca0>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00017367303371429443, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "lineno": 302, "outcome": "failed", "keywords": ["test_income_smoothing_with_large_dataset", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001311860978603363, "outcome": "passed"}, "call": {"duration": 0.0016503469087183475, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 351, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 80, "message": "in calculate_monthly_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7f7cd4101630>\n\n    def test_income_smoothing_with_large_dataset(self):\n        \"\"\"Test performance with a large dataset (5+ years).\"\"\"\n        manager = IncomeManager()\n    \n        # Create a large dataset spanning 7 years\n        transactions = []\n        start_date = datetime(2016, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Generate monthly income with some randomness\n        current_date = start_date\n        while current_date <= end_date:\n            # Base income with seasonal pattern and random variation\n            month = current_date.month\n            seasonal_factor = 1.0 + 0.3 * np.sin(\n                2 * np.pi * month / 12\n            )  # Seasonal pattern\n            base_income = 3000 * seasonal_factor\n    \n            # Add random variation\n            random_factor = np.random.normal(1.0, 0.4)  # 40% standard deviation\n            income = max(0, base_income * random_factor)\n    \n            # Add occasional large payments\n            if np.random.random() < 0.1:  # 10% chance\n                income += np.random.uniform(5000, 10000)\n    \n            # Create transaction\n            if income > 0:\n                transactions.append(\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=current_date,\n                        amount=income,\n                        description=f\"Income {current_date.strftime('%Y-%m')}\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                    )\n                )\n    \n            # Move to next month\n            month = current_date.month + 1\n            year = current_date.year + (month - 1) // 12\n            month = ((month - 1) % 12) + 1\n            current_date = datetime(year, month, 15)\n    \n        # Test performance of smoothing\n        start_time = time.time()\n>       smoothed = manager.smooth_income(\n            transactions, method=SmoothingMethod.MOVING_AVERAGE\n        )\n\ntests/freelancer/income/test_income_manager.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\npersonal_finance_tracker/income/income_manager.py:80: in calculate_monthly_income\n    income_transactions = [\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7f7ccfcdd990>\n\n    income_transactions = [\n        t\n        for t in transactions\n        if (\n            t.transaction_type == TransactionType.INCOME\n>           and start_date <= t.date <= end_date\n        )\n    ]\nE   TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00016529601998627186, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003493248950690031, "outcome": "passed"}, "call": {"duration": 0.0002143331803381443, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery.py", "lineno": 32, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery.py", "lineno": 32, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery.TestCategorizationRecovery object at 0x7f7cd41038b0>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_categorization_recovery.py:32: ValidationError"}, "teardown": {"duration": 0.00016637099906802177, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "lineno": 214, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012917607091367245, "outcome": "passed"}, "call": {"duration": 0.0001962101086974144, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery.py", "lineno": 221, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery.py", "lineno": 221, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery.TestCategorizationRecovery object at 0x7f7cd4103970>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test recovering from multiple categorization errors discovered later.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Marketing Rule\",\n                category=ExpenseCategory.MARKETING,\n                keyword_patterns=[\"marketing\", \"advertising\", \"promotion\"],\n                business_use_percentage=100.0,\n                priority=8,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"dining\"],\n                business_use_percentage=50.0,  # 50% business use for meals\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_categorization_recovery.py:221: ValidationError"}, "teardown": {"duration": 0.00017025903798639774, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors", "lineno": 24, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecoveryMocks", "test_categorization_recovery_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001404120121151209, "outcome": "passed"}, "call": {"duration": 0.0001882738433778286, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 31, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 31, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_mocks.TestCategorizationRecoveryMocks object at 0x7f7cd4107310>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_categorization_recovery_mocks.py:31: ValidationError"}, "teardown": {"duration": 0.00015436019748449326, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors", "lineno": 125, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecoveryMocks", "test_categorization_recovery_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012630317360162735, "outcome": "passed"}, "call": {"duration": 0.00018972810357809067, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 133, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 133, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_mocks.TestCategorizationRecoveryMocks object at 0x7f7cd4107190>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test correcting multiple categorization errors at once.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"office\", \"supplies\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_categorization_recovery_mocks.py:133: ValidationError"}, "teardown": {"duration": 0.00015592807903885841, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecoverySimplified", "test_categorization_recovery_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00014013214968144894, "outcome": "passed"}, "call": {"duration": 0.0001843390055000782, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 32, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 32, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_simplified.TestCategorizationRecoverySimplified object at 0x7f7cd4106b60>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_categorization_recovery_simplified.py:32: ValidationError"}, "teardown": {"duration": 0.00016264105215668678, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors", "lineno": 127, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecoverySimplified", "test_categorization_recovery_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001270161010324955, "outcome": "passed"}, "call": {"duration": 0.00019233813509345055, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 135, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 135, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_simplified.TestCategorizationRecoverySimplified object at 0x7f7cd41069e0>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test correcting multiple categorization errors at once.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"office\", \"supplies\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_categorization_recovery_simplified.py:135: ValidationError"}, "teardown": {"duration": 0.00016951397992670536, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "lineno": 31, "outcome": "failed", "keywords": ["test_business_expenses_impact_on_tax_liability", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013667112216353416, "outcome": "passed"}, "call": {"duration": 0.00018396996892988682, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_expense_tax_integration.py", "lineno": 38, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_expense_tax_integration.py", "lineno": 38, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_expense_tax_integration.TestExpenseTaxIntegration object at 0x7f7cd4106530>\n\n    def test_business_expenses_impact_on_tax_liability(self):\n        \"\"\"Test how business expense categorization impacts tax liability.\"\"\"\n        # Set up the expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_expense_tax_integration.py:38: ValidationError"}, "teardown": {"duration": 0.000165918143466115, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "lineno": 170, "outcome": "passed", "keywords": ["test_expense_recategorization_tax_impact", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013436004519462585, "outcome": "passed"}, "call": {"duration": 0.00023405696265399456, "outcome": "passed"}, "teardown": {"duration": 0.00012293015606701374, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability", "lineno": 18, "outcome": "passed", "keywords": ["test_expense_categorization_impacts_tax_liability", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012664590030908585, "outcome": "passed"}, "call": {"duration": 0.00020657293498516083, "outcome": "passed"}, "teardown": {"duration": 0.00011436408385634422, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact", "lineno": 95, "outcome": "passed", "keywords": ["test_categorization_correction_tax_impact", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001193059142678976, "outcome": "passed"}, "call": {"duration": 0.0001902841031551361, "outcome": "passed"}, "teardown": {"duration": 0.00011176313273608685, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation", "lineno": 162, "outcome": "passed", "keywords": ["test_quarterly_tax_estimation", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011392799206078053, "outcome": "passed"}, "call": {"duration": 0.0002475560177117586, "outcome": "passed"}, "teardown": {"duration": 0.00012430991046130657, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability", "lineno": 304, "outcome": "passed", "keywords": ["test_multi_year_project_profitability", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011454010382294655, "outcome": "passed"}, "call": {"duration": 0.0002295919694006443, "outcome": "passed"}, "teardown": {"duration": 0.00011397106572985649, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "lineno": 232, "outcome": "passed", "keywords": ["test_project_profitability_across_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016204537823796272, "outcome": "passed"}, "call": {"duration": 0.0010209099855273962, "outcome": "passed"}, "teardown": {"duration": 0.00023921695537865162, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "lineno": 342, "outcome": "passed", "keywords": ["test_tax_implications_of_cross_year_project", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014884760603308678, "outcome": "passed"}, "call": {"duration": 0.0004417090676724911, "outcome": "passed"}, "teardown": {"duration": 0.0002245497889816761, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "lineno": 463, "outcome": "passed", "keywords": ["test_cross_year_project_cash_flow", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014702058397233486, "outcome": "passed"}, "call": {"duration": 0.0010474480222910643, "outcome": "passed"}, "teardown": {"duration": 0.0002464170102030039, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "lineno": 553, "outcome": "passed", "keywords": ["test_project_spanning_three_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001396371517330408, "outcome": "passed"}, "call": {"duration": 0.00043471413664519787, "outcome": "passed"}, "teardown": {"duration": 0.0001289809588342905, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "passed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012623309157788754, "outcome": "passed"}, "call": {"duration": 0.00031338492408394814, "outcome": "passed"}, "teardown": {"duration": 0.00011821603402495384, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments", "lineno": 139, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011373590677976608, "outcome": "passed"}, "call": {"duration": 0.00024452502839267254, "outcome": "passed"}, "teardown": {"duration": 0.00011307117529213428, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing", "lineno": 190, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011166906915605068, "outcome": "passed"}, "call": {"duration": 0.00023317895829677582, "outcome": "passed"}, "teardown": {"duration": 0.00011697597801685333, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011508213356137276, "outcome": "passed"}, "call": {"duration": 0.00021163886412978172, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_quarterly_tax_preparation.py", "lineno": 56, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "lineno": 56, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation.TestQuarterlyTaxPreparation object at 0x7f7d7f3c6cb0>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with simplified transactions.\"\"\"\n        # Set up the required components\n        expense_categorizer = ExpenseCategorizer()\n        income_manager = IncomeManager()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n    \n        # Load default tax brackets\n        tax_manager.load_default_brackets()\n    \n        # Add tax brackets for test year (2022)\n        tax_brackets_2022 = TaxBracket(\n            jurisdiction=TaxJurisdiction.FEDERAL,\n            filing_status=FilingStatus.SINGLE,\n            tax_year=2022,\n            income_thresholds=[0, 10275, 41775, 89075, 170050, 215950, 539900],\n            rates=[10, 12, 22, 24, 32, 35, 37],\n        )\n        tax_manager.set_tax_brackets([tax_brackets_2022])\n    \n        # Add a few categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_quarterly_tax_preparation.py:56: ValidationError"}, "teardown": {"duration": 0.00016396492719650269, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "lineno": 285, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012708688154816628, "outcome": "passed"}, "call": {"duration": 0.0004722829908132553, "outcome": "passed"}, "teardown": {"duration": 0.00012974697165191174, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "lineno": 423, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013336795382201672, "outcome": "passed"}, "call": {"duration": 0.0006046409253031015, "outcome": "passed"}, "teardown": {"duration": 0.00012409687042236328, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation", "lineno": 30, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationMock", "test_quarterly_tax_preparation_mock.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012709596194326878, "outcome": "passed"}, "call": {"duration": 0.00024483795277774334, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "lineno": 77, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "lineno": 77, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation_mock.TestQuarterlyTaxPreparationMock object at 0x7f7d7f3c77c0>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with mock data.\"\"\"\n        # Set up components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Define test data\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Calculate quarter dates\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n        current_quarter = next(q for q in quarters if q.quarter == quarter_number)\n    \n        # Create mock transactions\n        business_expenses = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 4, 15),\n                amount=1200.0,\n                description=\"Office supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 5, 10),\n                amount=500.0,\n                description=\"Software subscription\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        income_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 5),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        # Add expense categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_quarterly_tax_preparation_mock.py:77: ValidationError"}, "teardown": {"duration": 0.00020004692487418652, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013496004976332188, "outcome": "passed"}, "call": {"duration": 0.00025602616369724274, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "lineno": 43, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "lineno": 43, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation_simplified.TestQuarterlyTaxPreparationSimplified object at 0x7f7cd4189360>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with simplified approach.\"\"\"\n        # Set up components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Add expense categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\ntests/freelancer/integration/test_quarterly_tax_preparation_simplified.py:43: ValidationError"}, "teardown": {"duration": 0.00016628392040729523, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments", "lineno": 152, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013076793402433395, "outcome": "passed"}, "call": {"duration": 0.00026552495546638966, "outcome": "passed"}, "teardown": {"duration": 0.00012338301166892052, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing", "lineno": 209, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011984119191765785, "outcome": "passed"}, "call": {"duration": 0.0003057429566979408, "outcome": "passed"}, "teardown": {"duration": 0.00012493901886045933, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "lineno": 330, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.004205310018733144, "outcome": "passed"}, "call": {"duration": 0.001444170018658042, "outcome": "passed"}, "teardown": {"duration": 0.00017025810666382313, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "lineno": 403, "outcome": "failed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.004126180894672871, "outcome": "passed"}, "call": {"duration": 0.001100708032026887, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 469, "message": "assert 0.43831819846578196 >= 0.4385677982392301"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 469, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_comparison.TestYearOverYearComparison object at 0x7f7d7f3c42e0>\nmulti_year_transactions = [Transaction(id=UUID('44b9e14e-7622-4112-8586-a473e5c4ed19'), date=datetime.datetime(2021, 1, 15, 0, 0), amount=2000.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_expense_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing expense patterns across multiple years.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Process expenses by year and category\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter expense transactions for this year\n            year_transactions = [\n                tx for tx in multi_year_transactions\n                if tx.date.year == year and tx.transaction_type == TransactionType.EXPENSE\n            ]\n    \n            # Generate expense summary for the year\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            expense_summary = categorizer.generate_expense_summary(\n                year_transactions, start_date, end_date\n            )\n    \n            # Store data for analysis\n            year_data[year] = {\n                \"transactions\": year_transactions,\n                \"summary\": expense_summary,\n                \"total_expenses\": expense_summary.total_expenses,\n                \"business_expenses\": expense_summary.business_expenses,\n                \"personal_expenses\": expense_summary.personal_expenses,\n                \"by_category\": expense_summary.by_category,\n            }\n    \n        # Compare total expenses year-over-year\n        # Should increase due to inflation and business growth\n        assert year_data[2022][\"total_expenses\"] > year_data[2021][\"total_expenses\"]\n        assert year_data[2023][\"total_expenses\"] > year_data[2022][\"total_expenses\"]\n    \n        # Calculate expense growth rates\n        expense_growth_2021_to_2022 = (\n            year_data[2022][\"total_expenses\"] - year_data[2021][\"total_expenses\"]\n        ) / year_data[2021][\"total_expenses\"]\n    \n        expense_growth_2022_to_2023 = (\n            year_data[2023][\"total_expenses\"] - year_data[2022][\"total_expenses\"]\n        ) / year_data[2022][\"total_expenses\"]\n    \n        # Ensure both years show positive expense growth due to inflation\n        assert expense_growth_2021_to_2022 > 0\n        assert expense_growth_2022_to_2023 > 0\n    \n        # Check that both growth rates are within a reasonable range\n        assert 0.02 < expense_growth_2021_to_2022 < 0.15\n        assert 0.02 < expense_growth_2022_to_2023 < 0.15\n    \n        # Compare business vs personal expense ratio over time\n        business_ratio = {}\n        for year, data in year_data.items():\n            if data[\"total_expenses\"] > 0:\n                business_ratio[year] = data[\"business_expenses\"] / data[\"total_expenses\"]\n            else:\n                business_ratio[year] = 0\n    \n        # Assuming business expenses should increase as a proportion over time\n        # as the freelancer becomes more established\n        # This will depend on the test data pattern\n>       assert business_ratio[2023] >= business_ratio[2021]\nE       assert 0.43831819846578196 >= 0.4385677982392301\n\ntests/freelancer/integration/test_year_over_year_comparison.py:469: AssertionError"}, "teardown": {"duration": 0.00019118795171380043, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "lineno": 494, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0041592540219426155, "outcome": "passed"}, "call": {"duration": 0.0011518050450831652, "outcome": "passed"}, "teardown": {"duration": 0.0001587939914315939, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "lineno": 582, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002738422015681863, "outcome": "passed"}, "call": {"duration": 0.00017450284212827682, "outcome": "passed"}, "teardown": {"duration": 0.00017410190775990486, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis", "lineno": 18, "outcome": "passed", "keywords": ["test_income_growth_analysis", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001302568707615137, "outcome": "passed"}, "call": {"duration": 0.00047557102516293526, "outcome": "passed"}, "teardown": {"duration": 0.00013240915723145008, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends", "lineno": 90, "outcome": "passed", "keywords": ["test_expense_category_trends", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011864397674798965, "outcome": "passed"}, "call": {"duration": 0.0008525620214641094, "outcome": "passed"}, "teardown": {"duration": 0.0001187820453196764, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison", "lineno": 226, "outcome": "passed", "keywords": ["test_tax_liability_comparison", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012689712457358837, "outcome": "passed"}, "call": {"duration": 0.0002191730309277773, "outcome": "passed"}, "teardown": {"duration": 0.0001249639317393303, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends", "lineno": 352, "outcome": "passed", "keywords": ["test_project_profitability_trends", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012701284140348434, "outcome": "passed"}, "call": {"duration": 0.0002707859966903925, "outcome": "passed"}, "teardown": {"duration": 0.00011622393503785133, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years", "lineno": 28, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012366496957838535, "outcome": "passed"}, "call": {"duration": 0.00025052810087800026, "outcome": "passed"}, "teardown": {"duration": 0.00012741493992507458, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years", "lineno": 70, "outcome": "passed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011936179362237453, "outcome": "passed"}, "call": {"duration": 0.00019250810146331787, "outcome": "passed"}, "teardown": {"duration": 0.00011681299656629562, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years", "lineno": 148, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011205486953258514, "outcome": "passed"}, "call": {"duration": 0.00015956000424921513, "outcome": "passed"}, "teardown": {"duration": 0.00010890001431107521, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years", "lineno": 170, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010972004383802414, "outcome": "passed"}, "call": {"duration": 0.000165166100487113, "outcome": "passed"}, "teardown": {"duration": 0.00011519109830260277, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years", "lineno": 29, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011428515426814556, "outcome": "passed"}, "call": {"duration": 0.00032006693072617054, "outcome": "passed"}, "teardown": {"duration": 0.00012022187002003193, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years", "lineno": 91, "outcome": "passed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011818599887192249, "outcome": "passed"}, "call": {"duration": 0.00023831496946513653, "outcome": "passed"}, "teardown": {"duration": 0.00011334987357258797, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years", "lineno": 175, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011169887147843838, "outcome": "passed"}, "call": {"duration": 0.00012515205889940262, "outcome": "passed"}, "teardown": {"duration": 0.00010653608478605747, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years", "lineno": 205, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011007208377122879, "outcome": "passed"}, "call": {"duration": 0.00018190802074968815, "outcome": "passed"}, "teardown": {"duration": 0.00012219208292663097, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "lineno": 25, "outcome": "passed", "keywords": ["test_init", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00031982315704226494, "outcome": "passed"}, "call": {"duration": 0.0001352890394628048, "outcome": "passed"}, "teardown": {"duration": 0.00011384207755327225, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "lineno": 31, "outcome": "passed", "keywords": ["test_analyze_project_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0024771220050752163, "outcome": "passed"}, "call": {"duration": 0.0006462009623646736, "outcome": "passed"}, "teardown": {"duration": 0.0002454181667417288, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "lineno": 64, "outcome": "passed", "keywords": ["test_analyze_client_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0024544461630284786, "outcome": "passed"}, "call": {"duration": 0.00075376289896667, "outcome": "passed"}, "teardown": {"duration": 0.00025454419665038586, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "lineno": 101, "outcome": "passed", "keywords": ["test_analyze_all_projects", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002450559986755252, "outcome": "passed"}, "call": {"duration": 0.0006799190305173397, "outcome": "passed"}, "teardown": {"duration": 0.00024247006513178349, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "lineno": 121, "outcome": "passed", "keywords": ["test_generate_trend_analysis", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002394470851868391, "outcome": "passed"}, "call": {"duration": 0.0021047908812761307, "outcome": "passed"}, "teardown": {"duration": 0.0002715929877012968, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "lineno": 172, "outcome": "passed", "keywords": ["test_record_time_entry", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00014547514729201794, "outcome": "passed"}, "call": {"duration": 0.00017394707538187504, "outcome": "passed"}, "teardown": {"duration": 0.00011864700354635715, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "lineno": 192, "outcome": "passed", "keywords": ["test_allocate_expense", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001274708192795515, "outcome": "passed"}, "call": {"duration": 0.0001875611487776041, "outcome": "passed"}, "teardown": {"duration": 0.00011588889174163342, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "lineno": 215, "outcome": "passed", "keywords": ["test_analyze_large_project_set", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012920494191348553, "outcome": "passed"}, "call": {"duration": 0.0920511579606682, "outcome": "passed"}, "teardown": {"duration": 0.00013961619697511196, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init", "lineno": 30, "outcome": "passed", "keywords": ["test_init", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.000343850813806057, "outcome": "passed"}, "call": {"duration": 0.0001442250795662403, "outcome": "passed"}, "teardown": {"duration": 0.00011550309136509895, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "lineno": 35, "outcome": "passed", "keywords": ["test_project_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.000125030055642128, "outcome": "passed"}, "call": {"duration": 0.00036544399335980415, "outcome": "passed"}, "teardown": {"duration": 0.00012334110215306282, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "lineno": 145, "outcome": "passed", "keywords": ["test_project_cash_flow_different_scenarios", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012145610526204109, "outcome": "passed"}, "call": {"duration": 0.0004410820547491312, "outcome": "passed"}, "teardown": {"duration": 0.00012772995978593826, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "lineno": 217, "outcome": "passed", "keywords": ["test_calculate_runway_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011490308679640293, "outcome": "passed"}, "call": {"duration": 0.00019460683688521385, "outcome": "passed"}, "teardown": {"duration": 0.0001224700827151537, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "lineno": 236, "outcome": "passed", "keywords": ["test_create_what_if_scenario", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001151480246335268, "outcome": "passed"}, "call": {"duration": 0.000167385907843709, "outcome": "passed"}, "teardown": {"duration": 0.00011026696301996708, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "lineno": 279, "outcome": "passed", "keywords": ["test_create_what_if_scenario_with_evaluation", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011279992759227753, "outcome": "passed"}, "call": {"duration": 0.0001558039803057909, "outcome": "passed"}, "teardown": {"duration": 0.00010879593901336193, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "lineno": 309, "outcome": "passed", "keywords": ["test_assess_emergency_fund_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011764094233512878, "outcome": "passed"}, "call": {"duration": 0.00015924382023513317, "outcome": "passed"}, "teardown": {"duration": 0.00010720291174948215, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "lineno": 332, "outcome": "passed", "keywords": ["test_negative_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001184600405395031, "outcome": "passed"}, "call": {"duration": 0.0003206641413271427, "outcome": "passed"}, "teardown": {"duration": 0.00013284501619637012, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "lineno": 19, "outcome": "passed", "keywords": ["test_init", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00031834980472922325, "outcome": "passed"}, "call": {"duration": 0.00013820920139551163, "outcome": "passed"}, "teardown": {"duration": 0.00011172005906701088, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "lineno": 29, "outcome": "passed", "keywords": ["test_calculate_tax_quarters", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012589502148330212, "outcome": "passed"}, "call": {"duration": 0.0001636131200939417, "outcome": "passed"}, "teardown": {"duration": 0.00010951305739581585, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "lineno": 60, "outcome": "passed", "keywords": ["test_get_current_quarter", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010896497406065464, "outcome": "passed"}, "call": {"duration": 0.00015906291082501411, "outcome": "passed"}, "teardown": {"duration": 0.00010809116065502167, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "lineno": 71, "outcome": "passed", "keywords": ["test_tax_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010975194163620472, "outcome": "passed"}, "call": {"duration": 0.00018124282360076904, "outcome": "passed"}, "teardown": {"duration": 0.00011279899626970291, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "lineno": 114, "outcome": "passed", "keywords": ["test_load_default_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012686499394476414, "outcome": "passed"}, "call": {"duration": 0.00015798397362232208, "outcome": "passed"}, "teardown": {"duration": 0.00011411798186600208, "outcome": "passed"}}, {"nodeid": "tests/freelancer/test_main.py::test_main", "lineno": 3, "outcome": "passed", "keywords": ["test_main", "test_main.py", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011116103269159794, "outcome": "passed"}, "call": {"duration": 0.00012155785225331783, "outcome": "passed"}, "teardown": {"duration": 0.00011958996765315533, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria", "lineno": 15, "outcome": "failed", "keywords": ["test_create_prioritized_ethical_criteria", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0004186490550637245, "outcome": "passed"}, "call": {"duration": 0.00017183483578264713, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 70, "message": "TypeError: Can't instantiate abstract class EthicalScreener with abstract method analyze"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 70, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_ethical_criteria_customization.TestEthicalCriteriaCustomization object at 0x7f7ccffab970>\n\n    def test_create_prioritized_ethical_criteria(self):\n        \"\"\"Test creating criteria with personalized priority weights.\"\"\"\n        # Create a custom criteria with prioritized categories\n        custom_criteria = EthicalCriteria(\n            criteria_id=\"personal-values-focused\",\n            name=\"Personal Values Focused Criteria\",\n            environmental={\n                \"min_environmental_score\": 65,\n                \"max_carbon_footprint\": 40000000,\n                \"min_renewable_energy_use\": 0.6,\n                \"exclude_fossil_fuel_production\": True,\n                \"weight\": 0.5  # Higher weight for environmental factors\n            },\n            social={\n                \"min_social_score\": 60,\n                \"min_diversity_score\": 0.65,\n                \"exclude_human_rights_violations\": True,\n                \"exclude_weapons_manufacturing\": True,\n                \"weight\": 0.3\n            },\n            governance={\n                \"min_governance_score\": 65,\n                \"min_board_independence\": 0.7,\n                \"exclude_excessive_executive_compensation\": True,\n                \"weight\": 0.2\n            },\n            min_overall_score=65,\n            exclusions=[\n                \"tobacco\",\n                \"gambling\",\n                \"adult_entertainment\",\n                \"military_contracting\"\n            ],\n            inclusions=[\n                \"renewable_energy\",\n                \"sustainable_agriculture\",\n                \"education\",\n                \"healthcare\"\n            ]\n        )\n    \n        # Verify criteria properties\n        assert custom_criteria.criteria_id == \"personal-values-focused\"\n        assert custom_criteria.name == \"Personal Values Focused Criteria\"\n    \n        # Verify custom weights\n        assert custom_criteria.environmental[\"weight\"] == 0.5\n        assert custom_criteria.social[\"weight\"] == 0.3\n        assert custom_criteria.governance[\"weight\"] == 0.2\n        assert abs(custom_criteria.environmental[\"weight\"] +\n                custom_criteria.social[\"weight\"] +\n                custom_criteria.governance[\"weight\"] - 1.0) < 0.001\n    \n        # Initialize screener with the custom criteria\n>       screener = EthicalScreener(custom_criteria)\nE       TypeError: Can't instantiate abstract class EthicalScreener with abstract method analyze\n\ntests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py:70: TypeError"}, "teardown": {"duration": 0.00015472504310309887, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey", "lineno": 153, "outcome": "failed", "keywords": ["test_criteria_from_user_survey", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001281260047107935, "outcome": "passed"}, "call": {"duration": 0.0001694739330559969, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 202, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 202, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_ethical_criteria_customization.TestEthicalCriteriaCustomization object at 0x7f7ccffabaf0>\n\n    def test_criteria_from_user_survey(self):\n        \"\"\"Test generating ethical criteria from user survey responses.\"\"\"\n        # Simulate user survey responses\n        survey_responses = {\n            \"top_concerns\": [\"climate_change\", \"human_rights\", \"labor_practices\"],\n            \"industries_to_avoid\": [\"fossil_fuels\", \"weapons\", \"tobacco\"],\n            \"industries_to_support\": [\"renewable_energy\", \"education\", \"healthcare\"],\n            \"relative_importance\": {\n                \"environmental\": 5,  # 1-5 scale\n                \"social\": 4,\n                \"governance\": 3\n            },\n            \"environmental_priorities\": [\"carbon_reduction\", \"renewable_energy\", \"waste_reduction\"],\n            \"social_priorities\": [\"diversity\", \"community_investment\", \"fair_labor\"],\n            \"governance_priorities\": [\"board_diversity\", \"executive_compensation\", \"transparency\"]\n        }\n    \n        # Generate criteria from survey responses\n        criteria = EthicalScreener.generate_criteria_from_survey(survey_responses)\n    \n        # Verify criteria reflects survey responses\n        assert criteria.criteria_id == \"user-personalized\"\n    \n        # Check weights are properly calculated from relative importance\n        total_importance = sum(survey_responses[\"relative_importance\"].values())\n        expected_env_weight = survey_responses[\"relative_importance\"][\"environmental\"] / total_importance\n        expected_social_weight = survey_responses[\"relative_importance\"][\"social\"] / total_importance\n        expected_gov_weight = survey_responses[\"relative_importance\"][\"governance\"] / total_importance\n    \n        assert abs(criteria.environmental[\"weight\"] - expected_env_weight) < 0.001\n        assert abs(criteria.social[\"weight\"] - expected_social_weight) < 0.001\n        assert abs(criteria.governance[\"weight\"] - expected_gov_weight) < 0.001\n    \n        # Check exclusions and inclusions\n        for industry in survey_responses[\"industries_to_avoid\"]:\n            assert industry in criteria.exclusions\n    \n        for industry in survey_responses[\"industries_to_support\"]:\n            assert industry in criteria.inclusions\n    \n        # Check that environmental priorities are reflected\n        if \"carbon_reduction\" in survey_responses[\"environmental_priorities\"]:\n            assert \"max_carbon_footprint\" in criteria.environmental\n    \n        if \"renewable_energy\" in survey_responses[\"environmental_priorities\"]:\n            assert \"min_renewable_energy_use\" in criteria.environmental\n    \n        # Create test investment that aligns with the user's priorities\n>       aligned_investment = Investment(\n            id=\"aligned-investment\",\n            name=\"Aligned Investment Co\",\n            sector=\"Technology\",\n            industry=\"Clean Technology\",\n            market_cap=20000000000,\n            price=85.25,\n            esg_ratings={\n                \"environmental\": 85,\n                \"social\": 80,\n                \"governance\": 75,\n                \"overall\": 82\n            },\n            carbon_footprint=8000000,\n            renewable_energy_use=0.85,\n            diversity_score=0.80,\n            board_independence=0.75,\n            controversies=[],\n            positive_practices=[\"renewable_energy_investment\", \"diversity_initiatives\", \"community_investment\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py:202: TypeError"}, "teardown": {"duration": 0.00015628710389137268, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria", "lineno": 263, "outcome": "failed", "keywords": ["test_serialize_and_load_criteria", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012768502347171307, "outcome": "passed"}, "call": {"duration": 0.0002500000409781933, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 324, "message": "TypeError: Can't instantiate abstract class EthicalScreener with abstract method analyze"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 324, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_ethical_criteria_customization.TestEthicalCriteriaCustomization object at 0x7f7ccffaa290>\n\n    def test_serialize_and_load_criteria(self):\n        \"\"\"Test serializing and loading criteria for persistence.\"\"\"\n        # Create custom criteria\n        custom_criteria = EthicalCriteria(\n            criteria_id=\"serialization-test\",\n            name=\"Serialization Test Criteria\",\n            environmental={\n                \"min_environmental_score\": 70,\n                \"max_carbon_footprint\": 30000000,\n                \"min_renewable_energy_use\": 0.7,\n                \"exclude_fossil_fuel_production\": True,\n                \"weight\": 0.4\n            },\n            social={\n                \"min_social_score\": 65,\n                \"min_diversity_score\": 0.7,\n                \"exclude_human_rights_violations\": True,\n                \"exclude_weapons_manufacturing\": True,\n                \"weight\": 0.4\n            },\n            governance={\n                \"min_governance_score\": 60,\n                \"min_board_independence\": 0.65,\n                \"exclude_excessive_executive_compensation\": True,\n                \"weight\": 0.2\n            },\n            min_overall_score=65,\n            exclusions=[\"tobacco\", \"gambling\", \"fossil_fuels\"],\n            inclusions=[\"renewable_energy\", \"education\"]\n        )\n    \n        # Serialize criteria to JSON\n        criteria_json = self._serialize_criteria(custom_criteria)\n    \n        # Verify serialization\n        assert isinstance(criteria_json, str)\n    \n        # Parse JSON\n        criteria_dict = json.loads(criteria_json)\n        assert criteria_dict[\"criteria_id\"] == \"serialization-test\"\n        assert criteria_dict[\"name\"] == \"Serialization Test Criteria\"\n        assert criteria_dict[\"environmental\"][\"weight\"] == 0.4\n        assert criteria_dict[\"social\"][\"weight\"] == 0.4\n        assert criteria_dict[\"governance\"][\"weight\"] == 0.2\n    \n        # Load criteria from JSON\n        loaded_criteria = self._load_criteria_from_json(criteria_json)\n    \n        # Verify loaded criteria matches original\n        assert loaded_criteria.criteria_id == custom_criteria.criteria_id\n        assert loaded_criteria.name == custom_criteria.name\n        assert loaded_criteria.environmental[\"weight\"] == custom_criteria.environmental[\"weight\"]\n        assert loaded_criteria.environmental[\"min_environmental_score\"] == custom_criteria.environmental[\"min_environmental_score\"]\n        assert loaded_criteria.social[\"weight\"] == custom_criteria.social[\"weight\"]\n        assert loaded_criteria.governance[\"weight\"] == custom_criteria.governance[\"weight\"]\n        assert loaded_criteria.min_overall_score == custom_criteria.min_overall_score\n        assert set(loaded_criteria.exclusions) == set(custom_criteria.exclusions)\n        assert set(loaded_criteria.inclusions) == set(custom_criteria.inclusions)\n    \n        # Initialize screener with loaded criteria\n>       screener = EthicalScreener(loaded_criteria)\nE       TypeError: Can't instantiate abstract class EthicalScreener with abstract method analyze\n\ntests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py:324: TypeError"}, "teardown": {"duration": 0.0001652801875025034, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria", "lineno": 16, "outcome": "passed", "keywords": ["test_create_default_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001305451150983572, "outcome": "passed"}, "call": {"duration": 0.0003131090197712183, "outcome": "passed"}, "teardown": {"duration": 0.00017833290621638298, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener", "lineno": 40, "outcome": "failed", "keywords": ["test_initialize_screener", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00020559714175760746, "outcome": "passed"}, "call": {"duration": 0.00016389507800340652, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 43, "message": "TypeError: Can't instantiate abstract class EthicalScreener with abstract method analyze"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 43, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffaa8f0>\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_initialize_screener(self, sample_ethical_criteria):\n        \"\"\"Test initializing the ethical screener.\"\"\"\n>       screener = EthicalScreener(sample_ethical_criteria)\nE       TypeError: Can't instantiate abstract class EthicalScreener with abstract method analyze\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:43: TypeError"}, "teardown": {"duration": 0.0001859809271991253, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing", "lineno": 46, "outcome": "failed", "keywords": ["test_screen_investment_passing", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024278508499264717, "outcome": "passed"}, "call": {"duration": 0.00015653297305107117, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 60, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 60, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffaaaa0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_passing(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that passes criteria.\"\"\"\n        # Get a high-scoring investment from the sample data\n        high_scoring_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"overall\"] >= sample_ethical_criteria[\"min_overall_score\"] and\n                \"fossil_fuel_production\" not in investment[\"controversies\"]):\n                high_scoring_investment = investment\n                break\n    \n        assert high_scoring_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=high_scoring_investment[\"id\"],\n            name=high_scoring_investment[\"name\"],\n            sector=high_scoring_investment[\"sector\"],\n            industry=high_scoring_investment[\"industry\"],\n            market_cap=high_scoring_investment[\"market_cap\"],\n            price=high_scoring_investment[\"price\"],\n            esg_ratings=high_scoring_investment[\"esg_ratings\"],\n            carbon_footprint=high_scoring_investment[\"carbon_footprint\"],\n            renewable_energy_use=high_scoring_investment[\"renewable_energy_use\"],\n            diversity_score=high_scoring_investment[\"diversity_score\"],\n            board_independence=high_scoring_investment[\"board_independence\"],\n            controversies=high_scoring_investment[\"controversies\"],\n            positive_practices=high_scoring_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:60: TypeError"}, "teardown": {"duration": 0.00018959399312734604, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing", "lineno": 89, "outcome": "failed", "keywords": ["test_screen_investment_failing", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002472498454153538, "outcome": "passed"}, "call": {"duration": 0.00016413582488894463, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 106, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 106, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffabf10>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_failing(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that fails criteria.\"\"\"\n        # Modify criteria to be more stringent\n        strict_criteria = dict(sample_ethical_criteria)\n        strict_criteria[\"min_overall_score\"] = 85  # Very high threshold\n    \n        # Find a lower-scoring investment\n        low_scoring_investment = None\n        for investment in sample_investments:\n            if investment[\"esg_ratings\"][\"overall\"] < 85:\n                low_scoring_investment = investment\n                break\n    \n        assert low_scoring_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=low_scoring_investment[\"id\"],\n            name=low_scoring_investment[\"name\"],\n            sector=low_scoring_investment[\"sector\"],\n            industry=low_scoring_investment[\"industry\"],\n            market_cap=low_scoring_investment[\"market_cap\"],\n            price=low_scoring_investment[\"price\"],\n            esg_ratings=low_scoring_investment[\"esg_ratings\"],\n            carbon_footprint=low_scoring_investment[\"carbon_footprint\"],\n            renewable_energy_use=low_scoring_investment[\"renewable_energy_use\"],\n            diversity_score=low_scoring_investment[\"diversity_score\"],\n            board_independence=low_scoring_investment[\"board_independence\"],\n            controversies=low_scoring_investment[\"controversies\"],\n            positive_practices=low_scoring_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:106: TypeError"}, "teardown": {"duration": 0.00019115908071398735, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions", "lineno": 133, "outcome": "failed", "keywords": ["test_screen_investment_with_exclusions", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024766894057393074, "outcome": "passed"}, "call": {"duration": 0.0001577360089868307, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 146, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 146, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffabd00>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_with_exclusions(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that matches exclusion criteria.\"\"\"\n        # Get an energy sector investment (which should be excluded)\n        energy_investment = None\n        for investment in sample_investments:\n            if investment[\"sector\"] == \"Energy\":\n                energy_investment = investment\n                break\n    \n        assert energy_investment is not None, \"No energy sector investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=energy_investment[\"id\"],\n            name=energy_investment[\"name\"],\n            sector=energy_investment[\"sector\"],\n            industry=energy_investment[\"industry\"],\n            market_cap=energy_investment[\"market_cap\"],\n            price=energy_investment[\"price\"],\n            esg_ratings=energy_investment[\"esg_ratings\"],\n            carbon_footprint=energy_investment[\"carbon_footprint\"],\n            renewable_energy_use=energy_investment[\"renewable_energy_use\"],\n            diversity_score=energy_investment[\"diversity_score\"],\n            board_independence=energy_investment[\"board_independence\"],\n            controversies=energy_investment[\"controversies\"],\n            positive_practices=energy_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:146: TypeError"}, "teardown": {"duration": 0.00020492891781032085, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions", "lineno": 178, "outcome": "failed", "keywords": ["test_screen_investment_with_inclusions", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002455159556120634, "outcome": "passed"}, "call": {"duration": 0.00016407808288931847, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 196, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 196, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffab8b0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_with_inclusions(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that matches inclusion criteria.\"\"\"\n        # Find an investment with a positive practice that's in our inclusions\n        included_investment = None\n        for investment in sample_investments:\n            practices = [p.lower() for p in investment[\"positive_practices\"]]\n            if any(practice in [inc.lower() for inc in sample_ethical_criteria[\"inclusions\"]]\n                   for practice in practices):\n                included_investment = investment\n                break\n    \n        if included_investment is None:\n            # If none found, modify an investment to match\n            included_investment = sample_investments[0].copy()\n            included_investment[\"positive_practices\"] = [\"renewable_energy\"] + included_investment[\"positive_practices\"]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=included_investment[\"id\"],\n            name=included_investment[\"name\"],\n            sector=included_investment[\"sector\"],\n            industry=included_investment[\"industry\"],\n            market_cap=included_investment[\"market_cap\"],\n            price=included_investment[\"price\"],\n            esg_ratings=included_investment[\"esg_ratings\"],\n            carbon_footprint=included_investment[\"carbon_footprint\"],\n            renewable_energy_use=included_investment[\"renewable_energy_use\"],\n            diversity_score=included_investment[\"diversity_score\"],\n            board_independence=included_investment[\"board_independence\"],\n            controversies=included_investment[\"controversies\"],\n            positive_practices=included_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:196: TypeError"}, "teardown": {"duration": 0.00019214395433664322, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch", "lineno": 222, "outcome": "failed", "keywords": ["test_screen_investments_batch", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002417669165879488, "outcome": "passed"}, "call": {"duration": 0.00014719320461153984, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 228, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 228, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffab700>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investments_batch(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening multiple investments in batch.\"\"\"\n        # Convert sample data to Investment models\n        investments = []\n        for inv_data in sample_investments:\n>           investments.append(Investment(\n                id=inv_data[\"id\"],\n                name=inv_data[\"name\"],\n                sector=inv_data[\"sector\"],\n                industry=inv_data[\"industry\"],\n                market_cap=inv_data[\"market_cap\"],\n                price=inv_data[\"price\"],\n                esg_ratings=inv_data[\"esg_ratings\"],\n                carbon_footprint=inv_data[\"carbon_footprint\"],\n                renewable_energy_use=inv_data[\"renewable_energy_use\"],\n                diversity_score=inv_data[\"diversity_score\"],\n                board_independence=inv_data[\"board_independence\"],\n                controversies=inv_data[\"controversies\"],\n                positive_practices=inv_data[\"positive_practices\"]\n            ))\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:228: TypeError"}, "teardown": {"duration": 0.00019245408475399017, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria", "lineno": 258, "outcome": "failed", "keywords": ["test_evaluate_environmental_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024152291007339954, "outcome": "passed"}, "call": {"duration": 0.00015551084652543068, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 272, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 272, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffab580>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_evaluate_environmental_criteria(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test evaluating environmental criteria for an investment.\"\"\"\n        # Get an investment with good environmental metrics\n        env_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"environmental\"] >= 70 and\n                investment[\"renewable_energy_use\"] >= 0.7):\n                env_investment = investment\n                break\n    \n        assert env_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=env_investment[\"id\"],\n            name=env_investment[\"name\"],\n            sector=env_investment[\"sector\"],\n            industry=env_investment[\"industry\"],\n            market_cap=env_investment[\"market_cap\"],\n            price=env_investment[\"price\"],\n            esg_ratings=env_investment[\"esg_ratings\"],\n            carbon_footprint=env_investment[\"carbon_footprint\"],\n            renewable_energy_use=env_investment[\"renewable_energy_use\"],\n            diversity_score=env_investment[\"diversity_score\"],\n            board_independence=env_investment[\"board_independence\"],\n            controversies=env_investment[\"controversies\"],\n            positive_practices=env_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:272: TypeError"}, "teardown": {"duration": 0.0001913551241159439, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria", "lineno": 300, "outcome": "failed", "keywords": ["test_evaluate_social_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002451078034937382, "outcome": "passed"}, "call": {"duration": 0.00015919003635644913, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 314, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 314, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffa8eb0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_evaluate_social_criteria(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test evaluating social criteria for an investment.\"\"\"\n        # Get an investment with good social metrics\n        social_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"social\"] >= 70 and\n                investment[\"diversity_score\"] >= 0.7):\n                social_investment = investment\n                break\n    \n        assert social_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=social_investment[\"id\"],\n            name=social_investment[\"name\"],\n            sector=social_investment[\"sector\"],\n            industry=social_investment[\"industry\"],\n            market_cap=social_investment[\"market_cap\"],\n            price=social_investment[\"price\"],\n            esg_ratings=social_investment[\"esg_ratings\"],\n            carbon_footprint=social_investment[\"carbon_footprint\"],\n            renewable_energy_use=social_investment[\"renewable_energy_use\"],\n            diversity_score=social_investment[\"diversity_score\"],\n            board_independence=social_investment[\"board_independence\"],\n            controversies=social_investment[\"controversies\"],\n            positive_practices=social_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:314: TypeError"}, "teardown": {"duration": 0.0001924261450767517, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria", "lineno": 342, "outcome": "failed", "keywords": ["test_evaluate_governance_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002468388993293047, "outcome": "passed"}, "call": {"duration": 0.00014961091801524162, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 356, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 356, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffa9e70>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_evaluate_governance_criteria(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test evaluating governance criteria for an investment.\"\"\"\n        # Get an investment with good governance metrics\n        gov_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"governance\"] >= 70 and\n                investment[\"board_independence\"] >= 0.7):\n                gov_investment = investment\n                break\n    \n        assert gov_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=gov_investment[\"id\"],\n            name=gov_investment[\"name\"],\n            sector=gov_investment[\"sector\"],\n            industry=gov_investment[\"industry\"],\n            market_cap=gov_investment[\"market_cap\"],\n            price=gov_investment[\"price\"],\n            esg_ratings=gov_investment[\"esg_ratings\"],\n            carbon_footprint=gov_investment[\"carbon_footprint\"],\n            renewable_energy_use=gov_investment[\"renewable_energy_use\"],\n            diversity_score=gov_investment[\"diversity_score\"],\n            board_independence=gov_investment[\"board_independence\"],\n            controversies=gov_investment[\"controversies\"],\n            positive_practices=gov_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:356: TypeError"}, "teardown": {"duration": 0.0001913551241159439, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments", "lineno": 384, "outcome": "failed", "keywords": ["test_performance_for_many_investments", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024720001965761185, "outcome": "passed"}, "call": {"duration": 0.0001572601031512022, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 397, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "lineno": 397, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7f7ccffabca0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_performance_for_many_investments(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening performance for a large number of investments.\"\"\"\n        # Create many investments by duplicating sample investments\n        num_investments = 200\n        investments = []\n    \n        for i in range(num_investments):\n            # Use modulo to cycle through sample investments\n            sample_idx = i % len(sample_investments)\n            sample_inv = sample_investments[sample_idx]\n    \n            # Create a new Investment with a unique ID\n>           investment = Investment(\n                id=f\"{sample_inv['id']}-{i}\",\n                name=sample_inv[\"name\"],\n                sector=sample_inv[\"sector\"],\n                industry=sample_inv[\"industry\"],\n                market_cap=sample_inv[\"market_cap\"],\n                price=sample_inv[\"price\"],\n                esg_ratings=sample_inv[\"esg_ratings\"],\n                carbon_footprint=sample_inv[\"carbon_footprint\"],\n                renewable_energy_use=sample_inv[\"renewable_energy_use\"],\n                diversity_score=sample_inv[\"diversity_score\"],\n                board_independence=sample_inv[\"board_independence\"],\n                controversies=sample_inv[\"controversies\"],\n                positive_practices=sample_inv[\"positive_practices\"]\n            )\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_ethical_screening/test_screening.py:397: TypeError"}, "teardown": {"duration": 0.00019522197544574738, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics", "lineno": 20, "outcome": "passed", "keywords": ["test_create_default_impact_metrics", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00030954694375395775, "outcome": "passed"}, "call": {"duration": 0.00017945095896720886, "outcome": "passed"}, "teardown": {"duration": 0.00011538201943039894, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine", "lineno": 35, "outcome": "passed", "keywords": ["test_initialize_engine", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011425395496189594, "outcome": "passed"}, "call": {"duration": 0.0001391819678246975, "outcome": "passed"}, "teardown": {"duration": 0.00011060293763875961, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact", "lineno": 48, "outcome": "failed", "keywords": ["test_measure_investment_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017796200700104237, "outcome": "passed"}, "call": {"duration": 0.0001398839522153139, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 55, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 55, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7f7ccffa9390>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_measure_investment_impact(self, sample_investments):\n        \"\"\"Test measuring the impact of a single investment.\"\"\"\n        # Choose an investment from the sample data\n        inv_data = sample_investments[0]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact.py:55: TypeError"}, "teardown": {"duration": 0.00017681787721812725, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data", "lineno": 89, "outcome": "failed", "keywords": ["test_measure_investment_impact_with_additional_data", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002024918794631958, "outcome": "passed"}, "call": {"duration": 0.00014887400902807713, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 96, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 96, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7f7ccffa9030>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_measure_investment_impact_with_additional_data(self, sample_investments):\n        \"\"\"Test measuring the impact of an investment with additional impact data.\"\"\"\n        # Choose an investment from the sample data\n        inv_data = sample_investments[0]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact.py:96: TypeError"}, "teardown": {"duration": 0.0001860808115452528, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact", "lineno": 130, "outcome": "failed", "keywords": ["test_measure_portfolio_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024448009207844734, "outcome": "passed"}, "call": {"duration": 0.0005620589945465326, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 145, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 145, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7f7ccffa88e0>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_measure_portfolio_impact(self, sample_portfolio, sample_investments):\n        \"\"\"Test measuring the impact of a portfolio of investments.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": datetime.strptime(holding_data[\"purchase_date\"], \"%Y-%m-%d\").date(),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=datetime.strptime(sample_portfolio[\"creation_date\"], \"%Y-%m-%d\").date(),\n            last_updated=datetime.strptime(sample_portfolio[\"last_updated\"], \"%Y-%m-%d\").date()\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact.py:145: TypeError"}, "teardown": {"duration": 0.000201924005523324, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact", "lineno": 205, "outcome": "passed", "keywords": ["test_analyze_historical_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00025793607346713543, "outcome": "passed"}, "call": {"duration": 0.001163465203717351, "outcome": "passed"}, "teardown": {"duration": 0.00016687996685504913, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation", "lineno": 244, "outcome": "passed", "keywords": ["test_calculate_financial_impact_correlation", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00028363801538944244, "outcome": "passed"}, "call": {"duration": 0.0029921061359345913, "outcome": "passed"}, "teardown": {"duration": 0.00016913400031626225, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric", "lineno": 285, "outcome": "passed", "keywords": ["test_normalize_metric", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012500397861003876, "outcome": "passed"}, "call": {"duration": 0.0001570400781929493, "outcome": "passed"}, "teardown": {"duration": 0.00012211594730615616, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark", "lineno": 307, "outcome": "passed", "keywords": ["test_compare_to_benchmark", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011400296352803707, "outcome": "passed"}, "call": {"duration": 0.0001398208551108837, "outcome": "passed"}, "teardown": {"duration": 0.00010779104195535183, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data", "lineno": 332, "outcome": "passed", "keywords": ["test_performance_with_historical_data", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00023496197536587715, "outcome": "passed"}, "call": {"duration": 0.003220729064196348, "outcome": "passed", "stdout": "Analyzed 5 companies with 5+ years of data in 0.00 seconds\n"}, "teardown": {"duration": 0.0001711081713438034, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds", "lineno": 369, "outcome": "failed", "keywords": ["test_sustainable_investment_thresholds", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00020735501311719418, "outcome": "passed"}, "call": {"duration": 0.00015695206820964813, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 379, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "lineno": 379, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7f7ccffa8fa0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_sustainable_investment_thresholds(self, sample_investments):\n        \"\"\"Test identifying investments that meet sustainable investment thresholds.\"\"\"\n        # Initialize engine with default metrics\n        metrics = create_default_impact_metrics()\n        engine = ImpactMeasurementEngine(metrics)\n    \n        # Convert sample investments to Investment models\n        investments = []\n        for inv_data in sample_investments:\n>           investments.append(Investment(\n                id=inv_data[\"id\"],\n                name=inv_data[\"name\"],\n                sector=inv_data[\"sector\"],\n                industry=inv_data[\"industry\"],\n                market_cap=inv_data[\"market_cap\"],\n                price=inv_data[\"price\"],\n                esg_ratings=inv_data[\"esg_ratings\"],\n                carbon_footprint=inv_data[\"carbon_footprint\"],\n                renewable_energy_use=inv_data[\"renewable_energy_use\"],\n                diversity_score=inv_data[\"diversity_score\"],\n                board_independence=inv_data[\"board_independence\"],\n                controversies=inv_data[\"controversies\"],\n                positive_practices=inv_data[\"positive_practices\"]\n            ))\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact.py:379: TypeError"}, "teardown": {"duration": 0.00018064002506434917, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis", "lineno": 17, "outcome": "failed", "keywords": ["test_sdg_alignment_analysis", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.000208625802770257, "outcome": "passed"}, "call": {"duration": 0.00014891987666487694, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "lineno": 24, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "lineno": 24, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact_attribution.TestImpactAttribution object at 0x7f7d7f3b4a00>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_sdg_alignment_analysis(self, sample_investments):\n        \"\"\"Test analyzing investment alignment with UN Sustainable Development Goals.\"\"\"\n        # Choose an investment from the sample data\n        inv_data = sample_investments[0]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py:24: TypeError"}, "teardown": {"duration": 0.00017944001592695713, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar", "lineno": 75, "outcome": "failed", "keywords": ["test_impact_attribution_by_dollar", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024139299057424068, "outcome": "passed"}, "call": {"duration": 0.00015551806427538395, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "lineno": 90, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "lineno": 90, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact_attribution.TestImpactAttribution object at 0x7f7d7f3b4b20>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_impact_attribution_by_dollar(self, sample_portfolio, sample_investments):\n        \"\"\"Test attributing impact metrics per dollar invested.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py:90: TypeError"}, "teardown": {"duration": 0.0001894109882414341, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis", "lineno": 164, "outcome": "failed", "keywords": ["test_comparative_impact_analysis", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00043189991265535355, "outcome": "passed"}, "call": {"duration": 0.0001733310054987669, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "lineno": 170, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "lineno": 170, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact_attribution.TestImpactAttribution object at 0x7f7d7f3b4910>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_impact_data = {'AAPL': [{'carbon_emissions': 8121464, 'community_investment': 10000000, 'jobs_created': 1000, 'renewable_energy_perc..., 'community_investment': 14000000, 'jobs_created': 1200, 'renewable_energy_percentage': 0.645416593636621, ...}], ...}\n\n    def test_comparative_impact_analysis(self, sample_investments, sample_impact_data):\n        \"\"\"Test comparing investment impact against industry benchmarks.\"\"\"\n        # Convert sample investments to Investment models\n        investments = []\n        for inv_data in sample_investments:\n>           investments.append(Investment(\n                id=inv_data[\"id\"],\n                name=inv_data[\"name\"],\n                sector=inv_data[\"sector\"],\n                industry=inv_data[\"industry\"],\n                market_cap=inv_data[\"market_cap\"],\n                price=inv_data[\"price\"],\n                esg_ratings=inv_data[\"esg_ratings\"],\n                carbon_footprint=inv_data[\"carbon_footprint\"],\n                renewable_energy_use=inv_data[\"renewable_energy_use\"],\n                diversity_score=inv_data[\"diversity_score\"],\n                board_independence=inv_data[\"board_independence\"],\n                controversies=inv_data[\"controversies\"],\n                positive_practices=inv_data[\"positive_practices\"]\n            ))\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py:170: TypeError"}, "teardown": {"duration": 0.00020788493566215038, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis", "lineno": 18, "outcome": "failed", "keywords": ["test_esg_theme_concentration_analysis", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0004663979634642601, "outcome": "passed"}, "call": {"duration": 0.00017636502161622047, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 33, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 33, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_advanced_analysis.TestAdvancedPortfolioAnalysis object at 0x7f7ccfe4bf40>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_esg_theme_concentration_analysis(self, sample_portfolio, sample_investments):\n        \"\"\"Test analyzing ESG theme concentration in a portfolio.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py:33: TypeError"}, "teardown": {"duration": 0.00018679304048419, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance", "lineno": 89, "outcome": "failed", "keywords": ["test_compare_portfolios_esg_performance", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00023778202012181282, "outcome": "passed"}, "call": {"duration": 0.00015904312022030354, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 105, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 105, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_advanced_analysis.TestAdvancedPortfolioAnalysis object at 0x7f7ccfe493f0>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_compare_portfolios_esg_performance(self, sample_portfolio, sample_investments):\n        \"\"\"Test comparing ESG performance between portfolios.\"\"\"\n        # Create two portfolios with different holdings\n        # Portfolio 1 - Original sample portfolio\n        holdings1 = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings1.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio1 = Portfolio(\n            portfolio_id=\"esg-focused-portfolio\",\n            name=\"ESG Focused Portfolio\",\n            holdings=holdings1,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py:105: TypeError"}, "teardown": {"duration": 0.00020343298092484474, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance", "lineno": 188, "outcome": "failed", "keywords": ["test_risk_adjusted_esg_performance", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002531518694013357, "outcome": "passed"}, "call": {"duration": 0.0001556419301778078, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 203, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 203, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_advanced_analysis.TestAdvancedPortfolioAnalysis object at 0x7f7ccfe4b190>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_risk_adjusted_esg_performance(self, sample_portfolio, sample_investments):\n        \"\"\"Test analyzing risk-adjusted ESG performance metrics.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py:203: TypeError"}, "teardown": {"duration": 0.00022651487961411476, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system", "lineno": 21, "outcome": "failed", "keywords": ["test_initialize_analysis_system", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00013696099631488323, "outcome": "passed"}, "call": {"duration": 0.0001515441108494997, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/ethical_finance/portfolio_analysis/analysis.py", "lineno": 72, "message": "TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 25, "message": ""}, {"path": "ethical_finance/portfolio_analysis/analysis.py", "lineno": 72, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe48bb0>\n\n    def test_initialize_analysis_system(self):\n        \"\"\"Test initializing the portfolio analysis system.\"\"\"\n        # Initialize without ethical screener\n>       analysis_system = PortfolioAnalysisSystem()\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ethical_finance.portfolio_analysis.analysis.PortfolioAnalysisSystem object at 0x7f7c2add6e60>\nethical_screener = None\n\n    def __init__(self, ethical_screener: Optional[EthicalScreener] = None):\n        \"\"\"Initialize with optional ethical screener.\n    \n        Args:\n            ethical_screener: Optional EthicalScreener for ethical alignment analysis\n        \"\"\"\n>       super().__init__()\nE       TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'\n\nethical_finance/portfolio_analysis/analysis.py:72: TypeError"}, "teardown": {"duration": 0.00016692397184669971, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition", "lineno": 33, "outcome": "failed", "keywords": ["test_analyze_portfolio_composition", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002529430203139782, "outcome": "passed"}, "call": {"duration": 0.0001599800307303667, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 48, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 48, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe48f70>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_analyze_portfolio_composition(self, sample_portfolio, sample_investments):\n        \"\"\"Test analyzing portfolio composition.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:48: TypeError"}, "teardown": {"duration": 0.00019691605120897293, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening", "lineno": 96, "outcome": "failed", "keywords": ["test_analyze_portfolio_composition_with_screening", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.000290177995339036, "outcome": "passed"}, "call": {"duration": 0.00017182785086333752, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 111, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 111, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe49150>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_analyze_portfolio_composition_with_screening(self, sample_portfolio, sample_investments, sample_ethical_criteria):\n        \"\"\"Test analyzing portfolio composition with ethical screening results.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:111: TypeError"}, "teardown": {"duration": 0.00022566388361155987, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification", "lineno": 175, "outcome": "failed", "keywords": ["test_assess_diversification", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002614869736135006, "outcome": "passed"}, "call": {"duration": 0.00016319286078214645, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 190, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 190, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe49300>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_assess_diversification(self, sample_portfolio, sample_investments):\n        \"\"\"Test assessing portfolio diversification.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:190: TypeError"}, "teardown": {"duration": 0.0001945651601999998, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints", "lineno": 239, "outcome": "failed", "keywords": ["test_assess_diversification_with_constraints", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002538110129535198, "outcome": "passed"}, "call": {"duration": 0.00015812506899237633, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 254, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 254, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe49750>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_assess_diversification_with_constraints(self, sample_portfolio, sample_investments):\n        \"\"\"Test assessing portfolio diversification with ethical constraints.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:254: TypeError"}, "teardown": {"duration": 0.0002016278449445963, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio", "lineno": 306, "outcome": "failed", "keywords": ["test_optimize_portfolio", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024478184059262276, "outcome": "passed"}, "call": {"duration": 0.00015814509242773056, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 321, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 321, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe49900>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_optimize_portfolio(self, sample_portfolio, sample_investments):\n        \"\"\"Test optimizing a portfolio for returns and ethical alignment.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:321: TypeError"}, "teardown": {"duration": 0.00019299006089568138, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme", "lineno": 402, "outcome": "failed", "keywords": ["test_map_practice_to_theme", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.000127013074234128, "outcome": "passed"}, "call": {"duration": 0.00015219906345009804, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/ethical_finance/portfolio_analysis/analysis.py", "lineno": 72, "message": "TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 405, "message": ""}, {"path": "ethical_finance/portfolio_analysis/analysis.py", "lineno": 72, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe4a050>\n\n    def test_map_practice_to_theme(self):\n        \"\"\"Test mapping a company's positive practice to an ESG theme.\"\"\"\n>       analysis_system = PortfolioAnalysisSystem()\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:405: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ethical_finance.portfolio_analysis.analysis.PortfolioAnalysisSystem object at 0x7f7c2ae84850>\nethical_screener = None\n\n    def __init__(self, ethical_screener: Optional[EthicalScreener] = None):\n        \"\"\"Initialize with optional ethical screener.\n    \n        Args:\n            ethical_screener: Optional EthicalScreener for ethical alignment analysis\n        \"\"\"\n>       super().__init__()\nE       TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'\n\nethical_finance/portfolio_analysis/analysis.py:72: TypeError"}, "teardown": {"duration": 0.00015548686496913433, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints", "lineno": 417, "outcome": "failed", "keywords": ["test_sector_conflicts_with_constraints", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00013525690883398056, "outcome": "passed"}, "call": {"duration": 0.00015649106353521347, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/ethical_finance/portfolio_analysis/analysis.py", "lineno": 72, "message": "TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 420, "message": ""}, {"path": "ethical_finance/portfolio_analysis/analysis.py", "lineno": 72, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe4b0d0>\n\n    def test_sector_conflicts_with_constraints(self):\n        \"\"\"Test checking if reducing a sector would conflict with ethical constraints.\"\"\"\n>       analysis_system = PortfolioAnalysisSystem()\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:420: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ethical_finance.portfolio_analysis.analysis.PortfolioAnalysisSystem object at 0x7f7ccffa85e0>\nethical_screener = None\n\n    def __init__(self, ethical_screener: Optional[EthicalScreener] = None):\n        \"\"\"Initialize with optional ethical screener.\n    \n        Args:\n            ethical_screener: Optional EthicalScreener for ethical alignment analysis\n        \"\"\"\n>       super().__init__()\nE       TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'\n\nethical_finance/portfolio_analysis/analysis.py:72: TypeError"}, "teardown": {"duration": 0.00015601608902215958, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit", "lineno": 436, "outcome": "failed", "keywords": ["test_calculate_diversification_benefit", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002038870006799698, "outcome": "passed"}, "call": {"duration": 0.0001581090036779642, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 441, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 441, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe497e0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_calculate_diversification_benefit(self, sample_investments):\n        \"\"\"Test calculating the diversification benefit of adding an investment.\"\"\"\n        # Convert a sample investment to Investment model\n        inv_data = sample_investments[0]\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:441: TypeError"}, "teardown": {"duration": 0.0001859040930867195, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio", "lineno": 480, "outcome": "failed", "keywords": ["test_performance_with_large_portfolio", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002499399706721306, "outcome": "passed"}, "call": {"duration": 0.00032419408671557903, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 507, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "lineno": 507, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7f7ccfe49000>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_performance_with_large_portfolio(self, sample_portfolio, sample_investments):\n        \"\"\"Test performance with a portfolio of 200+ holdings.\"\"\"\n        # Create a large portfolio by duplicating sample holdings\n        large_holdings = []\n        num_holdings = 200\n    \n        # Use sample holdings as templates\n        for i in range(num_holdings):\n            # Use modulo to cycle through sample holdings\n            sample_idx = i % len(sample_portfolio[\"holdings\"])\n            holding_data = sample_portfolio[\"holdings\"][sample_idx]\n    \n            # Create a new holding with a unique ID\n            large_holdings.append({\n                \"investment_id\": f\"{holding_data['investment_id']}-{i}\",\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n        # Calculate total value\n        total_value = sum(h[\"current_value\"] for h in large_holdings)\n    \n        # Create large portfolio\n>       large_portfolio = Portfolio(\n            portfolio_id=\"large-test-portfolio\",\n            name=\"Large Test Portfolio\",\n            holdings=large_holdings,\n            total_value=total_value,\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py:507: TypeError"}, "teardown": {"duration": 0.00019899592734873295, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker", "lineno": 19, "outcome": "passed", "keywords": ["test_initialize_tracker", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00032769888639450073, "outcome": "passed"}, "call": {"duration": 0.0001486430410295725, "outcome": "passed"}, "teardown": {"duration": 0.00012938911095261574, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions", "lineno": 41, "outcome": "passed", "keywords": ["test_analyze_company_voting_record_with_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001960441004484892, "outcome": "passed"}, "call": {"duration": 0.00020486791618168354, "outcome": "passed"}, "teardown": {"duration": 0.0001448080874979496, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions", "lineno": 84, "outcome": "passed", "keywords": ["test_analyze_company_voting_record_no_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017795409075915813, "outcome": "passed"}, "call": {"duration": 0.00016972608864307404, "outcome": "passed"}, "teardown": {"duration": 0.00014513195492327213, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns", "lineno": 123, "outcome": "passed", "keywords": ["test_analyze_issue_voting_patterns", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018190103583037853, "outcome": "passed"}, "call": {"duration": 0.00020472193136811256, "outcome": "passed"}, "teardown": {"duration": 0.0001414779108017683, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions", "lineno": 162, "outcome": "passed", "keywords": ["test_analyze_issue_voting_patterns_no_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017520692199468613, "outcome": "passed"}, "call": {"duration": 0.00015897606499493122, "outcome": "passed"}, "teardown": {"duration": 0.00013620499521493912, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations", "lineno": 200, "outcome": "passed", "keywords": ["test_generate_voting_recommendations", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017084693536162376, "outcome": "passed"}, "call": {"duration": 0.00021166796796023846, "outcome": "passed"}, "teardown": {"duration": 0.00014689797535538673, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities", "lineno": 268, "outcome": "failed", "keywords": ["test_identify_engagement_opportunities", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00022346596233546734, "outcome": "passed"}, "call": {"duration": 0.00014872802421450615, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "lineno": 283, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "lineno": 283, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_shareholder_advocacy.test_advocacy.TestShareholderAdvocacy object at 0x7f7ccfe4bd90>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_shareholder_resolutions = [{'abstentions': 0.03, 'category': 'social', 'company_id': 'AAPL', 'company_recommendation': 'against', ...}, {'absten...nst', ...}, {'abstentions': 0.0, 'category': 'social', 'company_id': 'TSLA', 'company_recommendation': 'against', ...}]\n\n    def test_identify_engagement_opportunities(self, sample_portfolio, sample_shareholder_resolutions):\n        \"\"\"Test identifying opportunities for shareholder engagement.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\ntests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py:283: TypeError"}, "teardown": {"duration": 0.00019322289153933525, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment", "lineno": 331, "outcome": "passed", "keywords": ["test_calculate_value_alignment", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00020883395336568356, "outcome": "passed"}, "call": {"duration": 0.0001542989630252123, "outcome": "passed"}, "teardown": {"duration": 0.00013772514648735523, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions", "lineno": 381, "outcome": "passed", "keywords": ["test_find_similar_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018612691201269627, "outcome": "passed"}, "call": {"duration": 0.00015471596270799637, "outcome": "passed"}, "teardown": {"duration": 0.00014853104948997498, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends", "lineno": 423, "outcome": "passed", "keywords": ["test_analyze_trends", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018183188512921333, "outcome": "passed"}, "call": {"duration": 0.00017972500063478947, "outcome": "passed"}, "teardown": {"duration": 0.00013430602848529816, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories", "lineno": 21, "outcome": "passed", "keywords": ["test_create_default_value_categories", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00032203691080212593, "outcome": "passed"}, "call": {"duration": 0.0001709780190140009, "outcome": "passed"}, "teardown": {"duration": 0.00011696899309754372, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system", "lineno": 42, "outcome": "passed", "keywords": ["test_initialize_budgeting_system", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001155780628323555, "outcome": "passed"}, "call": {"duration": 0.00016234396025538445, "outcome": "passed"}, "teardown": {"duration": 0.0001077528577297926, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags", "lineno": 56, "outcome": "failed", "keywords": ["test_categorize_transaction_with_tags", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018564588390290737, "outcome": "passed"}, "call": {"duration": 0.0001429219264537096, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 69, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 69, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff74b20>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_categorize_transaction_with_tags(self, sample_personal_transactions):\n        \"\"\"Test categorizing a transaction with explicit tags.\"\"\"\n        # Find a transaction with tags\n        tx_with_tags = None\n        for tx_data in sample_personal_transactions:\n            if tx_data[\"tags\"]:\n                tx_with_tags = tx_data\n                break\n    \n        assert tx_with_tags is not None, \"No transaction with tags found in test data\"\n    \n        # Convert to Transaction model\n>       transaction = Transaction(\n            id=tx_with_tags[\"id\"],\n            date=date.fromisoformat(tx_with_tags[\"date\"]),\n            amount=tx_with_tags[\"amount\"],\n            vendor=tx_with_tags[\"vendor\"],\n            category=tx_with_tags[\"category\"],\n            description=tx_with_tags[\"description\"],\n            tags=tx_with_tags[\"tags\"]\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:69: TypeError"}, "teardown": {"duration": 0.00017858599312603474, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags", "lineno": 99, "outcome": "failed", "keywords": ["test_categorize_transaction_without_tags", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002098679542541504, "outcome": "passed"}, "call": {"duration": 0.00015050312504172325, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 107, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 107, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff75990>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_categorize_transaction_without_tags(self, sample_personal_transactions):\n        \"\"\"Test categorizing a transaction without explicit tags.\"\"\"\n        # Create a transaction without tags\n        tx_data = sample_personal_transactions[0].copy()\n        tx_data[\"tags\"] = []\n    \n        # Convert to Transaction model\n>       transaction = Transaction(\n            id=tx_data[\"id\"],\n            date=date.fromisoformat(tx_data[\"date\"]),\n            amount=tx_data[\"amount\"],\n            vendor=tx_data[\"vendor\"],\n            category=tx_data[\"category\"],\n            description=tx_data[\"description\"],\n            tags=tx_data[\"tags\"]\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:107: TypeError"}, "teardown": {"duration": 0.0001798409502953291, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions", "lineno": 132, "outcome": "failed", "keywords": ["test_batch_categorize_transactions", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021514901891350746, "outcome": "passed"}, "call": {"duration": 0.0001529729925096035, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 138, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 138, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff751b0>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_batch_categorize_transactions(self, sample_personal_transactions):\n        \"\"\"Test categorizing multiple transactions in batch.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:138: TypeError"}, "teardown": {"duration": 0.00017946097068488598, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns", "lineno": 163, "outcome": "failed", "keywords": ["test_analyze_spending_patterns", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002154919784516096, "outcome": "passed"}, "call": {"duration": 0.00016523408703505993, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 169, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 169, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff74430>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_analyze_spending_patterns(self, sample_personal_transactions):\n        \"\"\"Test analyzing spending patterns against value alignment.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:169: TypeError"}, "teardown": {"duration": 0.00017730705440044403, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter", "lineno": 209, "outcome": "failed", "keywords": ["test_analyze_spending_patterns_with_date_filter", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00019920198246836662, "outcome": "passed"}, "call": {"duration": 0.00014632497914135456, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 215, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 215, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff74c70>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_analyze_spending_patterns_with_date_filter(self, sample_personal_transactions):\n        \"\"\"Test analyzing spending patterns with date filtering.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:215: TypeError"}, "teardown": {"duration": 0.0001900671049952507, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors", "lineno": 248, "outcome": "passed", "keywords": ["test_suggest_alternative_vendors", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001259511336684227, "outcome": "passed"}, "call": {"duration": 0.00019111507572233677, "outcome": "passed"}, "teardown": {"duration": 0.00011362298391759396, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction", "lineno": 280, "outcome": "failed", "keywords": ["test_suggest_categories_from_transaction", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001841259654611349, "outcome": "passed"}, "call": {"duration": 0.0001417899038642645, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 285, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 285, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff75b70>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_suggest_categories_from_transaction(self, sample_personal_transactions):\n        \"\"\"Test suggesting categories based on transaction details.\"\"\"\n        # Convert a sample transaction to Transaction model\n        tx_data = sample_personal_transactions[0]\n>       transaction = Transaction(\n            id=tx_data[\"id\"],\n            date=date.fromisoformat(tx_data[\"date\"]),\n            amount=tx_data[\"amount\"],\n            vendor=tx_data[\"vendor\"],\n            category=tx_data[\"category\"],\n            description=tx_data[\"description\"],\n            tags=[]  # Explicitly remove tags to test suggestion logic\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:285: TypeError"}, "teardown": {"duration": 0.00017706304788589478, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment", "lineno": 309, "outcome": "passed", "keywords": ["test_find_categories_by_alignment", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001252051442861557, "outcome": "passed"}, "call": {"duration": 0.00018333294428884983, "outcome": "passed"}, "teardown": {"duration": 0.00011484581045806408, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions", "lineno": 336, "outcome": "failed", "keywords": ["test_performance_categorizing_many_transactions", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001805610954761505, "outcome": "passed"}, "call": {"duration": 0.00014748703688383102, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 349, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 349, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff762f0>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_performance_categorizing_many_transactions(self, sample_personal_transactions):\n        \"\"\"Test performance categorizing many transactions.\"\"\"\n        # Create a large number of transactions\n        num_transactions = 1000\n        transactions = []\n    \n        for i in range(num_transactions):\n            # Use modulo to cycle through sample transactions\n            sample_idx = i % len(sample_personal_transactions)\n            tx_data = sample_personal_transactions[sample_idx]\n    \n            # Create a new transaction with a unique ID\n>           transactions.append(Transaction(\n                id=f\"{tx_data['id']}-{i}\",\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:349: TypeError"}, "teardown": {"duration": 0.00017828401178121567, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values", "lineno": 382, "outcome": "failed", "keywords": ["test_categorize_transaction_with_conflicting_values", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.000125400023534894, "outcome": "passed"}, "call": {"duration": 0.00019759894348680973, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 391, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "lineno": 391, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7f7ccff74fa0>\n\n    def test_categorize_transaction_with_conflicting_values(self):\n        \"\"\"Test categorizing a transaction with conflicting value tags.\"\"\"\n        # Create a budget system with default categories\n        categories = create_default_value_categories()\n        budgeting = ValuesAlignedBudgeting(categories)\n    \n        # Create a transaction with conflicting value tags\n        # (both aligned and misaligned tags)\n>       transaction = Transaction(\n            id=\"conflict1\",\n            date=date.today(),\n            amount=85.75,\n            vendor=\"Mixed Values Store\",\n            category=\"Shopping\",\n            description=\"Purchase with both aligned and misaligned attributes\",\n            tags=[\"organic\", \"sustainable\", \"plastic_packaging\", \"fossil_fuel\"]\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_budgeting.py:391: TypeError"}, "teardown": {"duration": 0.0001534570474177599, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories", "lineno": 20, "outcome": "failed", "keywords": ["test_values_consistency_across_spending_categories", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00019753002561628819, "outcome": "passed"}, "call": {"duration": 0.0001656359527260065, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "lineno": 26, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "lineno": 26, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_personal_values_alignment.TestPersonalValuesAlignment object at 0x7f7ccff77820>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_values_consistency_across_spending_categories(self, sample_personal_transactions):\n        \"\"\"Test analyzing values consistency across different spending categories.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py:26: TypeError"}, "teardown": {"duration": 0.00017741601914167404, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time", "lineno": 74, "outcome": "failed", "keywords": ["test_values_drift_over_time", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00019769486971199512, "outcome": "passed"}, "call": {"duration": 0.00016116607002913952, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "lineno": 108, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "lineno": 108, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_personal_values_alignment.TestPersonalValuesAlignment object at 0x7f7ccff75300>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_values_drift_over_time(self, sample_personal_transactions):\n        \"\"\"Test detecting values drift in spending patterns over time.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n            # Parse the existing date\n            tx_date = date.fromisoformat(tx_data[\"date\"])\n    \n            # Create multiple copies of each transaction spanning different months\n            for i in range(6):  # 6 months of data\n                # Create a copy with adjusted date going back i months\n                new_date = tx_date - timedelta(days=30 * i)\n    \n                # Add random variation to amounts\n                amount_variation = tx_data[\"amount\"] * (0.8 + (random.random() * 0.4))  # 80% to 120% variation\n    \n                # For transactions 3+ months ago, reduce the number of ethical tags\n                # to simulate a drift in values over time\n                tags = tx_data[\"tags\"].copy()\n                if i >= 3 and \"sustainable\" in tags:\n                    tags.remove(\"sustainable\")\n                if i >= 4 and \"organic\" in tags:\n                    tags.remove(\"organic\")\n                if i >= 5 and \"local\" in tags:\n                    tags.remove(\"local\")\n    \n                # Add non-aligned tags to older transactions\n                if i >= 3:\n                    if random.random() > 0.7 and \"fossil_fuel\" not in tags:\n                        tags.append(\"fossil_fuel\")\n                    if random.random() > 0.8 and \"chain_business\" not in tags:\n                        tags.append(\"chain_business\")\n    \n>               transactions.append(Transaction(\n                    id=f\"{tx_data['id']}-{i}\",\n                    date=new_date,\n                    amount=amount_variation,\n                    vendor=tx_data[\"vendor\"],\n                    category=tx_data[\"category\"],\n                    description=tx_data[\"description\"],\n                    tags=tags\n                ))\nE               TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py:108: TypeError"}, "teardown": {"duration": 0.0001803981140255928, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis", "lineno": 163, "outcome": "failed", "keywords": ["test_vendor_value_profile_analysis", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00019778497517108917, "outcome": "passed"}, "call": {"duration": 0.00015058997087180614, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "lineno": 169, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "lineno": 169, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_personal_values_alignment.TestPersonalValuesAlignment object at 0x7f7d7f380220>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_vendor_value_profile_analysis(self, sample_personal_transactions):\n        \"\"\"Test creating value profiles for vendors based on transaction history.\"\"\"\n        # Convert sample data to Transaction models with additional synthetic vendors\n        base_transactions = []\n        for tx_data in sample_personal_transactions:\n>           base_transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\ntests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py:169: TypeError"}, "teardown": {"duration": 0.00018314598128199577, "outcome": "passed"}}], "warnings": [{"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 55}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 76}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 97}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 104}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/category.py", "lineno": 58}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/category.py", "lineno": 137}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 42}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 51}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 94}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 108}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 135}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 143}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 19}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 63}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 70}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 92}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 127}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 191}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 245}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 28}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 35}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 43}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 64}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 71}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 96}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 103}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 130}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 137}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 145}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 31}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 52}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 59}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/rules.py", "lineno": 34}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 38}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 45}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 52}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 59}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 66}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 50}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 124}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/project/models.py", "lineno": 51}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 40}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 99}]}