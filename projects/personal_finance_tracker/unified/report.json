{"created": 1747353650.1492543, "duration": 1.2863764762878418, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified", "environment": {}, "summary": {"passed": 80, "failed": 73, "total": 153, "collected": 153}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "type": "Function", "lineno": 28}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "type": "Function", "lineno": 36}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "type": "Function", "lineno": 78}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "type": "Function", "lineno": 129}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "type": "Function", "lineno": 163}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "type": "Function", "lineno": 187}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "type": "Function", "lineno": 311}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "type": "Function", "lineno": 370}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "type": "Function", "lineno": 407}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "type": "Function", "lineno": 459}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "type": "Function", "lineno": 512}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "type": "Function", "lineno": 551}]}, {"nodeid": "tests/freelancer/expense/test_categorizer.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer", "type": "Class"}]}, {"nodeid": "tests/freelancer/expense", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init", "type": "Function", "lineno": 20}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "type": "Function", "lineno": 36}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "type": "Function", "lineno": 54}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "type": "Function", "lineno": 86}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "type": "Function", "lineno": 113}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "type": "Function", "lineno": 144}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "type": "Function", "lineno": 171}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "type": "Function", "lineno": 196}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "type": "Function", "lineno": 223}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "type": "Function", "lineno": 243}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "type": "Function", "lineno": 302}]}, {"nodeid": "tests/freelancer/income/test_income_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager", "type": "Class"}]}, {"nodeid": "tests/freelancer/income", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 214}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 24}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 125}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 127}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "type": "Function", "lineno": 31}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "type": "Function", "lineno": 170}]}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability", "type": "Function", "lineno": 18}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact", "type": "Function", "lineno": 95}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation", "type": "Function", "lineno": 162}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability", "type": "Function", "lineno": 304}]}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "type": "Function", "lineno": 232}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "type": "Function", "lineno": 342}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "type": "Function", "lineno": 463}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "type": "Function", "lineno": 553}]}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 139}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 190}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 285}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 30}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 152}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 209}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "type": "Function", "lineno": 330}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "type": "Function", "lineno": 403}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "type": "Function", "lineno": 494}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "type": "Function", "lineno": 582}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis", "type": "Function", "lineno": 18}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends", "type": "Function", "lineno": 90}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison", "type": "Function", "lineno": 226}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends", "type": "Function", "lineno": 352}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years", "type": "Function", "lineno": 28}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years", "type": "Function", "lineno": 70}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years", "type": "Function", "lineno": 148}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years", "type": "Function", "lineno": 170}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years", "type": "Function", "lineno": 29}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years", "type": "Function", "lineno": 91}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years", "type": "Function", "lineno": 175}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years", "type": "Function", "lineno": 205}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "type": "Function", "lineno": 31}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "type": "Function", "lineno": 64}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "type": "Function", "lineno": 101}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "type": "Function", "lineno": 121}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "type": "Function", "lineno": 172}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "type": "Function", "lineno": 192}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "type": "Function", "lineno": 215}]}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler", "type": "Class"}]}, {"nodeid": "tests/freelancer/project", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init", "type": "Function", "lineno": 30}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "type": "Function", "lineno": 35}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "type": "Function", "lineno": 145}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "type": "Function", "lineno": 217}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "type": "Function", "lineno": 236}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "type": "Function", "lineno": 279}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "type": "Function", "lineno": 309}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "type": "Function", "lineno": 332}]}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector", "type": "Class"}]}, {"nodeid": "tests/freelancer/projection", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "type": "Function", "lineno": 19}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "type": "Function", "lineno": 29}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "type": "Function", "lineno": 60}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "type": "Function", "lineno": 71}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "type": "Function", "lineno": 114}]}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "type": "Class"}]}, {"nodeid": "tests/freelancer/tax", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/test_main.py::test_main", "type": "Function", "lineno": 3}]}, {"nodeid": "tests/freelancer", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense", "type": "Package"}, {"nodeid": "tests/freelancer/income", "type": "Package"}, {"nodeid": "tests/freelancer/integration", "type": "Package"}, {"nodeid": "tests/freelancer/project", "type": "Package"}, {"nodeid": "tests/freelancer/projection", "type": "Package"}, {"nodeid": "tests/freelancer/tax", "type": "Package"}, {"nodeid": "tests/freelancer/test_main.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria", "type": "Function", "lineno": 15}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey", "type": "Function", "lineno": 153}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria", "type": "Function", "lineno": 263}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria", "type": "Function", "lineno": 16}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener", "type": "Function", "lineno": 40}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing", "type": "Function", "lineno": 46}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions", "type": "Function", "lineno": 133}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions", "type": "Function", "lineno": 178}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch", "type": "Function", "lineno": 222}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria", "type": "Function", "lineno": 258}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria", "type": "Function", "lineno": 300}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria", "type": "Function", "lineno": 342}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments", "type": "Function", "lineno": 384}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics", "type": "Function", "lineno": 20}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine", "type": "Function", "lineno": 35}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact", "type": "Function", "lineno": 48}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact", "type": "Function", "lineno": 130}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact", "type": "Function", "lineno": 205}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation", "type": "Function", "lineno": 244}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric", "type": "Function", "lineno": 285}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark", "type": "Function", "lineno": 307}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data", "type": "Function", "lineno": 332}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds", "type": "Function", "lineno": 369}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis", "type": "Function", "lineno": 17}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar", "type": "Function", "lineno": 75}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis", "type": "Function", "lineno": 164}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis", "type": "Function", "lineno": 18}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance", "type": "Function", "lineno": 188}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system", "type": "Function", "lineno": 21}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition", "type": "Function", "lineno": 33}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening", "type": "Function", "lineno": 96}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification", "type": "Function", "lineno": 175}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints", "type": "Function", "lineno": 239}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio", "type": "Function", "lineno": 306}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme", "type": "Function", "lineno": 402}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints", "type": "Function", "lineno": 417}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit", "type": "Function", "lineno": 436}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio", "type": "Function", "lineno": 480}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker", "type": "Function", "lineno": 19}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions", "type": "Function", "lineno": 41}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions", "type": "Function", "lineno": 84}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns", "type": "Function", "lineno": 123}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions", "type": "Function", "lineno": 162}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations", "type": "Function", "lineno": 200}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities", "type": "Function", "lineno": 268}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment", "type": "Function", "lineno": 331}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions", "type": "Function", "lineno": 381}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories", "type": "Function", "lineno": 21}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system", "type": "Function", "lineno": 42}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags", "type": "Function", "lineno": 56}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags", "type": "Function", "lineno": 99}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions", "type": "Function", "lineno": 132}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns", "type": "Function", "lineno": 163}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter", "type": "Function", "lineno": 209}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors", "type": "Function", "lineno": 248}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction", "type": "Function", "lineno": 280}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment", "type": "Function", "lineno": 309}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions", "type": "Function", "lineno": 336}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values", "type": "Function", "lineno": 382}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories", "type": "Function", "lineno": 20}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time", "type": "Function", "lineno": 74}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis", "type": "Function", "lineno": 163}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting", "type": "Package"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/freelancer", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor", "type": "Package"}]}], "tests": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "lineno": 28, "outcome": "passed", "keywords": ["test_init", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0005927660968154669, "outcome": "passed"}, "call": {"duration": 0.0001385440118610859, "outcome": "passed"}, "teardown": {"duration": 0.00010261312127113342, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "lineno": 36, "outcome": "failed", "keywords": ["test_add_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.118812158703804e-05, "outcome": "passed"}, "call": {"duration": 0.0003469078801572323, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 42, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 42, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8df45cf20>\n\n    def test_add_categorization_rule(self):\n        \"\"\"Test adding a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a rule\n>       rule = CategorizationRule(\n            name=\"Office Supplies Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"office\", \"supplies\", \"paper\", \"ink\", \"toner\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Office Supplies...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:42: ValidationError"}, "teardown": {"duration": 0.0001391349360346794, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "lineno": 78, "outcome": "failed", "keywords": ["test_update_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.704777039587498e-05, "outcome": "passed"}, "call": {"duration": 0.00016882503405213356, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 84, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 84, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8dd490b60>\n\n    def test_update_categorization_rule(self):\n        \"\"\"Test updating a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create and add a rule\n>       rule = CategorizationRule(\n            name=\"Original Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"original\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Original Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:84: ValidationError"}, "teardown": {"duration": 0.0001268929336220026, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "lineno": 129, "outcome": "failed", "keywords": ["test_remove_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.335787035524845e-05, "outcome": "passed"}, "call": {"duration": 0.0001386520452797413, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 135, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 135, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8df45cce0>\n\n    def test_remove_categorization_rule(self):\n        \"\"\"Test removing a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create and add rules\n>       rule1 = CategorizationRule(\n            name=\"Rule 1\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"rule1\"],\n            business_use_percentage=100.0,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Rule 1', 'categ..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:135: ValidationError"}, "teardown": {"duration": 0.00011711404658854008, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "lineno": 163, "outcome": "passed", "keywords": ["test_add_mixed_use_item", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.440584108233452e-05, "outcome": "passed"}, "call": {"duration": 0.0003551018889993429, "outcome": "passed"}, "teardown": {"duration": 9.109592065215111e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "lineno": 187, "outcome": "failed", "keywords": ["test_categorize_transaction", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0013680211268365383, "outcome": "passed"}, "call": {"duration": 0.00014914595521986485, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 194, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 194, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8dcfcbf50>\nsample_transactions = [Transaction(id=UUID('dbe01972-b8df-4bc1-bb19-fcefe045ffa0'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_categorize_transaction(self, sample_transactions):\n        \"\"\"Test categorizing a transaction.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add some rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"food\"],\n                business_use_percentage=50.0,  # 50% business use\n                priority=3,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:194: ValidationError"}, "teardown": {"duration": 0.00015325588174164295, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "lineno": 311, "outcome": "failed", "keywords": ["test_categorize_transactions", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.132688865065575e-05, "outcome": "passed"}, "call": {"duration": 0.00013836706057190895, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 317, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 317, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8dcfcb800>\n\n    def test_categorize_transactions(self):\n        \"\"\"Test categorizing multiple transactions at once.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       rule = CategorizationRule(\n            name=\"Office Supplies Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"office\", \"supplies\"],\n            business_use_percentage=100.0,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Office Supplies..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:317: ValidationError"}, "teardown": {"duration": 0.00012279185466468334, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "lineno": 370, "outcome": "passed", "keywords": ["test_apply_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.35590360313654e-05, "outcome": "passed"}, "call": {"duration": 0.0001988059375435114, "outcome": "passed"}, "teardown": {"duration": 8.320296183228493e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "lineno": 407, "outcome": "failed", "keywords": ["test_generate_expense_summary", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.001253908034414053, "outcome": "passed"}, "call": {"duration": 0.00014677713625133038, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 414, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 414, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8dcfcba40>\nsample_transactions = [Transaction(id=UUID('ac1364d2-1fe0-4531-97f0-a7b1d6f5f61b'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_generate_expense_summary(self, sample_transactions):\n        \"\"\"Test generating an expense summary.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules for test categories\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\"],\n                business_use_percentage=100.0,\n            ),\n            CategorizationRule(\n                name=\"Internet Rule\",\n                category=ExpenseCategory.INTERNET,\n                keyword_patterns=[\"internet\"],\n                business_use_percentage=80.0,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',..._use_percentage': 100.0}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:414: ValidationError"}, "teardown": {"duration": 0.00015398883260786533, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "lineno": 459, "outcome": "passed", "keywords": ["test_get_audit_trail", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.334110654890537e-05, "outcome": "passed"}, "call": {"duration": 0.00020282715559005737, "outcome": "passed"}, "teardown": {"duration": 8.391914889216423e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "lineno": 512, "outcome": "passed", "keywords": ["test_correct_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.589704521000385e-05, "outcome": "passed"}, "call": {"duration": 0.0001509001012891531, "outcome": "passed"}, "teardown": {"duration": 7.937802001833916e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "lineno": 551, "outcome": "failed", "keywords": ["test_rule_matching", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.795589044690132e-05, "outcome": "passed"}, "call": {"duration": 0.00012972392141819, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 559, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py", "lineno": 559, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7ff8dcff0410>\n\n    def test_rule_matching(self):\n        \"\"\"Test rule matching logic in more detail.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create rules with different conditions\n        rules = [\n            # Rule with keyword patterns only\n>           CategorizationRule(\n                name=\"Keyword Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            # Rule with merchant patterns only\n            CategorizationRule(\n                name=\"Merchant Rule\",\n                category=ExpenseCategory.MEALS,\n                merchant_patterns=[\"restaurant\", \"cafe\"],\n                business_use_percentage=50.0,\n                priority=8,\n            ),\n            # Rule with amount range only\n            CategorizationRule(\n                name=\"Amount Rule\",\n                category=ExpenseCategory.EQUIPMENT,\n                amount_min=500.0,\n                amount_max=2000.0,\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            # Rule with multiple conditions\n            CategorizationRule(\n                name=\"Complex Rule\",\n                category=ExpenseCategory.MARKETING,\n                keyword_patterns=[\"marketing\", \"advertising\"],\n                merchant_patterns=[\"facebook\", \"google\"],\n                amount_max=300.0,\n                business_use_percentage=100.0,\n                priority=15,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Keyword Rule', ...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/expense/test_categorizer.py:559: ValidationError"}, "teardown": {"duration": 0.00012108194641768932, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init", "lineno": 20, "outcome": "passed", "keywords": ["test_init", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.000324079068377614, "outcome": "passed"}, "call": {"duration": 0.00013443990610539913, "outcome": "passed"}, "teardown": {"duration": 8.141295984387398e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "lineno": 36, "outcome": "passed", "keywords": ["test_calculate_monthly_income", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00124123296700418, "outcome": "passed"}, "call": {"duration": 0.00018498487770557404, "outcome": "passed"}, "teardown": {"duration": 0.00011871382594108582, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "lineno": 54, "outcome": "failed", "keywords": ["test_smooth_income_moving_average", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0012233350425958633, "outcome": "passed"}, "call": {"duration": 0.00016670790500938892, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 68, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff1f40>\nsample_transactions = [Transaction(id=UUID('80f1ffe1-e2b0-4778-86eb-93ec45b7e1de'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_moving_average(self, sample_transactions):\n        \"\"\"Test income smoothing with moving average method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(method=SmoothingMethod.MOVING_AVERAGE, window_size=3)\n    \n        # Run smoothing\n        start_time = time.time()\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.MOVING_AVERAGE,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcb3dc70>\ntransactions = [Transaction(id=UUID('80f1ffe1-e2b0-4778-86eb-93ec45b7e1de'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00015541911125183105, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "lineno": 86, "outcome": "failed", "keywords": ["test_smooth_income_exponential_smoothing", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0018083779141306877, "outcome": "passed"}, "call": {"duration": 0.00017547281458973885, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 101, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff20f0>\nsample_transactions = [Transaction(id=UUID('ae75c638-89ff-4aec-a31a-81cec29f1c30'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_exponential_smoothing(self, sample_transactions):\n        \"\"\"Test income smoothing with exponential smoothing method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(\n            method=SmoothingMethod.EXPONENTIAL_SMOOTHING, alpha=0.3\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.EXPONENTIAL_SMOOTHING,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcb3ca70>\ntransactions = [Transaction(id=UUID('ae75c638-89ff-4aec-a31a-81cec29f1c30'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.0001493471208959818, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "lineno": 113, "outcome": "failed", "keywords": ["test_smooth_income_percentile_based", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0012607008684426546, "outcome": "passed"}, "call": {"duration": 0.00016586901620030403, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 128, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff22a0>\nsample_transactions = [Transaction(id=UUID('5d1a79d0-77aa-447a-8463-5eb52256b785'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_percentile_based(self, sample_transactions):\n        \"\"\"Test income smoothing with percentile-based method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(\n            method=SmoothingMethod.PERCENTILE_BASED, percentile=25.0\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.PERCENTILE_BASED,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcb3c830>\ntransactions = [Transaction(id=UUID('5d1a79d0-77aa-447a-8463-5eb52256b785'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.0001534039620310068, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "lineno": 144, "outcome": "failed", "keywords": ["test_smooth_income_seasonal_adjustment", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0012573949061334133, "outcome": "passed"}, "call": {"duration": 0.00016103708185255527, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 159, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff2480>\nsample_transactions = [Transaction(id=UUID('c772a3dd-b6a3-4e36-8c1a-b1c60ff8c1b5'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_seasonal_adjustment(self, sample_transactions):\n        \"\"\"Test income smoothing with seasonal adjustment method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(\n            method=SmoothingMethod.SEASONAL_ADJUSTMENT, seasonal_periods=12\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.SEASONAL_ADJUSTMENT,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcd10140>\ntransactions = [Transaction(id=UUID('c772a3dd-b6a3-4e36-8c1a-b1c60ff8c1b5'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00015897001139819622, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "lineno": 171, "outcome": "failed", "keywords": ["test_smooth_income_rolling_median", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0012609809637069702, "outcome": "passed"}, "call": {"duration": 0.0001655279193073511, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 184, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff2690>\nsample_transactions = [Transaction(id=UUID('2eb08d12-4a39-4ba7-9a27-1e76d0bdfff3'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_rolling_median(self, sample_transactions):\n        \"\"\"Test income smoothing with rolling median method.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing\n        config = SmoothingConfig(method=SmoothingMethod.ROLLING_MEDIAN, window_size=3)\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions,\n            method=SmoothingMethod.ROLLING_MEDIAN,\n            config=config,\n            start_date=start_date,\n            end_date=end_date,\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:184: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcc07e30>\ntransactions = [Transaction(id=UUID('2eb08d12-4a39-4ba7-9a27-1e76d0bdfff3'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00015259883366525173, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "lineno": 196, "outcome": "failed", "keywords": ["test_smooth_income_with_target", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0017504729330539703, "outcome": "passed"}, "call": {"duration": 0.00017330492846667767, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 214, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff28a0>\nsample_transactions = [Transaction(id=UUID('357a9c56-f2a3-4e40-b0ab-5655b3f6a393'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_smooth_income_with_target(self, sample_transactions):\n        \"\"\"Test income smoothing with target monthly income override.\"\"\"\n        manager = IncomeManager()\n    \n        # Define date range\n        start_date = datetime(2022, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Configure smoothing with target income\n        target_income = 3000.0\n        config = SmoothingConfig(\n            method=SmoothingMethod.MOVING_AVERAGE,\n            window_size=3,\n            target_monthly_income=target_income,\n        )\n    \n        # Run smoothing\n>       smoothed_income = manager.smooth_income(\n            sample_transactions, config=config, start_date=start_date, end_date=end_date\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:214: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcc99280>\ntransactions = [Transaction(id=UUID('357a9c56-f2a3-4e40-b0ab-5655b3f6a393'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.0001774828415364027, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "lineno": 223, "outcome": "failed", "keywords": ["test_forecast_revenue", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014945820439606905, "outcome": "passed"}, "call": {"duration": 0.0006124379578977823, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 393, "message": "ModuleNotFoundError: No module named 'scipy'"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 230, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 393, "message": "ModuleNotFoundError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff2ab0>\nsample_transactions = [Transaction(id=UUID('ec10da26-d099-4b6f-9c38-ece6c0b98c9a'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\nsample_invoices = [Invoice(id='invproject1-1', client_id='client1', project_id='project1', issue_date=datetime.datetime(2022, 1, 23, 12,...keting Campaign', line_items=[{'description': 'Payment for 50.0 hours on Marketing Campaign', 'amount': 3750.0}]), ...]\n\n    def test_forecast_revenue(self, sample_transactions, sample_invoices):\n        \"\"\"Test revenue forecasting based on history and pending invoices.\"\"\"\n        manager = IncomeManager()\n    \n        # Run forecast\n        forecast_months = 6\n>       forecasts = manager.forecast_revenue(\n            sample_transactions, sample_invoices, forecast_months=forecast_months\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcc9bc80>\ntransactions = [Transaction(id=UUID('ec10da26-d099-4b6f-9c38-ece6c0b98c9a'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=2500.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\ninvoices = [Invoice(id='invproject1-1', client_id='client1', project_id='project1', issue_date=datetime.datetime(2022, 1, 23, 12,...keting Campaign', line_items=[{'description': 'Payment for 50.0 hours on Marketing Campaign', 'amount': 3750.0}]), ...]\nforecast_months = 6, confidence_interval = None\n\n    def forecast_revenue(\n        self,\n        transactions: List[Transaction],\n        invoices: List[Invoice],\n        forecast_months: int = 6,\n        confidence_interval: Optional[float] = None,\n    ) -> List[RevenueForecast]:\n        \"\"\"\n        Forecast future revenue based on historical patterns and pending invoices.\n    \n        Args:\n            transactions: Historical income transactions\n            invoices: Pending invoices (issued but not paid)\n            forecast_months: Number of months to forecast\n            confidence_interval: Confidence interval for prediction (0-1)\n    \n        Returns:\n            List of monthly revenue forecasts\n        \"\"\"\n        # Use Timer for performance measurement\n        with Timer(\"revenue_forecast\"):\n            # Use configured or provided confidence interval\n            ci = confidence_interval or self.config.confidence_interval\n    \n            # Filter to income transactions\n            income_transactions = [\n                t for t in transactions if t.transaction_type == TransactionType.INCOME\n            ]\n    \n            if not income_transactions:\n                # No historical data, can't make forecast\n                return []\n    \n            # Get latest transaction date and create forecast start date\n            latest_date = max(t.date for t in income_transactions)\n            forecast_start = get_first_day_of_month(latest_date)\n            # Move to next month\n            if isinstance(forecast_start, datetime):\n                next_month = forecast_start.month + 1\n                next_year = forecast_start.year + (next_month > 12)\n                if next_month > 12:\n                    next_month -= 12\n                forecast_start = forecast_start.replace(year=next_year, month=next_month)\n            else:\n                # Handle date objects\n                next_month = forecast_start.month + 1\n                next_year = forecast_start.year + (next_month > 12)\n                if next_month > 12:\n                    next_month -= 12\n                forecast_start = forecast_start.replace(year=next_year, month=next_month)\n    \n            # Calculate monthly historical income\n            end_date = latest_date\n            start_date = end_date - timedelta(days=365 * 2)  # 2 years of history\n    \n            # Create time series data for historical income\n            monthly_income = self.calculate_monthly_income(\n                income_transactions, start_date, end_date\n            )\n    \n            # Build dates and values arrays\n            dates = []\n            values = []\n            for month_date in month_range(start_date, end_date):\n                month_key = month_date.strftime(\"%Y-%m\")\n                dates.append(month_date)\n                values.append(monthly_income.get(month_key, 0))\n    \n            # Create TimeSeriesData\n            historical_ts = TimeSeriesData(dates=dates, values=values)\n    \n            # Calculate basic statistics for forecast\n            mean_income = np.mean(historical_ts.values) if historical_ts.values else 0\n            std_income = np.std(historical_ts.values) if len(historical_ts.values) > 1 else mean_income * 0.2\n    \n            # Calculate bounds based on confidence interval\n>           from scipy import stats\nE           ModuleNotFoundError: No module named 'scipy'\n\npersonal_finance_tracker/income/income_manager.py:393: ModuleNotFoundError"}, "teardown": {"duration": 0.00018130289390683174, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "lineno": 243, "outcome": "failed", "keywords": ["test_extremely_irregular_income", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.364099241793156e-05, "outcome": "passed"}, "call": {"duration": 0.00020536314696073532, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 289, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff2c60>\n\n    def test_extremely_irregular_income(self):\n        \"\"\"Test handling of extremely irregular income patterns.\"\"\"\n        manager = IncomeManager()\n    \n        # Create test data with extreme irregularity\n        transactions = []\n        dates = [\n            datetime(2022, 1, 15),  # 10000\n            datetime(2022, 2, 15),  # 0\n            datetime(2022, 3, 15),  # 0\n            datetime(2022, 4, 15),  # 15000\n            datetime(2022, 5, 15),  # 0\n            datetime(2022, 6, 15),  # 0\n            datetime(2022, 7, 15),  # 0\n            datetime(2022, 8, 15),  # 20000\n            datetime(2022, 9, 15),  # 0\n            datetime(2022, 10, 15),  # 0\n            datetime(2022, 11, 15),  # 0\n            datetime(2022, 12, 15),  # 30000\n        ]\n        amounts = [10000, 0, 0, 15000, 0, 0, 0, 20000, 0, 0, 0, 30000]\n    \n        for date, amount in zip(dates, amounts):\n            if amount > 0:\n                transactions.append(\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=date,\n                        amount=amount,\n                        description=\"Irregular income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                    )\n                )\n    \n        # Test different smoothing methods\n        methods = [\n            SmoothingMethod.MOVING_AVERAGE,\n            SmoothingMethod.EXPONENTIAL_SMOOTHING,\n            SmoothingMethod.PERCENTILE_BASED,\n            SmoothingMethod.ROLLING_MEDIAN,\n        ]\n    \n        for method in methods:\n            config = SmoothingConfig(method=method)\n>           smoothed = manager.smooth_income(transactions, method=method, config=config)\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:289: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcff2180>\ntransactions = [Transaction(id=UUID('f0152775-a474-4854-86ee-2397b8ae5608'), date=datetime.datetime(2022, 1, 15, 0, 0), amount=10000....ags=[], notes=None, business_use_percentage=None, project_id=None, client_id=None, invoice_id=None, receipt_path=None)]\nstart_date = datetime.date(2022, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00012070802040398121, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "lineno": 302, "outcome": "failed", "keywords": ["test_income_smoothing_with_large_dataset", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.416998364031315e-05, "outcome": "passed"}, "call": {"duration": 0.0014407769776880741, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError: can't compare datetime.datetime to datetime.date"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/income/test_income_manager.py", "lineno": 351, "message": ""}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 145, "message": "in smooth_income"}, {"path": "personal_finance_tracker/income/income_manager.py", "lineno": 85, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7ff8dcff2de0>\n\n    def test_income_smoothing_with_large_dataset(self):\n        \"\"\"Test performance with a large dataset (5+ years).\"\"\"\n        manager = IncomeManager()\n    \n        # Create a large dataset spanning 7 years\n        transactions = []\n        start_date = datetime(2016, 1, 1)\n        end_date = datetime(2022, 12, 31)\n    \n        # Generate monthly income with some randomness\n        current_date = start_date\n        while current_date <= end_date:\n            # Base income with seasonal pattern and random variation\n            month = current_date.month\n            seasonal_factor = 1.0 + 0.3 * np.sin(\n                2 * np.pi * month / 12\n            )  # Seasonal pattern\n            base_income = 3000 * seasonal_factor\n    \n            # Add random variation\n            random_factor = np.random.normal(1.0, 0.4)  # 40% standard deviation\n            income = max(0, base_income * random_factor)\n    \n            # Add occasional large payments\n            if np.random.random() < 0.1:  # 10% chance\n                income += np.random.uniform(5000, 10000)\n    \n            # Create transaction\n            if income > 0:\n                transactions.append(\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=current_date,\n                        amount=income,\n                        description=f\"Income {current_date.strftime('%Y-%m')}\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                    )\n                )\n    \n            # Move to next month\n            month = current_date.month + 1\n            year = current_date.year + (month - 1) // 12\n            month = ((month - 1) % 12) + 1\n            current_date = datetime(year, month, 15)\n    \n        # Test performance of smoothing\n        start_time = time.time()\n>       smoothed = manager.smooth_income(\n            transactions, method=SmoothingMethod.MOVING_AVERAGE\n        )\n\n../personal_finance_tracker_freelancer/tests/income/test_income_manager.py:351: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager.py:145: in smooth_income\n    monthly_income = self.calculate_monthly_income(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.income.income_manager.IncomeManager object at 0x7ff8dcb3dc40>\ntransactions = [Transaction(id=UUID('6fbc17ac-9ec2-42f5-b314-aaadcd93f160'), date=datetime.datetime(2016, 1, 1, 0, 0), amount=3647.47...], notes=None, business_use_percentage=None, project_id=None, client_id=None, invoice_id=None, receipt_path=None), ...]\nstart_date = datetime.date(2016, 1, 1), end_date = datetime.date(2022, 12, 31)\n\n    def calculate_monthly_income(\n        self, transactions: List[Transaction], start_date: datetime, end_date: datetime\n    ) -> Dict[str, float]:\n        \"\"\"\n        Calculate monthly income from transactions within date range.\n    \n        Args:\n            transactions: List of income transactions\n            start_date: Start date for calculation\n            end_date: End date for calculation\n    \n        Returns:\n            Dictionary mapping month (YYYY-MM format) to income amount\n        \"\"\"\n        # Filter transactions to income within date range\n        income_transactions = [\n            t\n            for t in transactions\n            if (\n                t.transaction_type == TransactionType.INCOME\n>               and start_date <= t.date <= end_date\n            )\n        ]\nE       TypeError: can't compare datetime.datetime to datetime.date\n\npersonal_finance_tracker/income/income_manager.py:85: TypeError"}, "teardown": {"duration": 0.00012285402044653893, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003018041606992483, "outcome": "passed"}, "call": {"duration": 0.00015159090980887413, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py", "lineno": 32, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py", "lineno": 32, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery.TestCategorizationRecovery object at 0x7ff8dd0fa630>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py:32: ValidationError"}, "teardown": {"duration": 0.00011638598516583443, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "lineno": 214, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010709185153245926, "outcome": "passed"}, "call": {"duration": 0.0001385470386594534, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py", "lineno": 221, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py", "lineno": 221, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery.TestCategorizationRecovery object at 0x7ff8dce6a240>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test recovering from multiple categorization errors discovered later.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Marketing Rule\",\n                category=ExpenseCategory.MARKETING,\n                keyword_patterns=[\"marketing\", \"advertising\", \"promotion\"],\n                business_use_percentage=100.0,\n                priority=8,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"dining\"],\n                business_use_percentage=50.0,  # 50% business use for meals\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery.py:221: ValidationError"}, "teardown": {"duration": 0.00011729286052286625, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors", "lineno": 24, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecoveryMocks", "test_categorization_recovery_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.597302414476871e-05, "outcome": "passed"}, "call": {"duration": 0.00014264113269746304, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_mocks.py", "lineno": 31, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_mocks.py", "lineno": 31, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_mocks.TestCategorizationRecoveryMocks object at 0x7ff8dce69d00>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_mocks.py:31: ValidationError"}, "teardown": {"duration": 0.00011621392332017422, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors", "lineno": 125, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecoveryMocks", "test_categorization_recovery_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.020091965794563e-05, "outcome": "passed"}, "call": {"duration": 0.00014836504124104977, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_mocks.py", "lineno": 133, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_mocks.py", "lineno": 133, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_mocks.TestCategorizationRecoveryMocks object at 0x7ff8dce694f0>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test correcting multiple categorization errors at once.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"office\", \"supplies\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_mocks.py:133: ValidationError"}, "teardown": {"duration": 0.00013002613559365273, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecoverySimplified", "test_categorization_recovery_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.726779535412788e-05, "outcome": "passed"}, "call": {"duration": 0.00014161807484924793, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_simplified.py", "lineno": 32, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_simplified.py", "lineno": 32, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_simplified.TestCategorizationRecoverySimplified object at 0x7ff8dce69b20>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_simplified.py:32: ValidationError"}, "teardown": {"duration": 0.00011849915608763695, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors", "lineno": 127, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecoverySimplified", "test_categorization_recovery_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.014294482767582e-05, "outcome": "passed"}, "call": {"duration": 0.0001372508704662323, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_simplified.py", "lineno": 135, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_simplified.py", "lineno": 135, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_simplified.TestCategorizationRecoverySimplified object at 0x7ff8dce6a480>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test correcting multiple categorization errors at once.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"office\", \"supplies\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_categorization_recovery_simplified.py:135: ValidationError"}, "teardown": {"duration": 0.00011948379687964916, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "lineno": 31, "outcome": "failed", "keywords": ["test_business_expenses_impact_on_tax_liability", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.20700840651989e-05, "outcome": "passed"}, "call": {"duration": 0.00014099502004683018, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_expense_tax_integration.py", "lineno": 38, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_expense_tax_integration.py", "lineno": 38, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_expense_tax_integration.TestExpenseTaxIntegration object at 0x7ff8dce6a870>\n\n    def test_business_expenses_impact_on_tax_liability(self):\n        \"\"\"Test how business expense categorization impacts tax liability.\"\"\"\n        # Set up the expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n>       business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Business Expens...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_expense_tax_integration.py:38: ValidationError"}, "teardown": {"duration": 0.00011795409955084324, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "lineno": 170, "outcome": "passed", "keywords": ["test_expense_recategorization_tax_impact", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.841301314532757e-05, "outcome": "passed"}, "call": {"duration": 0.0001711410004645586, "outcome": "passed"}, "teardown": {"duration": 9.084190241992474e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability", "lineno": 18, "outcome": "passed", "keywords": ["test_expense_categorization_impacts_tax_liability", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.415407501161098e-05, "outcome": "passed"}, "call": {"duration": 0.00016109086573123932, "outcome": "passed"}, "teardown": {"duration": 8.863699622452259e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact", "lineno": 95, "outcome": "passed", "keywords": ["test_categorization_correction_tax_impact", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.037383668124676e-05, "outcome": "passed"}, "call": {"duration": 0.00014724000357091427, "outcome": "passed"}, "teardown": {"duration": 7.789791561663151e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation", "lineno": 162, "outcome": "passed", "keywords": ["test_quarterly_tax_estimation", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.636798545718193e-05, "outcome": "passed"}, "call": {"duration": 0.00017874501645565033, "outcome": "passed"}, "teardown": {"duration": 8.299783803522587e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability", "lineno": 304, "outcome": "passed", "keywords": ["test_multi_year_project_profitability", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.764995098114014e-05, "outcome": "passed"}, "call": {"duration": 0.00017354683950543404, "outcome": "passed"}, "teardown": {"duration": 8.093495853245258e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "lineno": 232, "outcome": "passed", "keywords": ["test_project_profitability_across_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0012889441568404436, "outcome": "passed"}, "call": {"duration": 0.0008302310016006231, "outcome": "passed"}, "teardown": {"duration": 0.00014819996431469917, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "lineno": 342, "outcome": "passed", "keywords": ["test_tax_implications_of_cross_year_project", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0011814378667622805, "outcome": "passed"}, "call": {"duration": 0.000373204005882144, "outcome": "passed"}, "teardown": {"duration": 0.0001378101296722889, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "lineno": 463, "outcome": "passed", "keywords": ["test_cross_year_project_cash_flow", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0011733989231288433, "outcome": "passed"}, "call": {"duration": 0.0011902861297130585, "outcome": "passed"}, "teardown": {"duration": 0.00015652598813176155, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "lineno": 553, "outcome": "passed", "keywords": ["test_project_spanning_three_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010333606041967869, "outcome": "passed"}, "call": {"duration": 0.0003706950228661299, "outcome": "passed"}, "teardown": {"duration": 8.99189617484808e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "passed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.184905163943768e-05, "outcome": "passed"}, "call": {"duration": 0.00024410709738731384, "outcome": "passed"}, "teardown": {"duration": 8.978811092674732e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments", "lineno": 139, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.554686792194843e-05, "outcome": "passed"}, "call": {"duration": 0.00022788112983107567, "outcome": "passed"}, "teardown": {"duration": 8.183717727661133e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing", "lineno": 190, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.046813309192657e-05, "outcome": "passed"}, "call": {"duration": 0.00017283903434872627, "outcome": "passed"}, "teardown": {"duration": 8.11100471764803e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.870001718401909e-05, "outcome": "passed"}, "call": {"duration": 0.0001831110566854477, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation.py", "lineno": 56, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation.py", "lineno": 56, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation.TestQuarterlyTaxPreparation object at 0x7ff8dcee3590>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with simplified transactions.\"\"\"\n        # Set up the required components\n        expense_categorizer = ExpenseCategorizer()\n        income_manager = IncomeManager()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n    \n        # Load default tax brackets\n        tax_manager.load_default_brackets()\n    \n        # Add tax brackets for test year (2022)\n        tax_brackets_2022 = TaxBracket(\n            jurisdiction=TaxJurisdiction.FEDERAL,\n            filing_status=FilingStatus.SINGLE,\n            tax_year=2022,\n            income_thresholds=[0, 10275, 41775, 89075, 170050, 215950, 539900],\n            rates=[10, 12, 22, 24, 32, 35, 37],\n        )\n        tax_manager.set_tax_brackets([tax_brackets_2022])\n    \n        # Add a few categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation.py:56: ValidationError"}, "teardown": {"duration": 0.00012131803669035435, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "lineno": 285, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.474414400756359e-05, "outcome": "passed"}, "call": {"duration": 0.00038303504697978497, "outcome": "passed"}, "teardown": {"duration": 8.952501229941845e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "lineno": 423, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.687516674399376e-05, "outcome": "passed"}, "call": {"duration": 0.0005029740277677774, "outcome": "passed"}, "teardown": {"duration": 9.118998423218727e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation", "lineno": 30, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationMock", "test_quarterly_tax_preparation_mock.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.44290480017662e-05, "outcome": "passed"}, "call": {"duration": 0.00020701903849840164, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation_mock.py", "lineno": 77, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation_mock.py", "lineno": 77, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation_mock.TestQuarterlyTaxPreparationMock object at 0x7ff8dcee3d40>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with mock data.\"\"\"\n        # Set up components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Define test data\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Calculate quarter dates\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n        current_quarter = next(q for q in quarters if q.quarter == quarter_number)\n    \n        # Create mock transactions\n        business_expenses = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 4, 15),\n                amount=1200.0,\n                description=\"Office supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 5, 10),\n                amount=500.0,\n                description=\"Software subscription\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        income_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 5),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        # Add expense categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation_mock.py:77: ValidationError"}, "teardown": {"duration": 0.00011943606659770012, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.343004785478115e-05, "outcome": "passed"}, "call": {"duration": 0.00015830597840249538, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation_simplified.py", "lineno": 43, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nfield_name\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing\npattern\n  Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.11/v/missing"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation_simplified.py", "lineno": 43, "message": "ValidationError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation_simplified.TestQuarterlyTaxPreparationSimplified object at 0x7ff8dcef82f0>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with simplified approach.\"\"\"\n        # Set up components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Add expense categorization rules\n        rules = [\n>           CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExpenseRule\nE       field_name\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\nE       pattern\nE         Field required [type=missing, input_value={'name': 'Software Rule',...: 100.0, 'priority': 10}, input_type=dict]\nE           For further information visit https://errors.pydantic.dev/2.11/v/missing\n\n../personal_finance_tracker_freelancer/tests/integration/test_quarterly_tax_preparation_simplified.py:43: ValidationError"}, "teardown": {"duration": 0.0001166218426078558, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments", "lineno": 152, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.122607298195362e-05, "outcome": "passed"}, "call": {"duration": 0.00019616982899606228, "outcome": "passed"}, "teardown": {"duration": 9.440397843718529e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing", "lineno": 209, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.258107118308544e-05, "outcome": "passed"}, "call": {"duration": 0.00023496593348681927, "outcome": "passed"}, "teardown": {"duration": 8.446397259831429e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "lineno": 330, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.003953005885705352, "outcome": "passed"}, "call": {"duration": 0.0010156759526580572, "outcome": "passed"}, "teardown": {"duration": 0.00012405100278556347, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "lineno": 403, "outcome": "failed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0035357889719307423, "outcome": "passed"}, "call": {"duration": 0.0005971759092062712, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py", "lineno": 469, "message": "assert 0.43671843514838654 >= 0.43674195349959605"}, "traceback": [{"path": "../personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py", "lineno": 469, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_comparison.TestYearOverYearComparison object at 0x7ff8dcef89b0>\nmulti_year_transactions = [Transaction(id=UUID('8bd0593e-fa44-4d49-a48d-d944bcc49176'), date=datetime.datetime(2021, 1, 15, 0, 0), amount=2000.0...ne, business_use_percentage=None, project_id='project2', client_id='client1', invoice_id=None, receipt_path=None), ...]\n\n    def test_expense_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing expense patterns across multiple years.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Process expenses by year and category\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter expense transactions for this year\n            year_transactions = [\n                tx for tx in multi_year_transactions\n                if tx.date.year == year and tx.transaction_type == TransactionType.EXPENSE\n            ]\n    \n            # Generate expense summary for the year\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            expense_summary = categorizer.generate_expense_summary(\n                year_transactions, start_date, end_date\n            )\n    \n            # Store data for analysis\n            year_data[year] = {\n                \"transactions\": year_transactions,\n                \"summary\": expense_summary,\n                \"total_expenses\": expense_summary.total_expenses,\n                \"business_expenses\": expense_summary.business_expenses,\n                \"personal_expenses\": expense_summary.personal_expenses,\n                \"by_category\": expense_summary.by_category,\n            }\n    \n        # Compare total expenses year-over-year\n        # Should increase due to inflation and business growth\n        assert year_data[2022][\"total_expenses\"] > year_data[2021][\"total_expenses\"]\n        assert year_data[2023][\"total_expenses\"] > year_data[2022][\"total_expenses\"]\n    \n        # Calculate expense growth rates\n        expense_growth_2021_to_2022 = (\n            year_data[2022][\"total_expenses\"] - year_data[2021][\"total_expenses\"]\n        ) / year_data[2021][\"total_expenses\"]\n    \n        expense_growth_2022_to_2023 = (\n            year_data[2023][\"total_expenses\"] - year_data[2022][\"total_expenses\"]\n        ) / year_data[2022][\"total_expenses\"]\n    \n        # Ensure both years show positive expense growth due to inflation\n        assert expense_growth_2021_to_2022 > 0\n        assert expense_growth_2022_to_2023 > 0\n    \n        # Check that both growth rates are within a reasonable range\n        assert 0.02 < expense_growth_2021_to_2022 < 0.15\n        assert 0.02 < expense_growth_2022_to_2023 < 0.15\n    \n        # Compare business vs personal expense ratio over time\n        business_ratio = {}\n        for year, data in year_data.items():\n            if data[\"total_expenses\"] > 0:\n                business_ratio[year] = data[\"business_expenses\"] / data[\"total_expenses\"]\n            else:\n                business_ratio[year] = 0\n    \n        # Assuming business expenses should increase as a proportion over time\n        # as the freelancer becomes more established\n        # This will depend on the test data pattern\n>       assert business_ratio[2023] >= business_ratio[2021]\nE       assert 0.43671843514838654 >= 0.43674195349959605\n\n../personal_finance_tracker_freelancer/tests/integration/test_year_over_year_comparison.py:469: AssertionError"}, "teardown": {"duration": 0.00013418192975223064, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "lineno": 494, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.003514704992994666, "outcome": "passed"}, "call": {"duration": 0.000546563183888793, "outcome": "passed"}, "teardown": {"duration": 0.00011488981544971466, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "lineno": 582, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002138011157512665, "outcome": "passed"}, "call": {"duration": 0.00012082792818546295, "outcome": "passed"}, "teardown": {"duration": 0.000106399180367589, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis", "lineno": 18, "outcome": "passed", "keywords": ["test_income_growth_analysis", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.453995153307915e-05, "outcome": "passed"}, "call": {"duration": 0.0004074701573699713, "outcome": "passed"}, "teardown": {"duration": 8.204299956560135e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends", "lineno": 90, "outcome": "passed", "keywords": ["test_expense_category_trends", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.02439171820879e-05, "outcome": "passed"}, "call": {"duration": 0.0006169681437313557, "outcome": "passed"}, "teardown": {"duration": 8.994387462735176e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison", "lineno": 226, "outcome": "passed", "keywords": ["test_tax_liability_comparison", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.892097346484661e-05, "outcome": "passed"}, "call": {"duration": 0.00016631395556032658, "outcome": "passed"}, "teardown": {"duration": 8.103600703179836e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends", "lineno": 352, "outcome": "passed", "keywords": ["test_project_profitability_trends", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.847417145967484e-05, "outcome": "passed"}, "call": {"duration": 0.00021232501603662968, "outcome": "passed"}, "teardown": {"duration": 8.011306636035442e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years", "lineno": 28, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.871491834521294e-05, "outcome": "passed"}, "call": {"duration": 0.00019226898439228535, "outcome": "passed"}, "teardown": {"duration": 8.258712477982044e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years", "lineno": 70, "outcome": "passed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.617101073265076e-05, "outcome": "passed"}, "call": {"duration": 0.0001403801143169403, "outcome": "passed"}, "teardown": {"duration": 8.801789954304695e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years", "lineno": 148, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.2376878708601e-05, "outcome": "passed"}, "call": {"duration": 0.00012116297148168087, "outcome": "passed"}, "teardown": {"duration": 7.72599596530199e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years", "lineno": 170, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.581315003335476e-05, "outcome": "passed"}, "call": {"duration": 0.0001125158742070198, "outcome": "passed"}, "teardown": {"duration": 7.545296102762222e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years", "lineno": 29, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.509998977184296e-05, "outcome": "passed"}, "call": {"duration": 0.00024959794245660305, "outcome": "passed"}, "teardown": {"duration": 8.24520830065012e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years", "lineno": 91, "outcome": "passed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.231401443481445e-05, "outcome": "passed"}, "call": {"duration": 0.00017171702347695827, "outcome": "passed"}, "teardown": {"duration": 7.810699753463268e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years", "lineno": 175, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.747695781290531e-05, "outcome": "passed"}, "call": {"duration": 8.414615876972675e-05, "outcome": "passed"}, "teardown": {"duration": 7.058004848659039e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years", "lineno": 205, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.420312613248825e-05, "outcome": "passed"}, "call": {"duration": 0.00014396104961633682, "outcome": "passed"}, "teardown": {"duration": 8.25999304652214e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "lineno": 25, "outcome": "passed", "keywords": ["test_init", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003015189431607723, "outcome": "passed"}, "call": {"duration": 9.593390859663486e-05, "outcome": "passed"}, "teardown": {"duration": 7.626297883689404e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "lineno": 31, "outcome": "passed", "keywords": ["test_analyze_project_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0020261979661881924, "outcome": "passed"}, "call": {"duration": 0.0003352430649101734, "outcome": "passed"}, "teardown": {"duration": 0.00014723790809512138, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "lineno": 64, "outcome": "passed", "keywords": ["test_analyze_client_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002006318885833025, "outcome": "passed"}, "call": {"duration": 0.0004366030916571617, "outcome": "passed"}, "teardown": {"duration": 0.00015997211448848248, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "lineno": 101, "outcome": "passed", "keywords": ["test_analyze_all_projects", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0024683570954948664, "outcome": "passed"}, "call": {"duration": 0.0003452680539339781, "outcome": "passed"}, "teardown": {"duration": 0.00014656106941401958, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "lineno": 121, "outcome": "passed", "keywords": ["test_generate_trend_analysis", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.001996592851355672, "outcome": "passed"}, "call": {"duration": 0.0015744050033390522, "outcome": "passed"}, "teardown": {"duration": 0.00016699591651558876, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "lineno": 172, "outcome": "failed", "keywords": ["test_record_time_entry", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001197420060634613, "outcome": "passed"}, "call": {"duration": 0.00015792297199368477, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/tests/freelancer/project/test_profitability_analyzer.py", "lineno": 186, "message": "AttributeError: 'ProjectProfiler' object has no attribute 'record_time_entry'"}, "traceback": [{"path": "tests/freelancer/project/test_profitability_analyzer.py", "lineno": 186, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.project.test_profitability_analyzer.TestProjectProfiler object at 0x7ff8dcefbec0>\n\n    def test_record_time_entry(self):\n        \"\"\"Test recording a new time entry.\"\"\"\n        profiler = ProjectProfiler()\n    \n        # Create a time entry\n        time_entry = TimeEntry(\n            project_id=\"project1\",\n            start_time=datetime(2022, 5, 1, 9, 0),\n            end_time=datetime(2022, 5, 1, 13, 0),\n            description=\"Test time entry\",\n        )\n    \n        # Record the entry\n>       recorded_entry = profiler.record_time_entry(time_entry)\nE       AttributeError: 'ProjectProfiler' object has no attribute 'record_time_entry'\n\ntests/freelancer/project/test_profitability_analyzer.py:186: AttributeError"}, "teardown": {"duration": 0.00011822395026683807, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "lineno": 192, "outcome": "passed", "keywords": ["test_allocate_expense", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.194295853376389e-05, "outcome": "passed"}, "call": {"duration": 0.00015363702550530434, "outcome": "passed"}, "teardown": {"duration": 8.348491974174976e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "lineno": 215, "outcome": "passed", "keywords": ["test_analyze_large_project_set", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.218199945986271e-05, "outcome": "passed"}, "call": {"duration": 0.04548437683843076, "outcome": "passed"}, "teardown": {"duration": 0.00010746298357844353, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init", "lineno": 30, "outcome": "passed", "keywords": ["test_init", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00029891706071794033, "outcome": "passed"}, "call": {"duration": 0.00011854199692606926, "outcome": "passed"}, "teardown": {"duration": 7.932703010737896e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "lineno": 35, "outcome": "passed", "keywords": ["test_project_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 8.271215483546257e-05, "outcome": "passed"}, "call": {"duration": 0.0003107599914073944, "outcome": "passed"}, "teardown": {"duration": 8.341995999217033e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "lineno": 145, "outcome": "passed", "keywords": ["test_project_cash_flow_different_scenarios", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 9.191199205815792e-05, "outcome": "passed"}, "call": {"duration": 0.00036078784614801407, "outcome": "passed"}, "teardown": {"duration": 7.91309867054224e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "lineno": 217, "outcome": "passed", "keywords": ["test_calculate_runway_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.737008854746819e-05, "outcome": "passed"}, "call": {"duration": 0.00012499699369072914, "outcome": "passed"}, "teardown": {"duration": 7.680896669626236e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "lineno": 236, "outcome": "passed", "keywords": ["test_create_what_if_scenario", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.53339845687151e-05, "outcome": "passed"}, "call": {"duration": 0.0001224009320139885, "outcome": "passed"}, "teardown": {"duration": 7.677008397877216e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "lineno": 279, "outcome": "passed", "keywords": ["test_create_what_if_scenario_with_evaluation", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.677101530134678e-05, "outcome": "passed"}, "call": {"duration": 0.00011707516387104988, "outcome": "passed"}, "teardown": {"duration": 7.389509119093418e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "lineno": 309, "outcome": "passed", "keywords": ["test_assess_emergency_fund_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.516006007790565e-05, "outcome": "passed"}, "call": {"duration": 0.00012664101086556911, "outcome": "passed"}, "teardown": {"duration": 7.326900959014893e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "lineno": 332, "outcome": "passed", "keywords": ["test_negative_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.575401104986668e-05, "outcome": "passed"}, "call": {"duration": 0.0002711059059947729, "outcome": "passed"}, "teardown": {"duration": 8.573010563850403e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "lineno": 19, "outcome": "passed", "keywords": ["test_init", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00030149705708026886, "outcome": "passed"}, "call": {"duration": 0.00010117492638528347, "outcome": "passed"}, "teardown": {"duration": 7.506995461881161e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "lineno": 29, "outcome": "passed", "keywords": ["test_calculate_tax_quarters", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.612118497490883e-05, "outcome": "passed"}, "call": {"duration": 0.00011500203981995583, "outcome": "passed"}, "teardown": {"duration": 7.231300696730614e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "lineno": 60, "outcome": "passed", "keywords": ["test_get_current_quarter", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.797288708388805e-05, "outcome": "passed"}, "call": {"duration": 0.000115550821647048, "outcome": "passed"}, "teardown": {"duration": 7.323198951780796e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "lineno": 71, "outcome": "passed", "keywords": ["test_tax_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.537682540714741e-05, "outcome": "passed"}, "call": {"duration": 0.00012028100900352001, "outcome": "passed"}, "teardown": {"duration": 7.548602297902107e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "lineno": 114, "outcome": "passed", "keywords": ["test_load_default_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.421406917273998e-05, "outcome": "passed"}, "call": {"duration": 0.0001084120012819767, "outcome": "passed"}, "teardown": {"duration": 7.92541541159153e-05, "outcome": "passed"}}, {"nodeid": "tests/freelancer/test_main.py::test_main", "lineno": 3, "outcome": "passed", "keywords": ["test_main", "test_main.py", "freelancer", "tests", "unified", ""], "setup": {"duration": 7.520290091633797e-05, "outcome": "passed"}, "call": {"duration": 9.003793820738792e-05, "outcome": "passed"}, "teardown": {"duration": 7.378100417554379e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria", "lineno": 15, "outcome": "failed", "keywords": ["test_create_prioritized_ethical_criteria", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0004022461362183094, "outcome": "passed"}, "call": {"duration": 0.00013607507571578026, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 70, "message": "TypeError: Can't instantiate abstract class EthicalScreener without an implementation for abstract method 'analyze'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 70, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_ethical_criteria_customization.TestEthicalCriteriaCustomization object at 0x7ff8dcdb3230>\n\n    def test_create_prioritized_ethical_criteria(self):\n        \"\"\"Test creating criteria with personalized priority weights.\"\"\"\n        # Create a custom criteria with prioritized categories\n        custom_criteria = EthicalCriteria(\n            criteria_id=\"personal-values-focused\",\n            name=\"Personal Values Focused Criteria\",\n            environmental={\n                \"min_environmental_score\": 65,\n                \"max_carbon_footprint\": 40000000,\n                \"min_renewable_energy_use\": 0.6,\n                \"exclude_fossil_fuel_production\": True,\n                \"weight\": 0.5  # Higher weight for environmental factors\n            },\n            social={\n                \"min_social_score\": 60,\n                \"min_diversity_score\": 0.65,\n                \"exclude_human_rights_violations\": True,\n                \"exclude_weapons_manufacturing\": True,\n                \"weight\": 0.3\n            },\n            governance={\n                \"min_governance_score\": 65,\n                \"min_board_independence\": 0.7,\n                \"exclude_excessive_executive_compensation\": True,\n                \"weight\": 0.2\n            },\n            min_overall_score=65,\n            exclusions=[\n                \"tobacco\",\n                \"gambling\",\n                \"adult_entertainment\",\n                \"military_contracting\"\n            ],\n            inclusions=[\n                \"renewable_energy\",\n                \"sustainable_agriculture\",\n                \"education\",\n                \"healthcare\"\n            ]\n        )\n    \n        # Verify criteria properties\n        assert custom_criteria.criteria_id == \"personal-values-focused\"\n        assert custom_criteria.name == \"Personal Values Focused Criteria\"\n    \n        # Verify custom weights\n        assert custom_criteria.environmental[\"weight\"] == 0.5\n        assert custom_criteria.social[\"weight\"] == 0.3\n        assert custom_criteria.governance[\"weight\"] == 0.2\n        assert abs(custom_criteria.environmental[\"weight\"] +\n                custom_criteria.social[\"weight\"] +\n                custom_criteria.governance[\"weight\"] - 1.0) < 0.001\n    \n        # Initialize screener with the custom criteria\n>       screener = EthicalScreener(custom_criteria)\nE       TypeError: Can't instantiate abstract class EthicalScreener without an implementation for abstract method 'analyze'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py:70: TypeError"}, "teardown": {"duration": 0.0001181920524686575, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey", "lineno": 153, "outcome": "failed", "keywords": ["test_criteria_from_user_survey", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.090593084692955e-05, "outcome": "passed"}, "call": {"duration": 0.00013134395703673363, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 202, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 202, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_ethical_criteria_customization.TestEthicalCriteriaCustomization object at 0x7ff8dcdb37d0>\n\n    def test_criteria_from_user_survey(self):\n        \"\"\"Test generating ethical criteria from user survey responses.\"\"\"\n        # Simulate user survey responses\n        survey_responses = {\n            \"top_concerns\": [\"climate_change\", \"human_rights\", \"labor_practices\"],\n            \"industries_to_avoid\": [\"fossil_fuels\", \"weapons\", \"tobacco\"],\n            \"industries_to_support\": [\"renewable_energy\", \"education\", \"healthcare\"],\n            \"relative_importance\": {\n                \"environmental\": 5,  # 1-5 scale\n                \"social\": 4,\n                \"governance\": 3\n            },\n            \"environmental_priorities\": [\"carbon_reduction\", \"renewable_energy\", \"waste_reduction\"],\n            \"social_priorities\": [\"diversity\", \"community_investment\", \"fair_labor\"],\n            \"governance_priorities\": [\"board_diversity\", \"executive_compensation\", \"transparency\"]\n        }\n    \n        # Generate criteria from survey responses\n        criteria = EthicalScreener.generate_criteria_from_survey(survey_responses)\n    \n        # Verify criteria reflects survey responses\n        assert criteria.criteria_id == \"user-personalized\"\n    \n        # Check weights are properly calculated from relative importance\n        total_importance = sum(survey_responses[\"relative_importance\"].values())\n        expected_env_weight = survey_responses[\"relative_importance\"][\"environmental\"] / total_importance\n        expected_social_weight = survey_responses[\"relative_importance\"][\"social\"] / total_importance\n        expected_gov_weight = survey_responses[\"relative_importance\"][\"governance\"] / total_importance\n    \n        assert abs(criteria.environmental[\"weight\"] - expected_env_weight) < 0.001\n        assert abs(criteria.social[\"weight\"] - expected_social_weight) < 0.001\n        assert abs(criteria.governance[\"weight\"] - expected_gov_weight) < 0.001\n    \n        # Check exclusions and inclusions\n        for industry in survey_responses[\"industries_to_avoid\"]:\n            assert industry in criteria.exclusions\n    \n        for industry in survey_responses[\"industries_to_support\"]:\n            assert industry in criteria.inclusions\n    \n        # Check that environmental priorities are reflected\n        if \"carbon_reduction\" in survey_responses[\"environmental_priorities\"]:\n            assert \"max_carbon_footprint\" in criteria.environmental\n    \n        if \"renewable_energy\" in survey_responses[\"environmental_priorities\"]:\n            assert \"min_renewable_energy_use\" in criteria.environmental\n    \n        # Create test investment that aligns with the user's priorities\n>       aligned_investment = Investment(\n            id=\"aligned-investment\",\n            name=\"Aligned Investment Co\",\n            sector=\"Technology\",\n            industry=\"Clean Technology\",\n            market_cap=20000000000,\n            price=85.25,\n            esg_ratings={\n                \"environmental\": 85,\n                \"social\": 80,\n                \"governance\": 75,\n                \"overall\": 82\n            },\n            carbon_footprint=8000000,\n            renewable_energy_use=0.85,\n            diversity_score=0.80,\n            board_independence=0.75,\n            controversies=[],\n            positive_practices=[\"renewable_energy_investment\", \"diversity_initiatives\", \"community_investment\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py:202: TypeError"}, "teardown": {"duration": 0.00011971499770879745, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria", "lineno": 263, "outcome": "failed", "keywords": ["test_serialize_and_load_criteria", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.15380660444498e-05, "outcome": "passed"}, "call": {"duration": 0.00020562508143484592, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 324, "message": "TypeError: Can't instantiate abstract class EthicalScreener without an implementation for abstract method 'analyze'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py", "lineno": 324, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_ethical_criteria_customization.TestEthicalCriteriaCustomization object at 0x7ff8dcdec410>\n\n    def test_serialize_and_load_criteria(self):\n        \"\"\"Test serializing and loading criteria for persistence.\"\"\"\n        # Create custom criteria\n        custom_criteria = EthicalCriteria(\n            criteria_id=\"serialization-test\",\n            name=\"Serialization Test Criteria\",\n            environmental={\n                \"min_environmental_score\": 70,\n                \"max_carbon_footprint\": 30000000,\n                \"min_renewable_energy_use\": 0.7,\n                \"exclude_fossil_fuel_production\": True,\n                \"weight\": 0.4\n            },\n            social={\n                \"min_social_score\": 65,\n                \"min_diversity_score\": 0.7,\n                \"exclude_human_rights_violations\": True,\n                \"exclude_weapons_manufacturing\": True,\n                \"weight\": 0.4\n            },\n            governance={\n                \"min_governance_score\": 60,\n                \"min_board_independence\": 0.65,\n                \"exclude_excessive_executive_compensation\": True,\n                \"weight\": 0.2\n            },\n            min_overall_score=65,\n            exclusions=[\"tobacco\", \"gambling\", \"fossil_fuels\"],\n            inclusions=[\"renewable_energy\", \"education\"]\n        )\n    \n        # Serialize criteria to JSON\n        criteria_json = self._serialize_criteria(custom_criteria)\n    \n        # Verify serialization\n        assert isinstance(criteria_json, str)\n    \n        # Parse JSON\n        criteria_dict = json.loads(criteria_json)\n        assert criteria_dict[\"criteria_id\"] == \"serialization-test\"\n        assert criteria_dict[\"name\"] == \"Serialization Test Criteria\"\n        assert criteria_dict[\"environmental\"][\"weight\"] == 0.4\n        assert criteria_dict[\"social\"][\"weight\"] == 0.4\n        assert criteria_dict[\"governance\"][\"weight\"] == 0.2\n    \n        # Load criteria from JSON\n        loaded_criteria = self._load_criteria_from_json(criteria_json)\n    \n        # Verify loaded criteria matches original\n        assert loaded_criteria.criteria_id == custom_criteria.criteria_id\n        assert loaded_criteria.name == custom_criteria.name\n        assert loaded_criteria.environmental[\"weight\"] == custom_criteria.environmental[\"weight\"]\n        assert loaded_criteria.environmental[\"min_environmental_score\"] == custom_criteria.environmental[\"min_environmental_score\"]\n        assert loaded_criteria.social[\"weight\"] == custom_criteria.social[\"weight\"]\n        assert loaded_criteria.governance[\"weight\"] == custom_criteria.governance[\"weight\"]\n        assert loaded_criteria.min_overall_score == custom_criteria.min_overall_score\n        assert set(loaded_criteria.exclusions) == set(custom_criteria.exclusions)\n        assert set(loaded_criteria.inclusions) == set(custom_criteria.inclusions)\n    \n        # Initialize screener with loaded criteria\n>       screener = EthicalScreener(loaded_criteria)\nE       TypeError: Can't instantiate abstract class EthicalScreener without an implementation for abstract method 'analyze'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_ethical_criteria_customization.py:324: TypeError"}, "teardown": {"duration": 0.00012047798372805119, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria", "lineno": 16, "outcome": "passed", "keywords": ["test_create_default_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.796582162380219e-05, "outcome": "passed"}, "call": {"duration": 0.00020097498781979084, "outcome": "passed"}, "teardown": {"duration": 8.388003334403038e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener", "lineno": 40, "outcome": "failed", "keywords": ["test_initialize_screener", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012609711848199368, "outcome": "passed"}, "call": {"duration": 0.00010658497922122478, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 43, "message": "TypeError: Can't instantiate abstract class EthicalScreener without an implementation for abstract method 'analyze'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 43, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcdb2e70>\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_initialize_screener(self, sample_ethical_criteria):\n        \"\"\"Test initializing the ethical screener.\"\"\"\n>       screener = EthicalScreener(sample_ethical_criteria)\nE       TypeError: Can't instantiate abstract class EthicalScreener without an implementation for abstract method 'analyze'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:43: TypeError"}, "teardown": {"duration": 0.00014121620915830135, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing", "lineno": 46, "outcome": "failed", "keywords": ["test_screen_investment_passing", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00015744497068226337, "outcome": "passed"}, "call": {"duration": 0.00011142995208501816, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 60, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 60, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcdec8c0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_passing(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that passes criteria.\"\"\"\n        # Get a high-scoring investment from the sample data\n        high_scoring_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"overall\"] >= sample_ethical_criteria[\"min_overall_score\"] and\n                \"fossil_fuel_production\" not in investment[\"controversies\"]):\n                high_scoring_investment = investment\n                break\n    \n        assert high_scoring_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=high_scoring_investment[\"id\"],\n            name=high_scoring_investment[\"name\"],\n            sector=high_scoring_investment[\"sector\"],\n            industry=high_scoring_investment[\"industry\"],\n            market_cap=high_scoring_investment[\"market_cap\"],\n            price=high_scoring_investment[\"price\"],\n            esg_ratings=high_scoring_investment[\"esg_ratings\"],\n            carbon_footprint=high_scoring_investment[\"carbon_footprint\"],\n            renewable_energy_use=high_scoring_investment[\"renewable_energy_use\"],\n            diversity_score=high_scoring_investment[\"diversity_score\"],\n            board_independence=high_scoring_investment[\"board_independence\"],\n            controversies=high_scoring_investment[\"controversies\"],\n            positive_practices=high_scoring_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:60: TypeError"}, "teardown": {"duration": 0.00014191796071827412, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing", "lineno": 89, "outcome": "failed", "keywords": ["test_screen_investment_failing", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016189995221793652, "outcome": "passed"}, "call": {"duration": 0.00011197803542017937, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 106, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 106, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcdecd10>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_failing(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that fails criteria.\"\"\"\n        # Modify criteria to be more stringent\n        strict_criteria = dict(sample_ethical_criteria)\n        strict_criteria[\"min_overall_score\"] = 85  # Very high threshold\n    \n        # Find a lower-scoring investment\n        low_scoring_investment = None\n        for investment in sample_investments:\n            if investment[\"esg_ratings\"][\"overall\"] < 85:\n                low_scoring_investment = investment\n                break\n    \n        assert low_scoring_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=low_scoring_investment[\"id\"],\n            name=low_scoring_investment[\"name\"],\n            sector=low_scoring_investment[\"sector\"],\n            industry=low_scoring_investment[\"industry\"],\n            market_cap=low_scoring_investment[\"market_cap\"],\n            price=low_scoring_investment[\"price\"],\n            esg_ratings=low_scoring_investment[\"esg_ratings\"],\n            carbon_footprint=low_scoring_investment[\"carbon_footprint\"],\n            renewable_energy_use=low_scoring_investment[\"renewable_energy_use\"],\n            diversity_score=low_scoring_investment[\"diversity_score\"],\n            board_independence=low_scoring_investment[\"board_independence\"],\n            controversies=low_scoring_investment[\"controversies\"],\n            positive_practices=low_scoring_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:106: TypeError"}, "teardown": {"duration": 0.00014163507148623466, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions", "lineno": 133, "outcome": "failed", "keywords": ["test_screen_investment_with_exclusions", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016678893007338047, "outcome": "passed"}, "call": {"duration": 0.00011391285806894302, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 146, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 146, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcdecec0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_with_exclusions(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that matches exclusion criteria.\"\"\"\n        # Get an energy sector investment (which should be excluded)\n        energy_investment = None\n        for investment in sample_investments:\n            if investment[\"sector\"] == \"Energy\":\n                energy_investment = investment\n                break\n    \n        assert energy_investment is not None, \"No energy sector investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=energy_investment[\"id\"],\n            name=energy_investment[\"name\"],\n            sector=energy_investment[\"sector\"],\n            industry=energy_investment[\"industry\"],\n            market_cap=energy_investment[\"market_cap\"],\n            price=energy_investment[\"price\"],\n            esg_ratings=energy_investment[\"esg_ratings\"],\n            carbon_footprint=energy_investment[\"carbon_footprint\"],\n            renewable_energy_use=energy_investment[\"renewable_energy_use\"],\n            diversity_score=energy_investment[\"diversity_score\"],\n            board_independence=energy_investment[\"board_independence\"],\n            controversies=energy_investment[\"controversies\"],\n            positive_practices=energy_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:146: TypeError"}, "teardown": {"duration": 0.00014206604100763798, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions", "lineno": 178, "outcome": "failed", "keywords": ["test_screen_investment_with_inclusions", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016244594007730484, "outcome": "passed"}, "call": {"duration": 0.0001304401084780693, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 196, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 196, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcded070>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investment_with_inclusions(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening an investment that matches inclusion criteria.\"\"\"\n        # Find an investment with a positive practice that's in our inclusions\n        included_investment = None\n        for investment in sample_investments:\n            practices = [p.lower() for p in investment[\"positive_practices\"]]\n            if any(practice in [inc.lower() for inc in sample_ethical_criteria[\"inclusions\"]]\n                   for practice in practices):\n                included_investment = investment\n                break\n    \n        if included_investment is None:\n            # If none found, modify an investment to match\n            included_investment = sample_investments[0].copy()\n            included_investment[\"positive_practices\"] = [\"renewable_energy\"] + included_investment[\"positive_practices\"]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=included_investment[\"id\"],\n            name=included_investment[\"name\"],\n            sector=included_investment[\"sector\"],\n            industry=included_investment[\"industry\"],\n            market_cap=included_investment[\"market_cap\"],\n            price=included_investment[\"price\"],\n            esg_ratings=included_investment[\"esg_ratings\"],\n            carbon_footprint=included_investment[\"carbon_footprint\"],\n            renewable_energy_use=included_investment[\"renewable_energy_use\"],\n            diversity_score=included_investment[\"diversity_score\"],\n            board_independence=included_investment[\"board_independence\"],\n            controversies=included_investment[\"controversies\"],\n            positive_practices=included_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:196: TypeError"}, "teardown": {"duration": 0.00014391611330211163, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch", "lineno": 222, "outcome": "failed", "keywords": ["test_screen_investments_batch", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017035403288900852, "outcome": "passed"}, "call": {"duration": 0.0001160867977887392, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 228, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 228, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcded220>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_screen_investments_batch(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening multiple investments in batch.\"\"\"\n        # Convert sample data to Investment models\n        investments = []\n        for inv_data in sample_investments:\n>           investments.append(Investment(\n                id=inv_data[\"id\"],\n                name=inv_data[\"name\"],\n                sector=inv_data[\"sector\"],\n                industry=inv_data[\"industry\"],\n                market_cap=inv_data[\"market_cap\"],\n                price=inv_data[\"price\"],\n                esg_ratings=inv_data[\"esg_ratings\"],\n                carbon_footprint=inv_data[\"carbon_footprint\"],\n                renewable_energy_use=inv_data[\"renewable_energy_use\"],\n                diversity_score=inv_data[\"diversity_score\"],\n                board_independence=inv_data[\"board_independence\"],\n                controversies=inv_data[\"controversies\"],\n                positive_practices=inv_data[\"positive_practices\"]\n            ))\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:228: TypeError"}, "teardown": {"duration": 0.0001412311103194952, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria", "lineno": 258, "outcome": "failed", "keywords": ["test_evaluate_environmental_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00015834602527320385, "outcome": "passed"}, "call": {"duration": 0.00011138804256916046, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 272, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 272, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcded3d0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_evaluate_environmental_criteria(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test evaluating environmental criteria for an investment.\"\"\"\n        # Get an investment with good environmental metrics\n        env_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"environmental\"] >= 70 and\n                investment[\"renewable_energy_use\"] >= 0.7):\n                env_investment = investment\n                break\n    \n        assert env_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=env_investment[\"id\"],\n            name=env_investment[\"name\"],\n            sector=env_investment[\"sector\"],\n            industry=env_investment[\"industry\"],\n            market_cap=env_investment[\"market_cap\"],\n            price=env_investment[\"price\"],\n            esg_ratings=env_investment[\"esg_ratings\"],\n            carbon_footprint=env_investment[\"carbon_footprint\"],\n            renewable_energy_use=env_investment[\"renewable_energy_use\"],\n            diversity_score=env_investment[\"diversity_score\"],\n            board_independence=env_investment[\"board_independence\"],\n            controversies=env_investment[\"controversies\"],\n            positive_practices=env_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:272: TypeError"}, "teardown": {"duration": 0.0001506619155406952, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria", "lineno": 300, "outcome": "failed", "keywords": ["test_evaluate_social_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001624880824238062, "outcome": "passed"}, "call": {"duration": 0.00011440878733992577, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 314, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 314, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcded580>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_evaluate_social_criteria(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test evaluating social criteria for an investment.\"\"\"\n        # Get an investment with good social metrics\n        social_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"social\"] >= 70 and\n                investment[\"diversity_score\"] >= 0.7):\n                social_investment = investment\n                break\n    \n        assert social_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=social_investment[\"id\"],\n            name=social_investment[\"name\"],\n            sector=social_investment[\"sector\"],\n            industry=social_investment[\"industry\"],\n            market_cap=social_investment[\"market_cap\"],\n            price=social_investment[\"price\"],\n            esg_ratings=social_investment[\"esg_ratings\"],\n            carbon_footprint=social_investment[\"carbon_footprint\"],\n            renewable_energy_use=social_investment[\"renewable_energy_use\"],\n            diversity_score=social_investment[\"diversity_score\"],\n            board_independence=social_investment[\"board_independence\"],\n            controversies=social_investment[\"controversies\"],\n            positive_practices=social_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:314: TypeError"}, "teardown": {"duration": 0.0001409091055393219, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria", "lineno": 342, "outcome": "failed", "keywords": ["test_evaluate_governance_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016698893159627914, "outcome": "passed"}, "call": {"duration": 0.0001112429890781641, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 356, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 356, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcded730>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_evaluate_governance_criteria(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test evaluating governance criteria for an investment.\"\"\"\n        # Get an investment with good governance metrics\n        gov_investment = None\n        for investment in sample_investments:\n            if (investment[\"esg_ratings\"][\"governance\"] >= 70 and\n                investment[\"board_independence\"] >= 0.7):\n                gov_investment = investment\n                break\n    \n        assert gov_investment is not None, \"No suitable investment found in test data\"\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=gov_investment[\"id\"],\n            name=gov_investment[\"name\"],\n            sector=gov_investment[\"sector\"],\n            industry=gov_investment[\"industry\"],\n            market_cap=gov_investment[\"market_cap\"],\n            price=gov_investment[\"price\"],\n            esg_ratings=gov_investment[\"esg_ratings\"],\n            carbon_footprint=gov_investment[\"carbon_footprint\"],\n            renewable_energy_use=gov_investment[\"renewable_energy_use\"],\n            diversity_score=gov_investment[\"diversity_score\"],\n            board_independence=gov_investment[\"board_independence\"],\n            controversies=gov_investment[\"controversies\"],\n            positive_practices=gov_investment[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:356: TypeError"}, "teardown": {"duration": 0.00014731613919138908, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments", "lineno": 384, "outcome": "failed", "keywords": ["test_performance_for_many_investments", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00015849201008677483, "outcome": "passed"}, "call": {"duration": 0.00011655502021312714, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 397, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py", "lineno": 397, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_ethical_screening.test_screening.TestEthicalScreening object at 0x7ff8dcded8e0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_performance_for_many_investments(self, sample_investments, sample_ethical_criteria):\n        \"\"\"Test screening performance for a large number of investments.\"\"\"\n        # Create many investments by duplicating sample investments\n        num_investments = 200\n        investments = []\n    \n        for i in range(num_investments):\n            # Use modulo to cycle through sample investments\n            sample_idx = i % len(sample_investments)\n            sample_inv = sample_investments[sample_idx]\n    \n            # Create a new Investment with a unique ID\n>           investment = Investment(\n                id=f\"{sample_inv['id']}-{i}\",\n                name=sample_inv[\"name\"],\n                sector=sample_inv[\"sector\"],\n                industry=sample_inv[\"industry\"],\n                market_cap=sample_inv[\"market_cap\"],\n                price=sample_inv[\"price\"],\n                esg_ratings=sample_inv[\"esg_ratings\"],\n                carbon_footprint=sample_inv[\"carbon_footprint\"],\n                renewable_energy_use=sample_inv[\"renewable_energy_use\"],\n                diversity_score=sample_inv[\"diversity_score\"],\n                board_independence=sample_inv[\"board_independence\"],\n                controversies=sample_inv[\"controversies\"],\n                positive_practices=sample_inv[\"positive_practices\"]\n            )\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_ethical_screening/test_screening.py:397: TypeError"}, "teardown": {"duration": 0.0001439198385924101, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics", "lineno": 20, "outcome": "passed", "keywords": ["test_create_default_impact_metrics", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00028521311469376087, "outcome": "passed"}, "call": {"duration": 0.00011373916640877724, "outcome": "passed"}, "teardown": {"duration": 8.111284114420414e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine", "lineno": 35, "outcome": "passed", "keywords": ["test_initialize_engine", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 8.106906898319721e-05, "outcome": "passed"}, "call": {"duration": 9.946688078343868e-05, "outcome": "passed"}, "teardown": {"duration": 9.308615699410439e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact", "lineno": 48, "outcome": "failed", "keywords": ["test_measure_investment_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012479210272431374, "outcome": "passed"}, "call": {"duration": 0.00010953214950859547, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 55, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 55, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7ff8dcded610>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_measure_investment_impact(self, sample_investments):\n        \"\"\"Test measuring the impact of a single investment.\"\"\"\n        # Choose an investment from the sample data\n        inv_data = sample_investments[0]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py:55: TypeError"}, "teardown": {"duration": 0.00013575819320976734, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data", "lineno": 89, "outcome": "failed", "keywords": ["test_measure_investment_impact_with_additional_data", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00014935992658138275, "outcome": "passed"}, "call": {"duration": 0.00011386093683540821, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 96, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 96, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7ff8dcded1c0>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_measure_investment_impact_with_additional_data(self, sample_investments):\n        \"\"\"Test measuring the impact of an investment with additional impact data.\"\"\"\n        # Choose an investment from the sample data\n        inv_data = sample_investments[0]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py:96: TypeError"}, "teardown": {"duration": 0.00013303104788064957, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact", "lineno": 130, "outcome": "failed", "keywords": ["test_measure_portfolio_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001680480781942606, "outcome": "passed"}, "call": {"duration": 0.00040767109021544456, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 145, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 145, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7ff8dcdecda0>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_measure_portfolio_impact(self, sample_portfolio, sample_investments):\n        \"\"\"Test measuring the impact of a portfolio of investments.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": datetime.strptime(holding_data[\"purchase_date\"], \"%Y-%m-%d\").date(),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=datetime.strptime(sample_portfolio[\"creation_date\"], \"%Y-%m-%d\").date(),\n            last_updated=datetime.strptime(sample_portfolio[\"last_updated\"], \"%Y-%m-%d\").date()\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py:145: TypeError"}, "teardown": {"duration": 0.00014316802844405174, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact", "lineno": 205, "outcome": "passed", "keywords": ["test_analyze_historical_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001901639625430107, "outcome": "passed"}, "call": {"duration": 0.0009824398439377546, "outcome": "passed"}, "teardown": {"duration": 0.00011160294525325298, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation", "lineno": 244, "outcome": "passed", "keywords": ["test_calculate_financial_impact_correlation", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018329918384552002, "outcome": "passed"}, "call": {"duration": 0.002570826094597578, "outcome": "passed"}, "teardown": {"duration": 0.00011535407975316048, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric", "lineno": 285, "outcome": "passed", "keywords": ["test_normalize_metric", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.026494808495045e-05, "outcome": "passed"}, "call": {"duration": 0.00012904219329357147, "outcome": "passed"}, "teardown": {"duration": 7.913191802799702e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark", "lineno": 307, "outcome": "passed", "keywords": ["test_compare_to_benchmark", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 8.729984983801842e-05, "outcome": "passed"}, "call": {"duration": 0.00010241195559501648, "outcome": "passed"}, "teardown": {"duration": 7.453886792063713e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data", "lineno": 332, "outcome": "passed", "keywords": ["test_performance_with_historical_data", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016352790407836437, "outcome": "passed"}, "call": {"duration": 0.0025855719577521086, "outcome": "passed", "stdout": "Analyzed 5 companies with 5+ years of data in 0.00 seconds\n"}, "teardown": {"duration": 0.0001234789378941059, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds", "lineno": 369, "outcome": "failed", "keywords": ["test_sustainable_investment_thresholds", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00015507591888308525, "outcome": "passed"}, "call": {"duration": 0.00013377401046454906, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 379, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py", "lineno": 379, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact.TestImpactMeasurement object at 0x7ff8dcdefd40>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_sustainable_investment_thresholds(self, sample_investments):\n        \"\"\"Test identifying investments that meet sustainable investment thresholds.\"\"\"\n        # Initialize engine with default metrics\n        metrics = create_default_impact_metrics()\n        engine = ImpactMeasurementEngine(metrics)\n    \n        # Convert sample investments to Investment models\n        investments = []\n        for inv_data in sample_investments:\n>           investments.append(Investment(\n                id=inv_data[\"id\"],\n                name=inv_data[\"name\"],\n                sector=inv_data[\"sector\"],\n                industry=inv_data[\"industry\"],\n                market_cap=inv_data[\"market_cap\"],\n                price=inv_data[\"price\"],\n                esg_ratings=inv_data[\"esg_ratings\"],\n                carbon_footprint=inv_data[\"carbon_footprint\"],\n                renewable_energy_use=inv_data[\"renewable_energy_use\"],\n                diversity_score=inv_data[\"diversity_score\"],\n                board_independence=inv_data[\"board_independence\"],\n                controversies=inv_data[\"controversies\"],\n                positive_practices=inv_data[\"positive_practices\"]\n            ))\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact.py:379: TypeError"}, "teardown": {"duration": 0.00013505201786756516, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis", "lineno": 17, "outcome": "failed", "keywords": ["test_sdg_alignment_analysis", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001413568388670683, "outcome": "passed"}, "call": {"duration": 0.00011271797120571136, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py", "lineno": 24, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py", "lineno": 24, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact_attribution.TestImpactAttribution object at 0x7ff8dce18290>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_sdg_alignment_analysis(self, sample_investments):\n        \"\"\"Test analyzing investment alignment with UN Sustainable Development Goals.\"\"\"\n        # Choose an investment from the sample data\n        inv_data = sample_investments[0]\n    \n        # Convert to Investment model\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py:24: TypeError"}, "teardown": {"duration": 0.00013356516137719154, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar", "lineno": 75, "outcome": "failed", "keywords": ["test_impact_attribution_by_dollar", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016710697673261166, "outcome": "passed"}, "call": {"duration": 0.00011791987344622612, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py", "lineno": 90, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py", "lineno": 90, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact_attribution.TestImpactAttribution object at 0x7ff8dce183b0>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_impact_attribution_by_dollar(self, sample_portfolio, sample_investments):\n        \"\"\"Test attributing impact metrics per dollar invested.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py:90: TypeError"}, "teardown": {"duration": 0.0001388750970363617, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis", "lineno": 164, "outcome": "failed", "keywords": ["test_comparative_impact_analysis", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021931016817688942, "outcome": "passed"}, "call": {"duration": 0.00011703604832291603, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py", "lineno": 170, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py", "lineno": 170, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_impact_measurement.test_impact_attribution.TestImpactAttribution object at 0x7ff8dce18560>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_impact_data = {'AAPL': [{'carbon_emissions': 6274147, 'community_investment': 10000000, 'jobs_created': 1000, 'renewable_energy_perc... 'community_investment': 14000000, 'jobs_created': 1200, 'renewable_energy_percentage': 0.5854085572957063, ...}], ...}\n\n    def test_comparative_impact_analysis(self, sample_investments, sample_impact_data):\n        \"\"\"Test comparing investment impact against industry benchmarks.\"\"\"\n        # Convert sample investments to Investment models\n        investments = []\n        for inv_data in sample_investments:\n>           investments.append(Investment(\n                id=inv_data[\"id\"],\n                name=inv_data[\"name\"],\n                sector=inv_data[\"sector\"],\n                industry=inv_data[\"industry\"],\n                market_cap=inv_data[\"market_cap\"],\n                price=inv_data[\"price\"],\n                esg_ratings=inv_data[\"esg_ratings\"],\n                carbon_footprint=inv_data[\"carbon_footprint\"],\n                renewable_energy_use=inv_data[\"renewable_energy_use\"],\n                diversity_score=inv_data[\"diversity_score\"],\n                board_independence=inv_data[\"board_independence\"],\n                controversies=inv_data[\"controversies\"],\n                positive_practices=inv_data[\"positive_practices\"]\n            ))\nE           TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_impact_measurement/test_impact_attribution.py:170: TypeError"}, "teardown": {"duration": 0.000140415970236063, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis", "lineno": 18, "outcome": "failed", "keywords": ["test_esg_theme_concentration_analysis", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00036057992838323116, "outcome": "passed"}, "call": {"duration": 0.00012078392319381237, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 33, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 33, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_advanced_analysis.TestAdvancedPortfolioAnalysis object at 0x7ff8dce19250>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_esg_theme_concentration_analysis(self, sample_portfolio, sample_investments):\n        \"\"\"Test analyzing ESG theme concentration in a portfolio.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py:33: TypeError"}, "teardown": {"duration": 0.0001448530238121748, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance", "lineno": 89, "outcome": "failed", "keywords": ["test_compare_portfolios_esg_performance", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001627227757126093, "outcome": "passed"}, "call": {"duration": 0.00012044212780892849, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 105, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 105, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_advanced_analysis.TestAdvancedPortfolioAnalysis object at 0x7ff8dce19670>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_compare_portfolios_esg_performance(self, sample_portfolio, sample_investments):\n        \"\"\"Test comparing ESG performance between portfolios.\"\"\"\n        # Create two portfolios with different holdings\n        # Portfolio 1 - Original sample portfolio\n        holdings1 = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings1.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio1 = Portfolio(\n            portfolio_id=\"esg-focused-portfolio\",\n            name=\"ESG Focused Portfolio\",\n            holdings=holdings1,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py:105: TypeError"}, "teardown": {"duration": 0.00014919298700988293, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance", "lineno": 188, "outcome": "failed", "keywords": ["test_risk_adjusted_esg_performance", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001592400949448347, "outcome": "passed"}, "call": {"duration": 0.000117552001029253, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 203, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py", "lineno": 203, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_advanced_analysis.TestAdvancedPortfolioAnalysis object at 0x7ff8dce19340>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_risk_adjusted_esg_performance(self, sample_portfolio, sample_investments):\n        \"\"\"Test analyzing risk-adjusted ESG performance metrics.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_advanced_analysis.py:203: TypeError"}, "teardown": {"duration": 0.00014190818183124065, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system", "lineno": 21, "outcome": "failed", "keywords": ["test_initialize_analysis_system", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.851600043475628e-05, "outcome": "passed"}, "call": {"duration": 0.00011742487549781799, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/ethical_finance/portfolio_analysis/analysis.py", "lineno": 92, "message": "TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 25, "message": ""}, {"path": "ethical_finance/portfolio_analysis/analysis.py", "lineno": 92, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1a3f0>\n\n    def test_initialize_analysis_system(self):\n        \"\"\"Test initializing the portfolio analysis system.\"\"\"\n        # Initialize without ethical screener\n>       analysis_system = PortfolioAnalysisSystem()\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ethical_finance.portfolio_analysis.analysis.PortfolioAnalysisSystem object at 0x7ff8dcc06420>\nethical_screener = None\n\n    def __init__(self, ethical_screener: Optional[EthicalScreener] = None):\n        \"\"\"Initialize with optional ethical screener.\n    \n        Args:\n            ethical_screener: Optional EthicalScreener for ethical alignment analysis\n        \"\"\"\n>       super().__init__()\nE       TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'\n\nethical_finance/portfolio_analysis/analysis.py:92: TypeError"}, "teardown": {"duration": 0.00012055691331624985, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition", "lineno": 33, "outcome": "failed", "keywords": ["test_analyze_portfolio_composition", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016103987582027912, "outcome": "passed"}, "call": {"duration": 0.00011682906188070774, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 48, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 48, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1a4e0>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_analyze_portfolio_composition(self, sample_portfolio, sample_investments):\n        \"\"\"Test analyzing portfolio composition.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:48: TypeError"}, "teardown": {"duration": 0.0001389209646731615, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening", "lineno": 96, "outcome": "failed", "keywords": ["test_analyze_portfolio_composition_with_screening", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017905980348587036, "outcome": "passed"}, "call": {"duration": 0.00012737582437694073, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 111, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 111, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1a690>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\nsample_ethical_criteria = {'criteria_id': 'test-criteria', 'environmental': {'exclude_fossil_fuel_production': True, 'max_carbon_footprint': 500...xcessive_executive_compensation': True, 'min_board_independence': 0.7, 'min_governance_score': 70, 'weight': 0.3}, ...}\n\n    def test_analyze_portfolio_composition_with_screening(self, sample_portfolio, sample_investments, sample_ethical_criteria):\n        \"\"\"Test analyzing portfolio composition with ethical screening results.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:111: TypeError"}, "teardown": {"duration": 0.00014672311954200268, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification", "lineno": 175, "outcome": "failed", "keywords": ["test_assess_diversification", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001631740015000105, "outcome": "passed"}, "call": {"duration": 0.00011703395284712315, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 190, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 190, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1a870>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_assess_diversification(self, sample_portfolio, sample_investments):\n        \"\"\"Test assessing portfolio diversification.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:190: TypeError"}, "teardown": {"duration": 0.0001506300177425146, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints", "lineno": 239, "outcome": "failed", "keywords": ["test_assess_diversification_with_constraints", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00015821587294340134, "outcome": "passed"}, "call": {"duration": 0.00011570611968636513, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 254, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 254, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1aa20>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_assess_diversification_with_constraints(self, sample_portfolio, sample_investments):\n        \"\"\"Test assessing portfolio diversification with ethical constraints.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:254: TypeError"}, "teardown": {"duration": 0.00014268211089074612, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio", "lineno": 306, "outcome": "failed", "keywords": ["test_optimize_portfolio", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017367815598845482, "outcome": "passed"}, "call": {"duration": 0.00011566793546080589, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 321, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 321, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1a7e0>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_optimize_portfolio(self, sample_portfolio, sample_investments):\n        \"\"\"Test optimizing a portfolio for returns and ethical alignment.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:321: TypeError"}, "teardown": {"duration": 0.00014088605530560017, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme", "lineno": 402, "outcome": "failed", "keywords": ["test_map_practice_to_theme", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.160116314888e-05, "outcome": "passed"}, "call": {"duration": 0.00012943381443619728, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/ethical_finance/portfolio_analysis/analysis.py", "lineno": 92, "message": "TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 405, "message": ""}, {"path": "ethical_finance/portfolio_analysis/analysis.py", "lineno": 92, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce194f0>\n\n    def test_map_practice_to_theme(self):\n        \"\"\"Test mapping a company's positive practice to an ESG theme.\"\"\"\n>       analysis_system = PortfolioAnalysisSystem()\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:405: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ethical_finance.portfolio_analysis.analysis.PortfolioAnalysisSystem object at 0x7ff8dcc9ade0>\nethical_screener = None\n\n    def __init__(self, ethical_screener: Optional[EthicalScreener] = None):\n        \"\"\"Initialize with optional ethical screener.\n    \n        Args:\n            ethical_screener: Optional EthicalScreener for ethical alignment analysis\n        \"\"\"\n>       super().__init__()\nE       TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'\n\nethical_finance/portfolio_analysis/analysis.py:92: TypeError"}, "teardown": {"duration": 0.0001204279251396656, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints", "lineno": 417, "outcome": "failed", "keywords": ["test_sector_conflicts_with_constraints", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.091291576623917e-05, "outcome": "passed"}, "call": {"duration": 0.00011418713256716728, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/ethical_finance/portfolio_analysis/analysis.py", "lineno": 92, "message": "TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 420, "message": ""}, {"path": "ethical_finance/portfolio_analysis/analysis.py", "lineno": 92, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce19fa0>\n\n    def test_sector_conflicts_with_constraints(self):\n        \"\"\"Test checking if reducing a sector would conflict with ethical constraints.\"\"\"\n>       analysis_system = PortfolioAnalysisSystem()\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:420: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <ethical_finance.portfolio_analysis.analysis.PortfolioAnalysisSystem object at 0x7ff8dcefbf80>\nethical_screener = None\n\n    def __init__(self, ethical_screener: Optional[EthicalScreener] = None):\n        \"\"\"Initialize with optional ethical screener.\n    \n        Args:\n            ethical_screener: Optional EthicalScreener for ethical alignment analysis\n        \"\"\"\n>       super().__init__()\nE       TypeError: PortfolioAnalyzer.__init__() missing 1 required positional argument: 'investments'\n\nethical_finance/portfolio_analysis/analysis.py:92: TypeError"}, "teardown": {"duration": 0.0001291919033974409, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit", "lineno": 436, "outcome": "failed", "keywords": ["test_calculate_diversification_benefit", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001386469230055809, "outcome": "passed"}, "call": {"duration": 0.00011351611465215683, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 441, "message": "TypeError: Investment.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 441, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1ac90>\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_calculate_diversification_benefit(self, sample_investments):\n        \"\"\"Test calculating the diversification benefit of adding an investment.\"\"\"\n        # Convert a sample investment to Investment model\n        inv_data = sample_investments[0]\n>       investment = Investment(\n            id=inv_data[\"id\"],\n            name=inv_data[\"name\"],\n            sector=inv_data[\"sector\"],\n            industry=inv_data[\"industry\"],\n            market_cap=inv_data[\"market_cap\"],\n            price=inv_data[\"price\"],\n            esg_ratings=inv_data[\"esg_ratings\"],\n            carbon_footprint=inv_data[\"carbon_footprint\"],\n            renewable_energy_use=inv_data[\"renewable_energy_use\"],\n            diversity_score=inv_data[\"diversity_score\"],\n            board_independence=inv_data[\"board_independence\"],\n            controversies=inv_data[\"controversies\"],\n            positive_practices=inv_data[\"positive_practices\"]\n        )\nE       TypeError: Investment.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:441: TypeError"}, "teardown": {"duration": 0.00013315584510564804, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio", "lineno": 480, "outcome": "failed", "keywords": ["test_performance_with_large_portfolio", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001572989858686924, "outcome": "passed"}, "call": {"duration": 0.00023340294137597084, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 507, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py", "lineno": 507, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_portfolio_analysis.test_analysis.TestPortfolioAnalysis object at 0x7ff8dce1ae10>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_investments = [{'board_independence': 0.8, 'carbon_footprint': 22600000, 'controversies': ['labor_practices', 'tax_avoidance'], 'div...0.85, 'carbon_footprint': 5200000, 'controversies': ['animal_testing', 'deforestation'], 'diversity_score': 0.79, ...}]\n\n    def test_performance_with_large_portfolio(self, sample_portfolio, sample_investments):\n        \"\"\"Test performance with a portfolio of 200+ holdings.\"\"\"\n        # Create a large portfolio by duplicating sample holdings\n        large_holdings = []\n        num_holdings = 200\n    \n        # Use sample holdings as templates\n        for i in range(num_holdings):\n            # Use modulo to cycle through sample holdings\n            sample_idx = i % len(sample_portfolio[\"holdings\"])\n            holding_data = sample_portfolio[\"holdings\"][sample_idx]\n    \n            # Create a new holding with a unique ID\n            large_holdings.append({\n                \"investment_id\": f\"{holding_data['investment_id']}-{i}\",\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n        # Calculate total value\n        total_value = sum(h[\"current_value\"] for h in large_holdings)\n    \n        # Create large portfolio\n>       large_portfolio = Portfolio(\n            portfolio_id=\"large-test-portfolio\",\n            name=\"Large Test Portfolio\",\n            holdings=large_holdings,\n            total_value=total_value,\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_portfolio_analysis/test_analysis.py:507: TypeError"}, "teardown": {"duration": 0.00015602586790919304, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker", "lineno": 19, "outcome": "passed", "keywords": ["test_initialize_tracker", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00029987283051013947, "outcome": "passed"}, "call": {"duration": 0.00010567414574325085, "outcome": "passed"}, "teardown": {"duration": 7.907813414931297e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions", "lineno": 41, "outcome": "passed", "keywords": ["test_analyze_company_voting_record_with_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012156995944678783, "outcome": "passed"}, "call": {"duration": 0.00016055302694439888, "outcome": "passed"}, "teardown": {"duration": 9.039998985826969e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions", "lineno": 84, "outcome": "passed", "keywords": ["test_analyze_company_voting_record_no_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001160989049822092, "outcome": "passed"}, "call": {"duration": 0.0001160989049822092, "outcome": "passed"}, "teardown": {"duration": 8.978205733001232e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns", "lineno": 123, "outcome": "passed", "keywords": ["test_analyze_issue_voting_patterns", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011928402818739414, "outcome": "passed"}, "call": {"duration": 0.00013626995496451855, "outcome": "passed"}, "teardown": {"duration": 8.768984116613865e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions", "lineno": 162, "outcome": "passed", "keywords": ["test_analyze_issue_voting_patterns_no_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011381111107766628, "outcome": "passed"}, "call": {"duration": 0.00011871801689267159, "outcome": "passed"}, "teardown": {"duration": 8.641206659376621e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations", "lineno": 200, "outcome": "passed", "keywords": ["test_generate_voting_recommendations", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011121993884444237, "outcome": "passed"}, "call": {"duration": 0.00018484611064195633, "outcome": "passed"}, "teardown": {"duration": 9.546196088194847e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities", "lineno": 268, "outcome": "failed", "keywords": ["test_identify_engagement_opportunities", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00014225905761122704, "outcome": "passed"}, "call": {"duration": 0.00011129514314234257, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_shareholder_advocacy/test_advocacy.py", "lineno": 283, "message": "TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_shareholder_advocacy/test_advocacy.py", "lineno": 283, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_shareholder_advocacy.test_advocacy.TestShareholderAdvocacy object at 0x7ff8dcc58530>\nsample_portfolio = {'cash_balance': 5000.0, 'creation_date': '2022-05-01', 'holdings': [{'current_price': 175.5, 'current_value': 8775.0,...current_value': 4374.0, 'investment_id': 'PG', 'purchase_date': '2022-09-05', ...}], 'last_updated': '2023-05-30', ...}\nsample_shareholder_resolutions = [{'abstentions': 0.03, 'category': 'social', 'company_id': 'AAPL', 'company_recommendation': 'against', ...}, {'absten...nst', ...}, {'abstentions': 0.0, 'category': 'social', 'company_id': 'TSLA', 'company_recommendation': 'against', ...}]\n\n    def test_identify_engagement_opportunities(self, sample_portfolio, sample_shareholder_resolutions):\n        \"\"\"Test identifying opportunities for shareholder engagement.\"\"\"\n        # Convert sample portfolio to Portfolio model\n        holdings = []\n        for holding_data in sample_portfolio[\"holdings\"]:\n            holdings.append({\n                \"investment_id\": holding_data[\"investment_id\"],\n                \"shares\": holding_data[\"shares\"],\n                \"purchase_price\": holding_data[\"purchase_price\"],\n                \"purchase_date\": date.fromisoformat(holding_data[\"purchase_date\"]),\n                \"current_price\": holding_data[\"current_price\"],\n                \"current_value\": holding_data[\"current_value\"]\n            })\n    \n>       portfolio = Portfolio(\n            portfolio_id=sample_portfolio[\"portfolio_id\"],\n            name=sample_portfolio[\"name\"],\n            holdings=holdings,\n            total_value=sample_portfolio[\"total_value\"],\n            cash_balance=sample_portfolio[\"cash_balance\"],\n            creation_date=date.fromisoformat(sample_portfolio[\"creation_date\"]),\n            last_updated=date.fromisoformat(sample_portfolio[\"last_updated\"])\n        )\nE       TypeError: Portfolio.__init__() got an unexpected keyword argument 'portfolio_id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_shareholder_advocacy/test_advocacy.py:283: TypeError"}, "teardown": {"duration": 0.00014222599565982819, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment", "lineno": 331, "outcome": "passed", "keywords": ["test_calculate_value_alignment", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00013663806021213531, "outcome": "passed"}, "call": {"duration": 0.00010882597416639328, "outcome": "passed"}, "teardown": {"duration": 9.15380660444498e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions", "lineno": 381, "outcome": "passed", "keywords": ["test_find_similar_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011870590969920158, "outcome": "passed"}, "call": {"duration": 0.0001222682185471058, "outcome": "passed"}, "teardown": {"duration": 8.984399028122425e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends", "lineno": 423, "outcome": "passed", "keywords": ["test_analyze_trends", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012020813301205635, "outcome": "passed"}, "call": {"duration": 0.00013722386211156845, "outcome": "passed"}, "teardown": {"duration": 9.22179315239191e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories", "lineno": 21, "outcome": "passed", "keywords": ["test_create_default_value_categories", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002938089892268181, "outcome": "passed"}, "call": {"duration": 0.00012108008377254009, "outcome": "passed"}, "teardown": {"duration": 7.499987259507179e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system", "lineno": 42, "outcome": "passed", "keywords": ["test_initialize_budgeting_system", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 7.80241098254919e-05, "outcome": "passed"}, "call": {"duration": 0.00011906400322914124, "outcome": "passed"}, "teardown": {"duration": 7.924390956759453e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags", "lineno": 56, "outcome": "failed", "keywords": ["test_categorize_transaction_with_tags", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012357602827250957, "outcome": "passed"}, "call": {"duration": 0.00010873307473957539, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 69, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 69, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc5b380>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_categorize_transaction_with_tags(self, sample_personal_transactions):\n        \"\"\"Test categorizing a transaction with explicit tags.\"\"\"\n        # Find a transaction with tags\n        tx_with_tags = None\n        for tx_data in sample_personal_transactions:\n            if tx_data[\"tags\"]:\n                tx_with_tags = tx_data\n                break\n    \n        assert tx_with_tags is not None, \"No transaction with tags found in test data\"\n    \n        # Convert to Transaction model\n>       transaction = Transaction(\n            id=tx_with_tags[\"id\"],\n            date=date.fromisoformat(tx_with_tags[\"date\"]),\n            amount=tx_with_tags[\"amount\"],\n            vendor=tx_with_tags[\"vendor\"],\n            category=tx_with_tags[\"category\"],\n            description=tx_with_tags[\"description\"],\n            tags=tx_with_tags[\"tags\"]\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:69: TypeError"}, "teardown": {"duration": 0.00014727609232068062, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags", "lineno": 99, "outcome": "failed", "keywords": ["test_categorize_transaction_without_tags", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001422350760549307, "outcome": "passed"}, "call": {"duration": 0.00011543603613972664, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 107, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 107, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc588f0>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_categorize_transaction_without_tags(self, sample_personal_transactions):\n        \"\"\"Test categorizing a transaction without explicit tags.\"\"\"\n        # Create a transaction without tags\n        tx_data = sample_personal_transactions[0].copy()\n        tx_data[\"tags\"] = []\n    \n        # Convert to Transaction model\n>       transaction = Transaction(\n            id=tx_data[\"id\"],\n            date=date.fromisoformat(tx_data[\"date\"]),\n            amount=tx_data[\"amount\"],\n            vendor=tx_data[\"vendor\"],\n            category=tx_data[\"category\"],\n            description=tx_data[\"description\"],\n            tags=tx_data[\"tags\"]\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:107: TypeError"}, "teardown": {"duration": 0.00013220985420048237, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions", "lineno": 132, "outcome": "failed", "keywords": ["test_batch_categorize_transactions", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001346308272331953, "outcome": "passed"}, "call": {"duration": 0.0001136620994657278, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 138, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 138, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc5b4d0>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_batch_categorize_transactions(self, sample_personal_transactions):\n        \"\"\"Test categorizing multiple transactions in batch.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:138: TypeError"}, "teardown": {"duration": 0.00014096684753894806, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns", "lineno": 163, "outcome": "failed", "keywords": ["test_analyze_spending_patterns", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001347539946436882, "outcome": "passed"}, "call": {"duration": 0.00011093518696725368, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 169, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 169, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc5b680>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_analyze_spending_patterns(self, sample_personal_transactions):\n        \"\"\"Test analyzing spending patterns against value alignment.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:169: TypeError"}, "teardown": {"duration": 0.0001321421004831791, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter", "lineno": 209, "outcome": "failed", "keywords": ["test_analyze_spending_patterns_with_date_filter", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00014442787505686283, "outcome": "passed"}, "call": {"duration": 0.00011379900388419628, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 215, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 215, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc98050>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_analyze_spending_patterns_with_date_filter(self, sample_personal_transactions):\n        \"\"\"Test analyzing spending patterns with date filtering.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:215: TypeError"}, "teardown": {"duration": 0.00013193301856517792, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors", "lineno": 248, "outcome": "passed", "keywords": ["test_suggest_alternative_vendors", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.264401160180569e-05, "outcome": "passed"}, "call": {"duration": 0.0001335891429334879, "outcome": "passed"}, "teardown": {"duration": 7.884996011853218e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction", "lineno": 280, "outcome": "failed", "keywords": ["test_suggest_categories_from_transaction", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012224097736179829, "outcome": "passed"}, "call": {"duration": 0.0001082071103155613, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 285, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 285, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc98410>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_suggest_categories_from_transaction(self, sample_personal_transactions):\n        \"\"\"Test suggesting categories based on transaction details.\"\"\"\n        # Convert a sample transaction to Transaction model\n        tx_data = sample_personal_transactions[0]\n>       transaction = Transaction(\n            id=tx_data[\"id\"],\n            date=date.fromisoformat(tx_data[\"date\"]),\n            amount=tx_data[\"amount\"],\n            vendor=tx_data[\"vendor\"],\n            category=tx_data[\"category\"],\n            description=tx_data[\"description\"],\n            tags=[]  # Explicitly remove tags to test suggestion logic\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:285: TypeError"}, "teardown": {"duration": 0.00013333582319319248, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment", "lineno": 309, "outcome": "passed", "keywords": ["test_find_categories_by_alignment", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.08218789845705e-05, "outcome": "passed"}, "call": {"duration": 0.0001311018131673336, "outcome": "passed"}, "teardown": {"duration": 7.781898602843285e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions", "lineno": 336, "outcome": "failed", "keywords": ["test_performance_categorizing_many_transactions", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012705102562904358, "outcome": "passed"}, "call": {"duration": 0.00011119013652205467, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 349, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 349, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc98740>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_performance_categorizing_many_transactions(self, sample_personal_transactions):\n        \"\"\"Test performance categorizing many transactions.\"\"\"\n        # Create a large number of transactions\n        num_transactions = 1000\n        transactions = []\n    \n        for i in range(num_transactions):\n            # Use modulo to cycle through sample transactions\n            sample_idx = i % len(sample_personal_transactions)\n            tx_data = sample_personal_transactions[sample_idx]\n    \n            # Create a new transaction with a unique ID\n>           transactions.append(Transaction(\n                id=f\"{tx_data['id']}-{i}\",\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:349: TypeError"}, "teardown": {"duration": 0.00014424207620322704, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values", "lineno": 382, "outcome": "failed", "keywords": ["test_categorize_transaction_with_conflicting_values", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 9.367614984512329e-05, "outcome": "passed"}, "call": {"duration": 0.00015084701590240002, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 391, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py", "lineno": 391, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_budgeting.TestValuesBudgeting object at 0x7ff8dcc988f0>\n\n    def test_categorize_transaction_with_conflicting_values(self):\n        \"\"\"Test categorizing a transaction with conflicting value tags.\"\"\"\n        # Create a budget system with default categories\n        categories = create_default_value_categories()\n        budgeting = ValuesAlignedBudgeting(categories)\n    \n        # Create a transaction with conflicting value tags\n        # (both aligned and misaligned tags)\n>       transaction = Transaction(\n            id=\"conflict1\",\n            date=date.today(),\n            amount=85.75,\n            vendor=\"Mixed Values Store\",\n            category=\"Shopping\",\n            description=\"Purchase with both aligned and misaligned attributes\",\n            tags=[\"organic\", \"sustainable\", \"plastic_packaging\", \"fossil_fuel\"]\n        )\nE       TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_budgeting.py:391: TypeError"}, "teardown": {"duration": 0.0001195098739117384, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories", "lineno": 20, "outcome": "failed", "keywords": ["test_values_consistency_across_spending_categories", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001368930097669363, "outcome": "passed"}, "call": {"duration": 0.0001124190166592598, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py", "lineno": 26, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py", "lineno": 26, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_personal_values_alignment.TestPersonalValuesAlignment object at 0x7ff8dcc98e30>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_values_consistency_across_spending_categories(self, sample_personal_transactions):\n        \"\"\"Test analyzing values consistency across different spending categories.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n>           transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py:26: TypeError"}, "teardown": {"duration": 0.00013445899821817875, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time", "lineno": 74, "outcome": "failed", "keywords": ["test_values_drift_over_time", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00013725296594202518, "outcome": "passed"}, "call": {"duration": 0.00012097181752324104, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py", "lineno": 108, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py", "lineno": 108, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_personal_values_alignment.TestPersonalValuesAlignment object at 0x7ff8dcc98f20>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_values_drift_over_time(self, sample_personal_transactions):\n        \"\"\"Test detecting values drift in spending patterns over time.\"\"\"\n        # Convert sample data to Transaction models\n        transactions = []\n        for tx_data in sample_personal_transactions:\n            # Parse the existing date\n            tx_date = date.fromisoformat(tx_data[\"date\"])\n    \n            # Create multiple copies of each transaction spanning different months\n            for i in range(6):  # 6 months of data\n                # Create a copy with adjusted date going back i months\n                new_date = tx_date - timedelta(days=30 * i)\n    \n                # Add random variation to amounts\n                amount_variation = tx_data[\"amount\"] * (0.8 + (random.random() * 0.4))  # 80% to 120% variation\n    \n                # For transactions 3+ months ago, reduce the number of ethical tags\n                # to simulate a drift in values over time\n                tags = tx_data[\"tags\"].copy()\n                if i >= 3 and \"sustainable\" in tags:\n                    tags.remove(\"sustainable\")\n                if i >= 4 and \"organic\" in tags:\n                    tags.remove(\"organic\")\n                if i >= 5 and \"local\" in tags:\n                    tags.remove(\"local\")\n    \n                # Add non-aligned tags to older transactions\n                if i >= 3:\n                    if random.random() > 0.7 and \"fossil_fuel\" not in tags:\n                        tags.append(\"fossil_fuel\")\n                    if random.random() > 0.8 and \"chain_business\" not in tags:\n                        tags.append(\"chain_business\")\n    \n>               transactions.append(Transaction(\n                    id=f\"{tx_data['id']}-{i}\",\n                    date=new_date,\n                    amount=amount_variation,\n                    vendor=tx_data[\"vendor\"],\n                    category=tx_data[\"category\"],\n                    description=tx_data[\"description\"],\n                    tags=tags\n                ))\nE               TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py:108: TypeError"}, "teardown": {"duration": 0.00014561298303306103, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis", "lineno": 163, "outcome": "failed", "keywords": ["test_vendor_value_profile_analysis", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00013591093011200428, "outcome": "passed"}, "call": {"duration": 0.00011339806951582432, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py", "lineno": 169, "message": "TypeError: Transaction.__init__() got an unexpected keyword argument 'id'"}, "traceback": [{"path": "../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py", "lineno": 169, "message": "TypeError"}], "longrepr": "self = <tests.socially_responsible_investor.test_values_budgeting.test_personal_values_alignment.TestPersonalValuesAlignment object at 0x7ff8dcc99100>\nsample_personal_transactions = [{'amount': 85.5, 'category': 'Groceries', 'date': '2023-05-10', 'description': 'Weekly grocery shopping', ...}, {'amo...', ...}, {'amount': 250.0, 'category': 'Donations', 'date': '2023-05-25', 'description': 'Monthly donation', ...}, ...]\n\n    def test_vendor_value_profile_analysis(self, sample_personal_transactions):\n        \"\"\"Test creating value profiles for vendors based on transaction history.\"\"\"\n        # Convert sample data to Transaction models with additional synthetic vendors\n        base_transactions = []\n        for tx_data in sample_personal_transactions:\n>           base_transactions.append(Transaction(\n                id=tx_data[\"id\"],\n                date=date.fromisoformat(tx_data[\"date\"]),\n                amount=tx_data[\"amount\"],\n                vendor=tx_data[\"vendor\"],\n                category=tx_data[\"category\"],\n                description=tx_data[\"description\"],\n                tags=tx_data[\"tags\"]\n            ))\nE           TypeError: Transaction.__init__() got an unexpected keyword argument 'id'\n\n../personal_finance_tracker_socially_responsible_investor/tests/test_values_budgeting/test_personal_values_alignment.py:169: TypeError"}, "teardown": {"duration": 0.00013712188228964806, "outcome": "passed"}}], "warnings": [{"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 55}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 76}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 97}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/transaction.py", "lineno": 104}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/category.py", "lineno": 58}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/category.py", "lineno": 137}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 42}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 51}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 94}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 108}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 135}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project.py", "lineno": 143}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 19}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 63}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 70}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 92}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 127}, {"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 191}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/investment.py", "lineno": 245}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 28}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 35}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 43}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 64}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 71}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 96}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 103}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 130}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 137}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/tax.py", "lineno": 145}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 31}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 52}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 59}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/expense/rules.py", "lineno": 34}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 38}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 45}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 52}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 59}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 66}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 50}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 124}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/common/core/models/project_metrics.py", "lineno": 49}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 40}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 99}]}