{"created": 1746947743.078057, "duration": 24.903882026672363, "exitcode": 1, "root": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager", "environment": {}, "summary": {"passed": 59, "error": 19, "failed": 7, "total": 85, "collected": 85}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem", "outcome": "passed", "result": [{"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitor", "type": "Function", "lineno": 28}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitive_feature", "type": "Function", "lineno": 53}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_market_gap", "type": "Function", "lineno": 78}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitor", "type": "Function", "lineno": 103}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitive_feature", "type": "Function", "lineno": 120}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_market_gap", "type": "Function", "lineno": 137}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitors", "type": "Function", "lineno": 154}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitive_features", "type": "Function", "lineno": 169}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_market_gaps", "type": "Function", "lineno": 184}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_competitor_feature", "type": "Function", "lineno": 199}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_feature_implementation", "type": "Function", "lineno": 227}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_compare_features", "type": "Function", "lineno": 266}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_identify_gaps", "type": "Function", "lineno": 313}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_create_market_gap_from_analysis", "type": "Function", "lineno": 348}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_competitive_matrix", "type": "Function", "lineno": 382}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_track_competitive_timeline", "type": "Function", "lineno": 433}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_feature_parity_report", "type": "Function", "lineno": 472}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_performance_with_large_dataset", "type": "Function", "lineno": 530}]}, {"nodeid": "tests/competitive_analysis/test_system.py", "outcome": "passed", "result": [{"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem", "type": "Class"}]}, {"nodeid": "tests/competitive_analysis", "outcome": "passed", "result": [{"nodeid": "tests/competitive_analysis/test_system.py", "type": "Module"}]}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry", "outcome": "passed", "result": [{"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_add_decision", "type": "Function", "lineno": 24}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision", "type": "Function", "lineno": 48}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_get_all_decisions", "type": "Function", "lineno": 65}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_add_alternative_to_decision", "type": "Function", "lineno": 80}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_link_related_decisions", "type": "Function", "lineno": 136}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_record_outcome_assessment", "type": "Function", "lineno": 180}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_search_decisions", "type": "Function", "lineno": 204}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision_history", "type": "Function", "lineno": 241}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_build_decision_graph", "type": "Function", "lineno": 272}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_analyze_alternatives", "type": "Function", "lineno": 327}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_generate_decision_template", "type": "Function", "lineno": 369}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_export_decision", "type": "Function", "lineno": 407}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_calculate_decision_stats", "type": "Function", "lineno": 446}]}, {"nodeid": "tests/decision_registry/test_registry.py", "outcome": "passed", "result": [{"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry", "type": "Class"}]}, {"nodeid": "tests/decision_registry", "outcome": "passed", "result": [{"nodeid": "tests/decision_registry/test_registry.py", "type": "Module"}]}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine", "outcome": "passed", "result": [{"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_initialization", "type": "Function", "lineno": 14}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_add_feedback", "type": "Function", "lineno": 29}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback", "type": "Function", "lineno": 54}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_feedback", "type": "Function", "lineno": 71}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_analyze_sentiment", "type": "Function", "lineno": 86}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_kmeans", "type": "Function", "lineno": 117}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_dbscan", "type": "Function", "lineno": 144}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_extract_themes", "type": "Function", "lineno": 164}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_detect_trends", "type": "Function", "lineno": 192}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_cluster", "type": "Function", "lineno": 229}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_theme", "type": "Function", "lineno": 248}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_clusters", "type": "Function", "lineno": 267}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_themes", "type": "Function", "lineno": 283}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_search_feedback", "type": "Function", "lineno": 299}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_theme", "type": "Function", "lineno": 315}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_cluster", "type": "Function", "lineno": 343}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_performance_with_large_dataset", "type": "Function", "lineno": 363}]}, {"nodeid": "tests/feedback_analysis/test_engine.py", "outcome": "passed", "result": [{"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine", "type": "Class"}]}, {"nodeid": "tests/feedback_analysis", "outcome": "passed", "result": [{"nodeid": "tests/feedback_analysis/test_engine.py", "type": "Module"}]}, {"nodeid": "tests/fixtures/test_data.py", "outcome": "passed", "result": []}, {"nodeid": "tests/fixtures", "outcome": "passed", "result": [{"nodeid": "tests/fixtures/test_data.py", "type": "Module"}]}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework", "outcome": "passed", "result": [{"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_add_feature", "type": "Function", "lineno": 27}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_add_strategic_goal", "type": "Function", "lineno": 52}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_feature", "type": "Function", "lineno": 77}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_strategic_goal", "type": "Function", "lineno": 94}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_features", "type": "Function", "lineno": 111}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_strategic_goals", "type": "Function", "lineno": 126}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_map_strategic_alignment", "type": "Function", "lineno": 141}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_calculate_strategic_score", "type": "Function", "lineno": 179}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_weighted", "type": "Function", "lineno": 213}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_other_models", "type": "Function", "lineno": 249}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_analyze_dependencies", "type": "Function", "lineno": 287}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_generate_roadmap", "type": "Function", "lineno": 353}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_estimate_roi", "type": "Function", "lineno": 387}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_performance_with_large_dataset", "type": "Function", "lineno": 437}]}, {"nodeid": "tests/prioritization/test_framework.py", "outcome": "passed", "result": [{"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework", "type": "Class"}]}, {"nodeid": "tests/prioritization", "outcome": "passed", "result": [{"nodeid": "tests/prioritization/test_framework.py", "type": "Module"}]}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager", "outcome": "passed", "result": [{"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_initialization", "type": "Function", "lineno": 14}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_stakeholder", "type": "Function", "lineno": 27}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_perspective", "type": "Function", "lineno": 52}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_relationship", "type": "Function", "lineno": 84}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder", "type": "Function", "lineno": 112}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspective", "type": "Function", "lineno": 129}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_relationship", "type": "Function", "lineno": 147}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_stakeholders", "type": "Function", "lineno": 165}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_perspectives", "type": "Function", "lineno": 180}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_relationships", "type": "Function", "lineno": 196}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_perspectives", "type": "Function", "lineno": 212}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspectives_by_topic", "type": "Function", "lineno": 250}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_relationships", "type": "Function", "lineno": 281}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_detect_conflicts", "type": "Function", "lineno": 325}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_identify_consensus", "type": "Function", "lineno": 387}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_integrate_perspectives", "type": "Function", "lineno": 437}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_map", "type": "Function", "lineno": 490}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_stakeholder_influence", "type": "Function", "lineno": 535}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_matrix", "type": "Function", "lineno": 564}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_perspective_alignment", "type": "Function", "lineno": 615}]}, {"nodeid": "tests/stakeholder_insights/test_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager", "type": "Class"}]}, {"nodeid": "tests/stakeholder_insights", "outcome": "passed", "result": [{"nodeid": "tests/stakeholder_insights/test_manager.py", "type": "Module"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/competitive_analysis", "type": "Package"}, {"nodeid": "tests/decision_registry", "type": "Package"}, {"nodeid": "tests/feedback_analysis", "type": "Package"}, {"nodeid": "tests/fixtures", "type": "Package"}, {"nodeid": "tests/prioritization", "type": "Package"}, {"nodeid": "tests/stakeholder_insights", "type": "Package"}]}], "tests": [{"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_initialization", "lineno": 15, "outcome": "passed", "keywords": ["test_initialization", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.005545875057578087, "outcome": "passed"}, "call": {"duration": 0.00024341698735952377, "outcome": "passed"}, "teardown": {"duration": 0.0002694167196750641, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitor", "lineno": 28, "outcome": "passed", "keywords": ["test_add_competitor", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.002051291987299919, "outcome": "passed"}, "call": {"duration": 0.0007055411115288734, "outcome": "passed"}, "teardown": {"duration": 0.00021966686472296715, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitive_feature", "lineno": 53, "outcome": "error", "keywords": ["test_add_competitive_feature", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001955833751708269, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.6d2470da-d241-4bd3-aa09-83f0849743d4\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.6d2470da-d241-4bd3-aa09-83f0849743d4\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('468fcf71-e2fd-47e2-b3a7-e6a3217b9930'), name='DataViz Pro', description='Enterprise analytics pla...ated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 70484), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 70484))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.6d2470da-d241-4bd3-aa09-83f0849743d4\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.6d2470da-d241-4bd3-aa09-83f0849743d4\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.000247834250330925, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_market_gap", "lineno": 78, "outcome": "passed", "keywords": ["test_add_market_gap", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016842088662087917, "outcome": "passed"}, "call": {"duration": 0.0010485830716788769, "outcome": "passed"}, "teardown": {"duration": 0.00017579179257154465, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitor", "lineno": 103, "outcome": "passed", "keywords": ["test_get_competitor", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0013808328658342361, "outcome": "passed"}, "call": {"duration": 0.0008487091399729252, "outcome": "passed"}, "teardown": {"duration": 0.00021958304569125175, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitive_feature", "lineno": 120, "outcome": "error", "keywords": ["test_get_competitive_feature", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001526624895632267, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.e3bbd54e-0b73-45c2-bb57-076af9a77c11\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.e3bbd54e-0b73-45c2-bb57-076af9a77c11\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('6a28a3d1-93c0-4a0d-9b49-15116fa3d959'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 156862), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 156862))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.e3bbd54e-0b73-45c2-bb57-076af9a77c11\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.e3bbd54e-0b73-45c2-bb57-076af9a77c11\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.00022133300080895424, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_market_gap", "lineno": 137, "outcome": "passed", "keywords": ["test_get_market_gap", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.002051334362477064, "outcome": "passed"}, "call": {"duration": 0.0008043749257922173, "outcome": "passed"}, "teardown": {"duration": 0.00018237484619021416, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitors", "lineno": 154, "outcome": "passed", "keywords": ["test_get_all_competitors", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001690249890089035, "outcome": "passed"}, "call": {"duration": 0.0006770417094230652, "outcome": "passed"}, "teardown": {"duration": 0.00014412496238946915, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitive_features", "lineno": 169, "outcome": "error", "keywords": ["test_get_all_competitive_features", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017858752980828285, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.ae06075e-5d8f-4e73-b078-47d9aafb4344\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.ae06075e-5d8f-4e73-b078-47d9aafb4344\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('3f87b48d-65ba-4052-92df-b8222808c5b2'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 180524), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 180524))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.ae06075e-5d8f-4e73-b078-47d9aafb4344\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.ae06075e-5d8f-4e73-b078-47d9aafb4344\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.00017195893451571465, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_market_gaps", "lineno": 184, "outcome": "passed", "keywords": ["test_get_all_market_gaps", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014249999076128006, "outcome": "passed"}, "call": {"duration": 0.0008743326179683208, "outcome": "passed"}, "teardown": {"duration": 0.00015187496319413185, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_competitor_feature", "lineno": 199, "outcome": "passed", "keywords": ["test_update_competitor_feature", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0013509159907698631, "outcome": "passed"}, "call": {"duration": 0.0008286247029900551, "outcome": "passed"}, "teardown": {"duration": 0.00016154209151864052, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_feature_implementation", "lineno": 227, "outcome": "error", "keywords": ["test_update_feature_implementation", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014724591746926308, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.e9fbde57-9073-4f0a-b09d-16557930c770\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.e9fbde57-9073-4f0a-b09d-16557930c770\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('52a2538d-6683-4616-bb28-325ccf48d0a1'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 202550), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 202550))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.e9fbde57-9073-4f0a-b09d-16557930c770\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.e9fbde57-9073-4f0a-b09d-16557930c770\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.00018650013953447342, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_compare_features", "lineno": 266, "outcome": "error", "keywords": ["test_compare_features", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016101249493658543, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.bfae892c-26f8-4e1c-b783-bf6cb0c973b3\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.bfae892c-26f8-4e1c-b783-bf6cb0c973b3\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('e556d7ff-abf0-4857-aabf-90c21a28d63e'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 220234), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 220235))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.bfae892c-26f8-4e1c-b783-bf6cb0c973b3\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.bfae892c-26f8-4e1c-b783-bf6cb0c973b3\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.00018858397379517555, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_identify_gaps", "lineno": 313, "outcome": "error", "keywords": ["test_identify_gaps", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001853249967098236, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.5a582e46-cf3d-4ea6-a172-6bf6f83dbc8d\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.5a582e46-cf3d-4ea6-a172-6bf6f83dbc8d\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('34047090-7523-4eee-8522-c81cad6882db'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 237259), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 237259))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.5a582e46-cf3d-4ea6-a172-6bf6f83dbc8d\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.5a582e46-cf3d-4ea6-a172-6bf6f83dbc8d\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.0001622089184820652, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_create_market_gap_from_analysis", "lineno": 348, "outcome": "error", "keywords": ["test_create_market_gap_from_analysis", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0013690842315554619, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.83508775-68ea-4549-8dfb-4b38107cbda0\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.83508775-68ea-4549-8dfb-4b38107cbda0\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('ac984389-befe-4045-a69e-ada356052f83'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 253689), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 253689))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.83508775-68ea-4549-8dfb-4b38107cbda0\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.83508775-68ea-4549-8dfb-4b38107cbda0\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.00028837472200393677, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_competitive_matrix", "lineno": 382, "outcome": "passed", "keywords": ["test_generate_competitive_matrix", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0020240419544279575, "outcome": "passed"}, "call": {"duration": 0.00129220774397254, "outcome": "passed"}, "teardown": {"duration": 0.00018241582438349724, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_track_competitive_timeline", "lineno": 433, "outcome": "error", "keywords": ["test_track_competitive_timeline", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016795000992715359, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.594689b7-be6e-40e3-89d1-3acfbf756c4e\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.594689b7-be6e-40e3-89d1-3acfbf756c4e\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('47892f41-68d4-4ccd-bbca-dc3a31796ef4'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 291683), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 291683))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.594689b7-be6e-40e3-89d1-3acfbf756c4e\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.594689b7-be6e-40e3-89d1-3acfbf756c4e\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.000249707605689764, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_feature_parity_report", "lineno": 472, "outcome": "error", "keywords": ["test_generate_feature_parity_report", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001988333649933338, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 637, "message": "pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\ncompetitor_implementations.a047a13e-babc-463a-a9a4-d9da8608e230\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/string_type\ncompetitor_ratings.a047a13e-babc-463a-a9a4-d9da8608e230\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.11/v/float_type"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 637, "message": "ValidationError"}], "longrepr": "competitor_samples = [Competitor(id=UUID('cf11a510-eb50-4d18-8e4d-2a5352cf9c31'), name='DataViz Pro', description='Enterprise analytics pla...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 309016), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 309017))]\n\n    @pytest.fixture\n    def competitive_feature_samples(competitor_samples):\n        \"\"\"Generate sample competitive features.\"\"\"\n        competitors = competitor_samples\n    \n        return [\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Advanced reporting\",\n                description=\"Advanced reporting capabilities with custom metrics\",\n                category=\"Reporting\",\n                importance=9.0,\n                our_implementation=\"Basic report builder with limited customization\",\n                our_rating=6.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive report builder with custom formulas\",\n                    str(competitors[1].id): \"Basic reporting with templates\",\n                    str(competitors[2].id): \"Enterprise reporting suite with advanced analytics\",\n                    str(competitors[3].id): \"Simple mobile-optimized reports\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.5,\n                    str(competitors[1].id): 5.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 4.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Mobile app\",\n                description=\"Mobile application for on-the-go analytics\",\n                category=\"Mobile\",\n                importance=8.0,\n                our_implementation=\"Basic mobile app with limited functionality\",\n                our_rating=5.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Comprehensive mobile app with most desktop features\",\n                    str(competitors[1].id): \"Simple but effective mobile app\",\n                    str(competitors[2].id): \"Full-featured but complex mobile app\",\n                    str(competitors[3].id): \"Outstanding mobile-first experience\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 7.0,\n                    str(competitors[1].id): 6.5,\n                    str(competitors[2].id): 6.0,\n                    str(competitors[3].id): 9.5\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Custom dashboards\",\n                description=\"User-customizable dashboards with widgets\",\n                category=\"Dashboard\",\n                importance=8.5,\n                our_implementation=\"Limited dashboard customization options\",\n                our_rating=6.0,\n                competitor_implementations={\n                    str(competitors[0].id): \"Highly customizable dashboards with advanced widgets\",\n                    str(competitors[1].id): \"Simple dashboard customization\",\n                    str(competitors[2].id): \"Enterprise dashboard system with sharing\",\n                    str(competitors[3].id): \"Mobile-optimized custom dashboards\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 9.0,\n                    str(competitors[1].id): 5.5,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n>           CompetitiveFeature(\n                id=uuid4(),\n                name=\"AI-powered insights\",\n                description=\"Machine learning insights and recommendations\",\n                category=\"AI\",\n                importance=7.5,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced AI analytics with pattern recognition\",\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): \"Enterprise AI with predictive analytics\",\n                    str(competitors[3].id): \"Mobile-focused AI notifications\"\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): None,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): 7.0\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"Keyboard shortcuts\",\n                description=\"Keyboard shortcuts for power users\",\n                category=\"Productivity\",\n                importance=6.0,\n                our_implementation=None,\n                our_rating=None,\n                competitor_implementations={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): \"Basic keyboard shortcuts\",\n                    str(competitors[2].id): \"Comprehensive keyboard shortcut system\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): None,\n                    str(competitors[1].id): 7.0,\n                    str(competitors[2].id): 8.5,\n                    str(competitors[3].id): None\n                }\n            ),\n            CompetitiveFeature(\n                id=uuid4(),\n                name=\"PDF export\",\n                description=\"Export reports and dashboards to PDF\",\n                category=\"Export\",\n                importance=7.0,\n                our_implementation=\"Basic PDF export without formatting options\",\n                our_rating=5.5,\n                competitor_implementations={\n                    str(competitors[0].id): \"Advanced PDF export with branding\",\n                    str(competitors[1].id): \"Simple PDF export\",\n                    str(competitors[2].id): \"Enterprise PDF reporting with scheduling\",\n                    str(competitors[3].id): None\n                },\n                competitor_ratings={\n                    str(competitors[0].id): 8.0,\n                    str(competitors[1].id): 6.0,\n                    str(competitors[2].id): 9.0,\n                    str(competitors[3].id): None\n                }\n            )\n        ]\nE       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CompetitiveFeature\nE       competitor_implementations.a047a13e-babc-463a-a9a4-d9da8608e230\nE         Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/string_type\nE       competitor_ratings.a047a13e-babc-463a-a9a4-d9da8608e230\nE         Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\nE           For further information visit https://errors.pydantic.dev/2.11/v/float_type\n\ntests/fixtures/test_data.py:637: ValidationError"}, "teardown": {"duration": 0.0002611670643091202, "outcome": "passed"}}, {"nodeid": "tests/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_performance_with_large_dataset", "lineno": 530, "outcome": "passed", "keywords": ["test_performance_with_large_dataset", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0021580830216407776, "outcome": "passed"}, "call": {"duration": 0.006828499957919121, "outcome": "passed"}, "teardown": {"duration": 0.00018791621550917625, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_initialization", "lineno": 15, "outcome": "passed", "keywords": ["test_initialization", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0019607082940638065, "outcome": "passed"}, "call": {"duration": 0.0001682918518781662, "outcome": "passed"}, "teardown": {"duration": 0.0001616249792277813, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_add_decision", "lineno": 24, "outcome": "passed", "keywords": ["test_add_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016413750126957893, "outcome": "passed"}, "call": {"duration": 0.0004137498326599598, "outcome": "passed"}, "teardown": {"duration": 0.00016583409160375595, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision", "lineno": 48, "outcome": "passed", "keywords": ["test_get_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016131247393786907, "outcome": "passed"}, "call": {"duration": 0.0003977501764893532, "outcome": "passed"}, "teardown": {"duration": 0.0001753745600581169, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_get_all_decisions", "lineno": 65, "outcome": "passed", "keywords": ["test_get_all_decisions", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0015657502226531506, "outcome": "passed"}, "call": {"duration": 0.0004853331483900547, "outcome": "passed"}, "teardown": {"duration": 0.0001799170859158039, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_add_alternative_to_decision", "lineno": 80, "outcome": "failed", "keywords": ["test_add_alternative_to_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016322499141097069, "outcome": "passed"}, "call": {"duration": 0.001003124751150608, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/decision_registry/test_registry.py", "lineno": 121, "message": "AssertionError: assert 4 == (4 + 1)\n +  where 4 = len([Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)])\n +    where [Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)] = Decision(id=UUID('e48eada8-c45a-4a01-8a8f-df6e51575b99'), title='Mobile App Platform Selection', description='Decision on which technology stack to use for mobile app rebuild', context='Our current mobile app has poor reviews and limited functionality. We need to rebuild it with modern technology.', problem_statement='Select the best technology platform for rebuilding our mobile app to improve user experience and maintainability.', decision_date=datetime.datetime(2025, 3, 12, 3, 15, 42, 346085), decision_maker='Sarah Chen, VP of Product', chosen_alternative=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), alternatives=[Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', ...odebase are substantial. The team also has stronger React skills.', success_criteria=['Mobile app store rating improves to 4.5+', 'Development completed within 4 months', '90% feature parity with desktop version', 'Crash rate below 0.5%'], related_decisions=[], related_feedback=[UUID('1ed3b760-e953-4784-b195-cce3f4b05690'), UUID('b1b58f54-d9bf-4dc5-9bf5-a7a55c0a2272'), UUID('93773223-41f8-4cb5-9128-4dabd14cc29d'), UUID('7aa237b0-d344-4339-a33b-fd19127a3265'), UUID('ba00cc40-6feb-48ea-95c5-fdbf4ea076c8'), UUID('18465083-b80d-4234-b8b9-5e198709e0b7'), UUID('8ff6f0f2-547a-4b25-a73e-3489a170ace1'), UUID('fd2dab3b-47ed-4e8e-9fad-1bc6368fd37d'), UUID('227d4745-9dee-4bcc-b2f2-3a1f864fd54a'), UUID('972a2025-4ce5-4cc3-aec2-04db17c54eb6')], related_features=[UUID('d5bd425e-5c5a-47bc-97d4-b110f4f97b41'), UUID('b6385045-489e-4586-953d-1fe980d8dd3e')], status='decided', outcome_assessment='Implementation was successful. App store rating improved to 4.7 within 3 months of launch. Development was completed in 4.5 months, slightly over schedule but within acceptable range.', created_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346145), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346685)).alternatives\n +  and   4 = len([Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)])\n +    where [Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)] = Decision(id=UUID('e48eada8-c45a-4a01-8a8f-df6e51575b99'), title='Mobile App Platform Selection', description='Decision on which technology stack to use for mobile app rebuild', context='Our current mobile app has poor reviews and limited functionality. We need to rebuild it with modern technology.', problem_statement='Select the best technology platform for rebuilding our mobile app to improve user experience and maintainability.', decision_date=datetime.datetime(2025, 3, 12, 3, 15, 42, 346085), decision_maker='Sarah Chen, VP of Product', chosen_alternative=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), alternatives=[Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', ...odebase are substantial. The team also has stronger React skills.', success_criteria=['Mobile app store rating improves to 4.5+', 'Development completed within 4 months', '90% feature parity with desktop version', 'Crash rate below 0.5%'], related_decisions=[], related_feedback=[UUID('1ed3b760-e953-4784-b195-cce3f4b05690'), UUID('b1b58f54-d9bf-4dc5-9bf5-a7a55c0a2272'), UUID('93773223-41f8-4cb5-9128-4dabd14cc29d'), UUID('7aa237b0-d344-4339-a33b-fd19127a3265'), UUID('ba00cc40-6feb-48ea-95c5-fdbf4ea076c8'), UUID('18465083-b80d-4234-b8b9-5e198709e0b7'), UUID('8ff6f0f2-547a-4b25-a73e-3489a170ace1'), UUID('fd2dab3b-47ed-4e8e-9fad-1bc6368fd37d'), UUID('227d4745-9dee-4bcc-b2f2-3a1f864fd54a'), UUID('972a2025-4ce5-4cc3-aec2-04db17c54eb6')], related_features=[UUID('d5bd425e-5c5a-47bc-97d4-b110f4f97b41'), UUID('b6385045-489e-4586-953d-1fe980d8dd3e')], status='decided', outcome_assessment='Implementation was successful. App store rating improved to 4.7 within 3 months of launch. Development was completed in 4.5 months, slightly over schedule but within acceptable range.', created_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346145), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346685)).alternatives"}, "traceback": [{"path": "tests/decision_registry/test_registry.py", "lineno": 121, "message": "AssertionError"}], "longrepr": "self = <tests.decision_registry.test_registry.TestDecisionRegistry object at 0x102a1e740>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_add_alternative_to_decisi0/test_data'\ndecision_samples = [Decision(id=UUID('e48eada8-c45a-4a01-8a8f-df6e51575b99'), title='Mobile App Platform Selection', description='Decisio...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346192), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346193))]\n\n    def test_add_alternative_to_decision(self, temp_data_dir, decision_samples):\n        \"\"\"Test adding alternatives to a decision.\"\"\"\n        registry = DecisionRegistry(storage_dir=temp_data_dir)\n        registry.add_decision(decision_samples)\n    \n        decision_id = str(decision_samples[0].id)\n    \n        # Create a new alternative\n        new_alternative = Alternative(\n            id=uuid4(),\n            name=\"New Alternative\",\n            description=\"A new alternative option\",\n            pros=[\"Pro 1\", \"Pro 2\"],\n            cons=[\"Con 1\"],\n            estimated_cost=75000,\n            estimated_benefit=85000,\n            estimated_risk=0.4,\n            score=7.9\n        )\n    \n        # Add the alternative to the decision\n        updated_decision = registry.add_alternative_to_decision(decision_id, new_alternative)\n    \n        assert updated_decision is not None\n    \n        # Find the new alternative in the updated decision\n        found_alternative = None\n        for alt in updated_decision.alternatives:\n            if alt.name == \"New Alternative\":\n                found_alternative = alt\n                break\n    \n        assert found_alternative is not None\n        assert found_alternative.id == new_alternative.id\n        assert found_alternative.description == new_alternative.description\n        assert found_alternative.pros == new_alternative.pros\n        assert found_alternative.cons == new_alternative.cons\n    \n        # Verify the decision was updated in storage\n        retrieved = registry.get_decision(decision_id)\n>       assert len(retrieved.alternatives) == len(decision_samples[0].alternatives) + 1\nE       AssertionError: assert 4 == (4 + 1)\nE        +  where 4 = len([Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)])\nE        +    where [Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)] = Decision(id=UUID('e48eada8-c45a-4a01-8a8f-df6e51575b99'), title='Mobile App Platform Selection', description='Decision on which technology stack to use for mobile app rebuild', context='Our current mobile app has poor reviews and limited functionality. We need to rebuild it with modern technology.', problem_statement='Select the best technology platform for rebuilding our mobile app to improve user experience and maintainability.', decision_date=datetime.datetime(2025, 3, 12, 3, 15, 42, 346085), decision_maker='Sarah Chen, VP of Product', chosen_alternative=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), alternatives=[Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', ...odebase are substantial. The team also has stronger React skills.', success_criteria=['Mobile app store rating improves to 4.5+', 'Development completed within 4 months', '90% feature parity with desktop version', 'Crash rate below 0.5%'], related_decisions=[], related_feedback=[UUID('1ed3b760-e953-4784-b195-cce3f4b05690'), UUID('b1b58f54-d9bf-4dc5-9bf5-a7a55c0a2272'), UUID('93773223-41f8-4cb5-9128-4dabd14cc29d'), UUID('7aa237b0-d344-4339-a33b-fd19127a3265'), UUID('ba00cc40-6feb-48ea-95c5-fdbf4ea076c8'), UUID('18465083-b80d-4234-b8b9-5e198709e0b7'), UUID('8ff6f0f2-547a-4b25-a73e-3489a170ace1'), UUID('fd2dab3b-47ed-4e8e-9fad-1bc6368fd37d'), UUID('227d4745-9dee-4bcc-b2f2-3a1f864fd54a'), UUID('972a2025-4ce5-4cc3-aec2-04db17c54eb6')], related_features=[UUID('d5bd425e-5c5a-47bc-97d4-b110f4f97b41'), UUID('b6385045-489e-4586-953d-1fe980d8dd3e')], status='decided', outcome_assessment='Implementation was successful. App store rating improved to 4.7 within 3 months of launch. Development was completed in 4.5 months, slightly over schedule but within acceptable range.', created_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346145), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346685)).alternatives\nE        +  and   4 = len([Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)])\nE        +    where [Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', 'Faster development', 'Good performance', 'Large community'], cons=['Occasional native bridge issues', 'Some platform-specific code still needed'], estimated_cost=80000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=8.2), Alternative(id=UUID('8d514787-33eb-436a-af6d-029c57bc8f4c'), name='Progressive Web App', description='Web-based app with offline capabilities', pros=['Lowest development cost', 'No app store approvals', 'Single codebase'], cons=['Limited device features', 'Lower performance', 'Less integrated experience'], estimated_cost=50000.0, estimated_benefit=60000.0, estimated_risk=0.5, score=6.8), Alternative(id=UUID('e8fe67f8-c14b-438d-8419-3cca315c152b'), name='New Alternative', description='A new alternative option', pros=['Pro 1', 'Pro 2'], cons=['Con 1'], estimated_cost=75000.0, estimated_benefit=85000.0, estimated_risk=0.4, score=7.9)] = Decision(id=UUID('e48eada8-c45a-4a01-8a8f-df6e51575b99'), title='Mobile App Platform Selection', description='Decision on which technology stack to use for mobile app rebuild', context='Our current mobile app has poor reviews and limited functionality. We need to rebuild it with modern technology.', problem_statement='Select the best technology platform for rebuilding our mobile app to improve user experience and maintainability.', decision_date=datetime.datetime(2025, 3, 12, 3, 15, 42, 346085), decision_maker='Sarah Chen, VP of Product', chosen_alternative=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), alternatives=[Alternative(id=UUID('d618f303-fcce-4dc3-ab8a-677f49a9c411'), name='Native Development', description='Develop separate iOS and Android apps with Swift and Kotlin', pros=['Best performance', 'Full access to device features', 'Best UX'], cons=['Higher development cost', 'Duplicate effort', 'Separate codebases to maintain'], estimated_cost=120000.0, estimated_benefit=90000.0, estimated_risk=0.3, score=7.5), Alternative(id=UUID('a40a2162-c04b-4e2d-8528-3ee295cb9e15'), name='React Native', description='Cross-platform development with React Native', pros=['Single codebase', ...odebase are substantial. The team also has stronger React skills.', success_criteria=['Mobile app store rating improves to 4.5+', 'Development completed within 4 months', '90% feature parity with desktop version', 'Crash rate below 0.5%'], related_decisions=[], related_feedback=[UUID('1ed3b760-e953-4784-b195-cce3f4b05690'), UUID('b1b58f54-d9bf-4dc5-9bf5-a7a55c0a2272'), UUID('93773223-41f8-4cb5-9128-4dabd14cc29d'), UUID('7aa237b0-d344-4339-a33b-fd19127a3265'), UUID('ba00cc40-6feb-48ea-95c5-fdbf4ea076c8'), UUID('18465083-b80d-4234-b8b9-5e198709e0b7'), UUID('8ff6f0f2-547a-4b25-a73e-3489a170ace1'), UUID('fd2dab3b-47ed-4e8e-9fad-1bc6368fd37d'), UUID('227d4745-9dee-4bcc-b2f2-3a1f864fd54a'), UUID('972a2025-4ce5-4cc3-aec2-04db17c54eb6')], related_features=[UUID('d5bd425e-5c5a-47bc-97d4-b110f4f97b41'), UUID('b6385045-489e-4586-953d-1fe980d8dd3e')], status='decided', outcome_assessment='Implementation was successful. App store rating improved to 4.7 within 3 months of launch. Development was completed in 4.5 months, slightly over schedule but within acceptable range.', created_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346145), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 346685)).alternatives\n\ntests/decision_registry/test_registry.py:121: AssertionError"}, "teardown": {"duration": 0.0001748749054968357, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_link_related_decisions", "lineno": 136, "outcome": "passed", "keywords": ["test_link_related_decisions", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014821668155491352, "outcome": "passed"}, "call": {"duration": 0.0007857079617679119, "outcome": "passed"}, "teardown": {"duration": 0.00015729106962680817, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_record_outcome_assessment", "lineno": 180, "outcome": "passed", "keywords": ["test_record_outcome_assessment", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001538958866149187, "outcome": "passed"}, "call": {"duration": 0.0004981248639523983, "outcome": "passed"}, "teardown": {"duration": 0.00016337493434548378, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_search_decisions", "lineno": 204, "outcome": "passed", "keywords": ["test_search_decisions", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014352090656757355, "outcome": "passed"}, "call": {"duration": 0.0007331669330596924, "outcome": "passed"}, "teardown": {"duration": 0.00015195785090327263, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision_history", "lineno": 241, "outcome": "passed", "keywords": ["test_get_decision_history", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001429667230695486, "outcome": "passed"}, "call": {"duration": 0.0005273749120533466, "outcome": "passed"}, "teardown": {"duration": 0.00015445798635482788, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_build_decision_graph", "lineno": 272, "outcome": "passed", "keywords": ["test_build_decision_graph", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014138752594590187, "outcome": "passed"}, "call": {"duration": 0.0006147497333586216, "outcome": "passed"}, "teardown": {"duration": 0.0001522502861917019, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_analyze_alternatives", "lineno": 327, "outcome": "failed", "keywords": ["test_analyze_alternatives", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014552916400134563, "outcome": "passed"}, "call": {"duration": 0.0004108329303562641, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/decision_registry/test_registry.py", "lineno": 363, "message": "assert None is not None"}, "traceback": [{"path": "tests/decision_registry/test_registry.py", "lineno": 363, "message": "AssertionError"}], "longrepr": "self = <tests.decision_registry.test_registry.TestDecisionRegistry object at 0x102a1f3d0>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_analyze_alternatives0/test_data'\ndecision_samples = [Decision(id=UUID('eb9929d1-5948-420e-bcfc-1d5d06133444'), title='Mobile App Platform Selection', description='Decisio...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 367224), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 367224))]\n\n    def test_analyze_alternatives(self, temp_data_dir, decision_samples):\n        \"\"\"Test analyzing alternatives for a decision.\"\"\"\n        registry = DecisionRegistry(storage_dir=temp_data_dir)\n        registry.add_decision(decision_samples)\n    \n        if decision_samples and decision_samples[0].alternatives:\n            decision_id = str(decision_samples[0].id)\n    \n            # Analyze alternatives\n            analysis = registry.analyze_alternatives(decision_id)\n    \n            assert \"decision_id\" in analysis\n            assert \"alternatives\" in analysis\n            assert \"chosen_alternative\" in analysis\n            assert \"score_range\" in analysis\n            assert \"cost_range\" in analysis\n            assert \"benefit_range\" in analysis\n            assert \"risk_range\" in analysis\n    \n            assert len(analysis[\"alternatives\"]) == len(decision_samples[0].alternatives)\n    \n            # Verify alternative structure\n            for alt in analysis[\"alternatives\"]:\n                assert \"id\" in alt\n                assert \"name\" in alt\n                assert \"score\" in alt\n                assert \"cost\" in alt\n                assert \"benefit\" in alt\n                assert \"risk\" in alt\n                assert \"pros_count\" in alt\n                assert \"cons_count\" in alt\n                assert \"is_chosen\" in alt\n    \n            # Verify chosen alternative is identified\n            chosen_alt = next((a for a in analysis[\"alternatives\"] if a[\"is_chosen\"]), None)\n>           assert chosen_alt is not None\nE           assert None is not None\n\ntests/decision_registry/test_registry.py:363: AssertionError"}, "teardown": {"duration": 0.000203792005777359, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_generate_decision_template", "lineno": 369, "outcome": "passed", "keywords": ["test_generate_decision_template", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001459375023841858, "outcome": "passed"}, "call": {"duration": 0.0001721247099339962, "outcome": "passed"}, "teardown": {"duration": 0.00014449981972575188, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_export_decision", "lineno": 407, "outcome": "passed", "keywords": ["test_export_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001907124649733305, "outcome": "passed"}, "call": {"duration": 0.0005760421045124531, "outcome": "passed"}, "teardown": {"duration": 0.00014150002971291542, "outcome": "passed"}}, {"nodeid": "tests/decision_registry/test_registry.py::TestDecisionRegistry::test_calculate_decision_stats", "lineno": 446, "outcome": "passed", "keywords": ["test_calculate_decision_stats", "TestDecisionRegistry", "test_registry.py", "decision_registry", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016272920183837414, "outcome": "passed"}, "call": {"duration": 0.0005337502807378769, "outcome": "passed"}, "teardown": {"duration": 0.00014425022527575493, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_initialization", "lineno": 14, "outcome": "passed", "keywords": ["test_initialization", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0015328330919146538, "outcome": "passed"}, "call": {"duration": 0.0003282502293586731, "outcome": "passed"}, "teardown": {"duration": 0.00014970824122428894, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_add_feedback", "lineno": 29, "outcome": "passed", "keywords": ["test_add_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0013937922194600105, "outcome": "passed"}, "call": {"duration": 0.0005441657267510891, "outcome": "passed"}, "teardown": {"duration": 0.00026962487027049065, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback", "lineno": 54, "outcome": "passed", "keywords": ["test_get_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0013312497176229954, "outcome": "passed"}, "call": {"duration": 0.0017597503028810024, "outcome": "passed"}, "teardown": {"duration": 0.00015029171481728554, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_feedback", "lineno": 71, "outcome": "passed", "keywords": ["test_get_all_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001377916894853115, "outcome": "passed"}, "call": {"duration": 0.0016438327729701996, "outcome": "passed"}, "teardown": {"duration": 0.00014645792543888092, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_analyze_sentiment", "lineno": 86, "outcome": "failed", "keywords": ["test_analyze_sentiment", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.002023332752287388, "outcome": "passed"}, "call": {"duration": 0.002153208013623953, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/feedback_analysis/test_engine.py", "lineno": 110, "message": "AssertionError: assert <Sentiment.NEUTRAL: 'neutral'> == <Sentiment.NE...E: 'negative'>\n  \n  - negative\n  + neutral"}, "traceback": [{"path": "tests/feedback_analysis/test_engine.py", "lineno": 110, "message": "AssertionError"}], "longrepr": "self = <tests.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x1165b7520>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_analyze_sentiment0/test_data'\nfeedback_samples = [Feedback(id=UUID('31067397-4669-4bac-833b-550164324ced'), content=\"I love the new dashboard layout. It's much easier ...5, 5, 3, 15, 42, 395153), themes=['Dashboard', 'UX', 'Information Overload'], cluster_id=None, impact_score=None), ...]\n\n    def test_analyze_sentiment(self, temp_data_dir, feedback_samples):\n        \"\"\"Test sentiment analysis of feedback.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir)\n        engine.add_feedback(feedback_samples)\n    \n        # Test analyzing a single feedback\n        positive_feedback = feedback_samples[0]  # This contains positive words\n        sentiments = engine.analyze_sentiment(positive_feedback)\n    \n        assert len(sentiments) == 1\n        assert str(positive_feedback.id) in sentiments\n        assert sentiments[str(positive_feedback.id)] == Sentiment.POSITIVE\n    \n        # Test analyzing multiple feedback items\n        mixed_feedback = [\n            feedback_samples[0],  # Positive\n            feedback_samples[1],  # Negative\n            feedback_samples[2]   # Neutral\n        ]\n        sentiments = engine.analyze_sentiment(mixed_feedback)\n    \n        assert len(sentiments) == 3\n        assert sentiments[str(mixed_feedback[0].id)] == Sentiment.POSITIVE\n>       assert sentiments[str(mixed_feedback[1].id)] == Sentiment.NEGATIVE\nE       AssertionError: assert <Sentiment.NEUTRAL: 'neutral'> == <Sentiment.NE...E: 'negative'>\nE         \nE         - negative\nE         + neutral\n\ntests/feedback_analysis/test_engine.py:110: AssertionError"}, "teardown": {"duration": 0.0002138749696314335, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_kmeans", "lineno": 117, "outcome": "passed", "keywords": ["test_cluster_feedback_kmeans", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001500207930803299, "outcome": "passed"}, "call": {"duration": 0.04029254196211696, "outcome": "passed"}, "teardown": {"duration": 0.00023641670122742653, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_dbscan", "lineno": 144, "outcome": "failed", "keywords": ["test_cluster_feedback_dbscan", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016836249269545078, "outcome": "passed"}, "call": {"duration": 0.003264875151216984, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/sklearn/utils/validation.py", "lineno": 1827, "message": "ValueError: Negative values in data passed to X."}, "traceback": [{"path": "tests/feedback_analysis/test_engine.py", "lineno": 150, "message": ""}, {"path": "productmind/feedback_analysis/engine.py", "lineno": 278, "message": "in cluster_feedback"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/cluster/_dbscan.py", "lineno": 470, "message": "in fit_predict"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/base.py", "lineno": 1389, "message": "in wrapper"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/cluster/_dbscan.py", "lineno": 416, "message": "in fit"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/base.py", "lineno": 1389, "message": "in wrapper"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/neighbors/_unsupervised.py", "lineno": 179, "message": "in fit"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/neighbors/_base.py", "lineno": 583, "message": "in _fit"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/neighbors/_base.py", "lineno": 173, "message": "in _check_precomputed"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/utils/validation.py", "lineno": 1149, "message": "in check_array"}, {"path": ".venv/lib/python3.10/site-packages/sklearn/utils/validation.py", "lineno": 1827, "message": "ValueError"}], "longrepr": "self = <tests.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x1165b6650>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_cluster_feedback_dbscan0/test_data'\nfeedback_samples = [Feedback(id=UUID('c6c09ac2-528b-4c07-b249-f982e89633d0'), content=\"I love the new dashboard layout. It's much easier ...5, 5, 3, 15, 42, 447978), themes=['Dashboard', 'UX', 'Information Overload'], cluster_id=None, impact_score=None), ...]\n\n    def test_cluster_feedback_dbscan(self, temp_data_dir, feedback_samples):\n        \"\"\"Test clustering feedback using DBSCAN algorithm.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir, min_cluster_size=2)\n        engine.add_feedback(feedback_samples)\n    \n>       clusters = engine.cluster_feedback(algorithm=\"dbscan\")\n\ntests/feedback_analysis/test_engine.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nproductmind/feedback_analysis/engine.py:278: in cluster_feedback\n    cluster_labels = dbscan.fit_predict(distances)\n.venv/lib/python3.10/site-packages/sklearn/cluster/_dbscan.py:470: in fit_predict\n    self.fit(X, sample_weight=sample_weight)\n.venv/lib/python3.10/site-packages/sklearn/base.py:1389: in wrapper\n    return fit_method(estimator, *args, **kwargs)\n.venv/lib/python3.10/site-packages/sklearn/cluster/_dbscan.py:416: in fit\n    neighbors_model.fit(X)\n.venv/lib/python3.10/site-packages/sklearn/base.py:1389: in wrapper\n    return fit_method(estimator, *args, **kwargs)\n.venv/lib/python3.10/site-packages/sklearn/neighbors/_unsupervised.py:179: in fit\n    return self._fit(X)\n.venv/lib/python3.10/site-packages/sklearn/neighbors/_base.py:583: in _fit\n    X = _check_precomputed(X)\n.venv/lib/python3.10/site-packages/sklearn/neighbors/_base.py:173: in _check_precomputed\n    X = check_array(X, ensure_non_negative=True, input_name=\"X\")\n.venv/lib/python3.10/site-packages/sklearn/utils/validation.py:1149: in check_array\n    check_non_negative(array, whom)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nX = array([[ 0.00000000e+00,  8.91371886e-01,  1.00000000e+00,\n         8.84450522e-01,  1.00000000e+00,  1.00000000e+00,\n... 1.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         0.00000000e+00]])\nwhom = 'X'\n\n    def check_non_negative(X, whom):\n        \"\"\"\n        Check if there is any negative value in an array.\n    \n        Parameters\n        ----------\n        X : {array-like, sparse matrix}\n            Input data.\n    \n        whom : str\n            Who passed X to this function.\n        \"\"\"\n        xp, _ = get_namespace(X)\n        # avoid X.min() on sparse matrix since it also sorts the indices\n        if sp.issparse(X):\n            if X.format in [\"lil\", \"dok\"]:\n                X = X.tocsr()\n            if X.data.size == 0:\n                X_min = 0\n            else:\n                X_min = X.data.min()\n        else:\n            X_min = xp.min(X)\n    \n        if X_min < 0:\n>           raise ValueError(f\"Negative values in data passed to {whom}.\")\nE           ValueError: Negative values in data passed to X.\n\n.venv/lib/python3.10/site-packages/sklearn/utils/validation.py:1827: ValueError"}, "teardown": {"duration": 0.0002710414119064808, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_extract_themes", "lineno": 164, "outcome": "passed", "keywords": ["test_extract_themes", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0018995003774762154, "outcome": "passed"}, "call": {"duration": 0.005384957883507013, "outcome": "passed"}, "teardown": {"duration": 0.00018949992954730988, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_detect_trends", "lineno": 192, "outcome": "failed", "keywords": ["test_detect_trends", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0019619581289589405, "outcome": "passed"}, "call": {"duration": 0.00022258330136537552, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/feedback_analysis/test_engine.py", "lineno": 201, "message": "AttributeError: type object 'datetime.datetime' has no attribute 'timedelta'"}, "traceback": [{"path": "tests/feedback_analysis/test_engine.py", "lineno": 201, "message": "AttributeError"}], "longrepr": "self = <tests.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x1165b5e10>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_detect_trends0/test_data'\nfeedback_samples = [Feedback(id=UUID('1e94c714-87f2-4d2c-8d46-a77671228f44'), content=\"I love the new dashboard layout. It's much easier ...5, 5, 3, 15, 42, 529134), themes=['Dashboard', 'UX', 'Information Overload'], cluster_id=None, impact_score=None), ...]\n\n    def test_detect_trends(self, temp_data_dir, feedback_samples):\n        \"\"\"Test trend detection in feedback.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir)\n    \n        # Set up feedback with themes and timestamps for trend detection\n        for i, feedback in enumerate(feedback_samples):\n            # Set different creation dates to test timeframes\n            days_ago = i % 3  # 0, 1, 2 days ago in a cycle\n>           feedback.created_at = datetime.now() - datetime.timedelta(days=days_ago)\nE           AttributeError: type object 'datetime.datetime' has no attribute 'timedelta'\n\ntests/feedback_analysis/test_engine.py:201: AttributeError"}, "teardown": {"duration": 0.00020458409562706947, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_cluster", "lineno": 229, "outcome": "passed", "keywords": ["test_get_cluster", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016662911511957645, "outcome": "passed"}, "call": {"duration": 0.005289749708026648, "outcome": "passed"}, "teardown": {"duration": 0.00019633304327726364, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_theme", "lineno": 248, "outcome": "passed", "keywords": ["test_get_theme", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.00172354094684124, "outcome": "passed"}, "call": {"duration": 0.007534042000770569, "outcome": "passed"}, "teardown": {"duration": 0.00019862502813339233, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_clusters", "lineno": 267, "outcome": "passed", "keywords": ["test_get_all_clusters", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017480417154729366, "outcome": "passed"}, "call": {"duration": 0.00505424989387393, "outcome": "passed"}, "teardown": {"duration": 0.00018475018441677094, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_themes", "lineno": 283, "outcome": "passed", "keywords": ["test_get_all_themes", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0018077497370541096, "outcome": "passed"}, "call": {"duration": 0.008000958245247602, "outcome": "passed"}, "teardown": {"duration": 0.00019316701218485832, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_search_feedback", "lineno": 299, "outcome": "passed", "keywords": ["test_search_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017287502996623516, "outcome": "passed"}, "call": {"duration": 0.0015281671658158302, "outcome": "passed"}, "teardown": {"duration": 0.00019362522289156914, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_theme", "lineno": 315, "outcome": "passed", "keywords": ["test_get_feedback_by_theme", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017789159901440144, "outcome": "passed"}, "call": {"duration": 0.0016464581713080406, "outcome": "passed"}, "teardown": {"duration": 0.00018037483096122742, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_cluster", "lineno": 343, "outcome": "passed", "keywords": ["test_get_feedback_by_cluster", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016999579966068268, "outcome": "passed"}, "call": {"duration": 0.004935749806463718, "outcome": "passed"}, "teardown": {"duration": 0.00018345797434449196, "outcome": "passed"}}, {"nodeid": "tests/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_performance_with_large_dataset", "lineno": 363, "outcome": "passed", "keywords": ["test_performance_with_large_dataset", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.00176920834928751, "outcome": "passed"}, "call": {"duration": 0.0923053752630949, "outcome": "passed"}, "teardown": {"duration": 0.00020787492394447327, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_initialization", "lineno": 15, "outcome": "passed", "keywords": ["test_initialization", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.002042208332568407, "outcome": "passed"}, "call": {"duration": 0.0002004588022828102, "outcome": "passed"}, "teardown": {"duration": 0.00017537502571940422, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_add_feature", "lineno": 27, "outcome": "passed", "keywords": ["test_add_feature", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.002025915775448084, "outcome": "passed"}, "call": {"duration": 0.0005817906931042671, "outcome": "passed"}, "teardown": {"duration": 0.0001982497051358223, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_add_strategic_goal", "lineno": 52, "outcome": "passed", "keywords": ["test_add_strategic_goal", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001708167139440775, "outcome": "passed"}, "call": {"duration": 0.000628042034804821, "outcome": "passed"}, "teardown": {"duration": 0.0001844591461122036, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_feature", "lineno": 77, "outcome": "passed", "keywords": ["test_get_feature", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0021691657602787018, "outcome": "passed"}, "call": {"duration": 0.0009068329818546772, "outcome": "passed"}, "teardown": {"duration": 0.00019366713240742683, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_strategic_goal", "lineno": 94, "outcome": "passed", "keywords": ["test_get_strategic_goal", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017179157584905624, "outcome": "passed"}, "call": {"duration": 0.000746666919440031, "outcome": "passed"}, "teardown": {"duration": 0.000173875130712986, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_features", "lineno": 111, "outcome": "passed", "keywords": ["test_get_all_features", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0019949167035520077, "outcome": "passed"}, "call": {"duration": 0.0009818337857723236, "outcome": "passed"}, "teardown": {"duration": 0.00019370904192328453, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_strategic_goals", "lineno": 126, "outcome": "passed", "keywords": ["test_get_all_strategic_goals", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0018365420401096344, "outcome": "passed"}, "call": {"duration": 0.0009308750741183758, "outcome": "passed"}, "teardown": {"duration": 0.00019016629084944725, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_map_strategic_alignment", "lineno": 141, "outcome": "passed", "keywords": ["test_map_strategic_alignment", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0020007924176752567, "outcome": "passed"}, "call": {"duration": 0.0017249593511223793, "outcome": "passed"}, "teardown": {"duration": 0.00021320907399058342, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_calculate_strategic_score", "lineno": 179, "outcome": "failed", "keywords": ["test_calculate_strategic_score", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0020515001378953457, "outcome": "passed"}, "call": {"duration": 0.0023344578221440315, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/prioritization/test_framework.py", "lineno": 208, "message": "assert 5.75 == 0.0"}, "traceback": [{"path": "tests/prioritization/test_framework.py", "lineno": 208, "message": "AssertionError"}], "longrepr": "self = <tests.prioritization.test_framework.TestPrioritizationFramework object at 0x1110d5570>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_calculate_strategic_score0/test_data'\nfeature_samples = [Feature(id=UUID('fd7b4fa4-d10b-41e1-a3ad-2f4929b6b0a3'), name='Dashboard Customization', description='Allow users to ...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 709998), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 709998))]\nstrategic_goal_samples = [StrategicGoal(id=UUID('b8eab259-2f52-4481-9817-1060454383c6'), name='Enterprise Market Growth', description='Increase...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 709684), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 709684))]\n\n    def test_calculate_strategic_score(self, temp_data_dir, feature_samples, strategic_goal_samples):\n        \"\"\"Test calculating strategic score for features.\"\"\"\n        framework = PrioritizationFramework(storage_dir=temp_data_dir)\n    \n        # Add features and goals\n        framework.add_feature(feature_samples)\n        framework.add_strategic_goal(strategic_goal_samples)\n    \n        # Map alignment for a feature\n        feature_id = str(feature_samples[0].id)\n        alignments = {\n            str(strategic_goal_samples[0].id): 9.0,  # CRITICAL priority - weight 4.0\n            str(strategic_goal_samples[1].id): 7.5,  # HIGH priority - weight 3.0\n            str(strategic_goal_samples[2].id): 5.0   # HIGH priority - weight 3.0\n        }\n        framework.map_strategic_alignment(feature_id, alignments)\n    \n        # Calculate strategic score\n        score = framework.calculate_strategic_score(feature_id)\n    \n        # Verify score calculation\n        # (9.0 * 4.0 + 7.5 * 3.0 + 5.0 * 3.0) / (4.0 + 3.0 + 3.0) = 7.25\n        expected_score = round((9.0 * 4.0 + 7.5 * 3.0 + 5.0 * 3.0) / (4.0 + 3.0 + 3.0), 2)\n        assert score == expected_score\n    \n        # Test with feature with no alignment\n        feature_id = str(feature_samples[3].id)  # No alignment set yet\n        score = framework.calculate_strategic_score(feature_id)\n>       assert score == 0.0\nE       assert 5.75 == 0.0\n\ntests/prioritization/test_framework.py:208: AssertionError"}, "teardown": {"duration": 0.00021116714924573898, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_weighted", "lineno": 213, "outcome": "failed", "keywords": ["test_prioritize_features_weighted", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0020328746177256107, "outcome": "passed"}, "call": {"duration": 0.003681082744151354, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/prioritization/test_framework.py", "lineno": 243, "message": "AssertionError: assert <Priority.LOW: 'low'> in [<Priority.CRITICAL: 'critical'>, <Priority.HIGH: 'high'>]"}, "traceback": [{"path": "tests/prioritization/test_framework.py", "lineno": 243, "message": "AssertionError"}], "longrepr": "self = <tests.prioritization.test_framework.TestPrioritizationFramework object at 0x107dd6b30>\ntemp_data_dir = '/private/var/folders/m3/l9jry0zx70jc48bpr6wb03gc0000gp/T/pytest-of-justinchiu/pytest-17/test_prioritize_features_weigh0/test_data'\nfeature_samples = [Feature(id=UUID('c385ae46-324a-4a4d-9290-d31527d9c112'), name='Dashboard Customization', description='Allow users to ...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 721718), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 724298))]\nstrategic_goal_samples = [StrategicGoal(id=UUID('6c92521f-a54b-4569-a24e-b11fef055263'), name='Enterprise Market Growth', description='Increase...ed_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 721412), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 721413))]\n\n    def test_prioritize_features_weighted(self, temp_data_dir, feature_samples, strategic_goal_samples):\n        \"\"\"Test prioritizing features using weighted scoring model.\"\"\"\n        framework = PrioritizationFramework(\n            storage_dir=temp_data_dir,\n            default_scoring_model=ScoringModel.WEIGHTED\n        )\n    \n        # Add features and goals\n        framework.add_feature(feature_samples)\n        framework.add_strategic_goal(strategic_goal_samples)\n    \n        # Set up strategic alignments for features\n        for i, feature in enumerate(feature_samples):\n            alignments = {\n                str(strategic_goal_samples[0].id): 8.0 - i * 0.5,  # Decreasing alignment\n                str(strategic_goal_samples[1].id): 7.0 - i * 0.5\n            }\n            framework.map_strategic_alignment(str(feature.id), alignments)\n    \n        # Prioritize all features\n        prioritized = framework.prioritize_features()\n    \n        assert len(prioritized) == len(feature_samples)\n    \n        # Verify prioritized list is sorted by score descending\n        for i in range(len(prioritized) - 1):\n            assert prioritized[i][\"score\"] >= prioritized[i + 1][\"score\"]\n    \n        # Verify first feature has highest score and appropriate priority\n>       assert prioritized[0][\"priority\"] in [Priority.CRITICAL, Priority.HIGH]\nE       AssertionError: assert <Priority.LOW: 'low'> in [<Priority.CRITICAL: 'critical'>, <Priority.HIGH: 'high'>]\n\ntests/prioritization/test_framework.py:243: AssertionError"}, "teardown": {"duration": 0.00021004211157560349, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_other_models", "lineno": 249, "outcome": "passed", "keywords": ["test_prioritize_features_other_models", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0020320420153439045, "outcome": "passed"}, "call": {"duration": 0.007584125269204378, "outcome": "passed"}, "teardown": {"duration": 0.00019312463700771332, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_analyze_dependencies", "lineno": 287, "outcome": "passed", "keywords": ["test_analyze_dependencies", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001658374909311533, "outcome": "passed"}, "call": {"duration": 0.0008369581773877144, "outcome": "passed"}, "teardown": {"duration": 0.0001766248606145382, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_generate_roadmap", "lineno": 353, "outcome": "passed", "keywords": ["test_generate_roadmap", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0019987081177532673, "outcome": "passed"}, "call": {"duration": 0.002537625376135111, "outcome": "passed"}, "teardown": {"duration": 0.00019975006580352783, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_estimate_roi", "lineno": 387, "outcome": "passed", "keywords": ["test_estimate_roi", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0020846249535679817, "outcome": "passed"}, "call": {"duration": 0.0005191247910261154, "outcome": "passed"}, "teardown": {"duration": 0.0001777089200913906, "outcome": "passed"}}, {"nodeid": "tests/prioritization/test_framework.py::TestPrioritizationFramework::test_performance_with_large_dataset", "lineno": 437, "outcome": "passed", "keywords": ["test_performance_with_large_dataset", "TestPrioritizationFramework", "test_framework.py", "prioritization", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017035407945513725, "outcome": "passed"}, "call": {"duration": 0.03407775005325675, "outcome": "passed"}, "teardown": {"duration": 0.0002021249383687973, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_initialization", "lineno": 14, "outcome": "passed", "keywords": ["test_initialization", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0021493746899068356, "outcome": "passed"}, "call": {"duration": 0.00022887485101819038, "outcome": "passed"}, "teardown": {"duration": 0.0001759999431669712, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_stakeholder", "lineno": 27, "outcome": "passed", "keywords": ["test_add_stakeholder", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017627920024096966, "outcome": "passed"}, "call": {"duration": 0.0011006658896803856, "outcome": "passed"}, "teardown": {"duration": 0.00017095822840929031, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_perspective", "lineno": 52, "outcome": "error", "keywords": ["test_add_perspective", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016254172660410404, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('90017737-7e0d-4b60-b426-00df66ab0e96'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 797747), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 797747)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00024120789021253586, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_relationship", "lineno": 84, "outcome": "passed", "keywords": ["test_add_relationship", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0015789167955517769, "outcome": "passed"}, "call": {"duration": 0.0021774577908217907, "outcome": "passed"}, "teardown": {"duration": 0.00017120921984314919, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder", "lineno": 112, "outcome": "passed", "keywords": ["test_get_stakeholder", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014643329195678234, "outcome": "passed"}, "call": {"duration": 0.0016421671025454998, "outcome": "passed"}, "teardown": {"duration": 0.00015420792624354362, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspective", "lineno": 129, "outcome": "error", "keywords": ["test_get_perspective", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014827921986579895, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('fc7e3818-74c2-4d66-83b9-d2e61d1418d5'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 818825), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 818825)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00023408373817801476, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_relationship", "lineno": 147, "outcome": "passed", "keywords": ["test_get_relationship", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0015332079492509365, "outcome": "passed"}, "call": {"duration": 0.0023446669802069664, "outcome": "passed"}, "teardown": {"duration": 0.00017445813864469528, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_stakeholders", "lineno": 165, "outcome": "passed", "keywords": ["test_get_all_stakeholders", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.002159541007131338, "outcome": "passed"}, "call": {"duration": 0.001047166995704174, "outcome": "passed"}, "teardown": {"duration": 0.00015337485820055008, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_perspectives", "lineno": 180, "outcome": "error", "keywords": ["test_get_all_perspectives", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001974250189960003, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('4934f116-f1d9-4e87-aa95-ff26973f50c2'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 859038), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 859038)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00017583277076482773, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_relationships", "lineno": 196, "outcome": "passed", "keywords": ["test_get_all_relationships", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014833328314125538, "outcome": "passed"}, "call": {"duration": 0.0021040840074419975, "outcome": "passed"}, "teardown": {"duration": 0.00024108309298753738, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_perspectives", "lineno": 212, "outcome": "error", "keywords": ["test_get_stakeholder_perspectives", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.001620166003704071, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('8826a7e8-8dcc-432b-a510-123bf4e5dbdf'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 876024), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 876025)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.0002165837213397026, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspectives_by_topic", "lineno": 250, "outcome": "error", "keywords": ["test_get_perspectives_by_topic", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016587907448410988, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('51c0cb7b-41be-47bf-b2aa-3f9a49b45afc'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 888369), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 888369)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00020899996161460876, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_relationships", "lineno": 281, "outcome": "passed", "keywords": ["test_get_stakeholder_relationships", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017654583789408207, "outcome": "passed"}, "call": {"duration": 0.001905541867017746, "outcome": "passed"}, "teardown": {"duration": 0.00017116684466600418, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_detect_conflicts", "lineno": 325, "outcome": "error", "keywords": ["test_detect_conflicts", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0015712501481175423, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('27e37175-6e74-4d7c-90ac-5a8760250745'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 904721), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 904721)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00018899980932474136, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_identify_consensus", "lineno": 387, "outcome": "error", "keywords": ["test_identify_consensus", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0015564998611807823, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('816484f9-12b6-47b4-8f58-fea9bf99184c'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 916940), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 916940)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00020908378064632416, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_integrate_perspectives", "lineno": 437, "outcome": "error", "keywords": ["test_integrate_perspectives", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0018885000608861446, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('b9b4e02a-9dad-403d-8a27-841967552bc8'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 929467), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 929467)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.0001936657354235649, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_map", "lineno": 490, "outcome": "passed", "keywords": ["test_generate_stakeholder_map", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0016296664252877235, "outcome": "passed"}, "call": {"duration": 0.0020742909982800484, "outcome": "passed"}, "teardown": {"duration": 0.000167792197316885, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_stakeholder_influence", "lineno": 535, "outcome": "passed", "keywords": ["test_analyze_stakeholder_influence", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0014712498523294926, "outcome": "passed"}, "call": {"duration": 0.0011031669564545155, "outcome": "passed"}, "teardown": {"duration": 0.00015745824202895164, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_matrix", "lineno": 564, "outcome": "error", "keywords": ["test_generate_stakeholder_matrix", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0018648747354745865, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('11f15ef6-1482-47a9-923a-bd8ad487fb99'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 949103), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 949103)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.00017133401706814766, "outcome": "passed"}}, {"nodeid": "tests/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_perspective_alignment", "lineno": 615, "outcome": "error", "keywords": ["test_analyze_perspective_alignment", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "tests", "personal_knowledge_management_product_manager", ""], "setup": {"duration": 0.0017661252059042454, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError: name 'defaultdict' is not defined"}, "traceback": [{"path": "tests/fixtures/test_data.py", "lineno": 1040, "message": "NameError"}], "longrepr": "stakeholder_samples = [Stakeholder(id=UUID('9869f280-253e-40f1-b2ef-19eea1cf4b7d'), name='Michael Rodriguez', title='Chief Technology Office...=datetime.datetime(2025, 5, 11, 3, 15, 42, 961603), updated_at=datetime.datetime(2025, 5, 11, 3, 15, 42, 961604)), ...]\n\n    @pytest.fixture\n    def perspective_samples(stakeholder_samples):\n        \"\"\"Generate sample perspectives from stakeholders.\"\"\"\n        stakeholders = stakeholder_samples\n    \n        # Update stakeholder perspectives with returned perspective IDs\n        perspectives = [\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"We should prioritize performance and native feel in the mobile redesign.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[0].id  # CTO\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"Cross-platform development will give us the best time-to-market advantages.\",\n                priority=Priority.CRITICAL,\n                influence_level=0.9,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Mobile App Redesign\",\n                content=\"User experience must be the top priority regardless of implementation approach.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[4].id  # UX Designer\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Full customization will require significant engineering resources and may delay other priorities.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.8,\n                agreement_level=0.4,\n                stakeholder_id=stakeholders[3].id  # Engineering Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"Customization is a top request from enterprise customers and will help close deals.\",\n                priority=Priority.HIGH,\n                influence_level=0.7,\n                agreement_level=0.9,\n                stakeholder_id=stakeholders[5].id  # Director of Sales\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Dashboard Customization\",\n                content=\"We should focus on creating smart defaults rather than overwhelming users with options.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.5,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Advanced reporting capabilities are essential for enterprise customers and competitive parity.\",\n                priority=Priority.HIGH,\n                influence_level=0.8,\n                agreement_level=0.8,\n                stakeholder_id=stakeholders[1].id  # VP of Product\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Report builder should prioritize template-based approaches for ease of use.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.6,\n                agreement_level=0.7,\n                stakeholder_id=stakeholders[2].id  # Product Manager\n            ),\n            Perspective(\n                id=uuid4(),\n                topic=\"Reporting Capabilities\",\n                content=\"Export formats and scheduling should be the focus for initial reporting improvements.\",\n                priority=Priority.MEDIUM,\n                influence_level=0.7,\n                agreement_level=0.6,\n                stakeholder_id=stakeholders[6].id  # Customer Success Manager\n            )\n        ]\n    \n        # Update stakeholders with perspective IDs\n>       stakeholder_perspectives = defaultdict(list)\nE       NameError: name 'defaultdict' is not defined\n\ntests/fixtures/test_data.py:1040: NameError"}, "teardown": {"duration": 0.0006841667927801609, "outcome": "passed"}}], "warnings": [{"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4a862800-5453-4347-a356-47edd31805e1', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='8cc3865a-d436-43b1-bf84-0076660f91f5', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='398d3cea-133e-4293-96e4-b3b32eea68bc', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='18910cbc-1d99-4681-bb9d-3c5ea8502772', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='840cdddc-946c-458f-9f1f-541746c6e185', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='e38f2077-87b4-41d3-af2c-85f5018b37e4', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4a862800-5453-4347-a356-47edd31805e1', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='8cc3865a-d436-43b1-bf84-0076660f91f5', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='398d3cea-133e-4293-96e4-b3b32eea68bc', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='18910cbc-1d99-4681-bb9d-3c5ea8502772', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='840cdddc-946c-458f-9f1f-541746c6e185', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='e38f2077-87b4-41d3-af2c-85f5018b37e4', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='726c178a-51f7-46b2-96c4-66e4e7060e0d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='8cc3865a-d436-43b1-bf84-0076660f91f5', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='af808459-8e51-4773-820f-82d8f6f55447', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='18910cbc-1d99-4681-bb9d-3c5ea8502772', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='c4a00560-8825-4042-9239-709a18cec059', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='e38f2077-87b4-41d3-af2c-85f5018b37e4', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='52de9f2d-963d-4736-afdd-902b56616010', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='726c178a-51f7-46b2-96c4-66e4e7060e0d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='8cc3865a-d436-43b1-bf84-0076660f91f5', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='af808459-8e51-4773-820f-82d8f6f55447', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='18910cbc-1d99-4681-bb9d-3c5ea8502772', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='c4a00560-8825-4042-9239-709a18cec059', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='e38f2077-87b4-41d3-af2c-85f5018b37e4', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='52de9f2d-963d-4736-afdd-902b56616010', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='726c178a-51f7-46b2-96c4-66e4e7060e0d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4a862800-5453-4347-a356-47edd31805e1', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='af808459-8e51-4773-820f-82d8f6f55447', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='398d3cea-133e-4293-96e4-b3b32eea68bc', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='c4a00560-8825-4042-9239-709a18cec059', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='840cdddc-946c-458f-9f1f-541746c6e185', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='52de9f2d-963d-4736-afdd-902b56616010', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='726c178a-51f7-46b2-96c4-66e4e7060e0d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4a862800-5453-4347-a356-47edd31805e1', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='af808459-8e51-4773-820f-82d8f6f55447', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='398d3cea-133e-4293-96e4-b3b32eea68bc', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='c4a00560-8825-4042-9239-709a18cec059', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='840cdddc-946c-458f-9f1f-541746c6e185', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='52de9f2d-963d-4736-afdd-902b56616010', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='b5405567-85f5-4b98-8913-0ea010d7b420', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='050554ac-2ef3-45a4-ba34-148597b0785f', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='a6bbd89f-2bfd-439c-92d6-ae89df9809e3', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='656d834a-fd47-4a6b-962f-0de164a00d4d', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Number of distinct clusters (2) found smaller than n_clusters (5). Possibly due to duplicate points in X.", "category": "ConvergenceWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/sklearn/base.py", "lineno": 1389}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d85ee6dc-f20b-4e46-a5e0-b0cf0be83152', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='3b946da4-41ec-4123-b207-c4d35151bfd3', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='7d251dcd-cbe9-41c8-a12b-45b181cc1622', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='b8eab259-2f52-4481-9817-1060454383c6', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='294e33d0-862b-4e99-a156-6a6c93d43859', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4553cddc-a8a5-4d7a-b109-4c4b13038f51', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6c92521f-a54b-4569-a24e-b11fef055263', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='82ed69a7-2241-43e8-b78d-6c3f257b3689', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='45633c32-f694-4791-8fcd-83cf599c5ac2', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='747967e0-ef02-4b1d-9e7a-da8d5b2fc2ae', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='642d6635-b343-4134-a72e-e794ba7beb10', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='2454472a-e2c6-4a0a-a10c-18e551cf8745', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6a1748f8-a54b-4d15-926c-f90b8f5573c9', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='642d6635-b343-4134-a72e-e794ba7beb10', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='2454472a-e2c6-4a0a-a10c-18e551cf8745', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6a1748f8-a54b-4d15-926c-f90b8f5573c9', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='642d6635-b343-4134-a72e-e794ba7beb10', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6a1748f8-a54b-4d15-926c-f90b8f5573c9', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='642d6635-b343-4134-a72e-e794ba7beb10', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='2454472a-e2c6-4a0a-a10c-18e551cf8745', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='642d6635-b343-4134-a72e-e794ba7beb10', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6a1748f8-a54b-4d15-926c-f90b8f5573c9', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='2454472a-e2c6-4a0a-a10c-18e551cf8745', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6a1748f8-a54b-4d15-926c-f90b8f5573c9', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='d35e560f-0367-4a6c-8236-7f5fb125acca', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='4ffeb6e7-8180-4a1a-ab22-46c6f8052c9d', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='642d6635-b343-4134-a72e-e794ba7beb10', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6a1748f8-a54b-4d15-926c-f90b8f5573c9', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/personal_knowledge_management/personal_knowledge_management_product_manager/.venv/lib/python3.10/site-packages/pydantic/main.py", "lineno": 519}]}