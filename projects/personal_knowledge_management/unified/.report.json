{"created": 1747359942.2372909, "duration": 19.32688307762146, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified", "environment": {}, "summary": {"passed": 214, "failed": 44, "total": 258, "collected": 258}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_minimal_data", "type": "Function", "lineno": 14}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_missing_optional_fields", "type": "Function", "lineno": 30}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_all_fields", "type": "Function", "lineno": 48}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_single_author", "type": "Function", "lineno": 76}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_two_authors", "type": "Function", "lineno": 86}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_many_authors", "type": "Function", "lineno": 97}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_direct_format_citation", "type": "Function", "lineno": 107}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_direct_format_author_list", "type": "Function", "lineno": 130}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_book", "type": "Function", "lineno": 145}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_conference", "type": "Function", "lineno": 172}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_special_characters", "type": "Function", "lineno": 194}]}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_author_list", "type": "Function", "lineno": 45}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_apa", "type": "Function", "lineno": 77}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_mla", "type": "Function", "lineno": 89}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_chicago", "type": "Function", "lineno": 102}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_harvard", "type": "Function", "lineno": 115}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_ieee", "type": "Function", "lineno": 127}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_vancouver", "type": "Function", "lineno": 140}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_bibtex", "type": "Function", "lineno": 152}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_ris", "type": "Function", "lineno": 170}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_book_citation", "type": "Function", "lineno": 191}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_missing_fields", "type": "Function", "lineno": 214}]}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_bibtex_file_parsing_basics_simple", "type": "Function", "lineno": 20}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_bibtex_file_with_multiple_entries", "type": "Function", "lineno": 28}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_parse_bibtex_file_nonexistent", "type": "Function", "lineno": 76}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_ris_file_parsing_simple", "type": "Function", "lineno": 82}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_parse_ris_file_nonexistent", "type": "Function", "lineno": 90}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_pdf_metadata_direct", "type": "Function", "lineno": 95}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_doi_functionality", "type": "Function", "lineno": 111}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_doi_not_found", "type": "Function", "lineno": 124}]}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_extract_doi_from_pdf", "type": "Function", "lineno": 16}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_extract_pdf_metadata", "type": "Function", "lineno": 52}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_bibtex_file", "type": "Function", "lineno": 100}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_ris_file", "type": "Function", "lineno": 162}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_invalid_bibtex", "type": "Function", "lineno": 229}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_invalid_ris", "type": "Function", "lineno": 250}]}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/citations", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py", "type": "Module"}]}, {"nodeid": "tests/academic_researcher/collaboration", "outcome": "passed", "result": []}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_and_get_note", "type": "Function", "lineno": 34}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_update_note", "type": "Function", "lineno": 52}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_delete_note", "type": "Function", "lineno": 78}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_citation_and_link_note", "type": "Function", "lineno": 95}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_research_question_and_add_evidence", "type": "Function", "lineno": 129}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_experiment", "type": "Function", "lineno": 181}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_grant_proposal_and_add_items", "type": "Function", "lineno": 215}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_search", "type": "Function", "lineno": 267}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_get_related_nodes", "type": "Function", "lineno": 303}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_collaborator_and_annotation", "type": "Function", "lineno": 348}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_generate_citation", "type": "Function", "lineno": 382}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_backup_and_restore", "type": "Function", "lineno": 412}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_knowledge_graph_structure", "type": "Function", "lineno": 450}]}, {"nodeid": "tests/academic_researcher/core/test_brain.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_init_default_values", "type": "Function", "lineno": 18}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_init_custom_values", "type": "Function", "lineno": 27}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_update_method", "type": "Function", "lineno": 45}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestNote", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestNote::test_init_minimal", "type": "Function", "lineno": 59}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestNote::test_init_full", "type": "Function", "lineno": 70}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCitation", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestCitation::test_init_minimal", "type": "Function", "lineno": 97}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCitation::test_init_full", "type": "Function", "lineno": 113}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestResearchQuestion", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestResearchQuestion::test_init_minimal", "type": "Function", "lineno": 158}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestResearchQuestion::test_init_with_evidence", "type": "Function", "lineno": 172}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment::test_init_minimal", "type": "Function", "lineno": 205}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment::test_init_full", "type": "Function", "lineno": 224}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment::test_end_date_validation", "type": "Function", "lineno": 258}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestGrantProposal", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestGrantProposal::test_init_minimal", "type": "Function", "lineno": 276}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestGrantProposal::test_init_full", "type": "Function", "lineno": 294}]}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCollaborator", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestCollaborator::test_init_minimal", "type": "Function", "lineno": 330}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCollaborator::test_init_full", "type": "Function", "lineno": 340}]}, {"nodeid": "tests/academic_researcher/core/test_models.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode", "type": "Class"}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestNote", "type": "Class"}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCitation", "type": "Class"}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestResearchQuestion", "type": "Class"}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment", "type": "Class"}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestGrantProposal", "type": "Class"}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCollaborator", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_init_creates_directories", "type": "Function", "lineno": 31}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_note", "type": "Function", "lineno": 51}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_citation", "type": "Function", "lineno": 68}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_update_existing_item", "type": "Function", "lineno": 88}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_nonexistent_item", "type": "Function", "lineno": 102}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_invalid_file", "type": "Function", "lineno": 109}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_delete_item", "type": "Function", "lineno": 121}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_delete_nonexistent_item", "type": "Function", "lineno": 136}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_list_all", "type": "Function", "lineno": 143}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_query", "type": "Function", "lineno": 173}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_attachment", "type": "Function", "lineno": 193}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_nonexistent_attachment", "type": "Function", "lineno": 218}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_export_to_dataframe", "type": "Function", "lineno": 224}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_backup_and_restore", "type": "Function", "lineno": 245}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_search_text", "type": "Function", "lineno": 289}]}, {"nodeid": "tests/academic_researcher/core/test_storage.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/core", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/core/test_brain.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/core/test_models.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/core/test_storage.py", "type": "Module"}]}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_create_default_templates", "type": "Function", "lineno": 35}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_list_templates", "type": "Function", "lineno": 47}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_get_template", "type": "Function", "lineno": 70}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_create_template", "type": "Function", "lineno": 88}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_apply_template", "type": "Function", "lineno": 119}]}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_create_default_templates", "type": "Function", "lineno": 30}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_get_template", "type": "Function", "lineno": 51}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_list_templates", "type": "Function", "lineno": 74}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_create_template", "type": "Function", "lineno": 88}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_apply_template", "type": "Function", "lineno": 127}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_template_validation", "type": "Function", "lineno": 203}]}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/experiments", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/experiments/test_template_functions.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py", "type": "Module"}]}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_proposal_markdown", "type": "Function", "lineno": 85}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_proposal_yaml", "type": "Function", "lineno": 124}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_unsupported_format", "type": "Function", "lineno": 175}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_convert_uuids_to_strings", "type": "Function", "lineno": 202}]}, {"nodeid": "tests/academic_researcher/grants/test_export.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_markdown", "type": "Function", "lineno": 119}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_yaml", "type": "Function", "lineno": 153}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_unknown_extension", "type": "Function", "lineno": 186}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_markdown_error_handling", "type": "Function", "lineno": 211}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_yaml_error_handling", "type": "Function", "lineno": 236}]}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/grants", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/grants/test_export.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py", "type": "Module"}]}, {"nodeid": "tests/academic_researcher/notes", "outcome": "passed", "result": []}, {"nodeid": "tests/academic_researcher/research", "outcome": "passed", "result": []}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_note_citation_linking", "type": "Function", "lineno": 29}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_automatic_citation_extraction", "type": "Function", "lineno": 68}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_multiple_citation_links", "type": "Function", "lineno": 95}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_removing_citation_links", "type": "Function", "lineno": 134}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_cascading_deletion", "type": "Function", "lineno": 187}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_navigation_between_linked_items", "type": "Function", "lineno": 229}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_circular_navigation", "type": "Function", "lineno": 277}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_section_references", "type": "Function", "lineno": 343}]}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_apa_citation_accuracy", "type": "Function", "lineno": 30}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_mla_citation_accuracy", "type": "Function", "lineno": 58}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_chicago_citation_accuracy", "type": "Function", "lineno": 85}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_bibtex_citation_accuracy", "type": "Function", "lineno": 112}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_bibtex_parser_accuracy", "type": "Function", "lineno": 146}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_ris_parser_accuracy", "type": "Function", "lineno": 223}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_malformed_citation_handling", "type": "Function", "lineno": 306}]}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_init_command", "type": "Function", "lineno": 38}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_main_function", "type": "Function", "lineno": 56}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_note_command_integration_simplified", "type": "Function", "lineno": 85}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_search_command_existence", "type": "Function", "lineno": 104}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_main_with_init_integration", "type": "Function", "lineno": 140}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_multiple_cli_commands", "type": "Function", "lineno": 157}]}, {"nodeid": "tests/academic_researcher/test_cli.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_cli.py::TestCLI", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_create_collaborator", "type": "Function", "lineno": 108}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_add_annotations", "type": "Function", "lineno": 130}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_multiple_annotations_from_same_collaborator", "type": "Function", "lineno": 207}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_annotations_on_multiple_documents", "type": "Function", "lineno": 248}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations", "type": "Function", "lineno": 311}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations_with_replies", "type": "Function", "lineno": 386}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations_with_invalid_data", "type": "Function", "lineno": 450}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_invalid_annotations", "type": "Function", "lineno": 555}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_annotations_on_citations", "type": "Function", "lineno": 598}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_maintaining_annotation_integrity", "type": "Function", "lineno": 643}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_collaborative_feedback_integration", "type": "Function", "lineno": 680}]}, {"nodeid": "tests/academic_researcher/test_collaboration.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_default_templates_availability", "type": "Function", "lineno": 32}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_behavioral_experiment_template", "type": "Function", "lineno": 61}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_neuroimaging_experiment_template", "type": "Function", "lineno": 106}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_molecular_biology_experiment_template", "type": "Function", "lineno": 156}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_computational_modeling_experiment_template", "type": "Function", "lineno": 203}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_template_with_missing_required_fields", "type": "Function", "lineno": 252}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_template_with_optional_fields", "type": "Function", "lineno": 264}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_custom_template_creation", "type": "Function", "lineno": 286}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_sleep_study_template", "type": "Function", "lineno": 403}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_linking_to_research_question", "type": "Function", "lineno": 463}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_documentation_with_notes", "type": "Function", "lineno": 516}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_status_updates", "type": "Function", "lineno": 577}]}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_create_grant_proposal", "type": "Function", "lineno": 116}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_add_items_to_grant_workspace", "type": "Function", "lineno": 153}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_adding_items_incrementally", "type": "Function", "lineno": 208}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_grant_proposal_status_progression", "type": "Function", "lineno": 251}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_export_grant_proposal_to_markdown", "type": "Function", "lineno": 289}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_export_grant_proposal_to_yaml", "type": "Function", "lineno": 345}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_grant_proposal_version_history", "type": "Function", "lineno": 413}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_budget_and_timeline_management", "type": "Function", "lineno": 516}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_related_nodes_navigation", "type": "Function", "lineno": 631}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_multi_grant_proposal_organization", "type": "Function", "lineno": 689}]}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_main.py::test_main_module_imports", "type": "Function", "lineno": 7}, {"nodeid": "tests/academic_researcher/test_main.py::test_main_execution", "type": "Function", "lineno": 15}]}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_basic_performance", "type": "Function", "lineno": 108}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_note_linking_performance", "type": "Function", "lineno": 163}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_citation_processing", "type": "Function", "lineno": 188}]}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_create_research_question", "type": "Function", "lineno": 30}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_adding_supporting_evidence", "type": "Function", "lineno": 65}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_adding_contradicting_evidence", "type": "Function", "lineno": 121}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_balanced_evidence_evaluation", "type": "Function", "lineno": 163}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_evidence_strength_levels", "type": "Function", "lineno": 258}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_evidence_with_multiple_citations", "type": "Function", "lineno": 342}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_related_questions", "type": "Function", "lineno": 390}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_identifying_knowledge_gaps", "type": "Function", "lineno": 509}]}, {"nodeid": "tests/academic_researcher/test_research_questions.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions", "type": "Class"}]}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_paper_import_to_note_creation", "type": "Function", "lineno": 31}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_research_question_analysis", "type": "Function", "lineno": 83}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_grant_proposal_assembly", "type": "Function", "lineno": 158}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_collaborative_annotation", "type": "Function", "lineno": 263}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_experiment_documentation", "type": "Function", "lineno": 333}]}, {"nodeid": "tests/academic_researcher/test_workflows.py", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows", "type": "Class"}]}, {"nodeid": "tests/academic_researcher", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher/citations", "type": "Package"}, {"nodeid": "tests/academic_researcher/collaboration", "type": "Package"}, {"nodeid": "tests/academic_researcher/core", "type": "Package"}, {"nodeid": "tests/academic_researcher/experiments", "type": "Package"}, {"nodeid": "tests/academic_researcher/grants", "type": "Package"}, {"nodeid": "tests/academic_researcher/notes", "type": "Package"}, {"nodeid": "tests/academic_researcher/research", "type": "Package"}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_cli.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_collaboration.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_main.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_research_questions.py", "type": "Module"}, {"nodeid": "tests/academic_researcher/test_workflows.py", "type": "Module"}]}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitor", "type": "Function", "lineno": 28}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitive_feature", "type": "Function", "lineno": 53}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_market_gap", "type": "Function", "lineno": 78}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitor", "type": "Function", "lineno": 103}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitive_feature", "type": "Function", "lineno": 120}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_market_gap", "type": "Function", "lineno": 137}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitors", "type": "Function", "lineno": 154}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitive_features", "type": "Function", "lineno": 169}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_market_gaps", "type": "Function", "lineno": 184}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_competitor_feature", "type": "Function", "lineno": 199}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_feature_implementation", "type": "Function", "lineno": 227}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_compare_features", "type": "Function", "lineno": 266}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_identify_gaps", "type": "Function", "lineno": 313}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_create_market_gap_from_analysis", "type": "Function", "lineno": 348}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_competitive_matrix", "type": "Function", "lineno": 382}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_track_competitive_timeline", "type": "Function", "lineno": 433}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_feature_parity_report", "type": "Function", "lineno": 472}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_performance_with_large_dataset", "type": "Function", "lineno": 530}]}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem", "type": "Class"}]}, {"nodeid": "tests/product_manager/competitive_analysis", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/competitive_analysis/test_system.py", "type": "Module"}]}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_add_decision", "type": "Function", "lineno": 24}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision", "type": "Function", "lineno": 48}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_all_decisions", "type": "Function", "lineno": 65}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_add_alternative_to_decision", "type": "Function", "lineno": 80}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_link_related_decisions", "type": "Function", "lineno": 142}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_record_outcome_assessment", "type": "Function", "lineno": 186}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_search_decisions", "type": "Function", "lineno": 210}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision_history", "type": "Function", "lineno": 247}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_build_decision_graph", "type": "Function", "lineno": 278}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_analyze_alternatives", "type": "Function", "lineno": 333}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_generate_decision_template", "type": "Function", "lineno": 375}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_export_decision", "type": "Function", "lineno": 413}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_calculate_decision_stats", "type": "Function", "lineno": 452}]}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry", "type": "Class"}]}, {"nodeid": "tests/product_manager/decision_registry", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/decision_registry/test_registry.py", "type": "Module"}]}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_initialization", "type": "Function", "lineno": 14}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_add_feedback", "type": "Function", "lineno": 29}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback", "type": "Function", "lineno": 63}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_feedback", "type": "Function", "lineno": 80}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_analyze_sentiment", "type": "Function", "lineno": 95}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_kmeans", "type": "Function", "lineno": 126}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_dbscan", "type": "Function", "lineno": 157}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_extract_themes", "type": "Function", "lineno": 181}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_detect_trends", "type": "Function", "lineno": 213}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_cluster", "type": "Function", "lineno": 250}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_theme", "type": "Function", "lineno": 269}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_clusters", "type": "Function", "lineno": 288}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_themes", "type": "Function", "lineno": 304}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_search_feedback", "type": "Function", "lineno": 320}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_theme", "type": "Function", "lineno": 336}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_cluster", "type": "Function", "lineno": 364}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_performance_with_large_dataset", "type": "Function", "lineno": 384}]}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine", "type": "Class"}]}, {"nodeid": "tests/product_manager/feedback_analysis/test_refactored_engine.py", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/feedback_analysis/test_refactored_engine.py::test_feedback_analysis_engine_refactored", "type": "Function", "lineno": 21}]}, {"nodeid": "tests/product_manager/feedback_analysis", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/feedback_analysis/test_engine.py", "type": "Module"}, {"nodeid": "tests/product_manager/feedback_analysis/test_refactored_engine.py", "type": "Module"}]}, {"nodeid": "tests/product_manager/fixtures/test_data.py", "outcome": "passed", "result": []}, {"nodeid": "tests/product_manager/fixtures", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/fixtures/test_data.py", "type": "Module"}]}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_add_feature", "type": "Function", "lineno": 27}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_add_strategic_goal", "type": "Function", "lineno": 52}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_feature", "type": "Function", "lineno": 77}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_strategic_goal", "type": "Function", "lineno": 94}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_features", "type": "Function", "lineno": 111}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_strategic_goals", "type": "Function", "lineno": 126}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_map_strategic_alignment", "type": "Function", "lineno": 141}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_calculate_strategic_score", "type": "Function", "lineno": 179}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_weighted", "type": "Function", "lineno": 215}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_other_models", "type": "Function", "lineno": 251}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_analyze_dependencies", "type": "Function", "lineno": 289}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_generate_roadmap", "type": "Function", "lineno": 355}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_estimate_roi", "type": "Function", "lineno": 389}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_performance_with_large_dataset", "type": "Function", "lineno": 439}]}, {"nodeid": "tests/product_manager/prioritization/test_framework.py", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework", "type": "Class"}]}, {"nodeid": "tests/product_manager/prioritization", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/prioritization/test_framework.py", "type": "Module"}]}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_initialization", "type": "Function", "lineno": 14}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_stakeholder", "type": "Function", "lineno": 27}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_perspective", "type": "Function", "lineno": 58}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_relationship", "type": "Function", "lineno": 97}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder", "type": "Function", "lineno": 139}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspective", "type": "Function", "lineno": 156}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_relationship", "type": "Function", "lineno": 174}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_stakeholders", "type": "Function", "lineno": 192}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_perspectives", "type": "Function", "lineno": 207}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_relationships", "type": "Function", "lineno": 223}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_perspectives", "type": "Function", "lineno": 239}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspectives_by_topic", "type": "Function", "lineno": 277}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_relationships", "type": "Function", "lineno": 308}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_detect_conflicts", "type": "Function", "lineno": 352}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_identify_consensus", "type": "Function", "lineno": 414}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_integrate_perspectives", "type": "Function", "lineno": 464}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_map", "type": "Function", "lineno": 517}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_stakeholder_influence", "type": "Function", "lineno": 562}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_matrix", "type": "Function", "lineno": 591}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_perspective_alignment", "type": "Function", "lineno": 642}]}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager", "type": "Class"}]}, {"nodeid": "tests/product_manager/stakeholder_insights", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py", "type": "Module"}]}, {"nodeid": "tests/product_manager", "outcome": "passed", "result": [{"nodeid": "tests/product_manager/competitive_analysis", "type": "Package"}, {"nodeid": "tests/product_manager/decision_registry", "type": "Package"}, {"nodeid": "tests/product_manager/feedback_analysis", "type": "Package"}, {"nodeid": "tests/product_manager/fixtures", "type": "Package"}, {"nodeid": "tests/product_manager/prioritization", "type": "Package"}, {"nodeid": "tests/product_manager/stakeholder_insights", "type": "Package"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/academic_researcher", "type": "Package"}, {"nodeid": "tests/product_manager", "type": "Package"}]}], "tests": [{"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_minimal_data", "lineno": 14, "outcome": "passed", "keywords": ["test_format_citation_with_minimal_data", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0013361319433897734, "outcome": "passed"}, "call": {"duration": 0.000665303086861968, "outcome": "passed"}, "teardown": {"duration": 0.00030379905365407467, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_missing_optional_fields", "lineno": 30, "outcome": "passed", "keywords": ["test_format_citation_with_missing_optional_fields", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00018995697610080242, "outcome": "passed"}, "call": {"duration": 0.00036018388345837593, "outcome": "passed"}, "teardown": {"duration": 0.0001578470692038536, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_all_fields", "lineno": 48, "outcome": "passed", "keywords": ["test_format_citation_with_all_fields", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001753170508891344, "outcome": "passed"}, "call": {"duration": 0.00034305592998862267, "outcome": "passed"}, "teardown": {"duration": 0.00016478006727993488, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_single_author", "lineno": 76, "outcome": "passed", "keywords": ["test_format_author_list_with_single_author", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001708739437162876, "outcome": "passed"}, "call": {"duration": 0.0002240329049527645, "outcome": "passed"}, "teardown": {"duration": 0.00015333597548305988, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_two_authors", "lineno": 86, "outcome": "passed", "keywords": ["test_format_author_list_with_two_authors", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016236002556979656, "outcome": "passed"}, "call": {"duration": 0.0002236408181488514, "outcome": "passed"}, "teardown": {"duration": 0.00014285999350249767, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_many_authors", "lineno": 97, "outcome": "passed", "keywords": ["test_format_author_list_with_many_authors", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001645139418542385, "outcome": "passed"}, "call": {"duration": 0.00023993989452719688, "outcome": "passed"}, "teardown": {"duration": 0.00014260201714932919, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_direct_format_citation", "lineno": 107, "outcome": "passed", "keywords": ["test_direct_format_citation", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00018219300545752048, "outcome": "passed"}, "call": {"duration": 0.000278624938800931, "outcome": "passed"}, "teardown": {"duration": 0.00015657907351851463, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_direct_format_author_list", "lineno": 130, "outcome": "passed", "keywords": ["test_direct_format_author_list", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00017565512098371983, "outcome": "passed"}, "call": {"duration": 0.00021732994355261326, "outcome": "passed"}, "teardown": {"duration": 0.00014324719086289406, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_book", "lineno": 145, "outcome": "passed", "keywords": ["test_format_citation_book", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.000168156111612916, "outcome": "passed"}, "call": {"duration": 0.000276138074696064, "outcome": "passed"}, "teardown": {"duration": 0.00014832289889454842, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_conference", "lineno": 172, "outcome": "passed", "keywords": ["test_format_citation_conference", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001627560704946518, "outcome": "passed"}, "call": {"duration": 0.0002772610168904066, "outcome": "passed"}, "teardown": {"duration": 0.00015699909999966621, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_special_characters", "lineno": 194, "outcome": "passed", "keywords": ["test_format_citation_with_special_characters", "TestCitationFormatterEdgeCases", "test_formatter_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016403105109930038, "outcome": "passed"}, "call": {"duration": 0.00027694692835211754, "outcome": "passed"}, "teardown": {"duration": 0.0001495589967817068, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_author_list", "lineno": 45, "outcome": "passed", "keywords": ["test_format_author_list", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00019644596613943577, "outcome": "passed"}, "call": {"duration": 0.0004614011850208044, "outcome": "passed"}, "teardown": {"duration": 0.00014992989599704742, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_apa", "lineno": 77, "outcome": "passed", "keywords": ["test_format_citation_apa", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0004266430623829365, "outcome": "passed"}, "call": {"duration": 0.00024445890448987484, "outcome": "passed"}, "teardown": {"duration": 0.00018651899881660938, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_mla", "lineno": 89, "outcome": "passed", "keywords": ["test_format_citation_mla", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00030980492010712624, "outcome": "passed"}, "call": {"duration": 0.00023001711815595627, "outcome": "passed"}, "teardown": {"duration": 0.00017432589083909988, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_chicago", "lineno": 102, "outcome": "passed", "keywords": ["test_format_citation_chicago", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00028470996767282486, "outcome": "passed"}, "call": {"duration": 0.00024388590827584267, "outcome": "passed"}, "teardown": {"duration": 0.00016649090684950352, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_harvard", "lineno": 115, "outcome": "passed", "keywords": ["test_format_citation_harvard", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00028587901033461094, "outcome": "passed"}, "call": {"duration": 0.00023309304378926754, "outcome": "passed"}, "teardown": {"duration": 0.00016143592074513435, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_ieee", "lineno": 127, "outcome": "passed", "keywords": ["test_format_citation_ieee", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00029919808730483055, "outcome": "passed"}, "call": {"duration": 0.00023206393234431744, "outcome": "passed"}, "teardown": {"duration": 0.00017133215442299843, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_vancouver", "lineno": 140, "outcome": "passed", "keywords": ["test_format_citation_vancouver", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00027242209762334824, "outcome": "passed"}, "call": {"duration": 0.00022833910770714283, "outcome": "passed"}, "teardown": {"duration": 0.0001658191904425621, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_bibtex", "lineno": 152, "outcome": "passed", "keywords": ["test_format_citation_bibtex", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.000289814081043005, "outcome": "passed"}, "call": {"duration": 0.00026996899396181107, "outcome": "passed"}, "teardown": {"duration": 0.00016906694509088993, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_ris", "lineno": 170, "outcome": "passed", "keywords": ["test_format_citation_ris", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00028375512920320034, "outcome": "passed"}, "call": {"duration": 0.0002760849893093109, "outcome": "passed"}, "teardown": {"duration": 0.00017485604621469975, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_book_citation", "lineno": 191, "outcome": "passed", "keywords": ["test_format_book_citation", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0002749119885265827, "outcome": "passed"}, "call": {"duration": 0.0002562131267040968, "outcome": "passed"}, "teardown": {"duration": 0.00017186207696795464, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_missing_fields", "lineno": 214, "outcome": "passed", "keywords": ["test_format_missing_fields", "TestCitationFormatters", "test_formatters.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00017801299691200256, "outcome": "passed"}, "call": {"duration": 0.0002828119322657585, "outcome": "passed"}, "teardown": {"duration": 0.00014631985686719418, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_bibtex_file_parsing_basics_simple", "lineno": 20, "outcome": "passed", "keywords": ["test_bibtex_file_parsing_basics_simple", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00019117491319775581, "outcome": "passed"}, "call": {"duration": 0.0002764409873634577, "outcome": "passed"}, "teardown": {"duration": 0.00014992011711001396, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_bibtex_file_with_multiple_entries", "lineno": 28, "outcome": "passed", "keywords": ["test_bibtex_file_with_multiple_entries", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016162986867129803, "outcome": "passed"}, "call": {"duration": 0.009931386914104223, "outcome": "passed"}, "teardown": {"duration": 0.00020039803348481655, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_parse_bibtex_file_nonexistent", "lineno": 76, "outcome": "passed", "keywords": ["test_parse_bibtex_file_nonexistent", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00018568220548331738, "outcome": "passed"}, "call": {"duration": 0.0002697049640119076, "outcome": "passed"}, "teardown": {"duration": 0.00015291408635675907, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_ris_file_parsing_simple", "lineno": 82, "outcome": "passed", "keywords": ["test_ris_file_parsing_simple", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001653160434216261, "outcome": "passed"}, "call": {"duration": 0.00028690812177956104, "outcome": "passed"}, "teardown": {"duration": 0.00015433807857334614, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_parse_ris_file_nonexistent", "lineno": 90, "outcome": "passed", "keywords": ["test_parse_ris_file_nonexistent", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001761948224157095, "outcome": "passed"}, "call": {"duration": 0.00024170917458832264, "outcome": "passed"}, "teardown": {"duration": 0.00014579598791897297, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_pdf_metadata_direct", "lineno": 95, "outcome": "passed", "keywords": ["test_extract_pdf_metadata_direct", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016160705126821995, "outcome": "passed"}, "call": {"duration": 0.0002978178672492504, "outcome": "passed"}, "teardown": {"duration": 0.0001552931498736143, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_doi_functionality", "lineno": 111, "outcome": "passed", "keywords": ["test_extract_doi_functionality", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016434909775853157, "outcome": "passed"}, "call": {"duration": 0.001989732962101698, "outcome": "passed"}, "teardown": {"duration": 0.00017432589083909988, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_doi_not_found", "lineno": 124, "outcome": "passed", "keywords": ["test_extract_doi_not_found", "TestCitationParserEdgeCases", "test_parser_edge_cases.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00017633801326155663, "outcome": "passed"}, "call": {"duration": 0.002095824107527733, "outcome": "passed"}, "teardown": {"duration": 0.00017798086628317833, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_extract_doi_from_pdf", "lineno": 16, "outcome": "passed", "keywords": ["test_extract_doi_from_pdf", "TestCitationParsers", "test_parsers.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00035838992334902287, "outcome": "passed"}, "call": {"duration": 0.0003129490651190281, "outcome": "passed"}, "teardown": {"duration": 0.00020535103976726532, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_extract_pdf_metadata", "lineno": 52, "outcome": "passed", "keywords": ["test_extract_pdf_metadata", "TestCitationParsers", "test_parsers.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0002674739807844162, "outcome": "passed"}, "call": {"duration": 0.00043821893632411957, "outcome": "passed"}, "teardown": {"duration": 0.00021018111146986485, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_bibtex_file", "lineno": 100, "outcome": "passed", "keywords": ["test_parse_bibtex_file", "TestCitationParsers", "test_parsers.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001727500930428505, "outcome": "passed"}, "call": {"duration": 0.015700462041422725, "outcome": "passed"}, "teardown": {"duration": 0.00016899988986551762, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_ris_file", "lineno": 162, "outcome": "passed", "keywords": ["test_parse_ris_file", "TestCitationParsers", "test_parsers.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00018226192332804203, "outcome": "passed"}, "call": {"duration": 0.0009526039939373732, "outcome": "passed"}, "teardown": {"duration": 0.00015943218022584915, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_invalid_bibtex", "lineno": 229, "outcome": "passed", "keywords": ["test_parse_invalid_bibtex", "TestCitationParsers", "test_parsers.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016755703836679459, "outcome": "passed"}, "call": {"duration": 0.00749241909943521, "outcome": "passed"}, "teardown": {"duration": 0.0001762891188263893, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_invalid_ris", "lineno": 250, "outcome": "passed", "keywords": ["test_parse_invalid_ris", "TestCitationParsers", "test_parsers.py", "citations", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00018063094466924667, "outcome": "passed"}, "call": {"duration": 0.00043224100954830647, "outcome": "passed"}, "teardown": {"duration": 0.00015964382328093052, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_and_get_note", "lineno": 34, "outcome": "passed", "keywords": ["test_create_and_get_note", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.005490673938766122, "outcome": "passed"}, "call": {"duration": 0.004406011896207929, "outcome": "passed"}, "teardown": {"duration": 0.0008841319940984249, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_update_note", "lineno": 52, "outcome": "passed", "keywords": ["test_update_note", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0026027809362858534, "outcome": "passed"}, "call": {"duration": 0.003629351034760475, "outcome": "passed"}, "teardown": {"duration": 0.0008345181122422218, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_delete_note", "lineno": 78, "outcome": "passed", "keywords": ["test_delete_note", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002552434103563428, "outcome": "passed"}, "call": {"duration": 0.002110439818352461, "outcome": "passed"}, "teardown": {"duration": 0.0007711788639426231, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_citation_and_link_note", "lineno": 95, "outcome": "passed", "keywords": ["test_create_citation_and_link_note", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002582079963758588, "outcome": "passed"}, "call": {"duration": 0.008485354948788881, "outcome": "passed"}, "teardown": {"duration": 0.0007985839620232582, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_research_question_and_add_evidence", "lineno": 129, "outcome": "passed", "keywords": ["test_create_research_question_and_add_evidence", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002565705915912986, "outcome": "passed"}, "call": {"duration": 0.008835498010739684, "outcome": "passed"}, "teardown": {"duration": 0.0008245690260082483, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_experiment", "lineno": 181, "outcome": "passed", "keywords": ["test_create_experiment", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025089739356189966, "outcome": "passed"}, "call": {"duration": 0.00435278401710093, "outcome": "passed"}, "teardown": {"duration": 0.0008294219151139259, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_grant_proposal_and_add_items", "lineno": 215, "outcome": "passed", "keywords": ["test_create_grant_proposal_and_add_items", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025023389607667923, "outcome": "passed"}, "call": {"duration": 0.009935865877196193, "outcome": "passed"}, "teardown": {"duration": 0.0008146259933710098, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_search", "lineno": 267, "outcome": "failed", "keywords": ["test_search", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002547947922721505, "outcome": "passed"}, "call": {"duration": 0.18089574505575, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_brain.py", "lineno": 293, "message": "AssertionError: assert 'questions' in {'annotations': [], 'citations': [Citation(id=UUID('4faf3670-c723-44e1-9470-820282919eb5'), created_at=datetime.dateti...pdf_metadata={}, sections={}, node_type=<NodeType.CITATION: 'citation'>)], 'collaborators': [], 'experiments': [], ...}"}, "traceback": [{"path": "tests/academic_researcher/core/test_brain.py", "lineno": 293, "message": "AssertionError"}], "stdout": "Search index error: maximum recursion depth exceeded\nSearch index error: maximum recursion depth exceeded\nSearch index error: maximum recursion depth exceeded\nSearch index error: maximum recursion depth exceeded\n", "longrepr": "self = <tests.academic_researcher.core.test_brain.TestResearchBrain object at 0x7ff8f716ea50>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84fcf1910>\n\n    def test_search(self, brain):\n        \"\"\"Test searching the knowledge base.\"\"\"\n        # Create some test data with a common theme\n        brain.create_note(\n            title=\"Neuroplasticity Research\",\n            content=\"Recent findings about brain plasticity\"\n        )\n    \n        brain.create_citation(\n            title=\"Neuroplasticity in Adults\",\n            authors=[\"Smith, J\"],\n            year=2023,\n            abstract=\"Research on adult neuroplasticity\"\n        )\n    \n        brain.create_research_question(\n            question=\"How does exercise affect neuroplasticity?\",\n            priority=7\n        )\n    \n        # Search for \"neuroplasticity\"\n        results = brain.search(\"neuroplasticity\")\n    \n        assert \"notes\" in results\n        assert \"citations\" in results\n>       assert \"questions\" in results\nE       AssertionError: assert 'questions' in {'annotations': [], 'citations': [Citation(id=UUID('4faf3670-c723-44e1-9470-820282919eb5'), created_at=datetime.dateti...pdf_metadata={}, sections={}, node_type=<NodeType.CITATION: 'citation'>)], 'collaborators': [], 'experiments': [], ...}\n\ntests/academic_researcher/core/test_brain.py:293: AssertionError"}, "teardown": {"duration": 0.001033511944115162, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_get_related_nodes", "lineno": 303, "outcome": "failed", "keywords": ["test_get_related_nodes", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002719587879255414, "outcome": "passed"}, "call": {"duration": 0.012382988119497895, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_brain.py", "lineno": 336, "message": "assert 0 == 1\n +  where 0 = len([])"}, "traceback": [{"path": "tests/academic_researcher/core/test_brain.py", "lineno": 336, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.core.test_brain.TestResearchBrain object at 0x7ff8f716ec00>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff85010bf20>\n\n    def test_get_related_nodes(self, brain):\n        \"\"\"Test retrieving related nodes.\"\"\"\n        # Create interconnected test data\n        note_id = brain.create_note(\n            title=\"Research Note\",\n            content=\"Research findings\"\n        )\n    \n        citation_id = brain.create_citation(\n            title=\"Related Paper\",\n            authors=[\"Author, A\"]\n        )\n    \n        brain.link_note_to_paper(note_id, citation_id)\n    \n        question_id = brain.create_research_question(\n            question=\"Research Question\"\n        )\n    \n        brain.add_evidence_to_question(\n            question_id=question_id,\n            note_id=note_id,\n            evidence_type=EvidenceType.SUPPORTING,\n            strength=EvidenceStrength.MODERATE\n        )\n    \n        # Get related nodes for the note\n        related = brain.get_related_nodes(note_id)\n    \n        assert \"references\" in related\n        assert \"incoming_evidence\" in related\n    \n>       assert len(related[\"references\"]) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\ntests/academic_researcher/core/test_brain.py:336: AssertionError"}, "teardown": {"duration": 0.0008576370310038328, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_collaborator_and_annotation", "lineno": 348, "outcome": "passed", "keywords": ["test_create_collaborator_and_annotation", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0026007681153714657, "outcome": "passed"}, "call": {"duration": 0.005712948041036725, "outcome": "passed"}, "teardown": {"duration": 0.0008001010864973068, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_generate_citation", "lineno": 382, "outcome": "passed", "keywords": ["test_generate_citation", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025828001089394093, "outcome": "passed"}, "call": {"duration": 0.002839357126504183, "outcome": "passed"}, "teardown": {"duration": 0.0007879768963903189, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_backup_and_restore", "lineno": 412, "outcome": "passed", "keywords": ["test_backup_and_restore", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0024891418870538473, "outcome": "passed"}, "call": {"duration": 0.023251891136169434, "outcome": "passed"}, "teardown": {"duration": 0.0012523310724645853, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_knowledge_graph_structure", "lineno": 450, "outcome": "passed", "keywords": ["test_knowledge_graph_structure", "TestResearchBrain", "test_brain.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0024984399788081646, "outcome": "passed"}, "call": {"duration": 0.019079536898061633, "outcome": "passed"}, "teardown": {"duration": 0.0008320140186697245, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_init_default_values", "lineno": 18, "outcome": "passed", "keywords": ["test_init_default_values", "TestKnowledgeNode", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00020239781588315964, "outcome": "passed"}, "call": {"duration": 0.00026163412258028984, "outcome": "passed"}, "teardown": {"duration": 0.0001502439845353365, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_init_custom_values", "lineno": 27, "outcome": "passed", "keywords": ["test_init_custom_values", "TestKnowledgeNode", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00017672404646873474, "outcome": "passed"}, "call": {"duration": 0.00023849005810916424, "outcome": "passed"}, "teardown": {"duration": 0.0001424460206180811, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_update_method", "lineno": 45, "outcome": "passed", "keywords": ["test_update_method", "TestKnowledgeNode", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016438006423413754, "outcome": "passed"}, "call": {"duration": 0.0002394230104982853, "outcome": "passed"}, "teardown": {"duration": 0.00014491006731987, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestNote::test_init_minimal", "lineno": 59, "outcome": "passed", "keywords": ["test_init_minimal", "TestNote", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001665959134697914, "outcome": "passed"}, "call": {"duration": 0.000248385826125741, "outcome": "passed"}, "teardown": {"duration": 0.0001444320660084486, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestNote::test_init_full", "lineno": 70, "outcome": "passed", "keywords": ["test_init_full", "TestNote", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00015641981735825539, "outcome": "passed"}, "call": {"duration": 0.0003140498884022236, "outcome": "passed"}, "teardown": {"duration": 0.0001536018680781126, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCitation::test_init_minimal", "lineno": 97, "outcome": "passed", "keywords": ["test_init_minimal", "TestCitation", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001661169808357954, "outcome": "passed"}, "call": {"duration": 0.0002495518419891596, "outcome": "passed"}, "teardown": {"duration": 0.00014162203297019005, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCitation::test_init_full", "lineno": 113, "outcome": "passed", "keywords": ["test_init_full", "TestCitation", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016651698388159275, "outcome": "passed"}, "call": {"duration": 0.00038215797394514084, "outcome": "passed"}, "teardown": {"duration": 0.00015544798225164413, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestResearchQuestion::test_init_minimal", "lineno": 158, "outcome": "passed", "keywords": ["test_init_minimal", "TestResearchQuestion", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00017054099589586258, "outcome": "passed"}, "call": {"duration": 0.0002444488927721977, "outcome": "passed"}, "teardown": {"duration": 0.00014653312973678112, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestResearchQuestion::test_init_with_evidence", "lineno": 172, "outcome": "passed", "keywords": ["test_init_with_evidence", "TestResearchQuestion", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001592158805578947, "outcome": "passed"}, "call": {"duration": 0.00030640815384685993, "outcome": "passed"}, "teardown": {"duration": 0.00015190104022622108, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment::test_init_minimal", "lineno": 205, "outcome": "passed", "keywords": ["test_init_minimal", "TestExperiment", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016379100270569324, "outcome": "passed"}, "call": {"duration": 0.00026507000438869, "outcome": "passed"}, "teardown": {"duration": 0.00016437401063740253, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment::test_init_full", "lineno": 224, "outcome": "passed", "keywords": ["test_init_full", "TestExperiment", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001742360182106495, "outcome": "passed"}, "call": {"duration": 0.0003372801002115011, "outcome": "passed"}, "teardown": {"duration": 0.00015261000953614712, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestExperiment::test_end_date_validation", "lineno": 258, "outcome": "passed", "keywords": ["test_end_date_validation", "TestExperiment", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016391905955970287, "outcome": "passed"}, "call": {"duration": 0.0004907641559839249, "outcome": "passed"}, "teardown": {"duration": 0.0001599229872226715, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestGrantProposal::test_init_minimal", "lineno": 276, "outcome": "passed", "keywords": ["test_init_minimal", "TestGrantProposal", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016446691006422043, "outcome": "passed"}, "call": {"duration": 0.00026890612207353115, "outcome": "passed"}, "teardown": {"duration": 0.00015762378461658955, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestGrantProposal::test_init_full", "lineno": 294, "outcome": "passed", "keywords": ["test_init_full", "TestGrantProposal", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016614003106951714, "outcome": "passed"}, "call": {"duration": 0.000305684981867671, "outcome": "passed"}, "teardown": {"duration": 0.00015103607438504696, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCollaborator::test_init_minimal", "lineno": 330, "outcome": "passed", "keywords": ["test_init_minimal", "TestCollaborator", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00016365200281143188, "outcome": "passed"}, "call": {"duration": 0.00023895781487226486, "outcome": "passed"}, "teardown": {"duration": 0.00014024600386619568, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_models.py::TestCollaborator::test_init_full", "lineno": 340, "outcome": "passed", "keywords": ["test_init_full", "TestCollaborator", "test_models.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00015792506746947765, "outcome": "passed"}, "call": {"duration": 0.00025872793048620224, "outcome": "passed"}, "teardown": {"duration": 0.0001550479792058468, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_init_creates_directories", "lineno": 31, "outcome": "failed", "keywords": ["test_init_creates_directories", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00035821483470499516, "outcome": "passed"}, "call": {"duration": 0.0010492030996829271, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_storage.py", "lineno": 49, "message": "AssertionError: assert False\n +  where False = exists()\n +    where exists = (PosixPath('/tmp/tmptxvt1izd') / 'notes').exists\n +      where PosixPath('/tmp/tmptxvt1izd') = Path('/tmp/tmptxvt1izd')"}, "traceback": [{"path": "tests/academic_researcher/core/test_storage.py", "lineno": 49, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.core.test_storage.TestLocalStorage object at 0x7ff8f7191be0>\ntemp_storage_dir = '/tmp/tmptxvt1izd'\n\n    def test_init_creates_directories(self, temp_storage_dir):\n        \"\"\"Test that initialization creates the necessary directories.\"\"\"\n        storage = LocalStorage(temp_storage_dir)\n    \n        # Check that directories were created\n        expected_dirs = [\n            'notes',\n            'citations',\n            'research_questions',\n            'experiments',\n            'grants',\n            'collaborators',\n            'annotations',\n            'attachments',\n        ]\n    \n        for directory in expected_dirs:\n>           assert (Path(temp_storage_dir) / directory).exists()\nE           AssertionError: assert False\nE            +  where False = exists()\nE            +    where exists = (PosixPath('/tmp/tmptxvt1izd') / 'notes').exists\nE            +      where PosixPath('/tmp/tmptxvt1izd') = Path('/tmp/tmptxvt1izd')\n\ntests/academic_researcher/core/test_storage.py:49: AssertionError"}, "teardown": {"duration": 0.0007440939079970121, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_note", "lineno": 51, "outcome": "failed", "keywords": ["test_save_and_get_note", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0010791558306664228, "outcome": "passed"}, "call": {"duration": 0.0018438908737152815, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_storage.py", "lineno": 59, "message": "AssertionError: assert False\n +  where False = exists()\n +    where exists = PosixPath('/tmp/tmpy0bz19fy/notes/fd194169-208f-4494-b013-118d27f0de0c.yaml').exists"}, "traceback": [{"path": "tests/academic_researcher/core/test_storage.py", "lineno": 59, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.core.test_storage.TestLocalStorage object at 0x7ff8f7191dc0>\nstorage = <researchbrain.core.storage.LocalStorage object at 0x7ff84fd04b90>\n\n    def test_save_and_get_note(self, storage):\n        \"\"\"Test saving and retrieving a note.\"\"\"\n        note = Note(title=\"Test Note\", content=\"Test content\")\n        storage.save(note)\n    \n        # Check that the file was created\n        file_path = Path(storage.base_path) / 'notes' / f\"{note.id}.yaml\"\n>       assert file_path.exists()\nE       AssertionError: assert False\nE        +  where False = exists()\nE        +    where exists = PosixPath('/tmp/tmpy0bz19fy/notes/fd194169-208f-4494-b013-118d27f0de0c.yaml').exists\n\ntests/academic_researcher/core/test_storage.py:59: AssertionError"}, "teardown": {"duration": 0.000785270007327199, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_citation", "lineno": 68, "outcome": "failed", "keywords": ["test_save_and_get_citation", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.001073735998943448, "outcome": "passed"}, "call": {"duration": 0.0027705940883606672, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_storage.py", "lineno": 79, "message": "AssertionError: assert False\n +  where False = exists()\n +    where exists = PosixPath('/tmp/tmpsrtoq95w/citations/26c28380-670a-490e-b8df-43a2132db18c.yaml').exists"}, "traceback": [{"path": "tests/academic_researcher/core/test_storage.py", "lineno": 79, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.core.test_storage.TestLocalStorage object at 0x7ff8f7191fd0>\nstorage = <researchbrain.core.storage.LocalStorage object at 0x7ff84fd06360>\n\n    def test_save_and_get_citation(self, storage):\n        \"\"\"Test saving and retrieving a citation.\"\"\"\n        citation = Citation(\n            title=\"Test Paper\",\n            authors=[\"Smith, John\", \"Doe, Jane\"]\n        )\n        storage.save(citation)\n    \n        # Check that the file was created\n        file_path = Path(storage.base_path) / 'citations' / f\"{citation.id}.yaml\"\n>       assert file_path.exists()\nE       AssertionError: assert False\nE        +  where False = exists()\nE        +    where exists = PosixPath('/tmp/tmpsrtoq95w/citations/26c28380-670a-490e-b8df-43a2132db18c.yaml').exists\n\ntests/academic_researcher/core/test_storage.py:79: AssertionError"}, "teardown": {"duration": 0.0007905589882284403, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_update_existing_item", "lineno": 88, "outcome": "passed", "keywords": ["test_update_existing_item", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00106928707100451, "outcome": "passed"}, "call": {"duration": 0.0031722448766231537, "outcome": "passed"}, "teardown": {"duration": 0.0007721169386059046, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_nonexistent_item", "lineno": 102, "outcome": "passed", "keywords": ["test_get_nonexistent_item", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0010806210339069366, "outcome": "passed"}, "call": {"duration": 0.0003076610155403614, "outcome": "passed"}, "teardown": {"duration": 0.0007259768899530172, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_invalid_file", "lineno": 109, "outcome": "failed", "keywords": ["test_get_invalid_file", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.001050299033522606, "outcome": "passed"}, "call": {"duration": 0.00033340114168822765, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_storage.py", "lineno": 116, "message": "FileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmp6732xmaz/notes/ecef8560-4d6c-4caa-b817-0bbde4ffb1c9.yaml'"}, "traceback": [{"path": "tests/academic_researcher/core/test_storage.py", "lineno": 116, "message": "FileNotFoundError"}], "longrepr": "self = <tests.academic_researcher.core.test_storage.TestLocalStorage object at 0x7ff8f71925a0>\nstorage = <researchbrain.core.storage.LocalStorage object at 0x7ff85156cec0>\ntemp_storage_dir = '/tmp/tmp6732xmaz'\n\n    def test_get_invalid_file(self, storage, temp_storage_dir):\n        \"\"\"Test retrieving an item with invalid YAML content raises StorageError.\"\"\"\n        note_id = uuid4()\n        file_path = Path(temp_storage_dir) / 'notes' / f\"{note_id}.yaml\"\n    \n        # Write invalid YAML\n>       with open(file_path, 'w') as f:\nE       FileNotFoundError: [Errno 2] No such file or directory: '/tmp/tmp6732xmaz/notes/ecef8560-4d6c-4caa-b817-0bbde4ffb1c9.yaml'\n\ntests/academic_researcher/core/test_storage.py:116: FileNotFoundError"}, "teardown": {"duration": 0.0007845719810575247, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_delete_item", "lineno": 121, "outcome": "failed", "keywords": ["test_delete_item", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00107731600292027, "outcome": "passed"}, "call": {"duration": 0.0018762440886348486, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/core/test_storage.py", "lineno": 129, "message": "AssertionError: assert False\n +  where False = exists()\n +    where exists = PosixPath('/tmp/tmp79f8yrds/notes/2d70b59c-4e90-492d-a5d1-0b381b5e2a8c.yaml').exists"}, "traceback": [{"path": "tests/academic_researcher/core/test_storage.py", "lineno": 129, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.core.test_storage.TestLocalStorage object at 0x7ff8f71927b0>\nstorage = <researchbrain.core.storage.LocalStorage object at 0x7ff850f4c680>\n\n    def test_delete_item(self, storage):\n        \"\"\"Test deleting an item.\"\"\"\n        note = Note(title=\"Test Note\", content=\"Test content\")\n        storage.save(note)\n    \n        # Check that the file exists\n        file_path = Path(storage.base_path) / 'notes' / f\"{note.id}.yaml\"\n>       assert file_path.exists()\nE       AssertionError: assert False\nE        +  where False = exists()\nE        +    where exists = PosixPath('/tmp/tmp79f8yrds/notes/2d70b59c-4e90-492d-a5d1-0b381b5e2a8c.yaml').exists\n\ntests/academic_researcher/core/test_storage.py:129: AssertionError"}, "teardown": {"duration": 0.0007912169676274061, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_delete_nonexistent_item", "lineno": 136, "outcome": "passed", "keywords": ["test_delete_nonexistent_item", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0010973261669278145, "outcome": "passed"}, "call": {"duration": 0.000317990081384778, "outcome": "passed"}, "teardown": {"duration": 0.0007439791224896908, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_list_all", "lineno": 143, "outcome": "passed", "keywords": ["test_list_all", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0010701999999582767, "outcome": "passed"}, "call": {"duration": 0.00756303290836513, "outcome": "passed"}, "teardown": {"duration": 0.0007995169144123793, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_query", "lineno": 173, "outcome": "passed", "keywords": ["test_query", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0011040389072149992, "outcome": "passed"}, "call": {"duration": 0.00591942691244185, "outcome": "passed"}, "teardown": {"duration": 0.0007888649124652147, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_attachment", "lineno": 193, "outcome": "passed", "keywords": ["test_save_and_get_attachment", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0011288849636912346, "outcome": "passed"}, "call": {"duration": 0.000535016180947423, "outcome": "passed"}, "teardown": {"duration": 0.0007571540772914886, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_nonexistent_attachment", "lineno": 218, "outcome": "passed", "keywords": ["test_get_nonexistent_attachment", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0010767369531095028, "outcome": "passed"}, "call": {"duration": 0.0002734230365604162, "outcome": "passed"}, "teardown": {"duration": 0.0007321350276470184, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_export_to_dataframe", "lineno": 224, "outcome": "passed", "keywords": ["test_export_to_dataframe", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0010616490617394447, "outcome": "passed"}, "call": {"duration": 0.005629474995657802, "outcome": "passed"}, "teardown": {"duration": 0.0008173179812729359, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_backup_and_restore", "lineno": 245, "outcome": "passed", "keywords": ["test_backup_and_restore", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0011047490406781435, "outcome": "passed"}, "call": {"duration": 0.005633930210024118, "outcome": "passed"}, "teardown": {"duration": 0.0008363940287381411, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_search_text", "lineno": 289, "outcome": "passed", "keywords": ["test_search_text", "TestLocalStorage", "test_storage.py", "core", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.001084707910194993, "outcome": "passed"}, "call": {"duration": 0.0062493011355400085, "outcome": "passed"}, "teardown": {"duration": 0.0008021139074116945, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_create_default_templates", "lineno": 35, "outcome": "passed", "keywords": ["test_create_default_templates", "TestTemplatesFunctions", "test_template_functions.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0007655320223420858, "outcome": "passed"}, "call": {"duration": 0.022313633002340794, "outcome": "passed"}, "teardown": {"duration": 0.0003008360508829355, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_list_templates", "lineno": 47, "outcome": "passed", "keywords": ["test_list_templates", "TestTemplatesFunctions", "test_template_functions.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0003886700142174959, "outcome": "passed"}, "call": {"duration": 0.02261515101417899, "outcome": "passed"}, "teardown": {"duration": 0.000311142997816205, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_get_template", "lineno": 70, "outcome": "passed", "keywords": ["test_get_template", "TestTemplatesFunctions", "test_template_functions.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0003602299839258194, "outcome": "passed"}, "call": {"duration": 0.03800748009234667, "outcome": "passed"}, "teardown": {"duration": 0.00031192204914987087, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_create_template", "lineno": 88, "outcome": "passed", "keywords": ["test_create_template", "TestTemplatesFunctions", "test_template_functions.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.000349072040989995, "outcome": "passed"}, "call": {"duration": 0.0025203819386661053, "outcome": "passed"}, "teardown": {"duration": 0.0002841600216925144, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_apply_template", "lineno": 119, "outcome": "passed", "keywords": ["test_apply_template", "TestTemplatesFunctions", "test_template_functions.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0003425409086048603, "outcome": "passed"}, "call": {"duration": 0.015712324995547533, "outcome": "passed"}, "teardown": {"duration": 0.00031027011573314667, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_create_default_templates", "lineno": 30, "outcome": "passed", "keywords": ["test_create_default_templates", "TestExperimentTemplates", "test_templates.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0004905019886791706, "outcome": "passed"}, "call": {"duration": 0.030479202046990395, "outcome": "passed"}, "teardown": {"duration": 0.00037436909042298794, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_get_template", "lineno": 51, "outcome": "passed", "keywords": ["test_get_template", "TestExperimentTemplates", "test_templates.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00045223510824143887, "outcome": "passed"}, "call": {"duration": 0.03844576305709779, "outcome": "passed"}, "teardown": {"duration": 0.00035779993049800396, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_list_templates", "lineno": 74, "outcome": "passed", "keywords": ["test_list_templates", "TestExperimentTemplates", "test_templates.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00045090215280652046, "outcome": "passed"}, "call": {"duration": 0.02225596597418189, "outcome": "passed"}, "teardown": {"duration": 0.00035271700471639633, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_create_template", "lineno": 88, "outcome": "passed", "keywords": ["test_create_template", "TestExperimentTemplates", "test_templates.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00045223580673336983, "outcome": "passed"}, "call": {"duration": 0.004293333040550351, "outcome": "passed"}, "teardown": {"duration": 0.0003234830219298601, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_apply_template", "lineno": 127, "outcome": "passed", "keywords": ["test_apply_template", "TestExperimentTemplates", "test_templates.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0004507829435169697, "outcome": "passed"}, "call": {"duration": 0.007126768119633198, "outcome": "passed"}, "teardown": {"duration": 0.00031959498301148415, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_template_validation", "lineno": 203, "outcome": "passed", "keywords": ["test_template_validation", "TestExperimentTemplates", "test_templates.py", "experiments", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00045212311670184135, "outcome": "passed"}, "call": {"duration": 0.00022872514091432095, "outcome": "passed"}, "teardown": {"duration": 0.00029244786128401756, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_proposal_markdown", "lineno": 85, "outcome": "passed", "keywords": ["test_export_proposal_markdown", "TestGrantExport", "test_export.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0009629258420318365, "outcome": "passed"}, "call": {"duration": 0.023049175972118974, "outcome": "passed"}, "teardown": {"duration": 0.00024264794774353504, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_proposal_yaml", "lineno": 124, "outcome": "passed", "keywords": ["test_export_proposal_yaml", "TestGrantExport", "test_export.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0005799271166324615, "outcome": "passed"}, "call": {"duration": 0.029869374819099903, "outcome": "passed"}, "teardown": {"duration": 0.00025352207012474537, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_unsupported_format", "lineno": 175, "outcome": "passed", "keywords": ["test_export_unsupported_format", "TestGrantExport", "test_export.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0005864310078322887, "outcome": "passed"}, "call": {"duration": 0.02177491202019155, "outcome": "passed"}, "teardown": {"duration": 0.00026099197566509247, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_convert_uuids_to_strings", "lineno": 202, "outcome": "passed", "keywords": ["test_convert_uuids_to_strings", "TestGrantExport", "test_export.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00019121193327009678, "outcome": "passed"}, "call": {"duration": 0.0002648560330271721, "outcome": "passed"}, "teardown": {"duration": 0.0001570279709994793, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_markdown", "lineno": 119, "outcome": "passed", "keywords": ["test_export_proposal_markdown", "TestGrantExportFunctions", "test_export_functions.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0006252459716051817, "outcome": "passed"}, "call": {"duration": 0.02195119485259056, "outcome": "passed"}, "teardown": {"duration": 0.00023998692631721497, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_yaml", "lineno": 153, "outcome": "passed", "keywords": ["test_export_proposal_yaml", "TestGrantExportFunctions", "test_export_functions.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0005866731517016888, "outcome": "passed"}, "call": {"duration": 0.03419741499237716, "outcome": "passed"}, "teardown": {"duration": 0.00024122605100274086, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_unknown_extension", "lineno": 186, "outcome": "passed", "keywords": ["test_export_proposal_unknown_extension", "TestGrantExportFunctions", "test_export_functions.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0005835909396409988, "outcome": "passed"}, "call": {"duration": 0.023190275067463517, "outcome": "passed"}, "teardown": {"duration": 0.0003230019938200712, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_markdown_error_handling", "lineno": 211, "outcome": "passed", "keywords": ["test_export_markdown_error_handling", "TestGrantExportFunctions", "test_export_functions.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0008230879902839661, "outcome": "passed"}, "call": {"duration": 0.021167725091800094, "outcome": "passed"}, "teardown": {"duration": 0.0002708530519157648, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_yaml_error_handling", "lineno": 236, "outcome": "passed", "keywords": ["test_export_yaml_error_handling", "TestGrantExportFunctions", "test_export_functions.py", "grants", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0006602990906685591, "outcome": "passed"}, "call": {"duration": 0.000731165986508131, "outcome": "passed", "stdout": "YAML export error: Test exception\n"}, "teardown": {"duration": 0.00026619480922818184, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_note_citation_linking", "lineno": 29, "outcome": "passed", "keywords": ["test_note_citation_linking", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002933923155069351, "outcome": "passed"}, "call": {"duration": 0.008557989029213786, "outcome": "passed"}, "teardown": {"duration": 0.0008342431392520666, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_automatic_citation_extraction", "lineno": 68, "outcome": "failed", "keywords": ["test_automatic_citation_extraction", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025569258723407984, "outcome": "passed"}, "call": {"duration": 0.005494010867550969, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/common/core/knowledge.py", "lineno": 576, "message": "ValueError: Both source and target nodes must exist. Missing: sourcetarget"}, "traceback": [{"path": "tests/academic_researcher/test_bidirectional_linking.py", "lineno": 80, "message": ""}, {"path": "researchbrain/core/brain.py", "lineno": 245, "message": "in create_note"}, {"path": "common/core/knowledge.py", "lineno": 576, "message": "ValueError"}], "longrepr": "self = <tests.academic_researcher.test_bidirectional_linking.TestBidirectionalLinking object at 0x7ff8f70ef260>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff8500a1df0>\n\n    def test_automatic_citation_extraction(self, brain):\n        \"\"\"Test automatic extraction of citation keys from note content.\"\"\"\n        # Create a citation that can be referenced by key\n        citation_id = brain.create_citation(\n            title=\"Test Paper\",\n            authors=[\"Smith, John\"],\n            year=2023,\n            bibtex=\"@article{smith2023test, title={Test Paper}, author={Smith, John}, year={2023}}\"\n        )\n    \n        # Create a note with a citation key in the content\n>       note_id = brain.create_note(\n            title=\"Note with Citation\",\n            content=\"This paper [@smith2023test] discusses important topics.\"\n        )\n\ntests/academic_researcher/test_bidirectional_linking.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nresearchbrain/core/brain.py:245: in create_note\n    self.kb.link_nodes(note.id, citation_id, RelationType.CITES)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.core.knowledge.StandardKnowledgeBase object at 0x7ff8500a3410>\nsource_id = UUID('687dc16e-46b8-4943-9288-7277a54a7f3c')\ntarget_id = UUID('a52ab1b1-34c5-46bb-b95a-30c536b9aee7')\nrelation_type = <RelationType.CITES: 'cites'>, metadata = None\n\n    def link_nodes(self, source_id: UUID, target_id: UUID, relation_type: Union[RelationType, str],\n                 metadata: Optional[Dict[str, Any]] = None) -> Relation:\n        \"\"\"Create a relationship between two nodes.\n    \n        Args:\n            source_id: ID of the source node.\n            target_id: ID of the target node.\n            relation_type: Type of the relation.\n            metadata: Optional metadata for the relation.\n    \n        Returns:\n            The created relation.\n        \"\"\"\n        # Check that both nodes exist\n        source_node = self.get_node(source_id)\n        target_node = self.get_node(target_id)\n    \n        if not source_node or not target_node:\n>           raise ValueError(f\"Both source and target nodes must exist. Missing: {'' if source_node else 'source'}{'' if target_node else 'target'}\")\nE           ValueError: Both source and target nodes must exist. Missing: sourcetarget\n\ncommon/core/knowledge.py:576: ValueError"}, "teardown": {"duration": 0.0008453528862446547, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_multiple_citation_links", "lineno": 95, "outcome": "passed", "keywords": ["test_multiple_citation_links", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002628008835017681, "outcome": "passed"}, "call": {"duration": 0.020923511125147343, "outcome": "passed"}, "teardown": {"duration": 0.0008466748986393213, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_removing_citation_links", "lineno": 134, "outcome": "passed", "keywords": ["test_removing_citation_links", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025460540782660246, "outcome": "passed"}, "call": {"duration": 0.012563467025756836, "outcome": "passed"}, "teardown": {"duration": 0.0008097770623862743, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_cascading_deletion", "lineno": 187, "outcome": "passed", "keywords": ["test_cascading_deletion", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025083671789616346, "outcome": "passed"}, "call": {"duration": 0.0161893367767334, "outcome": "passed"}, "teardown": {"duration": 0.0007962561212480068, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_navigation_between_linked_items", "lineno": 229, "outcome": "failed", "keywords": ["test_navigation_between_linked_items", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025186759885400534, "outcome": "passed"}, "call": {"duration": 0.014693493954837322, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_bidirectional_linking.py", "lineno": 266, "message": "AssertionError: assert UUID('51570ccd-6d0b-4a1e-abac-0342581462ce') in []"}, "traceback": [{"path": "tests/academic_researcher/test_bidirectional_linking.py", "lineno": 266, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_bidirectional_linking.TestBidirectionalLinking object at 0x7ff8f6f29af0>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84fd07350>\n\n    def test_navigation_between_linked_items(self, brain):\n        \"\"\"Test navigation between linked notes and citations using get_related_nodes.\"\"\"\n        # Create citations\n        citation1_id = brain.create_citation(\n            title=\"Primary Paper\",\n            authors=[\"Main, Author\"]\n        )\n    \n        citation2_id = brain.create_citation(\n            title=\"Related Paper\",\n            authors=[\"Related, Author\"]\n        )\n    \n        # Create note referencing both citations\n        note_id = brain.create_note(\n            title=\"Analysis Note\",\n            content=\"This note analyzes both papers.\"\n        )\n    \n        # Link note to both citations\n        brain.link_note_to_paper(note_id, citation1_id, page=10)\n        brain.link_note_to_paper(note_id, citation2_id, page=20)\n    \n        # Get related nodes for the note\n        related_to_note = brain.get_related_nodes(note_id)\n    \n        # Verify we can navigate from note to citations\n        assert \"references\" in related_to_note or \"cites\" in related_to_note\n    \n        citations_from_note = []\n        if \"references\" in related_to_note:\n            citations_from_note.extend(related_to_note[\"references\"])\n        if \"cites\" in related_to_note:\n            citations_from_note.extend(related_to_note[\"cites\"])\n    \n        citation_ids_from_note = [c.id for c in citations_from_note]\n>       assert citation1_id in citation_ids_from_note\nE       AssertionError: assert UUID('51570ccd-6d0b-4a1e-abac-0342581462ce') in []\n\ntests/academic_researcher/test_bidirectional_linking.py:266: AssertionError"}, "teardown": {"duration": 0.0008231208194047213, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_circular_navigation", "lineno": 277, "outcome": "failed", "keywords": ["test_circular_navigation", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025331550277769566, "outcome": "passed"}, "call": {"duration": 0.018473525997251272, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_bidirectional_linking.py", "lineno": 332, "message": "assert None is not None"}, "traceback": [{"path": "tests/academic_researcher/test_bidirectional_linking.py", "lineno": 332, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_bidirectional_linking.TestBidirectionalLinking object at 0x7ff8f6f29d00>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84fd06ff0>\n\n    def test_circular_navigation(self, brain):\n        \"\"\"Test circular navigation through the knowledge graph.\"\"\"\n        # Create multiple nodes with circular references\n        citation_id = brain.create_citation(\n            title=\"Original Paper\",\n            authors=[\"Original, Author\"]\n        )\n    \n        note1_id = brain.create_note(\n            title=\"First Note\",\n            content=\"Analysis of the original paper.\"\n        )\n    \n        note2_id = brain.create_note(\n            title=\"Second Note\",\n            content=\"Further thoughts on the first note.\"\n        )\n    \n        note3_id = brain.create_note(\n            title=\"Third Note\",\n            content=\"Synthesis connecting back to the original paper.\"\n        )\n    \n        # Create connections forming a cycle\n        brain.link_note_to_paper(note1_id, citation_id)\n    \n        # Manually create links between notes\n        # Make note2 reference note1\n        note2 = brain.get_note(note2_id)\n        note2.content = f\"Further thoughts on the first note [{note1_id}].\"\n        note2.update()\n        brain.storage.save(note2)\n        # Add a graph edge\n        brain._knowledge_graph.add_edge(str(note2_id), str(note1_id), type='references')\n    \n        # Make note3 reference note2\n        note3 = brain.get_note(note3_id)\n        note3.content = f\"Building on the second note [{note2_id}].\"\n        note3.update()\n        brain.storage.save(note3)\n        # Add a graph edge\n        brain._knowledge_graph.add_edge(str(note3_id), str(note2_id), type='references')\n    \n        # Link Note 3 back to the original citation\n        brain.link_note_to_paper(note3_id, citation_id)\n    \n        # Test circular navigation starting from citation\n        # Citation -> Note 1 -> Note 2 -> Note 3 -> Citation\n    \n        # Start at citation\n        related = brain.get_related_nodes(citation_id)\n        assert \"cited_in\" in related\n        notes_citing = related[\"cited_in\"]\n        note1 = next((n for n in notes_citing if n.id == note1_id), None)\n>       assert note1 is not None\nE       assert None is not None\n\ntests/academic_researcher/test_bidirectional_linking.py:332: AssertionError"}, "teardown": {"duration": 0.0008396010380238295, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_section_references", "lineno": 343, "outcome": "passed", "keywords": ["test_section_references", "TestBidirectionalLinking", "test_bidirectional_linking.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002544727874919772, "outcome": "passed"}, "call": {"duration": 0.014419242972508073, "outcome": "passed"}, "teardown": {"duration": 0.0008016841020435095, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_apa_citation_accuracy", "lineno": 30, "outcome": "passed", "keywords": ["test_apa_citation_accuracy", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002514079911634326, "outcome": "passed"}, "call": {"duration": 0.0030518800485879183, "outcome": "passed"}, "teardown": {"duration": 0.0007721551228314638, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_mla_citation_accuracy", "lineno": 58, "outcome": "passed", "keywords": ["test_mla_citation_accuracy", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0060601080767810345, "outcome": "passed"}, "call": {"duration": 0.002984704915434122, "outcome": "passed"}, "teardown": {"duration": 0.0007827149238437414, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_chicago_citation_accuracy", "lineno": 85, "outcome": "passed", "keywords": ["test_chicago_citation_accuracy", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0024976138956844807, "outcome": "passed"}, "call": {"duration": 0.0029548760503530502, "outcome": "passed"}, "teardown": {"duration": 0.000764843076467514, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_bibtex_citation_accuracy", "lineno": 112, "outcome": "passed", "keywords": ["test_bibtex_citation_accuracy", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002561050932854414, "outcome": "passed"}, "call": {"duration": 0.0032357280142605305, "outcome": "passed"}, "teardown": {"duration": 0.0008085430599749088, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_bibtex_parser_accuracy", "lineno": 146, "outcome": "passed", "keywords": ["test_bibtex_parser_accuracy", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001803128980100155, "outcome": "passed"}, "call": {"duration": 0.016565764788538218, "outcome": "passed"}, "teardown": {"duration": 0.00017096404917538166, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_ris_parser_accuracy", "lineno": 223, "outcome": "passed", "keywords": ["test_ris_parser_accuracy", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001800099853426218, "outcome": "passed"}, "call": {"duration": 0.0006019389256834984, "outcome": "passed"}, "teardown": {"duration": 0.000163546996191144, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_malformed_citation_handling", "lineno": 306, "outcome": "passed", "keywords": ["test_malformed_citation_handling", "TestCitationAccuracy", "test_citation_accuracy.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0033616130240261555, "outcome": "passed"}, "call": {"duration": 0.0060977928806096315, "outcome": "passed"}, "teardown": {"duration": 0.0008058061357587576, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_init_command", "lineno": 38, "outcome": "passed", "keywords": ["test_init_command", "TestCLI", "test_cli.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.001555528026074171, "outcome": "passed"}, "call": {"duration": 0.002942566992715001, "outcome": "passed"}, "teardown": {"duration": 0.000753290019929409, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_main_function", "lineno": 56, "outcome": "passed", "keywords": ["test_main_function", "TestCLI", "test_cli.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001934599131345749, "outcome": "passed"}, "call": {"duration": 0.06045729806646705, "outcome": "passed"}, "teardown": {"duration": 0.00020757107995450497, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_note_command_integration_simplified", "lineno": 85, "outcome": "passed", "keywords": ["test_note_command_integration_simplified", "TestCLI", "test_cli.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001848260872066021, "outcome": "passed"}, "call": {"duration": 0.009692193008959293, "outcome": "passed"}, "teardown": {"duration": 0.00018292292952537537, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_search_command_existence", "lineno": 104, "outcome": "passed", "keywords": ["test_search_command_existence", "TestCLI", "test_cli.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001781510654836893, "outcome": "passed"}, "call": {"duration": 0.008927437011152506, "outcome": "passed"}, "teardown": {"duration": 0.00017748214304447174, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_main_with_init_integration", "lineno": 140, "outcome": "passed", "keywords": ["test_main_with_init_integration", "TestCLI", "test_cli.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0004234171938151121, "outcome": "passed"}, "call": {"duration": 0.012026990065351129, "outcome": "passed"}, "teardown": {"duration": 0.00028909905813634396, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_cli.py::TestCLI::test_multiple_cli_commands", "lineno": 157, "outcome": "passed", "keywords": ["test_multiple_cli_commands", "TestCLI", "test_cli.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00017890892922878265, "outcome": "passed"}, "call": {"duration": 0.009480182081460953, "outcome": "passed"}, "teardown": {"duration": 0.00018233689479529858, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_create_collaborator", "lineno": 108, "outcome": "passed", "keywords": ["test_create_collaborator", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0026732319965958595, "outcome": "passed"}, "call": {"duration": 0.0020239108707755804, "outcome": "passed"}, "teardown": {"duration": 0.0008210588712245226, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_add_annotations", "lineno": 130, "outcome": "passed", "keywords": ["test_add_annotations", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.01413964806124568, "outcome": "passed"}, "call": {"duration": 0.011253385106101632, "outcome": "passed"}, "teardown": {"duration": 0.0009410190396010876, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_multiple_annotations_from_same_collaborator", "lineno": 207, "outcome": "passed", "keywords": ["test_multiple_annotations_from_same_collaborator", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.01399394404143095, "outcome": "passed"}, "call": {"duration": 0.006661944789811969, "outcome": "passed"}, "teardown": {"duration": 0.00089121307246387, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_annotations_on_multiple_documents", "lineno": 248, "outcome": "passed", "keywords": ["test_annotations_on_multiple_documents", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.01030238508246839, "outcome": "passed"}, "call": {"duration": 0.012449414934962988, "outcome": "passed"}, "teardown": {"duration": 0.0009210810530930758, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations", "lineno": 311, "outcome": "passed", "keywords": ["test_import_collaborator_annotations", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.01393871195614338, "outcome": "passed"}, "call": {"duration": 0.009095306973904371, "outcome": "passed"}, "teardown": {"duration": 0.0009180170018225908, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations_with_replies", "lineno": 386, "outcome": "passed", "keywords": ["test_import_collaborator_annotations_with_replies", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.013926189858466387, "outcome": "passed"}, "call": {"duration": 0.01118853222578764, "outcome": "passed"}, "teardown": {"duration": 0.000905890017747879, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations_with_invalid_data", "lineno": 450, "outcome": "passed", "keywords": ["test_import_collaborator_annotations_with_invalid_data", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.013943867990747094, "outcome": "passed"}, "call": {"duration": 0.007361340103670955, "outcome": "passed"}, "teardown": {"duration": 0.0009017200209200382, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_invalid_annotations", "lineno": 555, "outcome": "passed", "keywords": ["test_import_invalid_annotations", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.010326743824407458, "outcome": "passed"}, "call": {"duration": 0.0009104828350245953, "outcome": "passed"}, "teardown": {"duration": 0.0008404669351875782, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_annotations_on_citations", "lineno": 598, "outcome": "passed", "keywords": ["test_annotations_on_citations", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.010341465007513762, "outcome": "passed"}, "call": {"duration": 0.007629883009940386, "outcome": "passed"}, "teardown": {"duration": 0.000871261116117239, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_maintaining_annotation_integrity", "lineno": 643, "outcome": "passed", "keywords": ["test_maintaining_annotation_integrity", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.013885074062272906, "outcome": "passed"}, "call": {"duration": 0.00821059406735003, "outcome": "passed"}, "teardown": {"duration": 0.0008979609701782465, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_collaborative_feedback_integration", "lineno": 680, "outcome": "passed", "keywords": ["test_collaborative_feedback_integration", "TestCollaboration", "test_collaboration.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.014019497903063893, "outcome": "passed"}, "call": {"duration": 0.012884750962257385, "outcome": "passed"}, "teardown": {"duration": 0.0009147841483354568, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_default_templates_availability", "lineno": 32, "outcome": "passed", "keywords": ["test_default_templates_availability", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00022005010396242142, "outcome": "passed"}, "call": {"duration": 0.04369534505531192, "outcome": "passed"}, "teardown": {"duration": 0.00018401909619569778, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_behavioral_experiment_template", "lineno": 61, "outcome": "passed", "keywords": ["test_behavioral_experiment_template", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0026047551073133945, "outcome": "passed"}, "call": {"duration": 0.017659380100667477, "outcome": "passed"}, "teardown": {"duration": 0.0007843850180506706, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_neuroimaging_experiment_template", "lineno": 106, "outcome": "passed", "keywords": ["test_neuroimaging_experiment_template", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0026044670958071947, "outcome": "passed"}, "call": {"duration": 0.018007626989856362, "outcome": "passed"}, "teardown": {"duration": 0.0008382939267903566, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_molecular_biology_experiment_template", "lineno": 156, "outcome": "passed", "keywords": ["test_molecular_biology_experiment_template", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002586814109236002, "outcome": "passed"}, "call": {"duration": 0.016270953929051757, "outcome": "passed"}, "teardown": {"duration": 0.0007893589790910482, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_computational_modeling_experiment_template", "lineno": 203, "outcome": "passed", "keywords": ["test_computational_modeling_experiment_template", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025779209099709988, "outcome": "passed"}, "call": {"duration": 0.01710357586853206, "outcome": "passed"}, "teardown": {"duration": 0.0007752371020615101, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_template_with_missing_required_fields", "lineno": 252, "outcome": "passed", "keywords": ["test_template_with_missing_required_fields", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025780999567359686, "outcome": "passed"}, "call": {"duration": 0.00817640800960362, "outcome": "passed"}, "teardown": {"duration": 0.0007642500568181276, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_template_with_optional_fields", "lineno": 264, "outcome": "passed", "keywords": ["test_template_with_optional_fields", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025818871799856424, "outcome": "passed"}, "call": {"duration": 0.015644762199372053, "outcome": "passed"}, "teardown": {"duration": 0.0007636770606040955, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_custom_template_creation", "lineno": 286, "outcome": "passed", "keywords": ["test_custom_template_creation", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002536600921303034, "outcome": "passed"}, "call": {"duration": 0.025543099036440253, "outcome": "passed"}, "teardown": {"duration": 0.0007745567709207535, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_sleep_study_template", "lineno": 403, "outcome": "passed", "keywords": ["test_sleep_study_template", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025092579890042543, "outcome": "passed"}, "call": {"duration": 0.02957353205420077, "outcome": "passed"}, "teardown": {"duration": 0.0007825850043445826, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_linking_to_research_question", "lineno": 463, "outcome": "passed", "keywords": ["test_experiment_linking_to_research_question", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002538696164265275, "outcome": "passed"}, "call": {"duration": 0.02292557409964502, "outcome": "passed"}, "teardown": {"duration": 0.0008285909425467253, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_documentation_with_notes", "lineno": 516, "outcome": "failed", "keywords": ["test_experiment_documentation_with_notes", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025072889402508736, "outcome": "passed"}, "call": {"duration": 0.02677625697106123, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_experiment_templates.py", "lineno": 574, "message": "AssertionError: assert UUID('b5258209-0286-4535-ba34-c72828cae55a') in []"}, "traceback": [{"path": "tests/academic_researcher/test_experiment_templates.py", "lineno": 574, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_experiment_templates.TestExperimentTemplates object at 0x7ff8f6d20500>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84e9c13a0>\n\n    def test_experiment_documentation_with_notes(self, brain):\n        \"\"\"Test linking documentation notes to experiments.\"\"\"\n        # Create an experiment from template\n        experiment_id = brain.create_experiment_from_template(\n            template_name=\"neuroimaging_experiment\",\n            title=\"Default Mode Network in Meditation\",\n            hypothesis=\"Meditation will increase activity in the default mode network\",\n            imaging_modality=\"fMRI\",\n            participants=\"30 experienced meditators and 30 controls\",\n            task_design=\"Block design alternating meditation and rest\",\n            acquisition_parameters=\"Standard parameters\",\n            preprocessing=\"Standard preprocessing\",\n            analysis_plan=\"Compare meditation vs. rest\"\n        )\n    \n        # Create notes documenting the experiment\n        protocol_note_id = brain.create_note(\n            title=\"Detailed Protocol\",\n            content=\"Full detailed protocol for the meditation fMRI study...\"\n        )\n    \n        participant_note_id = brain.create_note(\n            title=\"Participant Recruitment\",\n            content=\"Criteria and methods for recruiting meditation practitioners...\"\n        )\n    \n        analysis_note_id = brain.create_note(\n            title=\"Analysis Pipeline\",\n            content=\"Step-by-step analysis pipeline for the meditation fMRI data...\"\n        )\n    \n        # Link notes to the experiment\n        brain.add_notes_to_experiment(\n            experiment_id=experiment_id,\n            note_ids=[protocol_note_id, participant_note_id, analysis_note_id]\n        )\n    \n        # Verify notes were linked to the experiment\n        experiment = brain.storage.get(Experiment, experiment_id)\n    \n        assert len(experiment.notes) == 3\n        assert protocol_note_id in experiment.notes\n        assert participant_note_id in experiment.notes\n        assert analysis_note_id in experiment.notes\n    \n        # Verify knowledge graph connections\n        for note_id in [protocol_note_id, participant_note_id, analysis_note_id]:\n            assert brain._knowledge_graph.has_edge(str(experiment_id), str(note_id))\n            edge_attrs = brain._knowledge_graph.get_edge_attributes(str(experiment_id), str(note_id))\n            assert edge_attrs[\"type\"] == \"documents\"\n    \n        # Verify we can navigate from experiment to notes\n        related = brain.get_related_nodes(experiment_id)\n        assert \"documents\" in related\n        document_notes = related[\"documents\"]\n    \n        document_note_ids = [note.id for note in document_notes]\n>       assert protocol_note_id in document_note_ids\nE       AssertionError: assert UUID('b5258209-0286-4535-ba34-c72828cae55a') in []\n\ntests/academic_researcher/test_experiment_templates.py:574: AssertionError"}, "teardown": {"duration": 0.0008488488383591175, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_status_updates", "lineno": 577, "outcome": "passed", "keywords": ["test_experiment_status_updates", "TestExperimentTemplates", "test_experiment_templates.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00255751796066761, "outcome": "passed"}, "call": {"duration": 0.02286821906454861, "outcome": "passed"}, "teardown": {"duration": 0.0007911431603133678, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_create_grant_proposal", "lineno": 116, "outcome": "passed", "keywords": ["test_create_grant_proposal", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002785308053717017, "outcome": "passed"}, "call": {"duration": 0.0029567319434136152, "outcome": "passed"}, "teardown": {"duration": 0.0007878458127379417, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_add_items_to_grant_workspace", "lineno": 153, "outcome": "passed", "keywords": ["test_add_items_to_grant_workspace", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.030985727906227112, "outcome": "passed"}, "call": {"duration": 0.006076595978811383, "outcome": "passed"}, "teardown": {"duration": 0.0008995118550956249, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_adding_items_incrementally", "lineno": 208, "outcome": "passed", "keywords": ["test_adding_items_incrementally", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.03083099308423698, "outcome": "passed"}, "call": {"duration": 0.010610244004055858, "outcome": "passed"}, "teardown": {"duration": 0.0009133110288530588, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_grant_proposal_status_progression", "lineno": 251, "outcome": "passed", "keywords": ["test_grant_proposal_status_progression", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0024983929470181465, "outcome": "passed"}, "call": {"duration": 0.009148424956947565, "outcome": "passed"}, "teardown": {"duration": 0.0007762110326439142, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_export_grant_proposal_to_markdown", "lineno": 289, "outcome": "passed", "keywords": ["test_export_grant_proposal_to_markdown", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.030844884924590588, "outcome": "passed"}, "call": {"duration": 0.027049262076616287, "outcome": "passed"}, "teardown": {"duration": 0.0009100651368498802, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_export_grant_proposal_to_yaml", "lineno": 345, "outcome": "passed", "keywords": ["test_export_grant_proposal_to_yaml", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.031014548847451806, "outcome": "passed"}, "call": {"duration": 0.04500515107065439, "outcome": "passed"}, "teardown": {"duration": 0.0009007928892970085, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_grant_proposal_version_history", "lineno": 413, "outcome": "passed", "keywords": ["test_grant_proposal_version_history", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.03114075493067503, "outcome": "passed"}, "call": {"duration": 0.09204067499376833, "outcome": "passed"}, "teardown": {"duration": 0.0010016479063779116, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_budget_and_timeline_management", "lineno": 516, "outcome": "passed", "keywords": ["test_budget_and_timeline_management", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0027773240581154823, "outcome": "passed"}, "call": {"duration": 0.02019115397706628, "outcome": "passed"}, "teardown": {"duration": 0.0007858201861381531, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_related_nodes_navigation", "lineno": 631, "outcome": "failed", "keywords": ["test_related_nodes_navigation", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.03121042693965137, "outcome": "passed"}, "call": {"duration": 0.0059469209518283606, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_grant_proposals.py", "lineno": 660, "message": "AssertionError: assert UUID('4bcd492c-ece2-4bd3-97a4-fad4ef6c12bb') in []"}, "traceback": [{"path": "tests/academic_researcher/test_grant_proposals.py", "lineno": 660, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_grant_proposals.TestGrantProposals object at 0x7ff8f6d48d70>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84e8757f0>\nsample_proposal_data = {'citations': [UUID('d8eeaff7-1ed4-4ec2-842c-1e0c41d72591'), UUID('abc52750-b868-453d-9a64-3c1544a05761')], 'experimen...69cd04e4')], 'questions': [UUID('686215cc-c4fb-4f9b-b712-3aa401fae6da'), UUID('4752f702-9bdb-44ec-9494-0d4a7a4fef21')]}\n\n    def test_related_nodes_navigation(self, brain, sample_proposal_data):\n        \"\"\"Test navigation between grant proposals and related nodes.\"\"\"\n        # Create a grant proposal with items\n        grant_id = brain.create_grant_proposal(\n            title=\"Neural Activity and Myelination in Development\",\n            funding_agency=\"National Institutes of Health\",\n            description=\"A proposal to study how neural activity influences myelination during brain development\"\n        )\n    \n        # Add items to the grant workspace\n        brain.add_to_grant_workspace(\n            grant_id=grant_id,\n            note_ids=sample_proposal_data[\"notes\"],\n            experiment_ids=sample_proposal_data[\"experiments\"],\n            question_ids=sample_proposal_data[\"questions\"]\n        )\n    \n        # Get related nodes for the grant proposal\n        related = brain.get_related_nodes(grant_id)\n    \n        # Verify we can navigate to all related items\n        assert \"includes\" in related\n        assert \"proposes\" in related\n        assert \"addresses\" in related\n    \n        # Check notes\n        note_ids = [note.id for note in related[\"includes\"]]\n        for note_id in sample_proposal_data[\"notes\"]:\n>           assert note_id in note_ids\nE           AssertionError: assert UUID('4bcd492c-ece2-4bd3-97a4-fad4ef6c12bb') in []\n\ntests/academic_researcher/test_grant_proposals.py:660: AssertionError"}, "teardown": {"duration": 0.0009479720611125231, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_multi_grant_proposal_organization", "lineno": 689, "outcome": "passed", "keywords": ["test_multi_grant_proposal_organization", "TestGrantProposals", "test_grant_proposals.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.030735037988051772, "outcome": "passed"}, "call": {"duration": 0.009900022065266967, "outcome": "passed"}, "teardown": {"duration": 0.0009195560123771429, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_main.py::test_main_module_imports", "lineno": 7, "outcome": "passed", "keywords": ["test_main_module_imports", "test_main.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0002059880644083023, "outcome": "passed"}, "call": {"duration": 0.0006795369554311037, "outcome": "passed"}, "teardown": {"duration": 0.00016796193085610867, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_main.py::test_main_execution", "lineno": 15, "outcome": "passed", "keywords": ["test_main_execution", "test_main.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0001677270047366619, "outcome": "passed"}, "call": {"duration": 0.0007603040430694818, "outcome": "passed"}, "teardown": {"duration": 0.00017573591321706772, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_basic_performance", "lineno": 108, "outcome": "passed", "keywords": ["test_basic_performance", "TestOptimizedPerformance", "test_performance_optimized.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.13225643197074533, "outcome": "passed"}, "call": {"duration": 0.20750709902495146, "outcome": "passed", "stdout": "Search index error: maximum recursion depth exceeded\nSearch index error: maximum recursion depth exceeded\nSearch index error: maximum recursion depth exceeded\nSearch index error: maximum recursion depth exceeded\n\nCreated 5 notes in 0.01 seconds (0.0016 seconds per note)\nSearch completed in 0.1776 seconds\nLinked 3 citations in 0.02 seconds (0.0071 seconds per link)\n"}, "teardown": {"duration": 0.0012079058215022087, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_note_linking_performance", "lineno": 163, "outcome": "passed", "keywords": ["test_note_linking_performance", "TestOptimizedPerformance", "test_performance_optimized.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.00041801691986620426, "outcome": "passed"}, "call": {"duration": 0.010203888872638345, "outcome": "passed"}, "teardown": {"duration": 0.0008042599074542522, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_citation_processing", "lineno": 188, "outcome": "passed", "keywords": ["test_citation_processing", "TestOptimizedPerformance", "test_performance_optimized.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0014167148619890213, "outcome": "passed"}, "call": {"duration": 0.0659984399098903, "outcome": "passed", "stdout": "\nProcessed 5 papers in 0.06 seconds (79.02 papers/second)\n"}, "teardown": {"duration": 0.0008470159955322742, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_create_research_question", "lineno": 30, "outcome": "failed", "keywords": ["test_create_research_question", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0026576940435916185, "outcome": "passed"}, "call": {"duration": 0.00291056907735765, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_research_questions.py", "lineno": 63, "message": "AssertionError: assert 'ResearchQuestion' == 'question'\n  \n  - question\n  + ResearchQuestion"}, "traceback": [{"path": "tests/academic_researcher/test_research_questions.py", "lineno": 63, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_research_questions.TestResearchQuestions object at 0x7ff8f6d4a750>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84e87e570>\n\n    def test_create_research_question(self, brain):\n        \"\"\"Test creating a research question with all attributes.\"\"\"\n        # Create a research question with all fields\n        question_id = brain.create_research_question(\n            question=\"What are the neural mechanisms of autobiographical memory?\",\n            description=\"Investigating the brain regions and processes involved in personal memory.\",\n            tags={\"memory\", \"neuroscience\", \"autobiographical\"},\n            status=\"open\",\n            priority=8\n        )\n    \n        # Retrieve the question\n        question = brain.storage.get(ResearchQuestion, question_id)\n    \n        # Verify all attributes\n        assert question is not None\n        assert question.id == question_id\n        assert question.question == \"What are the neural mechanisms of autobiographical memory?\"\n        assert question.description == \"Investigating the brain regions and processes involved in personal memory.\"\n        assert question.tags == {\"memory\", \"neuroscience\", \"autobiographical\"}\n        assert question.status == \"open\"\n        # Check for numeric priority if available, otherwise use the enum\n        if hasattr(question, \"_numeric_priority\"):\n            assert question._numeric_priority == 8\n        else:\n            from common.core.models import Priority\n            assert question.priority == Priority.HIGH\n        assert question.evidence == []\n    \n        # Verify in knowledge graph\n        assert brain._knowledge_graph.has_node(str(question_id))\n        node_data = brain._knowledge_graph.get_node_attributes(str(question_id))\n>       assert node_data[\"type\"] == \"question\"\nE       AssertionError: assert 'ResearchQuestion' == 'question'\nE         \nE         - question\nE         + ResearchQuestion\n\ntests/academic_researcher/test_research_questions.py:63: AssertionError"}, "teardown": {"duration": 0.0008020331151783466, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_adding_supporting_evidence", "lineno": 65, "outcome": "passed", "keywords": ["test_adding_supporting_evidence", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002639123937115073, "outcome": "passed"}, "call": {"duration": 0.013638610020279884, "outcome": "passed"}, "teardown": {"duration": 0.0008209459483623505, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_adding_contradicting_evidence", "lineno": 121, "outcome": "passed", "keywords": ["test_adding_contradicting_evidence", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002601715037599206, "outcome": "passed"}, "call": {"duration": 0.0060848209541291, "outcome": "passed"}, "teardown": {"duration": 0.000963136088103056, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_balanced_evidence_evaluation", "lineno": 163, "outcome": "passed", "keywords": ["test_balanced_evidence_evaluation", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025934260338544846, "outcome": "passed"}, "call": {"duration": 0.032730297185480595, "outcome": "passed"}, "teardown": {"duration": 0.0008261529728770256, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_evidence_strength_levels", "lineno": 258, "outcome": "passed", "keywords": ["test_evidence_strength_levels", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025750549975782633, "outcome": "passed"}, "call": {"duration": 0.023587141884490848, "outcome": "passed"}, "teardown": {"duration": 0.0008089570328593254, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_evidence_with_multiple_citations", "lineno": 342, "outcome": "passed", "keywords": ["test_evidence_with_multiple_citations", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002561289118602872, "outcome": "passed"}, "call": {"duration": 0.026243573985993862, "outcome": "passed"}, "teardown": {"duration": 0.0008366729598492384, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_related_questions", "lineno": 390, "outcome": "failed", "keywords": ["test_related_questions", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025676009245216846, "outcome": "passed"}, "call": {"duration": 0.01905604894272983, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_research_questions.py", "lineno": 467, "message": "AssertionError: assert UUID('80a06346-aea7-4dcd-bb9e-83b6f33250f7') in []"}, "traceback": [{"path": "tests/academic_researcher/test_research_questions.py", "lineno": 467, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_research_questions.TestResearchQuestions object at 0x7ff8f6d4a840>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84e865eb0>\n\n    def test_related_questions(self, brain):\n        \"\"\"Test connecting related research questions.\"\"\"\n        # Create multiple related research questions\n        main_question_id = brain.create_research_question(\n            question=\"What are the neural correlates of consciousness?\",\n            priority=9\n        )\n    \n        sub_question1_id = brain.create_research_question(\n            question=\"How does anesthesia affect consciousness?\",\n            priority=8\n        )\n    \n        sub_question2_id = brain.create_research_question(\n            question=\"What distinguishes conscious from unconscious processing?\",\n            priority=8\n        )\n    \n        # Create notes that bridge these questions\n        bridge_note1_id = brain.create_note(\n            title=\"Consciousness and Anesthesia\",\n            content=\"Examining how anesthesia disrupts neural correlates of consciousness.\"\n        )\n    \n        bridge_note2_id = brain.create_note(\n            title=\"Conscious vs. Unconscious Processing\",\n            content=\"Review of differences between conscious and unconscious neural processing.\"\n        )\n    \n        # Add the bridge notes as evidence for multiple questions\n        brain.add_evidence_to_question(\n            question_id=main_question_id,\n            note_id=bridge_note1_id,\n            evidence_type=EvidenceType.RELATED,\n            strength=EvidenceStrength.MODERATE,\n            description=\"Connection to anesthesia research\"\n        )\n    \n        brain.add_evidence_to_question(\n            question_id=sub_question1_id,\n            note_id=bridge_note1_id,\n            evidence_type=EvidenceType.RELATED,\n            strength=EvidenceStrength.STRONG,\n            description=\"Direct relevance to anesthesia effects\"\n        )\n    \n        brain.add_evidence_to_question(\n            question_id=main_question_id,\n            note_id=bridge_note2_id,\n            evidence_type=EvidenceType.RELATED,\n            strength=EvidenceStrength.MODERATE,\n            description=\"Connection to unconscious processing\"\n        )\n    \n        brain.add_evidence_to_question(\n            question_id=sub_question2_id,\n            note_id=bridge_note2_id,\n            evidence_type=EvidenceType.RELATED,\n            strength=EvidenceStrength.STRONG,\n            description=\"Direct relevance to consciousness distinctions\"\n        )\n    \n        # Verify the connections in the knowledge graph\n        # Check if we can navigate between related questions through shared notes\n    \n        # Get notes connected to the main question\n        main_related = brain.get_related_nodes(main_question_id)\n        assert \"evidence\" in main_related\n        main_evidence_notes = [n.id for n in main_related[\"evidence\"]]\n    \n        # Get questions connected to the first bridge note\n        bridge1_related = brain.get_related_nodes(bridge_note1_id)\n        assert \"incoming_evidence\" in bridge1_related\n        questions_with_bridge1 = [q.id for q in bridge1_related[\"incoming_evidence\"]]\n    \n        # Verify that both the main question and sub-question 1 are connected to bridge note 1\n>       assert main_question_id in questions_with_bridge1\nE       AssertionError: assert UUID('80a06346-aea7-4dcd-bb9e-83b6f33250f7') in []\n\ntests/academic_researcher/test_research_questions.py:467: AssertionError"}, "teardown": {"duration": 0.0008448520675301552, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_identifying_knowledge_gaps", "lineno": 509, "outcome": "passed", "keywords": ["test_identifying_knowledge_gaps", "TestResearchQuestions", "test_research_questions.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025504939258098602, "outcome": "passed"}, "call": {"duration": 0.0488860490731895, "outcome": "passed"}, "teardown": {"duration": 0.0008245611097663641, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_paper_import_to_note_creation", "lineno": 31, "outcome": "failed", "keywords": ["test_workflow_paper_import_to_note_creation", "TestUserWorkflows", "test_workflows.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0029456987977027893, "outcome": "passed"}, "call": {"duration": 0.016534948023036122, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/common/core/knowledge.py", "lineno": 576, "message": "ValueError: Both source and target nodes must exist. Missing: sourcetarget"}, "traceback": [{"path": "tests/academic_researcher/test_workflows.py", "lineno": 57, "message": ""}, {"path": "researchbrain/core/brain.py", "lineno": 245, "message": "in create_note"}, {"path": "common/core/knowledge.py", "lineno": 576, "message": "ValueError"}], "longrepr": "self = <tests.academic_researcher.test_workflows.TestUserWorkflows object at 0x7ff8f6d4bd10>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84e885b20>\ntmp_path = PosixPath('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_workflow_paper_import_to_0')\n\n        def test_workflow_paper_import_to_note_creation(self, brain, tmp_path):\n            \"\"\"Test workflow: paper import -> citation linking -> note creation.\"\"\"\n            # Create a mock BibTeX file\n            bibtex_path = tmp_path / \"test_paper.bib\"\n            with open(bibtex_path, \"w\") as f:\n                f.write(\"\"\"\n    @article{smith2023neuroscience,\n      title={Advances in Neuroscience Research},\n      author={Smith, John and Doe, Jane},\n      journal={Journal of Neuroscience},\n      volume={42},\n      number={3},\n      pages={123-145},\n      year={2023},\n      publisher={Neuroscience Publishers},\n      doi={10.1234/neuro.2023.42.3.123}\n    }\n                \"\"\")\n    \n            # Import the paper\n            citation_id = brain.import_paper(bibtex_path)\n    \n            assert citation_id is not None\n    \n            # Create a note referencing the paper\n>           note_id = brain.create_note(\n                title=\"Notes on Smith & Doe (2023)\",\n                content=\"The paper by Smith and Doe [-@smith2023neuroscience] presents interesting findings about neural plasticity.\",\n                tags={\"neuroscience\", \"plasticity\", \"research\"}\n            )\n\ntests/academic_researcher/test_workflows.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nresearchbrain/core/brain.py:245: in create_note\n    self.kb.link_nodes(note.id, citation_id, RelationType.CITES)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <common.core.knowledge.StandardKnowledgeBase object at 0x7ff84e884ec0>\nsource_id = UUID('2f633c5c-545b-4ff4-9628-6abfa04535e6')\ntarget_id = UUID('4681a418-1b6a-481e-8a93-334e293e683c')\nrelation_type = <RelationType.CITES: 'cites'>, metadata = None\n\n    def link_nodes(self, source_id: UUID, target_id: UUID, relation_type: Union[RelationType, str],\n                 metadata: Optional[Dict[str, Any]] = None) -> Relation:\n        \"\"\"Create a relationship between two nodes.\n    \n        Args:\n            source_id: ID of the source node.\n            target_id: ID of the target node.\n            relation_type: Type of the relation.\n            metadata: Optional metadata for the relation.\n    \n        Returns:\n            The created relation.\n        \"\"\"\n        # Check that both nodes exist\n        source_node = self.get_node(source_id)\n        target_node = self.get_node(target_id)\n    \n        if not source_node or not target_node:\n>           raise ValueError(f\"Both source and target nodes must exist. Missing: {'' if source_node else 'source'}{'' if target_node else 'target'}\")\nE           ValueError: Both source and target nodes must exist. Missing: sourcetarget\n\ncommon/core/knowledge.py:576: ValueError"}, "teardown": {"duration": 0.0008488090243190527, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_research_question_analysis", "lineno": 83, "outcome": "failed", "keywords": ["test_workflow_research_question_analysis", "TestUserWorkflows", "test_workflows.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025266350712627172, "outcome": "passed"}, "call": {"duration": 0.025142751168459654, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/academic_researcher/test_workflows.py", "lineno": 157, "message": "assert 0 == 2\n +  where 0 = len([])"}, "traceback": [{"path": "tests/academic_researcher/test_workflows.py", "lineno": 157, "message": "AssertionError"}], "longrepr": "self = <tests.academic_researcher.test_workflows.TestUserWorkflows object at 0x7ff8f6d4bec0>\nbrain = <researchbrain.core.brain.ResearchBrain object at 0x7ff84ea4e3f0>\n\n    def test_workflow_research_question_analysis(self, brain):\n        \"\"\"Test workflow: research question -> evidence evaluation with conflicting evidence.\"\"\"\n        # Create a research question\n        question_id = brain.create_research_question(\n            question=\"Does neuroplasticity decline with age?\",\n            description=\"Investigating the relationship between aging and neural plasticity\",\n            priority=9\n        )\n    \n        # Create supporting evidence\n        supporting_note_id = brain.create_note(\n            title=\"Supporting Evidence\",\n            content=\"Studies by Smith et al. show clear decline in plasticity after age 60.\"\n        )\n    \n        supporting_citation_id = brain.create_citation(\n            title=\"Neural Plasticity in Aging\",\n            authors=[\"Smith, J\", \"Johnson, A\"],\n            year=2022,\n            journal=\"Aging Neuroscience\"\n        )\n    \n        brain.link_note_to_paper(supporting_note_id, supporting_citation_id)\n    \n        # Add supporting evidence to the question\n        brain.add_evidence_to_question(\n            question_id=question_id,\n            note_id=supporting_note_id,\n            evidence_type=EvidenceType.SUPPORTING,\n            strength=EvidenceStrength.STRONG,\n            description=\"Strong evidence showing plasticity decline with age\",\n            citation_ids=[supporting_citation_id]\n        )\n    \n        # Create contradicting evidence\n        contradicting_note_id = brain.create_note(\n            title=\"Contradicting Evidence\",\n            content=\"Recent work by Brown et al. suggests plasticity can be maintained with mental exercise.\"\n        )\n    \n        contradicting_citation_id = brain.create_citation(\n            title=\"Maintaining Neural Plasticity in Older Adults\",\n            authors=[\"Brown, R\", \"Garcia, M\"],\n            year=2023,\n            journal=\"Cognitive Aging\"\n        )\n    \n        brain.link_note_to_paper(contradicting_note_id, contradicting_citation_id)\n    \n        # Add contradicting evidence to the question\n        brain.add_evidence_to_question(\n            question_id=question_id,\n            note_id=contradicting_note_id,\n            evidence_type=EvidenceType.CONTRADICTING,\n            strength=EvidenceStrength.MODERATE,\n            description=\"Evidence that challenges the universal decline model\",\n            citation_ids=[contradicting_citation_id]\n        )\n    \n        # Retrieve the research question and verify the evidence\n        question = brain.storage.get(ResearchQuestion, question_id)\n    \n        assert len(question.evidence) == 2\n    \n        # Verify that both supporting and contradicting evidence are present\n        evidence_types = [e.evidence_type for e in question.evidence]\n        assert EvidenceType.SUPPORTING in evidence_types\n        assert EvidenceType.CONTRADICTING in evidence_types\n    \n        # Get related nodes for the question\n        related = brain.get_related_nodes(question_id)\n    \n        assert \"evidence\" in related\n>       assert len(related[\"evidence\"]) == 2\nE       assert 0 == 2\nE        +  where 0 = len([])\n\ntests/academic_researcher/test_workflows.py:157: AssertionError"}, "teardown": {"duration": 0.0008452129550278187, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_grant_proposal_assembly", "lineno": 158, "outcome": "passed", "keywords": ["test_workflow_grant_proposal_assembly", "TestUserWorkflows", "test_workflows.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.002506521064788103, "outcome": "passed"}, "call": {"duration": 0.04124003299511969, "outcome": "passed"}, "teardown": {"duration": 0.0008430939633399248, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_collaborative_annotation", "lineno": 263, "outcome": "passed", "keywords": ["test_workflow_collaborative_annotation", "TestUserWorkflows", "test_workflows.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025558408815413713, "outcome": "passed"}, "call": {"duration": 0.01285641104914248, "outcome": "passed"}, "teardown": {"duration": 0.0008228078950196505, "outcome": "passed"}}, {"nodeid": "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_experiment_documentation", "lineno": 333, "outcome": "passed", "keywords": ["test_workflow_experiment_documentation", "TestUserWorkflows", "test_workflows.py", "academic_researcher", "tests", "unified", ""], "setup": {"duration": 0.0025363171007484198, "outcome": "passed"}, "call": {"duration": 0.029235854046419263, "outcome": "passed"}, "teardown": {"duration": 0.0008276929147541523, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_initialization", "lineno": 15, "outcome": "failed", "keywords": ["test_initialization", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016657139640301466, "outcome": "passed"}, "call": {"duration": 0.000298619968816638, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 18, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 18, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de58e0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_initialization0/test_data'\n\n    def test_initialization(self, temp_data_dir):\n        \"\"\"Test system initialization creates required directories.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:18: TypeError"}, "teardown": {"duration": 0.00029502296820282936, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitor", "lineno": 28, "outcome": "failed", "keywords": ["test_add_competitor", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0010726479813456535, "outcome": "passed"}, "call": {"duration": 0.00031344196759164333, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 31, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 31, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de4cb0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_competitor0/test_data'\ncompetitor_samples = [Competitor(id=UUID('c99ad2e5-a452-4056-9147-4f17a4774ad5'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 1210...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_add_competitor(self, temp_data_dir, competitor_samples):\n        \"\"\"Test adding competitors to the system.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:31: TypeError"}, "teardown": {"duration": 0.0003003510646522045, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitive_feature", "lineno": 53, "outcome": "failed", "keywords": ["test_add_competitive_feature", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012626179959625006, "outcome": "passed"}, "call": {"duration": 0.0003015110269188881, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 56, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 56, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de5a60>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_competitive_feature0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('42464759-b46a-4532-960d-e1ff0312bdc0'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...060c-4f26-bfc2-737024663eef': 9.0, '03634ecd-8106-4188-bf40-bf7b9d84f2b9': None}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_add_competitive_feature(self, temp_data_dir, competitive_feature_samples):\n        \"\"\"Test adding competitive features to the system.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:56: TypeError"}, "teardown": {"duration": 0.0003206587862223387, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_market_gap", "lineno": 78, "outcome": "failed", "keywords": ["test_add_market_gap", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013334490358829498, "outcome": "passed"}, "call": {"duration": 0.0003063841722905636, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 81, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 81, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de5cd0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_market_gap0/test_data'\nmarket_gap_samples = [MarketGap(id=UUID('313cbe43-7185-4dfc-ab6d-b8c8728d4263'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 15663...e21-0c1e-44b4-ad5a-5fdfb5e95980'), UUID('9be47b52-3247-422c-936d-1d2a4371654e')], node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_add_market_gap(self, temp_data_dir, market_gap_samples):\n        \"\"\"Test adding market gaps to the system.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:81: TypeError"}, "teardown": {"duration": 0.00031739496625959873, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitor", "lineno": 103, "outcome": "failed", "keywords": ["test_get_competitor", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0010437059681862593, "outcome": "passed"}, "call": {"duration": 0.0002732211723923683, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 106, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 106, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de5f40>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_competitor0/test_data'\ncompetitor_samples = [Competitor(id=UUID('0559248d-ebc2-4f3a-ac22-19f3eeaa3dae'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 1744...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_get_competitor(self, temp_data_dir, competitor_samples):\n        \"\"\"Test retrieving competitors.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:106: TypeError"}, "teardown": {"duration": 0.00029998505488038063, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitive_feature", "lineno": 120, "outcome": "failed", "keywords": ["test_get_competitive_feature", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012496979907155037, "outcome": "passed"}, "call": {"duration": 0.0002664609346538782, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 123, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 123, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de6180>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_competitive_feature0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('c0bb448f-7e36-4ffa-a535-5b9203e31f0a'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...0426-4112-8830-a769dcd4f7dc': 9.0, '6df1e3cb-79ab-4e11-a9bd-fe8c8af17fa5': None}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_get_competitive_feature(self, temp_data_dir, competitive_feature_samples):\n        \"\"\"Test retrieving competitive features.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:123: TypeError"}, "teardown": {"duration": 0.0003313340712338686, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_market_gap", "lineno": 137, "outcome": "failed", "keywords": ["test_get_market_gap", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001267594052478671, "outcome": "passed"}, "call": {"duration": 0.00026744394563138485, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 140, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 140, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de63f0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_market_gap0/test_data'\nmarket_gap_samples = [MarketGap(id=UUID('a45019ba-e501-455d-ab34-2ae5c369aeaa'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 20958...f94-c01a-424e-8130-5441116638f0'), UUID('d1844edd-79ce-4134-8872-85d48824e233')], node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_get_market_gap(self, temp_data_dir, market_gap_samples):\n        \"\"\"Test retrieving market gaps.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:140: TypeError"}, "teardown": {"duration": 0.00032418989576399326, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitors", "lineno": 154, "outcome": "failed", "keywords": ["test_get_all_competitors", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.00103556620888412, "outcome": "passed"}, "call": {"duration": 0.00026212306693196297, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 157, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 157, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de6660>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_all_competitors0/test_data'\ncompetitor_samples = [Competitor(id=UUID('f95147e2-150c-41e9-9a97-e40a5b930d90'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 2272...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_get_all_competitors(self, temp_data_dir, competitor_samples):\n        \"\"\"Test retrieving all competitors.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:157: TypeError"}, "teardown": {"duration": 0.00029362202621996403, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitive_features", "lineno": 169, "outcome": "failed", "keywords": ["test_get_all_competitive_features", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012552058324217796, "outcome": "passed"}, "call": {"duration": 0.0002568739000707865, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 172, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 172, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de68a0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_all_competitive_featu0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('73bb3fb7-5a83-4bfb-89ff-3aab54c1f8ae'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...f6f1-49df-86c0-025a24019154': 9.0, '9ff0fc05-79f3-4e55-a03d-5c91d275a506': None}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_get_all_competitive_features(self, temp_data_dir, competitive_feature_samples):\n        \"\"\"Test retrieving all competitive features.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:172: TypeError"}, "teardown": {"duration": 0.0003158440813422203, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_market_gaps", "lineno": 184, "outcome": "failed", "keywords": ["test_get_all_market_gaps", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012559820897877216, "outcome": "passed"}, "call": {"duration": 0.00025698612444102764, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 187, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 187, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de6b10>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_all_market_gaps0/test_data'\nmarket_gap_samples = [MarketGap(id=UUID('821f31f8-f8ee-47ca-8b5b-c32db95cf891'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 26288...7de-3fba-4ef1-8b87-2eb5b127399b'), UUID('6733460a-e705-449a-a2a3-6682349d89a5')], node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_get_all_market_gaps(self, temp_data_dir, market_gap_samples):\n        \"\"\"Test retrieving all market gaps.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:187: TypeError"}, "teardown": {"duration": 0.000321592902764678, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_competitor_feature", "lineno": 199, "outcome": "failed", "keywords": ["test_update_competitor_feature", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0010452428832650185, "outcome": "passed"}, "call": {"duration": 0.0002655680291354656, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 202, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 202, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de6d80>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_update_competitor_feature0/test_data'\ncompetitor_samples = [Competitor(id=UUID('4c509452-cf08-494c-8345-1e739d8be297'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 2803...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_update_competitor_feature(self, temp_data_dir, competitor_samples):\n        \"\"\"Test updating a competitor's feature inventory.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:202: TypeError"}, "teardown": {"duration": 0.0002940648701041937, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_feature_implementation", "lineno": 227, "outcome": "failed", "keywords": ["test_update_feature_implementation", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012453740928322077, "outcome": "passed"}, "call": {"duration": 0.00028892001137137413, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 230, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 230, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de6fc0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_update_feature_implementa0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('e275c59b-c2c0-4768-8d01-cdae9829be05'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...cf60-4a2c-83b0-af33c871698e': 9.0, 'fbdbcb1f-2c1a-401a-8d0f-b5cb60bd1924': None}, node_type=<NodeType.OTHER: 'other'>)]\ncompetitor_samples = [Competitor(id=UUID('27bdd278-3cbc-45ce-bcd7-3a30ade0675f'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 2982...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_update_feature_implementation(self, temp_data_dir, competitive_feature_samples, competitor_samples):\n        \"\"\"Test updating a competitive feature's implementation details.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:230: TypeError"}, "teardown": {"duration": 0.00032634614035487175, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_compare_features", "lineno": 266, "outcome": "failed", "keywords": ["test_compare_features", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012492721434682608, "outcome": "passed"}, "call": {"duration": 0.00032267882488667965, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 269, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 269, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de7230>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_compare_features0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('c6e2cfbc-2ca2-4cef-89b3-8a08782817ef'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...8da4-446c-ac90-4064a6b2c53a': 9.0, '0f2d0d23-18a1-4375-a3cf-63398f3c1854': None}, node_type=<NodeType.OTHER: 'other'>)]\ncompetitor_samples = [Competitor(id=UUID('5dea7c71-9c1f-4c8c-a768-4d84f044ea36'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 3162...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_compare_features(self, temp_data_dir, competitive_feature_samples, competitor_samples):\n        \"\"\"Test comparing features across competitors.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:269: TypeError"}, "teardown": {"duration": 0.00034059397876262665, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_identify_gaps", "lineno": 313, "outcome": "failed", "keywords": ["test_identify_gaps", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012219969648867846, "outcome": "passed"}, "call": {"duration": 0.00028328108601272106, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 316, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 316, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de74a0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_identify_gaps0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('85863c9d-b843-4aab-9d05-575fe66faaf9'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...19af-469e-a210-064bd327509c': 9.0, '20f8ea7f-c012-41fe-bf0f-b1b21fa6758c': None}, node_type=<NodeType.OTHER: 'other'>)]\ncompetitor_samples = [Competitor(id=UUID('70005a1e-ff3d-4d7f-bba6-b5cb48482e3c'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 3340...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_identify_gaps(self, temp_data_dir, competitive_feature_samples, competitor_samples):\n        \"\"\"Test identifying gaps in the market.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:316: TypeError"}, "teardown": {"duration": 0.00032597407698631287, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_create_market_gap_from_analysis", "lineno": 348, "outcome": "failed", "keywords": ["test_create_market_gap_from_analysis", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012412138748914003, "outcome": "passed"}, "call": {"duration": 0.000279868021607399, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 351, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 351, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de7710>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_create_market_gap_from_an0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('c6ee4dba-6c47-4c48-aee9-f9453a4fc614'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...6a98-4e5e-a2f6-0ae19ce89021': 9.0, 'f9244700-8cb7-4e60-8f87-2d5dd19b23ab': None}, node_type=<NodeType.OTHER: 'other'>)]\ncompetitor_samples = [Competitor(id=UUID('8ecf666a-e06d-470c-99a8-728189b8ff96'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 3519...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_create_market_gap_from_analysis(self, temp_data_dir, competitive_feature_samples, competitor_samples):\n        \"\"\"Test creating a market gap from competitive feature analysis.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:351: TypeError"}, "teardown": {"duration": 0.0003190611023455858, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_competitive_matrix", "lineno": 382, "outcome": "failed", "keywords": ["test_generate_competitive_matrix", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.00103729497641325, "outcome": "passed"}, "call": {"duration": 0.00030095595866441727, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 385, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 385, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de7980>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_generate_competitive_matr0/test_data'\ncompetitor_samples = [Competitor(id=UUID('8f267263-5b8b-43a4-ae45-ba3ccc69cd24'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 3697...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_generate_competitive_matrix(self, temp_data_dir, competitor_samples):\n        \"\"\"Test generating competitive positioning matrix.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:385: TypeError"}, "teardown": {"duration": 0.0002948369365185499, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_track_competitive_timeline", "lineno": 433, "outcome": "failed", "keywords": ["test_track_competitive_timeline", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012341330293565989, "outcome": "passed"}, "call": {"duration": 0.0002853099722415209, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 436, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 436, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de7590>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_track_competitive_timelin0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('fe23069e-7b7f-485b-b6d5-ec9b5a71ee2b'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...7c2b-4b73-ad62-6373d0b4d658': 9.0, 'd2268afe-4129-48e3-9475-0a6faabc961d': None}, node_type=<NodeType.OTHER: 'other'>)]\ncompetitor_samples = [Competitor(id=UUID('56cf117b-cf55-4351-a1a3-69c7b42e1c16'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 3872...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_track_competitive_timeline(self, temp_data_dir, competitive_feature_samples, competitor_samples):\n        \"\"\"Test tracking competitive feature releases over time.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:436: TypeError"}, "teardown": {"duration": 0.00031996099278330803, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_feature_parity_report", "lineno": 472, "outcome": "failed", "keywords": ["test_generate_feature_parity_report", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001244592946022749, "outcome": "passed"}, "call": {"duration": 0.00030458508990705013, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 475, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 475, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de69f0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_generate_feature_parity_r0/test_data'\ncompetitive_feature_samples = [CompetitiveFeature(id=UUID('90517543-3b7a-44f1-9840-ad9e62c1c024'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ...912c-4380-af87-ff1ad9dcdc7f': 9.0, 'b35dacd4-acef-4e29-a58d-00a8d3c78dd2': None}, node_type=<NodeType.OTHER: 'other'>)]\ncompetitor_samples = [Competitor(id=UUID('0457bd62-422d-4b8a-a1e0-97de97fe3216'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 4056...export': False}, price_points={'Basic': 15.0, 'Premium': 35.0, 'Business': 60.0}, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_generate_feature_parity_report(self, temp_data_dir, competitive_feature_samples, competitor_samples):\n        \"\"\"Test generating feature parity report.\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:475: TypeError"}, "teardown": {"duration": 0.0003226229455322027, "outcome": "passed"}}, {"nodeid": "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_performance_with_large_dataset", "lineno": 530, "outcome": "failed", "keywords": ["test_performance_with_large_dataset", "TestCompetitiveAnalysisSystem", "test_system.py", "competitive_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0009162339847534895, "outcome": "passed"}, "call": {"duration": 0.0002777380868792534, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/competitive_analysis/test_system.py", "lineno": 533, "message": "TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'"}, "traceback": [{"path": "tests/product_manager/competitive_analysis/test_system.py", "lineno": 533, "message": "TypeError"}], "longrepr": "self = <tests.product_manager.competitive_analysis.test_system.TestCompetitiveAnalysisSystem object at 0x7ff8f6de5fd0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_performance_with_large_da0/test_data'\n\n    def test_performance_with_large_dataset(self, temp_data_dir):\n        \"\"\"Test performance with a larger dataset (simplified for testing).\"\"\"\n>       system = CompetitiveAnalysisSystem(storage_dir=temp_data_dir)\nE       TypeError: CompetitiveAnalysisSystem.__init__() got an unexpected keyword argument 'storage_dir'\n\ntests/product_manager/competitive_analysis/test_system.py:533: TypeError"}, "teardown": {"duration": 0.0002862419933080673, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_initialization", "lineno": 15, "outcome": "passed", "keywords": ["test_initialization", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013022890780121088, "outcome": "passed"}, "call": {"duration": 0.0009141978807747364, "outcome": "passed"}, "teardown": {"duration": 0.00024982704780995846, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_add_decision", "lineno": 24, "outcome": "failed", "keywords": ["test_add_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001262514851987362, "outcome": "passed"}, "call": {"duration": 0.011987528996542096, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/decision_registry/test_registry.py", "lineno": 36, "message": "AssertionError: assert False\n +  where False = <function exists at 0x7ff9a7fefec0>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data/decisions/c19c717f-a8f2-41be-bebf-fa790410f204.json')\n +    where <function exists at 0x7ff9a7fefec0> = <module 'posixpath' (frozen)>.exists\n +      where <module 'posixpath' (frozen)> = os.path\n +    and   '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data/decisions/c19c717f-a8f2-41be-bebf-fa790410f204.json' = <function join at 0x7ff9a7db1620>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data', 'decisions', 'c19c717f-a8f2-41be-bebf-fa790410f204.json')\n +      where <function join at 0x7ff9a7db1620> = <module 'posixpath' (frozen)>.join\n +        where <module 'posixpath' (frozen)> = os.path"}, "traceback": [{"path": "tests/product_manager/decision_registry/test_registry.py", "lineno": 36, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.decision_registry.test_registry.TestDecisionRegistry object at 0x7ff8f6c21220>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data'\ndecision_samples = [Decision(id=UUID('c19c717f-a8f2-41be-bebf-fa790410f204'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, 444102...cad9ff-784a-4b8a-be13-4dc1cca46ac7')], status='decided', outcome_assessment=None, node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_add_decision(self, temp_data_dir, decision_samples):\n        \"\"\"Test adding decisions to the registry.\"\"\"\n        registry = DecisionRegistry(storage_dir=temp_data_dir)\n    \n        # Test adding a single decision\n        single_decision = decision_samples[0]\n        decision_ids = registry.add_decision(single_decision)\n    \n        assert len(decision_ids) == 1\n        assert decision_ids[0] == str(single_decision.id)\n        assert str(single_decision.id) in registry._decisions_cache\n>       assert os.path.exists(os.path.join(temp_data_dir, \"decisions\", f\"{single_decision.id}.json\"))\nE       AssertionError: assert False\nE        +  where False = <function exists at 0x7ff9a7fefec0>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data/decisions/c19c717f-a8f2-41be-bebf-fa790410f204.json')\nE        +    where <function exists at 0x7ff9a7fefec0> = <module 'posixpath' (frozen)>.exists\nE        +      where <module 'posixpath' (frozen)> = os.path\nE        +    and   '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data/decisions/c19c717f-a8f2-41be-bebf-fa790410f204.json' = <function join at 0x7ff9a7db1620>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_decision0/test_data', 'decisions', 'c19c717f-a8f2-41be-bebf-fa790410f204.json')\nE        +      where <function join at 0x7ff9a7db1620> = <module 'posixpath' (frozen)>.join\nE        +        where <module 'posixpath' (frozen)> = os.path\n\ntests/product_manager/decision_registry/test_registry.py:36: AssertionError"}, "teardown": {"duration": 0.0003027359489351511, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision", "lineno": 48, "outcome": "passed", "keywords": ["test_get_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012337320949882269, "outcome": "passed"}, "call": {"duration": 0.02238654694519937, "outcome": "passed"}, "teardown": {"duration": 0.00027959910221397877, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_all_decisions", "lineno": 65, "outcome": "passed", "keywords": ["test_get_all_decisions", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012674769386649132, "outcome": "passed"}, "call": {"duration": 0.02217580983415246, "outcome": "passed"}, "teardown": {"duration": 0.00027276016771793365, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_add_alternative_to_decision", "lineno": 80, "outcome": "passed", "keywords": ["test_add_alternative_to_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012357328087091446, "outcome": "passed"}, "call": {"duration": 0.03384968498721719, "outcome": "passed"}, "teardown": {"duration": 0.0002785969991236925, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_link_related_decisions", "lineno": 142, "outcome": "passed", "keywords": ["test_link_related_decisions", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012438511475920677, "outcome": "passed"}, "call": {"duration": 0.04286662093363702, "outcome": "passed"}, "teardown": {"duration": 0.00027117086574435234, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_record_outcome_assessment", "lineno": 186, "outcome": "passed", "keywords": ["test_record_outcome_assessment", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001258141826838255, "outcome": "passed"}, "call": {"duration": 0.03211065009236336, "outcome": "passed"}, "teardown": {"duration": 0.00027210707776248455, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_search_decisions", "lineno": 210, "outcome": "passed", "keywords": ["test_search_decisions", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012357980012893677, "outcome": "passed"}, "call": {"duration": 0.029000045033171773, "outcome": "passed"}, "teardown": {"duration": 0.00028674397617578506, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision_history", "lineno": 247, "outcome": "passed", "keywords": ["test_get_decision_history", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012483799364417791, "outcome": "passed"}, "call": {"duration": 0.022394639905542135, "outcome": "passed"}, "teardown": {"duration": 0.00027791503816843033, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_build_decision_graph", "lineno": 278, "outcome": "passed", "keywords": ["test_build_decision_graph", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012264051474630833, "outcome": "passed"}, "call": {"duration": 0.044002352049574256, "outcome": "passed"}, "teardown": {"duration": 0.00031960709020495415, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_analyze_alternatives", "lineno": 333, "outcome": "passed", "keywords": ["test_analyze_alternatives", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014616381376981735, "outcome": "passed"}, "call": {"duration": 0.021970594068989158, "outcome": "passed"}, "teardown": {"duration": 0.0002985680475831032, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_generate_decision_template", "lineno": 375, "outcome": "passed", "keywords": ["test_generate_decision_template", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0009928159415721893, "outcome": "passed"}, "call": {"duration": 0.0010760189034044743, "outcome": "passed"}, "teardown": {"duration": 0.00025593116879463196, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_export_decision", "lineno": 413, "outcome": "passed", "keywords": ["test_export_decision", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013058041222393513, "outcome": "passed"}, "call": {"duration": 0.022942336974665523, "outcome": "passed"}, "teardown": {"duration": 0.00029522995464503765, "outcome": "passed"}}, {"nodeid": "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_calculate_decision_stats", "lineno": 452, "outcome": "passed", "keywords": ["test_calculate_decision_stats", "TestDecisionRegistry", "test_registry.py", "decision_registry", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013052849099040031, "outcome": "passed"}, "call": {"duration": 0.022315844893455505, "outcome": "passed"}, "teardown": {"duration": 0.00029225810430943966, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_initialization", "lineno": 14, "outcome": "passed", "keywords": ["test_initialization", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013473599683493376, "outcome": "passed"}, "call": {"duration": 0.0025878918822854757, "outcome": "passed"}, "teardown": {"duration": 0.0002732530701905489, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_add_feedback", "lineno": 29, "outcome": "passed", "keywords": ["test_add_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012162169441580772, "outcome": "passed"}, "call": {"duration": 0.008235167944803834, "outcome": "passed"}, "teardown": {"duration": 0.00027708010748028755, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback", "lineno": 63, "outcome": "passed", "keywords": ["test_get_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001111661083996296, "outcome": "passed"}, "call": {"duration": 0.02076254994608462, "outcome": "passed"}, "teardown": {"duration": 0.0002756700851023197, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_feedback", "lineno": 80, "outcome": "passed", "keywords": ["test_get_all_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011205689515918493, "outcome": "passed"}, "call": {"duration": 0.022430071141570807, "outcome": "passed"}, "teardown": {"duration": 0.0002939249388873577, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_analyze_sentiment", "lineno": 95, "outcome": "passed", "keywords": ["test_analyze_sentiment", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011310949921607971, "outcome": "passed"}, "call": {"duration": 0.029233268927782774, "outcome": "passed"}, "teardown": {"duration": 0.0003296609502285719, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_kmeans", "lineno": 126, "outcome": "failed", "keywords": ["test_cluster_feedback_kmeans", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001180051825940609, "outcome": "passed"}, "call": {"duration": 0.11006012209691107, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/feedback_analysis/test_engine.py", "lineno": 146, "message": "AssertionError: assert UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092') in {0: FeedbackCluster(id=UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 0, 'neutral': 2, 'negative': 0, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)}\n +  where UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092') = FeedbackCluster(id=UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, ..., sentiment_distribution={'positive': 3, 'neutral': 1, 'negative': 4, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>).id\n +  and   {0: FeedbackCluster(id=UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 0, 'neutral': 2, 'negative': 0, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)} = <productmind.feedback_analysis.engine.FeedbackAnalysisEngine object at 0x7ff84e9ccbc0>._clusters"}, "traceback": [{"path": "tests/product_manager/feedback_analysis/test_engine.py", "lineno": 146, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x7ff8500eb350>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_cluster_feedback_kmeans0/test_data'\nfeedback_samples = [Feedback(id=UUID('24e6851b-3e56-4b2f-8f00-5114b5d8c7f3'), created_at=datetime.datetime(2025, 5, 11, 1, 45, 37, 909172...'Dashboard', 'UX', 'Information Overload'], cluster_id=0, impact_score=None, node_type=<NodeType.OTHER: 'other'>), ...]\n\n    def test_cluster_feedback_kmeans(self, temp_data_dir, feedback_samples):\n        \"\"\"Test clustering feedback using KMeans algorithm.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir, n_clusters=2)\n        engine.add_feedback(feedback_samples)\n    \n        clusters = engine.cluster_feedback(algorithm=\"kmeans\")\n    \n        assert len(clusters) > 0\n        assert len(clusters) <= 2  # We specified max 2 clusters\n    \n        # Check cluster structure\n        for cluster in clusters:\n            assert isinstance(cluster, FeedbackCluster)\n            assert cluster.id is not None\n            assert cluster.name is not None\n            assert len(cluster.feedback_ids) > 0\n            assert len(cluster.centroid) > 0\n    \n            # Verify cluster storage\n>           assert cluster.id in engine._clusters\nE           AssertionError: assert UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092') in {0: FeedbackCluster(id=UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 0, 'neutral': 2, 'negative': 0, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)}\nE            +  where UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092') = FeedbackCluster(id=UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 37, ..., sentiment_distribution={'positive': 3, 'neutral': 1, 'negative': 4, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>).id\nE            +  and   {0: FeedbackCluster(id=UUID('45ae3b4f-2f7f-4198-a990-6e72b65dd092'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 0, 'neutral': 2, 'negative': 0, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)} = <productmind.feedback_analysis.engine.FeedbackAnalysisEngine object at 0x7ff84e9ccbc0>._clusters\n\ntests/product_manager/feedback_analysis/test_engine.py:146: AssertionError"}, "teardown": {"duration": 0.00035244086757302284, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_dbscan", "lineno": 157, "outcome": "failed", "keywords": ["test_cluster_feedback_dbscan", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012563469354063272, "outcome": "passed"}, "call": {"duration": 0.05717864795587957, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/feedback_analysis/test_engine.py", "lineno": 175, "message": "AssertionError: assert UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648') in {0: FeedbackCluster(id=UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 1, 'neutral': 0, 'negative': 1, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)}\n +  where UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648') = FeedbackCluster(id=UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 38, ..., sentiment_distribution={'positive': 0, 'neutral': 2, 'negative': 0, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>).id\n +  and   {0: FeedbackCluster(id=UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 1, 'neutral': 0, 'negative': 1, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)} = <productmind.feedback_analysis.engine.FeedbackAnalysisEngine object at 0x7ff84e97a7b0>._clusters"}, "traceback": [{"path": "tests/product_manager/feedback_analysis/test_engine.py", "lineno": 175, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x7ff8500eb590>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_cluster_feedback_dbscan0/test_data'\nfeedback_samples = [Feedback(id=UUID('699827c3-c967-4e5f-96bf-5e37797f8847'), created_at=datetime.datetime(2025, 5, 11, 1, 45, 38, 34604)...shboard', 'UX', 'Information Overload'], cluster_id=None, impact_score=None, node_type=<NodeType.OTHER: 'other'>), ...]\n\n    def test_cluster_feedback_dbscan(self, temp_data_dir, feedback_samples):\n        \"\"\"Test clustering feedback using DBSCAN algorithm.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir, min_cluster_size=2)\n        engine.add_feedback(feedback_samples)\n    \n        clusters = engine.cluster_feedback(algorithm=\"dbscan\")\n    \n        # DBSCAN might not form any clusters if data is too sparse\n        # Just verify the structure if clusters are formed\n        for cluster in clusters:\n            assert isinstance(cluster, FeedbackCluster)\n            assert cluster.id is not None\n            assert cluster.name is not None\n            assert len(cluster.feedback_ids) >= engine.min_cluster_size\n            assert len(cluster.centroid) > 0\n    \n            # Verify cluster storage\n>           assert cluster.id in engine._clusters\nE           AssertionError: assert UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648') in {0: FeedbackCluster(id=UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 1, 'neutral': 0, 'negative': 1, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)}\nE            +  where UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648') = FeedbackCluster(id=UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 38, ..., sentiment_distribution={'positive': 0, 'neutral': 2, 'negative': 0, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>).id\nE            +  and   {0: FeedbackCluster(id=UUID('1b7f768c-b9e2-4bdf-9e2d-bc850a014648'), created_at=datetime.datetime(2025, 5, 16, 1, 45, ... sentiment_distribution={'positive': 1, 'neutral': 0, 'negative': 1, 'mixed': 0}, node_type=<NodeType.OTHER: 'other'>)} = <productmind.feedback_analysis.engine.FeedbackAnalysisEngine object at 0x7ff84e97a7b0>._clusters\n\ntests/product_manager/feedback_analysis/test_engine.py:175: AssertionError"}, "teardown": {"duration": 0.0003316029906272888, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_extract_themes", "lineno": 181, "outcome": "failed", "keywords": ["test_extract_themes", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012133419513702393, "outcome": "passed"}, "call": {"duration": 0.04303084802813828, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.local/share/uv/python/cpython-3.12.9-linux-x86_64-gnu/lib/python3.12/uuid.py", "lineno": 175, "message": "AttributeError: 'UUID' object has no attribute 'replace'"}, "traceback": [{"path": "tests/product_manager/feedback_analysis/test_engine.py", "lineno": 211, "message": ""}, {"path": "productmind/feedback_analysis/engine.py", "lineno": 147, "message": "in get_feedback"}, {"path": "../../../../.local/share/uv/python/cpython-3.12.9-linux-x86_64-gnu/lib/python3.12/uuid.py", "lineno": 175, "message": "AttributeError"}], "longrepr": "self = <tests.product_manager.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x7ff8500eb7d0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_extract_themes0/test_data'\nfeedback_samples = [Feedback(id=UUID('72f36bbf-bb96-4064-a14d-3d6690ad0283'), created_at=datetime.datetime(2025, 5, 11, 1, 45, 38, 106364...shboard', 'UX', 'Information Overload'], cluster_id=None, impact_score=None, node_type=<NodeType.OTHER: 'other'>), ...]\n\n    def test_extract_themes(self, temp_data_dir, feedback_samples):\n        \"\"\"Test theme extraction from feedback.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir, max_themes=5)\n        engine.add_feedback(feedback_samples)\n    \n        themes = engine.extract_themes(min_frequency=1)  # Lower threshold for test\n    \n        assert len(themes) > 0\n        assert len(themes) <= engine.max_themes\n    \n        # Check theme structure\n        for theme in themes:\n            assert isinstance(theme, Theme)\n            assert theme.id is not None\n            assert theme.name is not None\n            assert len(theme.keywords) > 0\n            assert theme.frequency > 0\n            assert len(theme.feedback_ids) > 0\n    \n            # Verify theme storage\n            assert str(theme.id) in engine._themes\n    \n            # Check if file exists in one of the possible places\n            yaml_file1 = os.path.join(temp_data_dir, \"themes\", f\"{theme.id}.yaml\")\n            yaml_file2 = os.path.join(temp_data_dir, \"nodes\", \"tag\", f\"{theme.id}.yaml\")\n            assert os.path.exists(yaml_file1) or os.path.exists(yaml_file2), \"Could not find the theme file\"\n    \n            # Verify feedback was updated with theme\n            for feedback_id in theme.feedback_ids:\n>               feedback = engine.get_feedback(feedback_id)\n\ntests/product_manager/feedback_analysis/test_engine.py:211: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nproductmind/feedback_analysis/engine.py:147: in get_feedback\n    feedback = self.knowledge_base.get_node(UUID(feedback_id), Feedback)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <[AttributeError(\"'UUID' object has no attribute 'int'\") raised in repr()] UUID object at 0x7ff84e9efb90>\nhex = UUID('10990a6c-1437-4e4a-b4ce-4cc8811ceeef'), bytes = None\nbytes_le = None, fields = None, int = None, version = None\n\n    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,\n                       int=None, version=None,\n                       *, is_safe=SafeUUID.unknown):\n        r\"\"\"Create a UUID from either a string of 32 hexadecimal digits,\n        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes\n        in little-endian order as the 'bytes_le' argument, a tuple of six\n        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,\n        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as\n        the 'fields' argument, or a single 128-bit integer as the 'int'\n        argument.  When a string of hex digits is given, curly braces,\n        hyphens, and a URN prefix are all optional.  For example, these\n        expressions all yield the same UUID:\n    \n        UUID('{12345678-1234-5678-1234-567812345678}')\n        UUID('12345678123456781234567812345678')\n        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')\n        UUID(bytes='\\x12\\x34\\x56\\x78'*4)\n        UUID(bytes_le='\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +\n                      '\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')\n        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))\n        UUID(int=0x12345678123456781234567812345678)\n    \n        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must\n        be given.  The 'version' argument is optional; if given, the resulting\n        UUID will have its variant and version set according to RFC 4122,\n        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.\n    \n        is_safe is an enum exposed as an attribute on the instance.  It\n        indicates whether the UUID has been generated in a way that is safe\n        for multiprocessing applications, via uuid_generate_time_safe(3).\n        \"\"\"\n    \n        if [hex, bytes, bytes_le, fields, int].count(None) != 4:\n            raise TypeError('one of the hex, bytes, bytes_le, fields, '\n                            'or int arguments must be given')\n        if hex is not None:\n>           hex = hex.replace('urn:', '').replace('uuid:', '')\nE           AttributeError: 'UUID' object has no attribute 'replace'\n\n../../../../.local/share/uv/python/cpython-3.12.9-linux-x86_64-gnu/lib/python3.12/uuid.py:175: AttributeError"}, "teardown": {"duration": 0.00034204497933387756, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_detect_trends", "lineno": 213, "outcome": "passed", "keywords": ["test_detect_trends", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001211283029988408, "outcome": "passed"}, "call": {"duration": 0.0253226300701499, "outcome": "passed"}, "teardown": {"duration": 0.0002820792142301798, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_cluster", "lineno": 250, "outcome": "failed", "keywords": ["test_get_cluster", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011592460796236992, "outcome": "passed"}, "call": {"duration": 0.05834198906086385, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/feedback_analysis/test_engine.py", "lineno": 261, "message": "assert None is not None"}, "traceback": [{"path": "tests/product_manager/feedback_analysis/test_engine.py", "lineno": 261, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x7ff8500ebc50>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_cluster0/test_data'\nfeedback_samples = [Feedback(id=UUID('f49dca49-d962-4acf-b29d-23c9a4bc342b'), created_at=datetime.datetime(2025, 5, 11, 1, 45, 38, 218519...'Dashboard', 'UX', 'Information Overload'], cluster_id=0, impact_score=None, node_type=<NodeType.OTHER: 'other'>), ...]\n\n    def test_get_cluster(self, temp_data_dir, feedback_samples):\n        \"\"\"Test retrieving a cluster by ID.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir, n_clusters=2)\n        engine.add_feedback(feedback_samples)\n        clusters = engine.cluster_feedback(algorithm=\"kmeans\")\n    \n        if clusters:\n            cluster_id = clusters[0].id\n            retrieved = engine.get_cluster(cluster_id)\n    \n>           assert retrieved is not None\nE           assert None is not None\n\ntests/product_manager/feedback_analysis/test_engine.py:261: AssertionError"}, "teardown": {"duration": 0.00031263893470168114, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_theme", "lineno": 269, "outcome": "passed", "keywords": ["test_get_theme", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011642139870673418, "outcome": "passed"}, "call": {"duration": 0.10292218695394695, "outcome": "passed"}, "teardown": {"duration": 0.00028128689154982567, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_clusters", "lineno": 288, "outcome": "passed", "keywords": ["test_get_all_clusters", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011778338812291622, "outcome": "passed"}, "call": {"duration": 0.05675000697374344, "outcome": "passed"}, "teardown": {"duration": 0.0002765550743788481, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_themes", "lineno": 304, "outcome": "passed", "keywords": ["test_get_all_themes", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011542269494384527, "outcome": "passed"}, "call": {"duration": 0.10498209786601365, "outcome": "passed"}, "teardown": {"duration": 0.0002711398992687464, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_search_feedback", "lineno": 320, "outcome": "passed", "keywords": ["test_search_feedback", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011425679549574852, "outcome": "passed"}, "call": {"duration": 0.027289774967357516, "outcome": "passed"}, "teardown": {"duration": 0.00027062511071562767, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_theme", "lineno": 336, "outcome": "passed", "keywords": ["test_get_feedback_by_theme", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011502408888190985, "outcome": "passed"}, "call": {"duration": 0.02495045494288206, "outcome": "passed"}, "teardown": {"duration": 0.0002778340131044388, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_cluster", "lineno": 364, "outcome": "failed", "keywords": ["test_get_feedback_by_cluster", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011595929972827435, "outcome": "passed"}, "call": {"duration": 0.057385476073250175, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/feedback_analysis/test_engine.py", "lineno": 375, "message": "assert 0 > 0\n +  where 0 = len([])"}, "traceback": [{"path": "tests/product_manager/feedback_analysis/test_engine.py", "lineno": 375, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.feedback_analysis.test_engine.TestFeedbackAnalysisEngine object at 0x7ff850108a10>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_get_feedback_by_cluster0/test_data'\nfeedback_samples = [Feedback(id=UUID('1ab98c7d-e308-4c33-b88f-7f9af3307213'), created_at=datetime.datetime(2025, 5, 11, 1, 45, 38, 618622...'Dashboard', 'UX', 'Information Overload'], cluster_id=1, impact_score=None, node_type=<NodeType.OTHER: 'other'>), ...]\n\n    def test_get_feedback_by_cluster(self, temp_data_dir, feedback_samples):\n        \"\"\"Test getting feedback by cluster.\"\"\"\n        engine = FeedbackAnalysisEngine(storage_dir=temp_data_dir, n_clusters=2)\n        engine.add_feedback(feedback_samples)\n        clusters = engine.cluster_feedback(algorithm=\"kmeans\")\n    \n        if clusters:\n            cluster_id = clusters[0].id\n            results = engine.get_feedback_by_cluster(cluster_id)\n    \n>           assert len(results) > 0\nE           assert 0 > 0\nE            +  where 0 = len([])\n\ntests/product_manager/feedback_analysis/test_engine.py:375: AssertionError"}, "teardown": {"duration": 0.0003187181428074837, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_performance_with_large_dataset", "lineno": 384, "outcome": "passed", "keywords": ["test_performance_with_large_dataset", "TestFeedbackAnalysisEngine", "test_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0010705629829317331, "outcome": "passed"}, "call": {"duration": 1.7449399570468813, "outcome": "passed"}, "teardown": {"duration": 0.00045779813081026077, "outcome": "passed"}}, {"nodeid": "tests/product_manager/feedback_analysis/test_refactored_engine.py::test_feedback_analysis_engine_refactored", "lineno": 21, "outcome": "failed", "keywords": ["test_feedback_analysis_engine_refactored", "test_refactored_engine.py", "feedback_analysis", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012929490767419338, "outcome": "passed"}, "call": {"duration": 0.0069506310392171144, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/sklearn/feature_extraction/text.py", "lineno": 1386, "message": "ValueError: max_df corresponds to < documents than min_df"}, "traceback": [{"path": "tests/product_manager/feedback_analysis/test_refactored_engine.py", "lineno": 63, "message": ""}, {"path": "productmind/feedback_analysis/engine.py", "lineno": 406, "message": "in extract_themes"}, {"path": ".venv/lib/python3.12/site-packages/sklearn/feature_extraction/text.py", "lineno": 2104, "message": "in fit_transform"}, {"path": ".venv/lib/python3.12/site-packages/sklearn/base.py", "lineno": 1389, "message": "in wrapper"}, {"path": ".venv/lib/python3.12/site-packages/sklearn/feature_extraction/text.py", "lineno": 1386, "message": "ValueError"}], "longrepr": "temp_storage = <common.core.storage.LocalStorage object at 0x7ff84e885a30>\n\n    def test_feedback_analysis_engine_refactored(temp_storage):\n        \"\"\"Test that the refactored engine initializes and works correctly.\"\"\"\n        # Initialize engine with the storage\n        engine = FeedbackAnalysisEngine(storage=temp_storage)\n    \n        # Verify engine properties\n        assert isinstance(engine.knowledge_base, StandardKnowledgeBase)\n        assert isinstance(engine.knowledge_graph, KnowledgeGraph)\n    \n        # Create a test feedback item\n        feedback = Feedback(\n            title=\"Test Feedback\",\n            content=\"This is a test feedback. I really like the product but the UI could be improved.\",\n            source=SourceType.SURVEY,\n            tags={\"test\", \"feedback\"}\n        )\n    \n        # Add the feedback\n        feedback_ids = engine.add_feedback(feedback)\n        assert len(feedback_ids) == 1\n    \n        # Retrieve the feedback\n        retrieved = engine.get_feedback(feedback_ids[0])\n        assert retrieved is not None\n        assert retrieved.id == feedback.id\n        assert retrieved.title == \"Test Feedback\"\n        assert retrieved.content == feedback.content\n    \n        # Test sentiment analysis\n        sentiments = engine.analyze_sentiment(feedback)\n        assert len(sentiments) == 1\n        assert feedback_ids[0] in sentiments\n        assert sentiments[feedback_ids[0]] == Sentiment.POSITIVE\n    \n        # Test that the feedback was updated with sentiment\n        updated = engine.get_feedback(feedback_ids[0])\n        assert updated.sentiment == Sentiment.POSITIVE\n    \n        # Test theme extraction (with simplified settings for testing)\n        engine.min_cluster_size = 1\n        engine.max_themes = 5\n>       themes = engine.extract_themes([feedback_ids[0]], min_frequency=1)\n\ntests/product_manager/feedback_analysis/test_refactored_engine.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nproductmind/feedback_analysis/engine.py:406: in extract_themes\n    tfidf_matrix = self.vectorizer.fit_transform(texts)\n.venv/lib/python3.12/site-packages/sklearn/feature_extraction/text.py:2104: in fit_transform\n    X = super().fit_transform(raw_documents)\n.venv/lib/python3.12/site-packages/sklearn/base.py:1389: in wrapper\n    return fit_method(estimator, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = TfidfVectorizer(max_features=10000, min_df=2, ngram_range=(1, 2),\n                stop_words='english')\nraw_documents = ['This is a test feedback. I really like the product but the UI could be improved.']\ny = None\n\n    @_fit_context(prefer_skip_nested_validation=True)\n    def fit_transform(self, raw_documents, y=None):\n        \"\"\"Learn the vocabulary dictionary and return document-term matrix.\n    \n        This is equivalent to fit followed by transform, but more efficiently\n        implemented.\n    \n        Parameters\n        ----------\n        raw_documents : iterable\n            An iterable which generates either str, unicode or file objects.\n    \n        y : None\n            This parameter is ignored.\n    \n        Returns\n        -------\n        X : array of shape (n_samples, n_features)\n            Document-term matrix.\n        \"\"\"\n        # We intentionally don't call the transform method to make\n        # fit_transform overridable without unwanted side effects in\n        # TfidfVectorizer.\n        if isinstance(raw_documents, str):\n            raise ValueError(\n                \"Iterable over raw text documents expected, string object received.\"\n            )\n    \n        self._validate_ngram_range()\n        self._warn_for_unused_params()\n        self._validate_vocabulary()\n        max_df = self.max_df\n        min_df = self.min_df\n        max_features = self.max_features\n    \n        if self.fixed_vocabulary_ and self.lowercase:\n            for term in self.vocabulary:\n                if any(map(str.isupper, term)):\n                    warnings.warn(\n                        \"Upper case characters found in\"\n                        \" vocabulary while 'lowercase'\"\n                        \" is True. These entries will not\"\n                        \" be matched with any documents\"\n                    )\n                    break\n    \n        vocabulary, X = self._count_vocab(raw_documents, self.fixed_vocabulary_)\n    \n        if self.binary:\n            X.data.fill(1)\n    \n        if not self.fixed_vocabulary_:\n            n_doc = X.shape[0]\n            max_doc_count = max_df if isinstance(max_df, Integral) else max_df * n_doc\n            min_doc_count = min_df if isinstance(min_df, Integral) else min_df * n_doc\n            if max_doc_count < min_doc_count:\n>               raise ValueError(\"max_df corresponds to < documents than min_df\")\nE               ValueError: max_df corresponds to < documents than min_df\n\n.venv/lib/python3.12/site-packages/sklearn/feature_extraction/text.py:1386: ValueError"}, "teardown": {"duration": 0.0009187271352857351, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_initialization", "lineno": 15, "outcome": "passed", "keywords": ["test_initialization", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0015504390466958284, "outcome": "passed"}, "call": {"duration": 0.0009540219325572252, "outcome": "passed"}, "teardown": {"duration": 0.00026145903393626213, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_add_feature", "lineno": 27, "outcome": "failed", "keywords": ["test_add_feature", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001725953072309494, "outcome": "passed"}, "call": {"duration": 0.00488435011357069, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/prioritization/test_framework.py", "lineno": 39, "message": "AssertionError: assert False\n +  where False = <function exists at 0x7ff9a7fefec0>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data/features/9f752f76-56ad-4740-893f-71a507ff1634.json')\n +    where <function exists at 0x7ff9a7fefec0> = <module 'posixpath' (frozen)>.exists\n +      where <module 'posixpath' (frozen)> = os.path\n +    and   '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data/features/9f752f76-56ad-4740-893f-71a507ff1634.json' = <function join at 0x7ff9a7db1620>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data', 'features', '9f752f76-56ad-4740-893f-71a507ff1634.json')\n +      where <function join at 0x7ff9a7db1620> = <module 'posixpath' (frozen)>.join\n +        where <module 'posixpath' (frozen)> = os.path"}, "traceback": [{"path": "tests/product_manager/prioritization/test_framework.py", "lineno": 39, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.prioritization.test_framework.TestPrioritizationFramework object at 0x7ff85010a570>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data'\nfeature_samples = [Feature(id=UUID('9f752f76-56ad-4740-893f-71a507ff1634'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 40, 518828)...431-d840-42de-9a96-03b1ab2d4861'), UUID('3d9b598f-8ea6-4e10-b840-489fdbf47d9e')], node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_add_feature(self, temp_data_dir, feature_samples):\n        \"\"\"Test adding features to the framework.\"\"\"\n        framework = PrioritizationFramework(storage_dir=temp_data_dir)\n    \n        # Test adding a single feature\n        single_feature = feature_samples[0]\n        feature_ids = framework.add_feature(single_feature)\n    \n        assert len(feature_ids) == 1\n        assert feature_ids[0] == str(single_feature.id)\n        assert str(single_feature.id) in framework._features_cache\n>       assert os.path.exists(os.path.join(temp_data_dir, \"features\", f\"{single_feature.id}.json\"))\nE       AssertionError: assert False\nE        +  where False = <function exists at 0x7ff9a7fefec0>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data/features/9f752f76-56ad-4740-893f-71a507ff1634.json')\nE        +    where <function exists at 0x7ff9a7fefec0> = <module 'posixpath' (frozen)>.exists\nE        +      where <module 'posixpath' (frozen)> = os.path\nE        +    and   '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data/features/9f752f76-56ad-4740-893f-71a507ff1634.json' = <function join at 0x7ff9a7db1620>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_feature0/test_data', 'features', '9f752f76-56ad-4740-893f-71a507ff1634.json')\nE        +      where <function join at 0x7ff9a7db1620> = <module 'posixpath' (frozen)>.join\nE        +        where <module 'posixpath' (frozen)> = os.path\n\ntests/product_manager/prioritization/test_framework.py:39: AssertionError"}, "teardown": {"duration": 0.00033832783810794353, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_add_strategic_goal", "lineno": 52, "outcome": "failed", "keywords": ["test_add_strategic_goal", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011331981513649225, "outcome": "passed"}, "call": {"duration": 0.0027746448758989573, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/tests/product_manager/prioritization/test_framework.py", "lineno": 64, "message": "AssertionError: assert False\n +  where False = <function exists at 0x7ff9a7fefec0>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data/strategic_goals/fe5c180e-503c-4730-9d70-ec69088e5d2f.json')\n +    where <function exists at 0x7ff9a7fefec0> = <module 'posixpath' (frozen)>.exists\n +      where <module 'posixpath' (frozen)> = os.path\n +    and   '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data/strategic_goals/fe5c180e-503c-4730-9d70-ec69088e5d2f.json' = <function join at 0x7ff9a7db1620>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data', 'strategic_goals', 'fe5c180e-503c-4730-9d70-ec69088e5d2f.json')\n +      where <function join at 0x7ff9a7db1620> = <module 'posixpath' (frozen)>.join\n +        where <module 'posixpath' (frozen)> = os.path"}, "traceback": [{"path": "tests/product_manager/prioritization/test_framework.py", "lineno": 64, "message": "AssertionError"}], "longrepr": "self = <tests.product_manager.prioritization.test_framework.TestPrioritizationFramework object at 0x7ff85010a7e0>\ntemp_data_dir = '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data'\nstrategic_goal_samples = [StrategicGoal(id=UUID('fe5c180e-503c-4730-9d70-ec69088e5d2f'), created_at=datetime.datetime(2025, 5, 16, 1, 45, 40, 5...churn rate', 'Small business renewal rate', 'Small business satisfaction score'], node_type=<NodeType.OTHER: 'other'>)]\n\n    def test_add_strategic_goal(self, temp_data_dir, strategic_goal_samples):\n        \"\"\"Test adding strategic goals to the framework.\"\"\"\n        framework = PrioritizationFramework(storage_dir=temp_data_dir)\n    \n        # Test adding a single goal\n        single_goal = strategic_goal_samples[0]\n        goal_ids = framework.add_strategic_goal(single_goal)\n    \n        assert len(goal_ids) == 1\n        assert goal_ids[0] == str(single_goal.id)\n        assert str(single_goal.id) in framework._goals_cache\n>       assert os.path.exists(os.path.join(temp_data_dir, \"strategic_goals\", f\"{single_goal.id}.json\"))\nE       AssertionError: assert False\nE        +  where False = <function exists at 0x7ff9a7fefec0>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data/strategic_goals/fe5c180e-503c-4730-9d70-ec69088e5d2f.json')\nE        +    where <function exists at 0x7ff9a7fefec0> = <module 'posixpath' (frozen)>.exists\nE        +      where <module 'posixpath' (frozen)> = os.path\nE        +    and   '/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data/strategic_goals/fe5c180e-503c-4730-9d70-ec69088e5d2f.json' = <function join at 0x7ff9a7db1620>('/tmp/pytest-of-justinchiu_cohere_com/pytest-356/test_add_strategic_goal0/test_data', 'strategic_goals', 'fe5c180e-503c-4730-9d70-ec69088e5d2f.json')\nE        +      where <function join at 0x7ff9a7db1620> = <module 'posixpath' (frozen)>.join\nE        +        where <module 'posixpath' (frozen)> = os.path\n\ntests/product_manager/prioritization/test_framework.py:64: AssertionError"}, "teardown": {"duration": 0.0003057790454477072, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_feature", "lineno": 77, "outcome": "passed", "keywords": ["test_get_feature", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001636303961277008, "outcome": "passed"}, "call": {"duration": 0.02099048998206854, "outcome": "passed"}, "teardown": {"duration": 0.0002971820067614317, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_strategic_goal", "lineno": 94, "outcome": "passed", "keywords": ["test_get_strategic_goal", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011448641307651997, "outcome": "passed"}, "call": {"duration": 0.00853579118847847, "outcome": "passed"}, "teardown": {"duration": 0.0002737930044531822, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_features", "lineno": 111, "outcome": "passed", "keywords": ["test_get_all_features", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016080399509519339, "outcome": "passed"}, "call": {"duration": 0.02220379188656807, "outcome": "passed"}, "teardown": {"duration": 0.0003118400927633047, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_strategic_goals", "lineno": 126, "outcome": "passed", "keywords": ["test_get_all_strategic_goals", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011175761464983225, "outcome": "passed"}, "call": {"duration": 0.009303492028266191, "outcome": "passed"}, "teardown": {"duration": 0.00027324515394866467, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_map_strategic_alignment", "lineno": 141, "outcome": "passed", "keywords": ["test_map_strategic_alignment", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016305260360240936, "outcome": "passed"}, "call": {"duration": 0.03191916202194989, "outcome": "passed"}, "teardown": {"duration": 0.0003112491685897112, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_calculate_strategic_score", "lineno": 179, "outcome": "passed", "keywords": ["test_calculate_strategic_score", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016480439808219671, "outcome": "passed"}, "call": {"duration": 0.03454898693598807, "outcome": "passed"}, "teardown": {"duration": 0.0003150159027427435, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_weighted", "lineno": 215, "outcome": "passed", "keywords": ["test_prioritize_features_weighted", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001667591044679284, "outcome": "passed"}, "call": {"duration": 0.07334670890122652, "outcome": "passed"}, "teardown": {"duration": 0.00030554691329598427, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_other_models", "lineno": 251, "outcome": "passed", "keywords": ["test_prioritize_features_other_models", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016394290141761303, "outcome": "passed"}, "call": {"duration": 0.14752256218343973, "outcome": "passed"}, "teardown": {"duration": 0.0003159430343657732, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_analyze_dependencies", "lineno": 289, "outcome": "passed", "keywords": ["test_analyze_dependencies", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0010039121843874454, "outcome": "passed"}, "call": {"duration": 0.009184620110318065, "outcome": "passed"}, "teardown": {"duration": 0.00026419409550726414, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_generate_roadmap", "lineno": 355, "outcome": "passed", "keywords": ["test_generate_roadmap", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016547830309718847, "outcome": "passed"}, "call": {"duration": 0.043276369106024504, "outcome": "passed"}, "teardown": {"duration": 0.0002996490802615881, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_estimate_roi", "lineno": 389, "outcome": "passed", "keywords": ["test_estimate_roi", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0016351188533008099, "outcome": "passed"}, "call": {"duration": 0.004965395899489522, "outcome": "passed"}, "teardown": {"duration": 0.000299633014947176, "outcome": "passed"}}, {"nodeid": "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_performance_with_large_dataset", "lineno": 439, "outcome": "passed", "keywords": ["test_performance_with_large_dataset", "TestPrioritizationFramework", "test_framework.py", "prioritization", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001017377944663167, "outcome": "passed"}, "call": {"duration": 0.463289039907977, "outcome": "passed"}, "teardown": {"duration": 0.00030780001543462276, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_initialization", "lineno": 14, "outcome": "passed", "keywords": ["test_initialization", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0015586649533361197, "outcome": "passed"}, "call": {"duration": 0.002109942026436329, "outcome": "passed"}, "teardown": {"duration": 0.00026070582680404186, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_stakeholder", "lineno": 27, "outcome": "passed", "keywords": ["test_add_stakeholder", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012326850555837154, "outcome": "passed"}, "call": {"duration": 0.007215662160888314, "outcome": "passed"}, "teardown": {"duration": 0.0002859830856323242, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_perspective", "lineno": 58, "outcome": "passed", "keywords": ["test_add_perspective", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014089629985392094, "outcome": "passed"}, "call": {"duration": 0.020954207982867956, "outcome": "passed"}, "teardown": {"duration": 0.00033480487763881683, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_relationship", "lineno": 97, "outcome": "passed", "keywords": ["test_add_relationship", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014829491265118122, "outcome": "passed"}, "call": {"duration": 0.021999257151037455, "outcome": "passed", "stdout": "Directories in temp_data_dir: ['features', 'themes', 'stakeholders', 'grants', 'templates', 'decisions', 'competitors', 'strategic_goals', 'perspectives', 'stakeholder_relationships', 'backups', 'attachments', 'competitive_features', 'market_gaps', 'clusters', 'nodes', 'collaborators', 'experiments', 'feedback', 'indexes', 'research_questions']\nContent of nodes dir: ['tags', 'stakeholders', 'grantproposals', 'stakeholderrelationships', 'notes', 'documents', 'people', 'other', 'questions', 'annotations', 'collaborators', 'experiments', 'projects', 'citations']\n"}, "teardown": {"duration": 0.00032499805092811584, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder", "lineno": 139, "outcome": "passed", "keywords": ["test_get_stakeholder", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0012126041110605001, "outcome": "passed"}, "call": {"duration": 0.015406490070745349, "outcome": "passed"}, "teardown": {"duration": 0.0002904559951275587, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspective", "lineno": 156, "outcome": "passed", "keywords": ["test_get_perspective", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014031750615686178, "outcome": "passed"}, "call": {"duration": 0.02969640796072781, "outcome": "passed"}, "teardown": {"duration": 0.0003052549436688423, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_relationship", "lineno": 174, "outcome": "passed", "keywords": ["test_get_relationship", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014611231163144112, "outcome": "passed"}, "call": {"duration": 0.029089767020195723, "outcome": "passed"}, "teardown": {"duration": 0.0003068409860134125, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_stakeholders", "lineno": 192, "outcome": "passed", "keywords": ["test_get_all_stakeholders", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011557689867913723, "outcome": "passed"}, "call": {"duration": 0.015989121980965137, "outcome": "passed"}, "teardown": {"duration": 0.00029298802837729454, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_perspectives", "lineno": 207, "outcome": "passed", "keywords": ["test_get_all_perspectives", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013728959020227194, "outcome": "passed"}, "call": {"duration": 0.030899280915036798, "outcome": "passed"}, "teardown": {"duration": 0.00029790913686156273, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_relationships", "lineno": 223, "outcome": "passed", "keywords": ["test_get_all_relationships", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014371098950505257, "outcome": "passed"}, "call": {"duration": 0.031020138878375292, "outcome": "passed"}, "teardown": {"duration": 0.0003397860564291477, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_perspectives", "lineno": 239, "outcome": "passed", "keywords": ["test_get_stakeholder_perspectives", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014578590635210276, "outcome": "passed"}, "call": {"duration": 0.030283123021945357, "outcome": "passed"}, "teardown": {"duration": 0.00032671215012669563, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspectives_by_topic", "lineno": 277, "outcome": "passed", "keywords": ["test_get_perspectives_by_topic", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013635640498250723, "outcome": "passed"}, "call": {"duration": 0.03463203809224069, "outcome": "passed"}, "teardown": {"duration": 0.00030854204669594765, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_relationships", "lineno": 308, "outcome": "passed", "keywords": ["test_get_stakeholder_relationships", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014631578233093023, "outcome": "passed"}, "call": {"duration": 0.0314071390312165, "outcome": "passed"}, "teardown": {"duration": 0.00030741305090487003, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_detect_conflicts", "lineno": 352, "outcome": "passed", "keywords": ["test_detect_conflicts", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013906881213188171, "outcome": "passed"}, "call": {"duration": 0.040773221058771014, "outcome": "passed"}, "teardown": {"duration": 0.0002986849285662174, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_identify_consensus", "lineno": 414, "outcome": "passed", "keywords": ["test_identify_consensus", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001354862004518509, "outcome": "passed"}, "call": {"duration": 0.03206495917402208, "outcome": "passed"}, "teardown": {"duration": 0.00029893917962908745, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_integrate_perspectives", "lineno": 464, "outcome": "passed", "keywords": ["test_integrate_perspectives", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013693179935216904, "outcome": "passed"}, "call": {"duration": 0.03441024385392666, "outcome": "passed"}, "teardown": {"duration": 0.0003097818698734045, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_map", "lineno": 517, "outcome": "passed", "keywords": ["test_generate_stakeholder_map", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0014366740360856056, "outcome": "passed"}, "call": {"duration": 0.034732645843178034, "outcome": "passed"}, "teardown": {"duration": 0.00030753808096051216, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_stakeholder_influence", "lineno": 562, "outcome": "passed", "keywords": ["test_analyze_stakeholder_influence", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0011887408327311277, "outcome": "passed"}, "call": {"duration": 0.016206443076953292, "outcome": "passed"}, "teardown": {"duration": 0.00027222814969718456, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_matrix", "lineno": 591, "outcome": "passed", "keywords": ["test_generate_stakeholder_matrix", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.001347763929516077, "outcome": "passed"}, "call": {"duration": 0.032189863035455346, "outcome": "passed"}, "teardown": {"duration": 0.0003027450293302536, "outcome": "passed"}}, {"nodeid": "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_perspective_alignment", "lineno": 642, "outcome": "passed", "keywords": ["test_analyze_perspective_alignment", "TestStakeholderInsightManager", "test_manager.py", "stakeholder_insights", "product_manager", "tests", "unified", ""], "setup": {"duration": 0.0013756479602307081, "outcome": "passed"}, "call": {"duration": 0.03345349803566933, "outcome": "passed"}, "teardown": {"duration": 0.001613429980352521, "outcome": "passed"}}], "warnings": [{"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `datetime` - serialized value may not be as expected [input_value='2023-06-01', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 463}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `datetime` - serialized value may not be as expected [input_value='2023-06-01', input_type=str])\n  PydanticSerializationUnexpectedValue(Expected `datetime` - serialized value may not be as expected [input_value='2023-08-15', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 463}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='cb5bdaab-f86d-46b4-960a-9fea9393c3c8', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 463}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='6fc0a5c4-380c-4fb4-ab18-014dd9bd70b6', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 463}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='c10fcf9f-627a-40b8-8abe-3899d0b98074', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 463}, {"message": "Pydantic serializer warnings:\n  PydanticSerializationUnexpectedValue(Expected `uuid` - serialized value may not be as expected [input_value='da41d656-eeb1-4fc1-8f88-f7668f0a1b2e', input_type=str])", "category": "UserWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 463}, {"message": "Number of distinct clusters (2) found smaller than n_clusters (5). Possibly due to duplicate points in X.", "category": "ConvergenceWarning", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/personal_knowledge_management/unified/.venv/lib/python3.12/site-packages/sklearn/base.py", "lineno": 1389}]}