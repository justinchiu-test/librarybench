"""Tests for grant proposal exports."""

import os
import tempfile
from datetime import datetime
from pathlib import Path

import pytest
import yaml

from researchbrain.core.models import (
    Experiment, ExperimentStatus, GrantProposal, GrantStatus, Note, ResearchQuestion
)
from researchbrain.grants.export import (
    export_proposal, _export_markdown, _export_yaml, _convert_uuids_to_strings
)


class TestGrantExport:
    """Tests for grant proposal export functionality."""
    
    @pytest.fixture
    def sample_grant(self):
        """Fixture that creates a sample grant proposal."""
        return GrantProposal(
            title="Sample Grant Proposal",
            funding_agency="National Science Foundation",
            description="A proposal to investigate important scientific questions",
            deadline=datetime(2023, 12, 31),
            status=GrantStatus.DRAFTING,
            amount=500000.0,
        )
    
    @pytest.fixture
    def sample_notes(self):
        """Fixture that creates sample notes."""
        return [
            Note(
                title="Background Research",
                content="Literature review for the grant proposal",
                tags={"background", "literature"}
            ),
            Note(
                title="Preliminary Results",
                content="Initial findings that support the proposal",
                tags={"preliminary", "results"}
            )
        ]
    
    @pytest.fixture
    def sample_experiments(self):
        """Fixture that creates sample experiments."""
        return [
            Experiment(
                title="Pilot Study",
                hypothesis="Initial hypothesis for testing",
                methodology="Methodology for the pilot study",
                status=ExperimentStatus.COMPLETED,
                results="Promising initial results",
                conclusion="The pilot study supports further investigation"
            ),
            Experiment(
                title="Proposed Experiment",
                hypothesis="Main hypothesis for the grant",
                methodology="Detailed methodology for the proposed work",
                status=ExperimentStatus.PLANNED
            )
        ]
    
    @pytest.fixture
    def sample_questions(self):
        """Fixture that creates sample research questions."""
        return [
            ResearchQuestion(
                question="What is the relationship between X and Y?",
                description="Investigating the fundamental relationship",
                priority=8
            ),
            ResearchQuestion(
                question="How does Z affect the X-Y relationship?",
                description="Exploring the role of factor Z",
                priority=7
            )
        ]
    
    def test_export_proposal_markdown(self, sample_grant, sample_notes, sample_experiments, sample_questions):
        """Test exporting a grant proposal to markdown."""
        # Create a temporary file
        with tempfile.NamedTemporaryFile(suffix='.md', delete=False) as temp_file:
            temp_path = Path(temp_file.name)
        
        try:
            # Export the proposal
            result = export_proposal(
                sample_grant, sample_notes, sample_experiments, sample_questions, temp_path
            )
            
            assert result is True
            assert temp_path.exists()
            
            # Read the exported file
            with open(temp_path, 'r') as f:
                content = f.read()
            
            # Check content
            assert "# Sample Grant Proposal" in content
            assert "National Science Foundation" in content
            assert "December 31, 2023" in content
            assert "$500,000.00" in content
            assert "## Research Questions" in content
            assert "What is the relationship between X and Y?" in content
            assert "## Proposed Experiments" in content
            assert "Pilot Study" in content
            assert "Proposed Experiment" in content
            assert "## Supporting Notes" in content
            assert "Background Research" in content
            assert "Preliminary Results" in content
            assert "Generated by ResearchBrain" in content
            
        finally:
            # Clean up
            if temp_path.exists():
                os.unlink(temp_path)
    
    def test_export_proposal_yaml(self, sample_grant, sample_notes, sample_experiments, sample_questions):
        """Test exporting a grant proposal to YAML."""
        # Create a temporary file
        with tempfile.NamedTemporaryFile(suffix='.yaml', delete=False) as temp_file:
            temp_path = Path(temp_file.name)
        
        try:
            # Export the proposal
            result = export_proposal(
                sample_grant, sample_notes, sample_experiments, sample_questions, temp_path
            )
            
            assert result is True
            assert temp_path.exists()
            
            # Read and parse the exported file
            with open(temp_path, 'r') as f:
                data = yaml.safe_load(f)
            
            # Check structure
            assert data["title"] == "Sample Grant Proposal"
            assert data["funding_agency"] == "National Science Foundation"
            assert data["amount"] == 500000.0
            assert "deadline" in data
            assert "notes_data" in data
            assert "experiments_data" in data
            assert "questions_data" in data
            
            # Check specific data
            assert len(data["notes_data"]) == 2
            assert data["notes_data"][0]["title"] == "Background Research"
            assert data["notes_data"][1]["title"] == "Preliminary Results"
            
            assert len(data["experiments_data"]) == 2
            assert data["experiments_data"][0]["title"] == "Pilot Study"
            assert data["experiments_data"][1]["title"] == "Proposed Experiment"
            
            assert len(data["questions_data"]) == 2
            assert data["questions_data"][0]["question"] == "What is the relationship between X and Y?"
            assert data["questions_data"][1]["question"] == "How does Z affect the X-Y relationship?"
            
            # Check metadata
            assert "export_metadata" in data
            assert "generated_at" in data["export_metadata"]
            assert data["export_metadata"]["format_version"] == "1.0"
            
        finally:
            # Clean up
            if temp_path.exists():
                os.unlink(temp_path)
    
    def test_export_unsupported_format(self, sample_grant, sample_notes, sample_experiments, sample_questions):
        """Test exporting to an unsupported format defaults to markdown."""
        # Create a temporary file with unsupported extension
        with tempfile.NamedTemporaryFile(suffix='.txt', delete=False) as temp_file:
            temp_path = Path(temp_file.name)
        
        try:
            # Export the proposal
            result = export_proposal(
                sample_grant, sample_notes, sample_experiments, sample_questions, temp_path
            )
            
            assert result is True
            assert temp_path.exists()
            
            # Read the exported file
            with open(temp_path, 'r') as f:
                content = f.read()
            
            # Should default to markdown format
            assert "# Sample Grant Proposal" in content
            
        finally:
            # Clean up
            if temp_path.exists():
                os.unlink(temp_path)
    
    def test_convert_uuids_to_strings(self):
        """Test converting UUIDs to strings in dictionaries."""
        from uuid import UUID
        
        # Create a test dictionary with UUIDs
        test_id1 = UUID('12345678-1234-5678-1234-567812345678')
        test_id2 = UUID('87654321-8765-4321-8765-432187654321')
        
        test_dict = {
            "id": test_id1,
            "nested": {
                "id": test_id2
            },
            "list": [test_id1, {"id": test_id2}, "string"]
        }
        
        # Convert UUIDs to strings
        result = _convert_uuids_to_strings(test_dict)
        
        # Check result
        assert result["id"] == "12345678-1234-5678-1234-567812345678"
        assert result["nested"]["id"] == "87654321-8765-4321-8765-432187654321"
        assert result["list"][0] == "12345678-1234-5678-1234-567812345678"
        assert result["list"][1]["id"] == "87654321-8765-4321-8765-432187654321"
        assert result["list"][2] == "string"