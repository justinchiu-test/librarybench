{"created": 1747186746.0466812, "duration": 0.748786449432373, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer", "environment": {}, "summary": {"passed": 75, "failed": 32, "total": 107, "collected": 107}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger", "outcome": "passed", "result": [{"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_initialization", "type": "Function", "lineno": 20}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_access", "type": "Function", "lineno": 44}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_query", "type": "Function", "lineno": 83}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_field_access", "type": "Function", "lineno": 120}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_export", "type": "Function", "lineno": 152}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_policy_violation", "type": "Function", "lineno": 189}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_verify_log_integrity", "type": "Function", "lineno": 223}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_search_logs", "type": "Function", "lineno": 260}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_get_log_statistics", "type": "Function", "lineno": 346}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_sensitive_field_handling", "type": "Function", "lineno": 433}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_rotation", "type": "Function", "lineno": 506}]}, {"nodeid": "tests/access_logging/test_logger.py", "outcome": "passed", "result": [{"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger", "type": "Class"}]}, {"nodeid": "tests/access_logging", "outcome": "passed", "result": [{"nodeid": "tests/access_logging/test_logger.py", "type": "Module"}]}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer", "outcome": "passed", "result": [{"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_initialization", "type": "Function", "lineno": 15}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymization_method_enum", "type": "Function", "lineno": 40}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_hash_value", "type": "Function", "lineno": 51}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_pseudonymize_value", "type": "Function", "lineno": 88}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_mask_value", "type": "Function", "lineno": 115}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_redact_value", "type": "Function", "lineno": 157}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_generalize_value", "type": "Function", "lineno": 174}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_perturb_value", "type": "Function", "lineno": 199}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_tokenize_value", "type": "Function", "lineno": 232}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_value", "type": "Function", "lineno": 252}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_dataframe", "type": "Function", "lineno": 283}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_dict", "type": "Function", "lineno": 331}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_list_of_dicts", "type": "Function", "lineno": 365}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_auto_anonymize_dataframe", "type": "Function", "lineno": 400}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_get_field_type", "type": "Function", "lineno": 431}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_guess_anonymization_method", "type": "Function", "lineno": 455}]}, {"nodeid": "tests/anonymization/test_anonymizer.py", "outcome": "passed", "result": [{"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer", "type": "Class"}]}, {"nodeid": "tests/anonymization", "outcome": "passed", "result": [{"nodeid": "tests/anonymization/test_anonymizer.py", "type": "Module"}]}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer", "outcome": "passed", "result": [{"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_initialization", "type": "Function", "lineno": 14}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_get_allowed_fields", "type": "Function", "lineno": 34}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_apply_to_dataframe", "type": "Function", "lineno": 67}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_apply_to_dict", "type": "Function", "lineno": 95}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_apply_to_list_of_dicts", "type": "Function", "lineno": 134}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_get_field_category", "type": "Function", "lineno": 171}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_add_field_category", "type": "Function", "lineno": 187}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_add_purpose_category", "type": "Function", "lineno": 203}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_set_purpose_categories", "type": "Function", "lineno": 225}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_with_pii_detector", "type": "Function", "lineno": 256}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_purpose_enum", "type": "Function", "lineno": 280}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_data_category_enum", "type": "Function", "lineno": 294}]}, {"nodeid": "tests/data_minimization/test_minimizer.py", "outcome": "passed", "result": [{"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer", "type": "Class"}]}, {"nodeid": "tests/data_minimization", "outcome": "passed", "result": [{"nodeid": "tests/data_minimization/test_minimizer.py", "type": "Module"}]}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_data_protection_impact_assessment", "type": "Function", "lineno": 134}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_data_subject_access_request", "type": "Function", "lineno": 193}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_compliance_audit", "type": "Function", "lineno": 257}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_investigation", "type": "Function", "lineno": 325}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_privacy_compliance_report", "type": "Function", "lineno": 383}]}, {"nodeid": "tests/integration/test_scenarios.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios", "type": "Class"}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_scenarios.py", "type": "Module"}]}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector", "outcome": "passed", "result": [{"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_initialization", "type": "Function", "lineno": 12}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_string", "type": "Function", "lineno": 24}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_series", "type": "Function", "lineno": 51}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_dataframe", "type": "Function", "lineno": 72}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_dict", "type": "Function", "lineno": 91}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_is_pii_field", "type": "Function", "lineno": 113}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_luhn_check", "type": "Function", "lineno": 139}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_field_context_scores", "type": "Function", "lineno": 158}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_custom_patterns", "type": "Function", "lineno": 174}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_get_pattern_info", "type": "Function", "lineno": 211}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_get_all_patterns", "type": "Function", "lineno": 225}]}, {"nodeid": "tests/pii_detection/test_detector.py", "outcome": "passed", "result": [{"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector", "type": "Class"}]}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner", "outcome": "passed", "result": [{"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_initialization", "type": "Function", "lineno": 16}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_dataframe", "type": "Function", "lineno": 30}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_csv_file", "type": "Function", "lineno": 62}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_nonexistent_csv_file", "type": "Function", "lineno": 90}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_multiple_dataframes", "type": "Function", "lineno": 98}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_multiple_csv_files", "type": "Function", "lineno": 127}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_generate_summary_report", "type": "Function", "lineno": 153}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_error_handling", "type": "Function", "lineno": 186}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_parallel_execution", "type": "Function", "lineno": 205}]}, {"nodeid": "tests/pii_detection/test_scanner.py", "outcome": "passed", "result": [{"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner", "type": "Class"}]}, {"nodeid": "tests/pii_detection", "outcome": "passed", "result": [{"nodeid": "tests/pii_detection/test_detector.py", "type": "Module"}, {"nodeid": "tests/pii_detection/test_scanner.py", "type": "Module"}]}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer", "outcome": "passed", "result": [{"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_initialization", "type": "Function", "lineno": 18}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_query", "type": "Function", "lineno": 46}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_field_access", "type": "Function", "lineno": 164}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_data_combination", "type": "Function", "lineno": 225}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_data_source_access", "type": "Function", "lineno": 316}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_categorize_fields", "type": "Function", "lineno": 393}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_add_field_category", "type": "Function", "lineno": 459}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_add_policy", "type": "Function", "lineno": 484}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_load_policies", "type": "Function", "lineno": 504}]}, {"nodeid": "tests/policy_enforcement/test_enforcer.py", "outcome": "passed", "result": [{"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer", "type": "Class"}]}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions", "outcome": "passed", "result": [{"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_type_enum", "type": "Function", "lineno": 14}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_action_enum", "type": "Function", "lineno": 26}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_field_category_enum", "type": "Function", "lineno": 36}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_field_combination_validation", "type": "Function", "lineno": 52}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_data_policy_creation", "type": "Function", "lineno": 75}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_data_policy_to_dict", "type": "Function", "lineno": 129}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_data_policy_from_dict", "type": "Function", "lineno": 155}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_creation", "type": "Function", "lineno": 180}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_to_dict", "type": "Function", "lineno": 229}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_from_dict", "type": "Function", "lineno": 258}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_add_remove", "type": "Function", "lineno": 286}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_get_by_type", "type": "Function", "lineno": 351}]}, {"nodeid": "tests/policy_enforcement/test_policy.py", "outcome": "passed", "result": [{"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions", "type": "Class"}]}, {"nodeid": "tests/policy_enforcement", "outcome": "passed", "result": [{"nodeid": "tests/policy_enforcement/test_enforcer.py", "type": "Module"}, {"nodeid": "tests/policy_enforcement/test_policy.py", "type": "Module"}]}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine", "outcome": "passed", "result": [{"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_initialization", "type": "Function", "lineno": 19}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_simple_query", "type": "Function", "lineno": 55}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_join", "type": "Function", "lineno": 95}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_policy_enforcement", "type": "Function", "lineno": 129}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_minimization", "type": "Function", "lineno": 176}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_anonymization", "type": "Function", "lineno": 212}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_privacy_functions", "type": "Function", "lineno": 277}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_query_with_logging", "type": "Function", "lineno": 317}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_error_handling", "type": "Function", "lineno": 352}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_add_remove_data_source", "type": "Function", "lineno": 384}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_get_query_history", "type": "Function", "lineno": 419}]}, {"nodeid": "tests/query_engine/test_engine.py", "outcome": "passed", "result": [{"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine", "type": "Class"}]}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser", "outcome": "passed", "result": [{"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_initialization", "type": "Function", "lineno": 12}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_privacy_function_enum", "type": "Function", "lineno": 17}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_simple_query", "type": "Function", "lineno": 33}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_join", "type": "Function", "lineno": 56}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_privacy_functions", "type": "Function", "lineno": 83}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_various_clauses", "type": "Function", "lineno": 123}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_has_privacy_functions", "type": "Function", "lineno": 163}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_extract_table_relationships", "type": "Function", "lineno": 175}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_select_star", "type": "Function", "lineno": 193}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_subqueries", "type": "Function", "lineno": 205}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_different_join_types", "type": "Function", "lineno": 230}]}, {"nodeid": "tests/query_engine/test_parser.py", "outcome": "passed", "result": [{"nodeid": "tests/query_engine/test_parser.py::TestQueryParser", "type": "Class"}]}, {"nodeid": "tests/query_engine", "outcome": "passed", "result": [{"nodeid": "tests/query_engine/test_engine.py", "type": "Module"}, {"nodeid": "tests/query_engine/test_parser.py", "type": "Module"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/access_logging", "type": "Package"}, {"nodeid": "tests/anonymization", "type": "Package"}, {"nodeid": "tests/data_minimization", "type": "Package"}, {"nodeid": "tests/integration", "type": "Package"}, {"nodeid": "tests/pii_detection", "type": "Package"}, {"nodeid": "tests/policy_enforcement", "type": "Package"}, {"nodeid": "tests/query_engine", "type": "Package"}]}], "tests": [{"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_initialization", "lineno": 20, "outcome": "passed", "keywords": ["test_initialization", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0005895660724490881, "outcome": "passed"}, "call": {"duration": 0.000268175033852458, "outcome": "passed"}, "teardown": {"duration": 0.00014072295743972063, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_access", "lineno": 44, "outcome": "passed", "keywords": ["test_log_access", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0001958799548447132, "outcome": "passed"}, "call": {"duration": 0.0006699600489810109, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.450247\", \"user_id\": \"user123\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": true, \"fields_accessed\": [\"name\", \"email\", \"phone\"], \"purpose\": \"compliance_audit\", \"entry_id\": \"1747186745450-f9f25c2ce19000d8\", \"hmac\": \"ccb9213da6a85be1fb9627b63935ebc8438227793a95760e827d0621fcd4d0d0\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.450376, "msecs": 450.0, "relativeCreated": 461.25197410583496, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00013260403648018837, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_query", "lineno": 83, "outcome": "passed", "keywords": ["test_log_query", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00017166894394904375, "outcome": "passed"}, "call": {"duration": 0.00040461309254169464, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.451482\", \"user_id\": \"user123\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"warning\", \"contains_pii\": true, \"query\": \"SELECT name, email FROM customers\", \"fields_accessed\": [\"name\", \"email\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 150, \"query_id\": \"query123\"}, \"entry_id\": \"1747186745451-0ee7bcf4fad5e2e4\", \"hmac\": \"191b1b6892a5b0ced7d311f77a4717718d10efa747ee7adebfa2f85234d6b367\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4515676, "msecs": 451.0, "relativeCreated": 462.44359016418457, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00012106902431696653, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_field_access", "lineno": 120, "outcome": "passed", "keywords": ["test_log_field_access", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00018444005399942398, "outcome": "passed"}, "call": {"duration": 0.0003767600283026695, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.452535\", \"user_id\": \"user123\", \"access_type\": \"field_access\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"warning\", \"contains_pii\": true, \"fields_accessed\": [\"name\", \"email\", \"phone\"], \"records_accessed\": 5, \"purpose\": \"data_subject_request\", \"entry_id\": \"1747186745452-e9f4d10622de68f4\", \"hmac\": \"854fb08b2374a9f8c0d81635be24dfe1268a06b6065d676cd1b1405a69ec2cb6\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4526057, "msecs": 452.0, "relativeCreated": 463.4816646575928, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.0001200920669361949, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_export", "lineno": 152, "outcome": "passed", "keywords": ["test_log_export", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0001759959850460291, "outcome": "passed"}, "call": {"duration": 0.0003726920112967491, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.453527\", \"user_id\": \"user123\", \"access_type\": \"export\", \"data_source\": \"customers\", \"outcome\": \"anonymized\", \"level\": \"warning\", \"contains_pii\": true, \"fields_accessed\": [\"name\", \"email\"], \"records_accessed\": 10, \"purpose\": \"regulatory_reporting\", \"metadata\": {\"export_format\": \"CSV\", \"destination\": \"/exports/report.csv\"}, \"entry_id\": \"1747186745453-c7bb89681e5ded45\", \"hmac\": \"8c83a3288fbb1c27de901f6c4b354ebe68701c12847b0a8a2ea737df326116e2\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.453598, "msecs": 453.0, "relativeCreated": 464.4739627838135, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00012995197903364897, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_policy_violation", "lineno": 189, "outcome": "passed", "keywords": ["test_log_policy_violation", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0001784190535545349, "outcome": "passed"}, "call": {"duration": 0.000359527999535203, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.454552\", \"user_id\": \"user123\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT ssn FROM customers\", \"fields_accessed\": [\"ssn\"], \"metadata\": {\"policy_id\": \"policy456\", \"violation_details\": \"Unauthorized access to SSN field\"}, \"entry_id\": \"1747186745454-7222b698e15e13ef\", \"hmac\": \"142e770f52f685681de3be1492397288b093729fb9dfb020b47cfdc923d900dd\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4546185, "msecs": 454.0, "relativeCreated": 465.49439430236816, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00011522998102009296, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_verify_log_integrity", "lineno": 223, "outcome": "passed", "keywords": ["test_verify_log_integrity", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00015969504602253437, "outcome": "passed"}, "call": {"duration": 0.0008585359901189804, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.455507\", \"user_id\": \"user0\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"purpose\": \"compliance_audit\", \"entry_id\": \"1747186745455-5536c56ff751bcee\", \"hmac\": \"d71112d79bca2e35890c107a7016a5f50d38dafe63e8a010c083c20a3f61cf3b\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4555666, "msecs": 455.0, "relativeCreated": 466.4425849914551, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.455627\", \"user_id\": \"user1\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"purpose\": \"compliance_audit\", \"entry_id\": \"1747186745455-1a102b1e4c86dcae\", \"previous_hash\": \"d71112d79bca2e35890c107a7016a5f50d38dafe63e8a010c083c20a3f61cf3b\", \"hmac\": \"920822c7040bd29c8f10aa7bd0ff2654f85c300b7193b8856ec88c1e4f436f64\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.455668, "msecs": 455.0, "relativeCreated": 466.54391288757324, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.455702\", \"user_id\": \"user2\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"purpose\": \"compliance_audit\", \"entry_id\": \"1747186745455-71cafc003630ef1f\", \"previous_hash\": \"920822c7040bd29c8f10aa7bd0ff2654f85c300b7193b8856ec88c1e4f436f64\", \"hmac\": \"b1fd8e45a4d0bfd6670b5fddfd0482d2a170d18e6edf457af993cb058913e075\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4557362, "msecs": 455.0, "relativeCreated": 466.6121006011963, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.455767\", \"user_id\": \"user3\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"purpose\": \"compliance_audit\", \"entry_id\": \"1747186745455-c62c83c4d15c2429\", \"previous_hash\": \"b1fd8e45a4d0bfd6670b5fddfd0482d2a170d18e6edf457af993cb058913e075\", \"hmac\": \"a9b946f3b6f6de7a19ac9f0fa219935dfdb877ab2fae22c8ba51ea42dc1cbb10\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.455799, "msecs": 455.0, "relativeCreated": 466.6750431060791, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.455828\", \"user_id\": \"user4\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"purpose\": \"compliance_audit\", \"entry_id\": \"1747186745455-e51d644cd5d636b8\", \"previous_hash\": \"a9b946f3b6f6de7a19ac9f0fa219935dfdb877ab2fae22c8ba51ea42dc1cbb10\", \"hmac\": \"8a31798ae8765d1fac6f6705717a9e50fdf48ed37d3e6b7d24de182f5d95859b\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4558582, "msecs": 455.0, "relativeCreated": 466.7341709136963, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00014693697448819876, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_search_logs", "lineno": 260, "outcome": "passed", "keywords": ["test_search_logs", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00017151189967989922, "outcome": "passed"}, "call": {"duration": 0.0006375079974532127, "outcome": "passed"}, "teardown": {"duration": 0.00012447801418602467, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_get_log_statistics", "lineno": 346, "outcome": "passed", "keywords": ["test_get_log_statistics", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00016807799693197012, "outcome": "passed"}, "call": {"duration": 0.000793789979070425, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.458296\", \"user_id\": \"user1\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": true, \"fields_accessed\": [\"name\", \"email\"], \"entry_id\": \"1747186745458-b93afbc52b7600a1\", \"hmac\": \"292ee4733ef282c6c9bb2f3853db1709180a1320e76d87ef5e3a96c6566616f0\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4584641, "msecs": 458.0, "relativeCreated": 469.34008598327637, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.458549\", \"user_id\": \"user2\", \"access_type\": \"field_access\", \"data_source\": \"orders\", \"outcome\": \"denied\", \"level\": \"alert\", \"contains_pii\": true, \"fields_accessed\": [\"credit_card\"], \"entry_id\": \"1747186745458-9e081c851c53c5ce\", \"previous_hash\": \"292ee4733ef282c6c9bb2f3853db1709180a1320e76d87ef5e3a96c6566616f0\", \"hmac\": \"547890d17e910af8c9b9ee2159bdbe37119b0292c5a60ae9f057c98fdb81043b\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4586034, "msecs": 458.0, "relativeCreated": 469.4793224334717, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.458644\", \"user_id\": \"user1\", \"access_type\": \"export\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"warning\", \"contains_pii\": true, \"fields_accessed\": [\"name\", \"email\", \"phone\"], \"entry_id\": \"1747186745458-2855fe70861e43e0\", \"previous_hash\": \"547890d17e910af8c9b9ee2159bdbe37119b0292c5a60ae9f057c98fdb81043b\", \"hmac\": \"646846a6d94c53892583c022db07f502f066ced8ffef9026d2cecd75b9b792e7\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.458682, "msecs": 458.0, "relativeCreated": 469.5580005645752, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.458715\", \"user_id\": \"user3\", \"access_type\": \"policy_check\", \"data_source\": \"sensitive_data\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"entry_id\": \"1747186745458-e34cdb89bdb2678a\", \"previous_hash\": \"646846a6d94c53892583c022db07f502f066ced8ffef9026d2cecd75b9b792e7\", \"hmac\": \"161ff567afad90b289b10fe50a4b8fd6c1507a4abf45ca6026e48edbdba934a2\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4587479, "msecs": 458.0, "relativeCreated": 469.6238040924072, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00013818498700857162, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_sensitive_field_handling", "lineno": 433, "outcome": "failed", "keywords": ["test_sensitive_field_handling", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0001787530491128564, "outcome": "passed"}, "call": {"duration": 0.0005021520191803575, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/access_logging/test_logger.py", "lineno": 455, "message": "AssertionError: assert ['ssn', 'credit_card', 'income'] != ['ssn', 'credit_card', 'income']"}, "traceback": [{"path": "tests/access_logging/test_logger.py", "lineno": 455, "message": "AssertionError"}], "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.459797\", \"user_id\": \"user1\", \"access_type\": \"field_access\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"ssn\", \"credit_card\", \"income\"], \"entry_id\": \"1747186745459-95df791da1aad45d\", \"hmac\": \"020c0714af9687757bca8d4713d311a9f6c257c26bd5f013900e44d7c4fa6325\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4598615, "msecs": 459.0, "relativeCreated": 470.7374572753906, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}], "longrepr": "self = <tests.access_logging.test_logger.TestAccessLogger object at 0x7f115aefe450>\ntemp_log_path = '/tmp/tmpvh6k34li.log'\n\n    def test_sensitive_field_handling(self, temp_log_path):\n        \"\"\"Test different modes of handling sensitive fields.\"\"\"\n        # Test with hash mode\n        hash_logger = AccessLogger(\n            log_file=temp_log_path,\n            sensitive_field_handling=\"hash\"\n        )\n    \n        fields = [\"ssn\", \"credit_card\", \"income\"]\n        hash_logger.log_access(\n            user_id=\"user1\",\n            access_type=\"field_access\",\n            data_source=\"customers\",\n            fields_accessed=fields\n        )\n    \n        # Read the log file\n        with open(temp_log_path, 'r') as f:\n            hash_entry = json.loads(f.readline())\n    \n        # Fields should be hashed\n>       assert hash_entry[\"fields_accessed\"] != fields\nE       AssertionError: assert ['ssn', 'credit_card', 'income'] != ['ssn', 'credit_card', 'income']\n\ntests/access_logging/test_logger.py:455: AssertionError"}, "teardown": {"duration": 0.00015125202480703592, "outcome": "passed"}}, {"nodeid": "tests/access_logging/test_logger.py::TestAccessLogger::test_log_rotation", "lineno": 506, "outcome": "failed", "keywords": ["test_log_rotation", "TestAccessLogger", "test_logger.py", "access_logging", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009988720994442701, "outcome": "passed"}, "call": {"duration": 0.0018136430298909545, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/access_logging/test_logger.py", "lineno": 531, "message": "AssertionError: assert 1198 < 1024\n +  where 1198 = <function getsize at 0x7f1200178f40>('/tmp/pytest-of-justinchiu_cohere_com/pytest-3/test_log_rotation0/access.log')\n +    where <function getsize at 0x7f1200178f40> = <module 'posixpath' (frozen)>.getsize\n +      where <module 'posixpath' (frozen)> = os.path"}, "traceback": [{"path": "tests/access_logging/test_logger.py", "lineno": 531, "message": "AssertionError"}], "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498070\", \"user_id\": \"user0\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-86e5a1a3fd128f4d\", \"hmac\": \"494a75fe7f180e7bcc6d7dc63041846d0a872cffc0a47a20236e4384295a93a9\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4981408, "msecs": 498.0, "relativeCreated": 509.016752243042, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498203\", \"user_id\": \"user1\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-fbefb41a4ea388dd\", \"previous_hash\": \"494a75fe7f180e7bcc6d7dc63041846d0a872cffc0a47a20236e4384295a93a9\", \"hmac\": \"d4ef5f10dff34eafc4fca998c48af648ce656ff7d20aaa71263520c1d507cfa4\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4982505, "msecs": 498.0, "relativeCreated": 509.1264247894287, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498286\", \"user_id\": \"user2\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-f78b9342772fdd94\", \"previous_hash\": \"d4ef5f10dff34eafc4fca998c48af648ce656ff7d20aaa71263520c1d507cfa4\", \"hmac\": \"987f00803d144a50691756bbadab7dd8c7208fb24424a47e77e3116c7b6be50e\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4984148, "msecs": 498.0, "relativeCreated": 509.2906951904297, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498462\", \"user_id\": \"user3\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-11d74c5793f1e38c\", \"previous_hash\": \"987f00803d144a50691756bbadab7dd8c7208fb24424a47e77e3116c7b6be50e\", \"hmac\": \"7e04fde3b738c5643922e07c4cb76d072bf9f318163cc0a91f68e23b6f4ac197\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4985077, "msecs": 498.0, "relativeCreated": 509.3836784362793, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498541\", \"user_id\": \"user4\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-7f5c9346381e98e0\", \"previous_hash\": \"7e04fde3b738c5643922e07c4cb76d072bf9f318163cc0a91f68e23b6f4ac197\", \"hmac\": \"3c499137ac7ba7fba8b013d2438621a7164802e38dd755722fe66946dff9fcb4\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4986856, "msecs": 498.0, "relativeCreated": 509.56153869628906, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498730\", \"user_id\": \"user5\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-bf4ecb82b17ca638\", \"previous_hash\": \"3c499137ac7ba7fba8b013d2438621a7164802e38dd755722fe66946dff9fcb4\", \"hmac\": \"f5bafc2d27c9dcbc776deba62aa90b0d204e056eace2987d9da36652555ba3e2\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4987757, "msecs": 498.0, "relativeCreated": 509.65166091918945, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.498806\", \"user_id\": \"user6\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745498-c741bb18c9ca312d\", \"previous_hash\": \"f5bafc2d27c9dcbc776deba62aa90b0d204e056eace2987d9da36652555ba3e2\", \"hmac\": \"f602e95d6ddad67e9a709862cccd5233066813292dc79eeea46450645007aed3\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4991202, "msecs": 499.0, "relativeCreated": 509.9961757659912, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.499178\", \"user_id\": \"user7\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745499-f34addf766d08196\", \"previous_hash\": \"f602e95d6ddad67e9a709862cccd5233066813292dc79eeea46450645007aed3\", \"hmac\": \"a6e21b1f2420afb0f2b9defcc5dae303051aaaec8ac325e9916f5b8fb1477220\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4992259, "msecs": 499.0, "relativeCreated": 510.1017951965332, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.499257\", \"user_id\": \"user8\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745499-e370bf09cf69b449\", \"previous_hash\": \"a6e21b1f2420afb0f2b9defcc5dae303051aaaec8ac325e9916f5b8fb1477220\", \"hmac\": \"f5e78860062115e62e6fed15f657f9e0f7d622d045cde3c239cc90824691567e\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.499396, "msecs": 499.0, "relativeCreated": 510.2720260620117, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.499440\", \"user_id\": \"user9\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"success\", \"level\": \"info\", \"contains_pii\": false, \"fields_accessed\": [\"field1\", \"field2\", \"field3\"], \"purpose\": \"testing\", \"metadata\": {\"test_data\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"}, \"entry_id\": \"1747186745499-c7b3e6e2691d617a\", \"previous_hash\": \"f5e78860062115e62e6fed15f657f9e0f7d622d045cde3c239cc90824691567e\", \"hmac\": \"505e8ba89f0246f88b445a7ae2d8c5d3325f7fb655871a124ec381b3f676c4cd\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.4994838, "msecs": 499.0, "relativeCreated": 510.3597640991211, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}], "longrepr": "self = <tests.access_logging.test_logger.TestAccessLogger object at 0x7f115aefe600>\ntmp_path = PosixPath('/tmp/pytest-of-justinchiu_cohere_com/pytest-3/test_log_rotation0')\n\n    def test_log_rotation(self, tmp_path):\n        \"\"\"Test log file rotation when size limit is reached.\"\"\"\n        # Create a log file with a very small size limit (1KB)\n        log_path = os.path.join(tmp_path, \"access.log\")\n        logger = AccessLogger(log_file=log_path, max_log_size_mb=0.001)  # 1KB limit\n    \n        # Create log entries until the file should rotate\n        # Each entry is about 500 bytes, so after 3-4 entries it should rotate\n        for i in range(10):\n            logger.log_access(\n                user_id=f\"user{i}\",\n                access_type=\"query_execution\",\n                data_source=\"customers\",\n                fields_accessed=[\"field1\", \"field2\", \"field3\"],\n                purpose=\"testing\",\n                metadata={\"test_data\": \"x\" * 100}  # Add some bulk to the entry\n            )\n    \n        # Check if log rotation occurred by looking for backup files\n        backup_files = [f for f in os.listdir(tmp_path) if f.startswith(\"access.log.\")]\n        assert len(backup_files) > 0\n    \n        # The current log file should exist and be smaller than the rotation size\n        assert os.path.exists(log_path)\n>       assert os.path.getsize(log_path) < 1024  # 1KB limit\nE       AssertionError: assert 1198 < 1024\nE        +  where 1198 = <function getsize at 0x7f1200178f40>('/tmp/pytest-of-justinchiu_cohere_com/pytest-3/test_log_rotation0/access.log')\nE        +    where <function getsize at 0x7f1200178f40> = <module 'posixpath' (frozen)>.getsize\nE        +      where <module 'posixpath' (frozen)> = os.path\n\ntests/access_logging/test_logger.py:531: AssertionError"}, "teardown": {"duration": 0.000147741986438632, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_initialization", "lineno": 15, "outcome": "passed", "keywords": ["test_initialization", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0002836460480466485, "outcome": "passed"}, "call": {"duration": 0.000593887991271913, "outcome": "passed"}, "teardown": {"duration": 0.00010176992509514093, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymization_method_enum", "lineno": 40, "outcome": "passed", "keywords": ["test_anonymization_method_enum", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.75949626788497e-05, "outcome": "passed"}, "call": {"duration": 8.924095891416073e-05, "outcome": "passed"}, "teardown": {"duration": 7.502094376832247e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_hash_value", "lineno": 51, "outcome": "passed", "keywords": ["test_hash_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.982706978917122e-05, "outcome": "passed"}, "call": {"duration": 0.00033167796209454536, "outcome": "passed"}, "teardown": {"duration": 9.939901065081358e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_pseudonymize_value", "lineno": 88, "outcome": "passed", "keywords": ["test_pseudonymize_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.830695878714323e-05, "outcome": "passed"}, "call": {"duration": 0.0001529980218037963, "outcome": "passed"}, "teardown": {"duration": 8.745200466364622e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_mask_value", "lineno": 115, "outcome": "failed", "keywords": ["test_mask_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.173391688615084e-05, "outcome": "passed"}, "call": {"duration": 0.0002716940362006426, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/anonymization/test_anonymizer.py", "lineno": 150, "message": "AssertionError: assert False\n +  where False = <built-in method startswith of str object at 0x7f1159835330>('+1')\n +    where <built-in method startswith of str object at 0x7f1159835330> = '15*****4567'.startswith"}, "traceback": [{"path": "tests/anonymization/test_anonymizer.py", "lineno": 150, "message": "AssertionError"}], "longrepr": "self = <tests.anonymization.test_anonymizer.TestDataAnonymizer object at 0x7f115af12240>\n\n    def test_mask_value(self):\n        \"\"\"Test masking values.\"\"\"\n        anonymizer = DataAnonymizer()\n    \n        # Test basic masking\n        text = \"sensitive data\"\n        masked = anonymizer.mask_value(text)\n    \n        # Should mask the middle portion\n        assert masked != text\n        assert \"*\" in masked\n    \n        # Test with different reveal parameters\n        masked_reveal = anonymizer.mask_value(text, reveal_first=1, reveal_last=1)\n        assert masked_reveal[0] == text[0]  # First character revealed\n        assert masked_reveal[-1] == text[-1]  # Last character revealed\n        assert all(c == \"*\" for c in masked_reveal[1:-1])  # Rest masked\n    \n        # Test specific field types\n        email = \"test@example.com\"\n        masked_email = anonymizer.mask_value(email, field_type=\"email\")\n        # Username should be masked, domain preserved\n        assert \"@example.com\" in masked_email\n        assert \"test@\" not in masked_email\n    \n        cc = \"4111-1111-1111-1111\"\n        masked_cc = anonymizer.mask_value(cc, field_type=\"credit_card\")\n        # Should show only last 4 digits\n        assert masked_cc.endswith(\"1111\")\n        assert masked_cc.startswith(\"************\")\n    \n        phone = \"+1-555-123-4567\"\n        masked_phone = anonymizer.mask_value(phone, field_type=\"phone\")\n        # Should mask middle digits\n>       assert masked_phone.startswith(\"+1\")\nE       AssertionError: assert False\nE        +  where False = <built-in method startswith of str object at 0x7f1159835330>('+1')\nE        +    where <built-in method startswith of str object at 0x7f1159835330> = '15*****4567'.startswith\n\ntests/anonymization/test_anonymizer.py:150: AssertionError"}, "teardown": {"duration": 0.0001252500806003809, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_redact_value", "lineno": 157, "outcome": "passed", "keywords": ["test_redact_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.040604345500469e-05, "outcome": "passed"}, "call": {"duration": 0.00010444293729960918, "outcome": "passed"}, "teardown": {"duration": 7.787893991917372e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_generalize_value", "lineno": 174, "outcome": "failed", "keywords": ["test_generalize_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.837506175041199e-05, "outcome": "passed"}, "call": {"duration": 0.00017639598809182644, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/anonymization/test_anonymizer.py", "lineno": 193, "message": "AssertionError: assert 'Anytown, NY' in 'Anytown,  NY 10001'"}, "traceback": [{"path": "tests/anonymization/test_anonymizer.py", "lineno": 193, "message": "AssertionError"}], "longrepr": "self = <tests.anonymization.test_anonymizer.TestDataAnonymizer object at 0x7f115af126f0>\n\n    def test_generalize_value(self):\n        \"\"\"Test generalizing values.\"\"\"\n        anonymizer = DataAnonymizer()\n    \n        # Test date generalization\n        date = \"2023-04-15\"\n        generalized_date = anonymizer.generalize_value(date, field_type=\"date\")\n        assert generalized_date == \"2023-04\"  # Reduced to year-month\n    \n        # Test zip code generalization\n        zip_code = \"12345\"\n        generalized_zip = anonymizer.generalize_value(zip_code, field_type=\"zip_code\")\n        assert generalized_zip == \"12000\"  # First 2 digits preserved\n    \n        # Test address generalization\n        address = \"123 Main St, Anytown, NY 10001\"\n        generalized_address = anonymizer.generalize_value(address, field_type=\"address\")\n        assert \"123 Main St\" not in generalized_address  # Street number removed\n>       assert \"Anytown, NY\" in generalized_address  # City/state preserved\nE       AssertionError: assert 'Anytown, NY' in 'Anytown,  NY 10001'\n\ntests/anonymization/test_anonymizer.py:193: AssertionError"}, "teardown": {"duration": 0.00012182595673948526, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_perturb_value", "lineno": 199, "outcome": "passed", "keywords": ["test_perturb_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.151303675025702e-05, "outcome": "passed"}, "call": {"duration": 0.00012369698379188776, "outcome": "passed"}, "teardown": {"duration": 7.895007729530334e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_tokenize_value", "lineno": 232, "outcome": "passed", "keywords": ["test_tokenize_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.037500083446503e-05, "outcome": "passed"}, "call": {"duration": 0.00012653006706386805, "outcome": "passed"}, "teardown": {"duration": 7.473398000001907e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_value", "lineno": 252, "outcome": "passed", "keywords": ["test_anonymize_value", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.580500096082687e-05, "outcome": "passed"}, "call": {"duration": 0.00013426097575575113, "outcome": "passed"}, "teardown": {"duration": 7.46329315006733e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_dataframe", "lineno": 283, "outcome": "passed", "keywords": ["test_anonymize_dataframe", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.001310184015892446, "outcome": "passed"}, "call": {"duration": 0.0023651450173929334, "outcome": "passed"}, "teardown": {"duration": 0.00010733900126069784, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_dict", "lineno": 331, "outcome": "passed", "keywords": ["test_anonymize_dict", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.104993660002947e-05, "outcome": "passed"}, "call": {"duration": 0.00014660798478871584, "outcome": "passed"}, "teardown": {"duration": 7.819198071956635e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_anonymize_list_of_dicts", "lineno": 365, "outcome": "passed", "keywords": ["test_anonymize_list_of_dicts", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.207105565816164e-05, "outcome": "passed"}, "call": {"duration": 0.00015069497749209404, "outcome": "passed"}, "teardown": {"duration": 7.525796536356211e-05, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_auto_anonymize_dataframe", "lineno": 400, "outcome": "passed", "keywords": ["test_auto_anonymize_dataframe", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009549899259582162, "outcome": "passed"}, "call": {"duration": 0.006005509989336133, "outcome": "passed"}, "teardown": {"duration": 0.00010726309847086668, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_get_field_type", "lineno": 431, "outcome": "failed", "keywords": ["test_get_field_type", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.994104038923979e-05, "outcome": "passed"}, "call": {"duration": 0.00029837596230208874, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/anonymization/test_anonymizer.py", "lineno": 451, "message": "AssertionError: assert 'phone' == 'ssn'\n  \n  - ssn\n  + phone"}, "traceback": [{"path": "tests/anonymization/test_anonymizer.py", "lineno": 451, "message": "AssertionError"}], "longrepr": "self = <tests.anonymization.test_anonymizer.TestDataAnonymizer object at 0x7f115af12d80>\n\n    def test_get_field_type(self):\n        \"\"\"Test field type detection based on name and sample.\"\"\"\n        anonymizer = DataAnonymizer()\n    \n        # Test with field names\n        assert anonymizer.get_field_type(\"email\") == \"email\"\n        assert anonymizer.get_field_type(\"user_email\") == \"email\"\n        assert anonymizer.get_field_type(\"phone_number\") == \"phone\"\n        assert anonymizer.get_field_type(\"ssn\") == \"ssn\"\n        assert anonymizer.get_field_type(\"credit_card\") == \"credit_card\"\n        assert anonymizer.get_field_type(\"address\") == \"address\"\n        assert anonymizer.get_field_type(\"zip_code\") == \"zip_code\"\n        assert anonymizer.get_field_type(\"full_name\") == \"name\"\n        assert anonymizer.get_field_type(\"date_of_birth\") == \"date\"\n        assert anonymizer.get_field_type(\"age\") == \"age\"\n    \n        # Test with sample values\n        assert anonymizer.get_field_type(\"contact\", \"john.doe@example.com\") == \"email\"\n        assert anonymizer.get_field_type(\"contact\", \"+1-555-123-4567\") == \"phone\"\n>       assert anonymizer.get_field_type(\"id_number\", \"123-45-6789\") == \"ssn\"\nE       AssertionError: assert 'phone' == 'ssn'\nE         \nE         - ssn\nE         + phone\n\ntests/anonymization/test_anonymizer.py:451: AssertionError"}, "teardown": {"duration": 0.00011790194548666477, "outcome": "passed"}}, {"nodeid": "tests/anonymization/test_anonymizer.py::TestDataAnonymizer::test_guess_anonymization_method", "lineno": 455, "outcome": "passed", "keywords": ["test_guess_anonymization_method", "TestDataAnonymizer", "test_anonymizer.py", "anonymization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.909997995942831e-05, "outcome": "passed"}, "call": {"duration": 0.0001252929214388132, "outcome": "passed"}, "teardown": {"duration": 9.013200178742409e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_initialization", "lineno": 14, "outcome": "passed", "keywords": ["test_initialization", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.000255314982496202, "outcome": "passed"}, "call": {"duration": 0.00011147803161293268, "outcome": "passed"}, "teardown": {"duration": 7.9851015470922e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_get_allowed_fields", "lineno": 34, "outcome": "failed", "keywords": ["test_get_allowed_fields", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.301902562379837e-05, "outcome": "passed"}, "call": {"duration": 0.0001713540405035019, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/data_minimization/test_minimizer.py", "lineno": 63, "message": "assert False\n +  where False = all(<generator object TestDataMinimizer.test_get_allowed_fields.<locals>.<genexpr> at 0x7f1159970e10>)"}, "traceback": [{"path": "tests/data_minimization/test_minimizer.py", "lineno": 63, "message": "AssertionError"}], "longrepr": "self = <tests.data_minimization.test_minimizer.TestDataMinimizer object at 0x7f115ad3cdd0>\n\n    def test_get_allowed_fields(self):\n        \"\"\"Test filtering fields based on purpose.\"\"\"\n        minimizer = DataMinimizer()\n    \n        # Test with compliance audit purpose (allows access to sensitive data)\n        fields = [\n            \"name\", \"email\", \"phone\", \"ssn\", \"credit_card\",\n            \"product\", \"amount\", \"transaction_id\"\n        ]\n    \n        allowed = minimizer.get_allowed_fields(fields, Purpose.COMPLIANCE_AUDIT)\n    \n        # Check that sensitive fields are allowed for compliance audit\n        assert \"name\" in allowed\n        assert \"email\" in allowed\n        assert \"phone\" in allowed\n        assert \"ssn\" in allowed\n        assert \"credit_card\" in allowed\n    \n        # Test with marketing purpose (more restricted)\n        allowed = minimizer.get_allowed_fields(fields, Purpose.MARKETING)\n    \n        # Check that sensitive fields are filtered out for marketing\n        assert \"name\" not in allowed or \"ssn\" not in allowed or \"credit_card\" not in allowed\n    \n        # Transactional data should be allowed for analytics but not for marketing\n        transactional_fields = [\"product\", \"amount\", \"transaction_id\"]\n        allowed_analytics = minimizer.get_allowed_fields(transactional_fields, Purpose.ANALYTICS)\n>       assert all(field in allowed_analytics for field in transactional_fields)\nE       assert False\nE        +  where False = all(<generator object TestDataMinimizer.test_get_allowed_fields.<locals>.<genexpr> at 0x7f1159970e10>)\n\ntests/data_minimization/test_minimizer.py:63: AssertionError"}, "teardown": {"duration": 0.00012333504855632782, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_apply_to_dataframe", "lineno": 67, "outcome": "passed", "keywords": ["test_apply_to_dataframe", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009751400211825967, "outcome": "passed"}, "call": {"duration": 0.0010950400028377771, "outcome": "passed"}, "teardown": {"duration": 0.0001112520694732666, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_apply_to_dict", "lineno": 95, "outcome": "passed", "keywords": ["test_apply_to_dict", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.324995335191488e-05, "outcome": "passed"}, "call": {"duration": 0.00017366791144013405, "outcome": "passed"}, "teardown": {"duration": 9.015400428324938e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_apply_to_list_of_dicts", "lineno": 134, "outcome": "passed", "keywords": ["test_apply_to_list_of_dicts", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.08939803391695e-05, "outcome": "passed"}, "call": {"duration": 0.00012766604777425528, "outcome": "passed"}, "teardown": {"duration": 7.509905844926834e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_get_field_category", "lineno": 171, "outcome": "failed", "keywords": ["test_get_field_category", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.523103315383196e-05, "outcome": "passed"}, "call": {"duration": 0.00025432591792196035, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/data_minimization/test_minimizer.py", "lineno": 177, "message": "AssertionError: assert <DataCategory..._identifiers'> == <DataCategory...contact_info'>\n  \n  - contact_info\n  + direct_identifiers"}, "traceback": [{"path": "tests/data_minimization/test_minimizer.py", "lineno": 177, "message": "AssertionError"}], "longrepr": "self = <tests.data_minimization.test_minimizer.TestDataMinimizer object at 0x7f115af12ea0>\n\n    def test_get_field_category(self):\n        \"\"\"Test retrieving the category for a field.\"\"\"\n        minimizer = DataMinimizer()\n    \n        # Test with known fields\n>       assert minimizer.get_field_category(\"email\") == DataCategory.CONTACT_INFO\nE       AssertionError: assert <DataCategory..._identifiers'> == <DataCategory...contact_info'>\nE         \nE         - contact_info\nE         + direct_identifiers\n\ntests/data_minimization/test_minimizer.py:177: AssertionError"}, "teardown": {"duration": 0.00011598900891840458, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_add_field_category", "lineno": 187, "outcome": "passed", "keywords": ["test_add_field_category", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.036308620125055e-05, "outcome": "passed"}, "call": {"duration": 0.00010521302465349436, "outcome": "passed"}, "teardown": {"duration": 8.071004413068295e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_add_purpose_category", "lineno": 203, "outcome": "passed", "keywords": ["test_add_purpose_category", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.668599184602499e-05, "outcome": "passed"}, "call": {"duration": 0.00010137201752513647, "outcome": "passed"}, "teardown": {"duration": 7.618695963174105e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_set_purpose_categories", "lineno": 225, "outcome": "passed", "keywords": ["test_set_purpose_categories", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.381006773561239e-05, "outcome": "passed"}, "call": {"duration": 0.00010851002298295498, "outcome": "passed"}, "teardown": {"duration": 7.479498162865639e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_with_pii_detector", "lineno": 256, "outcome": "failed", "keywords": ["test_with_pii_detector", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009464109316468239, "outcome": "passed"}, "call": {"duration": 0.0007723940070718527, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/data_minimization/test_minimizer.py", "lineno": 278, "message": "AssertionError: assert 'unknown_1' not in ['unknown_1', 'unknown_2']"}, "traceback": [{"path": "tests/data_minimization/test_minimizer.py", "lineno": 278, "message": "AssertionError"}], "longrepr": "self = <tests.data_minimization.test_minimizer.TestDataMinimizer object at 0x7f115ad3cd70>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_with_pii_detector(self, sample_data):\n        \"\"\"Test integration with PII detector for field categorization.\"\"\"\n        detector = PIIDetector()\n        minimizer = DataMinimizer(pii_detector=detector)\n    \n        # Test with a field that doesn't match by name but contains PII\n        fields = [\"unknown_1\", \"unknown_2\"]\n    \n        # First, verify that without samples, these are not minimized\n        allowed = minimizer.get_allowed_fields(fields, Purpose.MARKETING)\n        assert \"unknown_1\" in allowed\n        assert \"unknown_2\" in allowed\n    \n        # Now, with the detector, create context where these fields contain PII\n        # and should be detected and minimized\n        # This would be detected in a real scenario, but for this test we'll\n        # simulate by directly adding some field categorizations\n        minimizer.add_field_category(\"unknown_1\", DataCategory.FINANCIAL)\n    \n        # Now check again\n        allowed = minimizer.get_allowed_fields(fields, Purpose.MARKETING)\n>       assert \"unknown_1\" not in allowed  # Should be minimized now\nE       AssertionError: assert 'unknown_1' not in ['unknown_1', 'unknown_2']\n\ntests/data_minimization/test_minimizer.py:278: AssertionError"}, "teardown": {"duration": 0.000133280991576612, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_purpose_enum", "lineno": 280, "outcome": "passed", "keywords": ["test_purpose_enum", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.106495417654514e-05, "outcome": "passed"}, "call": {"duration": 9.268999565392733e-05, "outcome": "passed"}, "teardown": {"duration": 7.789407391101122e-05, "outcome": "passed"}}, {"nodeid": "tests/data_minimization/test_minimizer.py::TestDataMinimizer::test_data_category_enum", "lineno": 294, "outcome": "passed", "keywords": ["test_data_category_enum", "TestDataMinimizer", "test_minimizer.py", "data_minimization", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.194905240088701e-05, "outcome": "passed"}, "call": {"duration": 8.774688467383385e-05, "outcome": "passed"}, "teardown": {"duration": 7.524399552494287e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_data_protection_impact_assessment", "lineno": 134, "outcome": "failed", "keywords": ["test_scenario_data_protection_impact_assessment", "TestUserScenarios", "test_scenarios.py", "integration", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0018686950206756592, "outcome": "passed"}, "call": {"duration": 0.01864408899564296, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/integration/test_scenarios.py", "lineno": 177, "message": "AssertionError: assert 'modified' == 'completed'\n  \n  - completed\n  + modified"}, "traceback": [{"path": "tests/integration/test_scenarios.py", "lineno": 177, "message": "AssertionError"}], "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.594804\", \"user_id\": \"privacy_officer\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT name, email FROM customers\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"Purpose 'compliance_audit' is not in the list of required purposes: data_subject_request\"}, \"entry_id\": \"1747186745594-24287ca5b30a1db4\", \"hmac\": \"afd45b862f55a66dff9af3e8f8fa50ff23e84338cb12dec5289d901680a5ea7b\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.594884, "msecs": 594.0, "relativeCreated": 605.759859085083, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.598582\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT name, email FROM customers\", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 5, \"query_id\": \"2d7c9b21-c1c2-4eaa-8b83-33e4e19fd891\"}, \"entry_id\": \"1747186745598-e83f3a2c87e50e79\", \"previous_hash\": \"afd45b862f55a66dff9af3e8f8fa50ff23e84338cb12dec5289d901680a5ea7b\", \"hmac\": \"d16e1798ea583397453b27c6a429b3618e80eda47b4a13d453c608545aa0b5d3\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.59866, "msecs": 598.0, "relativeCreated": 609.5359325408936, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}], "longrepr": "self = <tests.integration.test_scenarios.TestUserScenarios object at 0x7f1159bfffb0>\nprivacy_system = {'anonymizer': <privacy_query_interpreter.anonymization.anonymizer.DataAnonymizer object at 0x7f11599a5490>, 'detector...15996dca0>, 'engine': <privacy_query_interpreter.query_engine.engine.PrivacyQueryEngine object at 0x7f115996dbb0>, ...}\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_scenario_data_protection_impact_assessment(self, privacy_system, sample_data):\n        \"\"\"\n        Test scenario: Conducting a data protection impact assessment.\n    \n        In this scenario, a data privacy officer scans databases for PII,\n        analyzes its usage, and assesses compliance risks.\n        \"\"\"\n        scanner = privacy_system[\"scanner\"]\n        engine = privacy_system[\"engine\"]\n    \n        # 1. Scan datasets for PII\n        scan_results = scanner.scan_multiple_dataframes(sample_data)\n    \n        # Verify PII was detected in all datasets\n        for source_name, result in scan_results.items():\n            assert result[\"summary\"][\"has_pii\"] is True\n            assert len(result[\"columns_with_pii\"]) > 0\n    \n        # 2. Generate summary report\n        summary = scanner.generate_summary_report(scan_results)\n    \n        # Verify summary contains expected information\n        assert summary[\"sources_with_pii\"] == len(sample_data)\n        assert \"pii_types_found\" in summary\n        assert len(summary[\"pii_types_found\"]) > 0\n        assert \"high_risk_sources\" in summary\n        assert \"pii_by_category\" in summary\n    \n        # 3. Execute queries to verify access controls\n        user_context = {\n            \"user_id\": \"privacy_officer\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        # Try a policy-compliant query\n        result = engine.execute_query(\n            query=\"SELECT name, email FROM customers\",\n            user_context=user_context\n        )\n    \n        # Should succeed\n>       assert result[\"status\"] == \"completed\"\nE       AssertionError: assert 'modified' == 'completed'\nE         \nE         - completed\nE         + modified\n\ntests/integration/test_scenarios.py:177: AssertionError"}, "teardown": {"duration": 0.0001556440256536007, "outcome": "passed"}}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_data_subject_access_request", "lineno": 193, "outcome": "failed", "keywords": ["test_scenario_data_subject_access_request", "TestUserScenarios", "test_scenarios.py", "integration", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.001406534924171865, "outcome": "passed"}, "call": {"duration": 0.0056700860150158405, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/integration/test_scenarios.py", "lineno": 218, "message": "AssertionError: assert 'modified' == 'completed'\n  \n  - completed\n  + modified"}, "traceback": [{"path": "tests/integration/test_scenarios.py", "lineno": 218, "message": "AssertionError"}], "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.620765\", \"user_id\": \"privacy_officer\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers WHERE name = 'John Smith'\", \"metadata\": {\"policy_id\": \"compliance_audit_policy\", \"violation_details\": \"Purpose 'data_subject_request' is not in the list of required purposes: compliance_audit\"}, \"entry_id\": \"1747186745620-44e68ff759477b0c\", \"hmac\": \"8636bf6e48315f59aef1b012c7c16e721332e0cb7822d941e9de1608a754aaf9\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6208408, "msecs": 620.0, "relativeCreated": 631.7167282104492, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.624660\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers WHERE name = 'John Smith'\", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"data_subject_request\", \"metadata\": {\"execution_time_ms\": 2, \"query_id\": \"34189748-5b50-41aa-85e4-c6456b33e768\"}, \"entry_id\": \"1747186745624-c4463f6cde570765\", \"previous_hash\": \"8636bf6e48315f59aef1b012c7c16e721332e0cb7822d941e9de1608a754aaf9\", \"hmac\": \"e63a9aa2e371437419a21baa4f1a58c3e8903e45146620b727a55087a9cb0867\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6247375, "msecs": 624.0, "relativeCreated": 635.6134414672852, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}], "longrepr": "self = <tests.integration.test_scenarios.TestUserScenarios object at 0x7f1159a60e90>\nprivacy_system = {'anonymizer': <privacy_query_interpreter.anonymization.anonymizer.DataAnonymizer object at 0x7f115996df40>, 'detector...15996dfd0>, 'engine': <privacy_query_interpreter.query_engine.engine.PrivacyQueryEngine object at 0x7f115996ef60>, ...}\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_scenario_data_subject_access_request(self, privacy_system, sample_data):\n        \"\"\"\n        Test scenario: Responding to a data subject access request.\n    \n        In this scenario, a data privacy officer locates all personal data\n        for a specific individual across multiple systems.\n        \"\"\"\n        engine = privacy_system[\"engine\"]\n    \n        # Set up user context for DSAR\n        user_context = {\n            \"user_id\": \"privacy_officer\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"data_subject_request\"\n        }\n    \n        # 1. Find personal data for a specific person\n        # First in customers table\n        result = engine.execute_query(\n            query=\"SELECT * FROM customers WHERE name = 'John Smith'\",\n            user_context=user_context\n        )\n    \n        # Should succeed and return data\n>       assert result[\"status\"] == \"completed\"\nE       AssertionError: assert 'modified' == 'completed'\nE         \nE         - completed\nE         + modified\n\ntests/integration/test_scenarios.py:218: AssertionError"}, "teardown": {"duration": 0.000158025068230927, "outcome": "passed"}}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_compliance_audit", "lineno": 257, "outcome": "failed", "keywords": ["test_scenario_compliance_audit", "TestUserScenarios", "test_scenarios.py", "integration", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.001384800998494029, "outcome": "passed"}, "call": {"duration": 0.0059491300489753485, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/integration/test_scenarios.py", "lineno": 283, "message": "AssertionError: assert 'modified' == 'completed'\n  \n  - completed\n  + modified"}, "traceback": [{"path": "tests/integration/test_scenarios.py", "lineno": 283, "message": "AssertionError"}], "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.646488\", \"user_id\": \"auditor\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT COUNT(*) as count FROM customers WHERE ssn IS NOT NULL\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"None of the user's roles ['compliance_auditor'] are in the allowed list: data_privacy_officer\"}, \"entry_id\": \"1747186745646-050e72f003905b48\", \"hmac\": \"63e97b0e64cacbd6d52e1f02bf56a5e205195e93c5367383cfe243496fcb27c3\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6465619, "msecs": 646.0, "relativeCreated": 657.437801361084, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.650193\", \"user_id\": \"auditor\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT COUNT(*) as count FROM customers WHERE ssn IS NOT NULL\", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 2, \"query_id\": \"eeb1e375-63be-4a44-b56d-bd58ef58b718\"}, \"entry_id\": \"1747186745650-150012df31fc756c\", \"previous_hash\": \"63e97b0e64cacbd6d52e1f02bf56a5e205195e93c5367383cfe243496fcb27c3\", \"hmac\": \"fb6cd6d9102449165c42ae22c56e6e4e0a9d4ede684ae4a2c5a2479e287297cd\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6502705, "msecs": 650.0, "relativeCreated": 661.1464023590088, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}], "longrepr": "self = <tests.integration.test_scenarios.TestUserScenarios object at 0x7f1159a610d0>\nprivacy_system = {'anonymizer': <privacy_query_interpreter.anonymization.anonymizer.DataAnonymizer object at 0x7f11599e96d0>, 'detector...15996ddc0>, 'engine': <privacy_query_interpreter.query_engine.engine.PrivacyQueryEngine object at 0x7f115996e690>, ...}\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_scenario_compliance_audit(self, privacy_system, sample_data):\n        \"\"\"\n        Test scenario: Performing a compliance audit.\n    \n        In this scenario, a compliance auditor reviews data processing activities\n        and verifies compliance with privacy regulations.\n        \"\"\"\n        engine = privacy_system[\"engine\"]\n        logger = privacy_system[\"logger\"]\n        log_file = privacy_system[\"log_file\"]\n    \n        # Set up user context for compliance audit\n        user_context = {\n            \"user_id\": \"auditor\",\n            \"roles\": [\"compliance_auditor\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        # 1. Check for high-risk data\n        result = engine.execute_query(\n            query=\"SELECT COUNT(*) as count FROM customers WHERE ssn IS NOT NULL\",\n            user_context=user_context\n        )\n    \n        # Should succeed\n>       assert result[\"status\"] == \"completed\"\nE       AssertionError: assert 'modified' == 'completed'\nE         \nE         - completed\nE         + modified\n\ntests/integration/test_scenarios.py:283: AssertionError"}, "teardown": {"duration": 0.0001505849650129676, "outcome": "passed"}}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_investigation", "lineno": 325, "outcome": "passed", "keywords": ["test_scenario_investigation", "TestUserScenarios", "test_scenarios.py", "integration", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0014874410117045045, "outcome": "passed"}, "call": {"duration": 0.014144325046800077, "outcome": "passed", "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.672246\", \"user_id\": \"analyst\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT customer_segment, COUNT(*) as count FROM customers GROUP BY customer_segment\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"None of the user's roles ['data_analyst'] are in the allowed list: data_privacy_officer\"}, \"entry_id\": \"1747186745672-295e66c103fd07cf\", \"hmac\": \"6e6b8834fd97601b30e619346a45f6291372c29a5bb50a46d0ceea1e14506ab2\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6723213, "msecs": 672.0, "relativeCreated": 683.1972599029541, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.673910\", \"user_id\": \"analyst\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT customer_segment, COUNT(*) as count FROM customers GROUP BY customer_segment\", \"fields_accessed\": [\"customer_segment\", \"join_date\"], \"purpose\": \"analytics\", \"metadata\": {\"execution_time_ms\": 2, \"query_id\": \"d6ea1bfd-974c-4fd3-84eb-55eddfcb64f4\"}, \"entry_id\": \"1747186745673-6f577fb51418bd11\", \"previous_hash\": \"6e6b8834fd97601b30e619346a45f6291372c29a5bb50a46d0ceea1e14506ab2\", \"hmac\": \"2423577cead20a7ed711e28a3b31d3c4aa42773fd44a4ecb33140af063391632\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6739924, "msecs": 673.0, "relativeCreated": 684.868335723877, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.675566\", \"user_id\": \"analyst\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT customer_segment, COUNT(*) as count FROM customers GROUP BY customer_segment\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"None of the user's roles ['data_analyst'] are in the allowed list: data_privacy_officer\"}, \"entry_id\": \"1747186745675-a6236b8fab57fbd2\", \"previous_hash\": \"2423577cead20a7ed711e28a3b31d3c4aa42773fd44a4ecb33140af063391632\", \"hmac\": \"f79a8fad23bedccee33e1cb8545261a8ef3d8bb6644faa1d9c8c9d2b38fc3638\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6756363, "msecs": 675.0, "relativeCreated": 686.5122318267822, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.677298\", \"user_id\": \"analyst\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT customer_segment, COUNT(*) as count FROM customers GROUP BY customer_segment\", \"fields_accessed\": [\"customer_segment\", \"join_date\"], \"purpose\": \"analytics\", \"metadata\": {\"execution_time_ms\": 2, \"query_id\": \"43e08e54-37d5-4dad-b40f-baa69cc89d26\"}, \"entry_id\": \"1747186745677-87f3a23eeffbbfa7\", \"previous_hash\": \"f79a8fad23bedccee33e1cb8545261a8ef3d8bb6644faa1d9c8c9d2b38fc3638\", \"hmac\": \"8fa5ca967b8ab68df84011ca026119064e6a4394be26cb648eb7dc48a21b8124\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6773946, "msecs": 677.0, "relativeCreated": 688.2705688476562, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.679059\", \"user_id\": \"analyst\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT customer_segment, COUNT(*) as count FROM customers GROUP BY customer_segment\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"None of the user's roles ['data_analyst'] are in the allowed list: data_privacy_officer\"}, \"entry_id\": \"1747186745679-e6072a57c29c90fc\", \"previous_hash\": \"8fa5ca967b8ab68df84011ca026119064e6a4394be26cb648eb7dc48a21b8124\", \"hmac\": \"619cb8f00782230e2d8ff9d75e681ab8bdcc91bebf2249650dbe3136b502aaca\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6791334, "msecs": 679.0, "relativeCreated": 690.009355545044, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.680708\", \"user_id\": \"analyst\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT customer_segment, COUNT(*) as count FROM customers GROUP BY customer_segment\", \"fields_accessed\": [\"customer_segment\", \"join_date\"], \"purpose\": \"analytics\", \"metadata\": {\"execution_time_ms\": 2, \"query_id\": \"657d8631-23b0-4766-808b-980758d467d9\"}, \"entry_id\": \"1747186745680-9b58f1ce7b66bad6\", \"previous_hash\": \"619cb8f00782230e2d8ff9d75e681ab8bdcc91bebf2249650dbe3136b502aaca\", \"hmac\": \"fafc63e98ecf76e0497fff557b7ada3ebeb31bbf5dda5ba3c21fe80a9cc479c0\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.680788, "msecs": 680.0, "relativeCreated": 691.6639804840088, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.681936\", \"user_id\": \"analyst\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT name, ssn, credit_card FROM customers\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"None of the user's roles ['data_analyst'] are in the allowed list: data_privacy_officer\"}, \"entry_id\": \"1747186745681-e620a1004aa8c42b\", \"previous_hash\": \"fafc63e98ecf76e0497fff557b7ada3ebeb31bbf5dda5ba3c21fe80a9cc479c0\", \"hmac\": \"6bb3876e9d107aeaa2a3ac8070f4cff3a41701cebff56587104e00b1530c4b9a\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.682007, "msecs": 682.0, "relativeCreated": 692.8830146789551, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.683562\", \"user_id\": \"analyst\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT name, ssn, credit_card FROM customers\", \"fields_accessed\": [\"customer_segment\", \"join_date\"], \"purpose\": \"analytics\", \"metadata\": {\"execution_time_ms\": 1, \"query_id\": \"cba00f84-7263-4df1-8dca-3e0388483223\"}, \"entry_id\": \"1747186745683-8c196d263205c6f0\", \"previous_hash\": \"6bb3876e9d107aeaa2a3ac8070f4cff3a41701cebff56587104e00b1530c4b9a\", \"hmac\": \"f30901ae6beb9402ddfd5b069b6a28c91dbca4a85f07b48e639bd71dd1a86003\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6836407, "msecs": 683.0, "relativeCreated": 694.516658782959, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.684815\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"\", \"outcome\": \"error\", \"level\": \"info\", \"contains_pii\": false, \"query\": \"SELECT entry_id, timestamp, user_id, outcome FROM access_logs WHERE outcome = 'violation'\", \"purpose\": \"compliance_audit\", \"metadata\": {\"error\": \"Tables not found: access_logs\", \"execution_time_ms\": 0, \"query_id\": \"09d67518-ac45-43e8-b732-7303908e7092\"}, \"entry_id\": \"1747186745684-cc87f15c59b80a96\", \"previous_hash\": \"f30901ae6beb9402ddfd5b069b6a28c91dbca4a85f07b48e639bd71dd1a86003\", \"hmac\": \"cc046120bb74cf04b8fd62b9394afbc735385b8da155a0025c4e8c1ea140eec0\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6848862, "msecs": 684.0, "relativeCreated": 695.7621574401855, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}]}, "teardown": {"duration": 0.00013666402082890272, "outcome": "passed"}}, {"nodeid": "tests/integration/test_scenarios.py::TestUserScenarios::test_scenario_privacy_compliance_report", "lineno": 383, "outcome": "failed", "keywords": ["test_scenario_privacy_compliance_report", "TestUserScenarios", "test_scenarios.py", "integration", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0016246730228886008, "outcome": "passed"}, "call": {"duration": 0.03065431397408247, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/integration/test_scenarios.py", "lineno": 441, "message": "AssertionError: assert 'modified' == 'completed'\n  \n  - completed\n  + modified"}, "traceback": [{"path": "tests/integration/test_scenarios.py", "lineno": 441, "message": "AssertionError"}], "log": [{"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.694970\", \"user_id\": \"privacy_officer\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers LIMIT 1\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"Purpose 'compliance_audit' is not in the list of required purposes: data_subject_request\"}, \"entry_id\": \"1747186745694-c287a0cde28051e2\", \"hmac\": \"cdcbc0a9a7f3dafba9281b94350de1bbeb8e915b2420a9c7427138619f119a42\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6950448, "msecs": 695.0, "relativeCreated": 705.9206962585449, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.698703\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers LIMIT 1\", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 1, \"query_id\": \"c52169b9-0c01-4241-a93c-57ad09e1d8fc\"}, \"entry_id\": \"1747186745698-82afb3252ed75c68\", \"previous_hash\": \"cdcbc0a9a7f3dafba9281b94350de1bbeb8e915b2420a9c7427138619f119a42\", \"hmac\": \"f4df7d470b3f62c4c4d4b36bb03b12bf0b4a82685dff1dbd1c378837e0a4e615\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6987827, "msecs": 698.0, "relativeCreated": 709.6586227416992, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.699921\", \"user_id\": \"privacy_officer\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers LIMIT 2\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"Purpose 'compliance_audit' is not in the list of required purposes: data_subject_request\"}, \"entry_id\": \"1747186745699-48a9af7df720a1f4\", \"previous_hash\": \"f4df7d470b3f62c4c4d4b36bb03b12bf0b4a82685dff1dbd1c378837e0a4e615\", \"hmac\": \"9797018a69660021e214209c9279116e8ad399fd0907aec95356e972460ea219\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.6999912, "msecs": 699.0, "relativeCreated": 710.867166519165, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.703573\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers LIMIT 2\", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 1, \"query_id\": \"f6fcb8b9-ffa8-4b06-880d-f2c2ca6f8941\"}, \"entry_id\": \"1747186745703-2df38f3bae6afff6\", \"previous_hash\": \"9797018a69660021e214209c9279116e8ad399fd0907aec95356e972460ea219\", \"hmac\": \"4feb792de09f19225e540a4943be33b4fd1a16e4e88749f6bef4d076665ee38e\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.7036529, "msecs": 703.0, "relativeCreated": 714.5287990570068, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.704917\", \"user_id\": \"privacy_officer\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers LIMIT 3\", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"Purpose 'compliance_audit' is not in the list of required purposes: data_subject_request\"}, \"entry_id\": \"1747186745704-94329ec5baa69ffb\", \"previous_hash\": \"4feb792de09f19225e540a4943be33b4fd1a16e4e88749f6bef4d076665ee38e\", \"hmac\": \"04df7d0cab5f782fec119f6dd1de277a60a39f003353d588fd80c8f09957e420\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.7049878, "msecs": 704.0, "relativeCreated": 715.8637046813965, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.708600\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"SELECT * FROM customers LIMIT 3\", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 1, \"query_id\": \"c84e6b82-b548-42d2-a6eb-1ad03a0bbd06\"}, \"entry_id\": \"1747186745708-7b7dd1391770490f\", \"previous_hash\": \"04df7d0cab5f782fec119f6dd1de277a60a39f003353d588fd80c8f09957e420\", \"hmac\": \"87317c4ade37b719619d1bbb6c12ebb52c3cf5065a83e4bcded8616cfc320db2\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.7086787, "msecs": 708.0, "relativeCreated": 719.5546627044678, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.713323\", \"user_id\": \"privacy_officer\", \"access_type\": \"policy_check\", \"data_source\": \"customers\", \"outcome\": \"violation\", \"level\": \"alert\", \"contains_pii\": true, \"query\": \"\\n                SELECT \\n                    SUM(CASE WHEN ssn IS NOT NULL THEN 1 ELSE 0 END) as ssn_count,\\n                    SUM(CASE WHEN credit_card IS NOT NULL THEN 1 ELSE 0 END) as cc_count\\n                FROM customers\\n            \", \"metadata\": {\"policy_id\": \"dsar_policy\", \"violation_details\": \"Purpose 'compliance_audit' is not in the list of required purposes: data_subject_request\"}, \"entry_id\": \"1747186745713-d2022cf80ad3205d\", \"previous_hash\": \"87317c4ade37b719619d1bbb6c12ebb52c3cf5065a83e4bcded8616cfc320db2\", \"hmac\": \"b8d2bb977ba8fdfdc5f24377a346eb4d030c0f8f796351230a5a3c22169c20e2\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.713399, "msecs": 713.0, "relativeCreated": 724.2748737335205, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}, {"name": "privacy_access_logger", "msg": "{\"timestamp\": \"2025-05-14T01:39:05.717003\", \"user_id\": \"privacy_officer\", \"access_type\": \"query_execution\", \"data_source\": \"customers\", \"outcome\": \"minimized\", \"level\": \"attention\", \"contains_pii\": true, \"query\": \"\\n                SELECT \\n                    SUM(CASE WHEN ssn IS NOT NULL THEN 1 ELSE 0 END) as ssn_count,\\n                    SUM(CASE WHEN credit_card IS NOT NULL THEN 1 ELSE 0 END) as cc_count\\n                FROM customers\\n            \", \"fields_accessed\": [\"id\", \"name\", \"email\", \"phone\", \"ssn\", \"address\", \"credit_card\", \"customer_segment\", \"join_date\"], \"purpose\": \"compliance_audit\", \"metadata\": {\"execution_time_ms\": 4, \"query_id\": \"04c4b2fe-6760-4633-9b6a-8399acf8b0a1\"}, \"entry_id\": \"1747186745717-822be90fa1a48e72\", \"previous_hash\": \"b8d2bb977ba8fdfdc5f24377a346eb4d030c0f8f796351230a5a3c22169c20e2\", \"hmac\": \"bedd9e39a8430e69d291d16d2bb5d36d4bbeffe9f4ded68adb4c4543a1315294\"}", "args": null, "levelname": "INFO", "levelno": 20, "pathname": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/access_logging/logger.py", "filename": "logger.py", "module": "logger", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 773, "funcName": "_write_log_entry", "created": 1747186745.717085, "msecs": 717.0, "relativeCreated": 727.9608249664307, "thread": 139715290462016, "threadName": "MainThread", "processName": "MainProcess", "process": 374652, "taskName": null}], "longrepr": "self = <tests.integration.test_scenarios.TestUserScenarios object at 0x7f1159a613a0>\nprivacy_system = {'anonymizer': <privacy_query_interpreter.anonymization.anonymizer.DataAnonymizer object at 0x7f11599a6a80>, 'detector...1599a6ab0>, 'engine': <privacy_query_interpreter.query_engine.engine.PrivacyQueryEngine object at 0x7f11599a6660>, ...}\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_scenario_privacy_compliance_report(self, privacy_system, sample_data):\n        \"\"\"\n        Test scenario: Generating privacy compliance reports.\n    \n        In this scenario, a data privacy officer generates reports on data\n        processing activities and compliance status for management.\n        \"\"\"\n        # For this scenario, we'll focus on PII scanning and reporting\n        scanner = privacy_system[\"scanner\"]\n        engine = privacy_system[\"engine\"]\n    \n        # 1. Scan all data sources for PII\n        scan_results = scanner.scan_multiple_dataframes(sample_data)\n    \n        # 2. Generate a summary report\n        summary = scanner.generate_summary_report(scan_results)\n    \n        # Verify the summary has required sections\n        assert \"total_sources\" in summary\n        assert \"sources_with_pii\" in summary\n        assert \"pii_types_found\" in summary\n        assert \"pii_by_category\" in summary\n        assert \"high_risk_sources\" in summary\n    \n        # 3. Check data processing activities through query history\n        user_context = {\n            \"user_id\": \"privacy_officer\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        # Execute some queries to populate history\n        for i in range(3):\n            engine.execute_query(\n                query=f\"SELECT * FROM customers LIMIT {i+1}\",\n                user_context=user_context\n            )\n    \n        # Get query history\n        history = engine.get_query_history(user_id=\"privacy_officer\")\n    \n        # Verify history\n        assert len(history) >= 3\n        assert all(\"query\" in entry for entry in history)\n    \n        # 4. Count records with sensitive data\n        result = engine.execute_query(\n            query=\"\"\"\n                SELECT\n                    SUM(CASE WHEN ssn IS NOT NULL THEN 1 ELSE 0 END) as ssn_count,\n                    SUM(CASE WHEN credit_card IS NOT NULL THEN 1 ELSE 0 END) as cc_count\n                FROM customers\n            \"\"\",\n            user_context=user_context\n        )\n    \n        # Verify counts\n>       assert result[\"status\"] == \"completed\"\nE       AssertionError: assert 'modified' == 'completed'\nE         \nE         - completed\nE         + modified\n\ntests/integration/test_scenarios.py:441: AssertionError"}, "teardown": {"duration": 0.00015756499487906694, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_initialization", "lineno": 12, "outcome": "passed", "keywords": ["test_initialization", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00026963301934301853, "outcome": "passed"}, "call": {"duration": 0.00010314409155398607, "outcome": "passed"}, "teardown": {"duration": 7.885193917900324e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_string", "lineno": 24, "outcome": "failed", "keywords": ["test_detect_in_string", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.172006346285343e-05, "outcome": "passed"}, "call": {"duration": 0.0009384339209645987, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/pii_detection/test_detector.py", "lineno": 50, "message": "AssertionError: assert 1 == 0\n +  where 1 = len([PIIMatch(field_name='description', pii_type='username', category=<PIICategory.CREDENTIAL: 'credential'>, confidence=0.8, sample_value='This', match_count=1, sensitivity_level=1)])"}, "traceback": [{"path": "tests/pii_detection/test_detector.py", "lineno": 50, "message": "AssertionError"}], "longrepr": "self = <tests.pii_detection.test_detector.TestPIIDetector object at 0x7f1159a61fa0>\n\n    def test_detect_in_string(self):\n        \"\"\"Test PII detection in a single string.\"\"\"\n        detector = PIIDetector()\n    \n        # Test with valid email\n        email = \"test.user@example.com\"\n        matches = detector.detect_in_string(email, \"user_email\")\n        assert len(matches) > 0\n        assert any(match.pii_type == \"email\" for match in matches)\n    \n        # Test with valid SSN\n        ssn = \"123-45-6789\"\n        matches = detector.detect_in_string(ssn, \"social_security\")\n        assert len(matches) > 0\n        assert any(match.pii_type == \"ssn\" for match in matches)\n    \n        # Test with valid credit card\n        cc = \"4111-1111-1111-1111\"\n        matches = detector.detect_in_string(cc, \"payment_info\")\n        assert len(matches) > 0\n        assert any(match.pii_type == \"credit_card\" for match in matches)\n    \n        # Test with non-PII string\n        non_pii = \"This is a regular string\"\n        matches = detector.detect_in_string(non_pii, \"description\")\n>       assert len(matches) == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = len([PIIMatch(field_name='description', pii_type='username', category=<PIICategory.CREDENTIAL: 'credential'>, confidence=0.8, sample_value='This', match_count=1, sensitivity_level=1)])\n\ntests/pii_detection/test_detector.py:50: AssertionError"}, "teardown": {"duration": 0.00012636103201657534, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_series", "lineno": 51, "outcome": "failed", "keywords": ["test_detect_in_series", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009363789577037096, "outcome": "passed"}, "call": {"duration": 0.0014593240339308977, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/pii_detection/test_detector.py", "lineno": 71, "message": "AssertionError: assert 1 == 0\n +  where 1 = len([PIIMatch(field_name='segment', pii_type='username', category=<PIICategory.CREDENTIAL: 'credential'>, confidence=0.9, sample_value='Premium', match_count=5, sensitivity_level=1)])"}, "traceback": [{"path": "tests/pii_detection/test_detector.py", "lineno": 71, "message": "AssertionError"}], "longrepr": "self = <tests.pii_detection.test_detector.TestPIIDetector object at 0x7f1159a62120>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_detect_in_series(self, sample_data):\n        \"\"\"Test PII detection in a pandas Series.\"\"\"\n        detector = PIIDetector()\n    \n        # Test with email series\n        emails = sample_data[\"customers\"][\"email\"]\n        matches = detector._detect_in_series(emails, \"email\")\n        assert len(matches) > 0\n        assert any(match.pii_type == \"email\" for match in matches)\n    \n        # Test with SSN series\n        ssns = sample_data[\"customers\"][\"ssn\"]\n        matches = detector._detect_in_series(ssns, \"ssn\")\n        assert len(matches) > 0\n        assert any(match.pii_type == \"ssn\" for match in matches)\n    \n        # Test with non-PII series\n        non_pii = sample_data[\"customers\"][\"customer_segment\"]\n        matches = detector._detect_in_series(non_pii, \"segment\")\n>       assert len(matches) == 0\nE       AssertionError: assert 1 == 0\nE        +  where 1 = len([PIIMatch(field_name='segment', pii_type='username', category=<PIICategory.CREDENTIAL: 'credential'>, confidence=0.9, sample_value='Premium', match_count=5, sensitivity_level=1)])\n\ntests/pii_detection/test_detector.py:71: AssertionError"}, "teardown": {"duration": 0.00013070297427475452, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_dataframe", "lineno": 72, "outcome": "passed", "keywords": ["test_detect_in_dataframe", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009509429801255465, "outcome": "passed"}, "call": {"duration": 0.0030723459785804152, "outcome": "passed"}, "teardown": {"duration": 0.0001058230409398675, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_detect_in_dict", "lineno": 91, "outcome": "passed", "keywords": ["test_detect_in_dict", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.381398558616638e-05, "outcome": "passed"}, "call": {"duration": 0.0008885160787031054, "outcome": "passed"}, "teardown": {"duration": 8.343800436705351e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_is_pii_field", "lineno": 113, "outcome": "failed", "keywords": ["test_is_pii_field", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.917697075754404e-05, "outcome": "passed"}, "call": {"duration": 0.0004552059108391404, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/pii_detection/test_detector.py", "lineno": 125, "message": "assert False is True"}, "traceback": [{"path": "tests/pii_detection/test_detector.py", "lineno": 125, "message": "AssertionError"}], "longrepr": "self = <tests.pii_detection.test_detector.TestPIIDetector object at 0x7f1159a625a0>\n\n    def test_is_pii_field(self):\n        \"\"\"Test PII field detection based on name and sample.\"\"\"\n        detector = PIIDetector()\n    \n        # Test with obvious field names\n        is_pii, pii_type, confidence = detector.is_pii_field(\"email\")\n        assert is_pii is True\n        assert pii_type == \"email\"\n        assert confidence > 0.7\n    \n        is_pii, pii_type, confidence = detector.is_pii_field(\"phone_number\")\n>       assert is_pii is True\nE       assert False is True\n\ntests/pii_detection/test_detector.py:125: AssertionError"}, "teardown": {"duration": 0.00011414301116019487, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_luhn_check", "lineno": 139, "outcome": "failed", "keywords": ["test_luhn_check", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.752301800996065e-05, "outcome": "passed"}, "call": {"duration": 0.00018642505165189505, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/pii_detection/test_detector.py", "lineno": 151, "message": "AssertionError: assert True is False\n +  where True = <function luhn_check at 0x7f115ad50fe0>('1111-2222-3333-4444')"}, "traceback": [{"path": "tests/pii_detection/test_detector.py", "lineno": 151, "message": "AssertionError"}], "longrepr": "self = <tests.pii_detection.test_detector.TestPIIDetector object at 0x7f1159a62720>\n\n    def test_luhn_check(self):\n        \"\"\"Test credit card Luhn check algorithm.\"\"\"\n        from privacy_query_interpreter.pii_detection.patterns import luhn_check\n    \n        # Valid credit card numbers\n        assert luhn_check(\"4111111111111111\") is True\n        assert luhn_check(\"4111-1111-1111-1111\") is True\n        assert luhn_check(\"5555 5555 5555 4444\") is True\n    \n        # Invalid credit card numbers\n        assert luhn_check(\"1234567890123456\") is False\n>       assert luhn_check(\"1111-2222-3333-4444\") is False\nE       AssertionError: assert True is False\nE        +  where True = <function luhn_check at 0x7f115ad50fe0>('1111-2222-3333-4444')\n\ntests/pii_detection/test_detector.py:151: AssertionError"}, "teardown": {"duration": 0.00012479897122830153, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_field_context_scores", "lineno": 158, "outcome": "passed", "keywords": ["test_field_context_scores", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.073503315448761e-05, "outcome": "passed"}, "call": {"duration": 0.0005322149954736233, "outcome": "passed"}, "teardown": {"duration": 8.507398888468742e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_custom_patterns", "lineno": 174, "outcome": "passed", "keywords": ["test_custom_patterns", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.824809290468693e-05, "outcome": "passed"}, "call": {"duration": 0.0006493059918284416, "outcome": "passed"}, "teardown": {"duration": 8.88829817995429e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_get_pattern_info", "lineno": 211, "outcome": "passed", "keywords": ["test_get_pattern_info", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.414301555603743e-05, "outcome": "passed"}, "call": {"duration": 9.261502418667078e-05, "outcome": "passed"}, "teardown": {"duration": 7.594993803650141e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_detector.py::TestPIIDetector::test_get_all_patterns", "lineno": 225, "outcome": "passed", "keywords": ["test_get_all_patterns", "TestPIIDetector", "test_detector.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.705297321081161e-05, "outcome": "passed"}, "call": {"duration": 0.00010434398427605629, "outcome": "passed"}, "teardown": {"duration": 7.552595343440771e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_initialization", "lineno": 16, "outcome": "passed", "keywords": ["test_initialization", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00010164699051529169, "outcome": "passed"}, "call": {"duration": 0.00011269596870988607, "outcome": "passed"}, "teardown": {"duration": 7.691106293350458e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_dataframe", "lineno": 30, "outcome": "passed", "keywords": ["test_scan_dataframe", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009446929907426238, "outcome": "passed"}, "call": {"duration": 0.0031349080381914973, "outcome": "passed"}, "teardown": {"duration": 0.00010667904280126095, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_csv_file", "lineno": 62, "outcome": "passed", "keywords": ["test_scan_csv_file", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00117518100887537, "outcome": "passed"}, "call": {"duration": 0.005054937908425927, "outcome": "passed"}, "teardown": {"duration": 0.00011910998728126287, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_nonexistent_csv_file", "lineno": 90, "outcome": "passed", "keywords": ["test_scan_nonexistent_csv_file", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.394099470227957e-05, "outcome": "passed"}, "call": {"duration": 0.0001231050118803978, "outcome": "passed"}, "teardown": {"duration": 8.361996151506901e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_multiple_dataframes", "lineno": 98, "outcome": "passed", "keywords": ["test_scan_multiple_dataframes", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009229060960933566, "outcome": "passed"}, "call": {"duration": 0.0072523209964856505, "outcome": "passed"}, "teardown": {"duration": 9.952497202903032e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_scan_multiple_csv_files", "lineno": 127, "outcome": "passed", "keywords": ["test_scan_multiple_csv_files", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.001174430944956839, "outcome": "passed"}, "call": {"duration": 0.012908176984637976, "outcome": "passed"}, "teardown": {"duration": 0.00012396497186273336, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_generate_summary_report", "lineno": 153, "outcome": "passed", "keywords": ["test_generate_summary_report", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009623590158298612, "outcome": "passed"}, "call": {"duration": 0.006760214921087027, "outcome": "passed"}, "teardown": {"duration": 0.00010644004214555025, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_error_handling", "lineno": 186, "outcome": "passed", "keywords": ["test_error_handling", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.309407323598862e-05, "outcome": "passed"}, "call": {"duration": 0.000565972994081676, "outcome": "passed"}, "teardown": {"duration": 9.422493167221546e-05, "outcome": "passed"}}, {"nodeid": "tests/pii_detection/test_scanner.py::TestPIIScanner::test_parallel_execution", "lineno": 205, "outcome": "passed", "keywords": ["test_parallel_execution", "TestPIIScanner", "test_scanner.py", "pii_detection", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009350239997729659, "outcome": "passed"}, "call": {"duration": 0.013324711937457323, "outcome": "passed"}, "teardown": {"duration": 0.00011321192141622305, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_initialization", "lineno": 18, "outcome": "passed", "keywords": ["test_initialization", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0002803780371323228, "outcome": "passed"}, "call": {"duration": 0.00022888509556651115, "outcome": "passed"}, "teardown": {"duration": 8.725200314074755e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_query", "lineno": 46, "outcome": "failed", "keywords": ["test_enforce_query", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.372403681278229e-05, "outcome": "passed"}, "call": {"duration": 0.0005328009137883782, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/policy_enforcement/test_enforcer.py", "lineno": 137, "message": "AssertionError: assert 'name, ssn, health_condition' in 'Prohibited combination of fields: health_condition, name, ssn'"}, "traceback": [{"path": "tests/policy_enforcement/test_enforcer.py", "lineno": 137, "message": "AssertionError"}], "longrepr": "self = <tests.policy_enforcement.test_enforcer.TestPolicyEnforcer object at 0x7f1159ad15b0>\n\n    def test_enforce_query(self):\n        \"\"\"Test enforcing policies on a query.\"\"\"\n        # Create test policies\n        test_policies = [\n            # Policy requiring specific role\n            DataPolicy(\n                id=\"role_policy\",\n                name=\"Role Restriction\",\n                description=\"Requires specific role\",\n                policy_type=PolicyType.FIELD_ACCESS,\n                action=PolicyAction.DENY,\n                allowed_roles=[\"data_privacy_officer\"]\n            ),\n            # Policy requiring specific purpose\n            DataPolicy(\n                id=\"purpose_policy\",\n                name=\"Purpose Restriction\",\n                description=\"Requires specific purpose\",\n                policy_type=PolicyType.PURPOSE_LIMITATION,\n                action=PolicyAction.MINIMIZE,\n                required_purpose=[\"compliance_audit\"]\n            ),\n            # Policy restricting field combinations\n            DataPolicy(\n                id=\"combination_policy\",\n                name=\"Field Combination Restriction\",\n                description=\"Prevents sensitive combinations\",\n                policy_type=PolicyType.DATA_COMBINATION,\n                action=PolicyAction.ANONYMIZE,\n                prohibited_combinations=[\n                    FieldCombination(\n                        fields=[\"name\", \"ssn\", \"health_condition\"],\n                        threshold=3\n                    )\n                ]\n            )\n        ]\n    \n        policy_set = PolicySet(\n            name=\"Test Policies\",\n            description=\"Test policy set\",\n            policies=test_policies\n        )\n    \n        # Create mock logger\n        mock_logger = Mock(spec=AccessLogger)\n    \n        # Create the enforcer\n        enforcer = PolicyEnforcer(\n            policies=policy_set,\n            access_logger=mock_logger\n        )\n    \n        # Test with appropriate role and purpose\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        # Query accessing a safe combination of fields\n        is_allowed, action, policy, reason = enforcer.enforce_query(\n            query_text=\"SELECT name, email FROM customers\",\n            fields=[\"name\", \"email\"],\n            data_sources=[\"customers\"],\n            joins=[],\n            user_context=user_context\n        )\n    \n        # Should be allowed\n        assert is_allowed is True\n        assert action == PolicyAction.ALLOW\n        assert policy is None\n        assert reason is None\n    \n        # Test with a sensitive combination of fields\n        is_allowed, action, policy, reason = enforcer.enforce_query(\n            query_text=\"SELECT name, ssn, health_condition FROM customers JOIN health_data\",\n            fields=[\"name\", \"ssn\", \"health_condition\"],\n            data_sources=[\"customers\", \"health_data\"],\n            joins=[(\"customers\", \"health_data\")],\n            user_context=user_context\n        )\n    \n        # Should trigger the combination policy\n        assert is_allowed is False\n        assert action == PolicyAction.ANONYMIZE\n        assert policy is not None\n        assert policy.id == \"combination_policy\"\n        assert reason is not None\n>       assert \"name, ssn, health_condition\" in reason\nE       AssertionError: assert 'name, ssn, health_condition' in 'Prohibited combination of fields: health_condition, name, ssn'\n\ntests/policy_enforcement/test_enforcer.py:137: AssertionError"}, "teardown": {"duration": 0.00011950405314564705, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_field_access", "lineno": 164, "outcome": "failed", "keywords": ["test_enforce_field_access", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.85319896042347e-05, "outcome": "passed"}, "call": {"duration": 0.00025998405180871487, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/policy_enforcement/test_enforcer.py", "lineno": 214, "message": "AssertionError: assert <PolicyAction...: 'anonymize'> == <PolicyAction.DENY: 'deny'>\n  \n  - deny\n  + anonymize"}, "traceback": [{"path": "tests/policy_enforcement/test_enforcer.py", "lineno": 214, "message": "AssertionError"}], "longrepr": "self = <tests.policy_enforcement.test_enforcer.TestPolicyEnforcer object at 0x7f1159ad1730>\n\n    def test_enforce_field_access(self):\n        \"\"\"Test enforcing field-level access policies.\"\"\"\n        # Create test policies for field access\n        test_policies = [\n            # Policy restricting specific fields\n            DataPolicy(\n                id=\"field_policy\",\n                name=\"Sensitive Field Restriction\",\n                description=\"Restricts sensitive fields\",\n                policy_type=PolicyType.FIELD_ACCESS,\n                action=PolicyAction.DENY,\n                restricted_fields=[\"ssn\", \"credit_card\"]\n            ),\n            # Policy requiring anonymization for certain fields\n            DataPolicy(\n                id=\"anonymization_policy\",\n                name=\"Field Anonymization\",\n                description=\"Requires anonymization for certain fields\",\n                policy_type=PolicyType.FIELD_ACCESS,\n                action=PolicyAction.ANONYMIZE,\n                restricted_fields=[\"phone\", \"address\"]\n            )\n        ]\n    \n        policy_set = PolicySet(\n            name=\"Test Policies\",\n            description=\"Test policy set\",\n            policies=test_policies\n        )\n    \n        # Create the enforcer\n        enforcer = PolicyEnforcer(policies=policy_set)\n    \n        # Test with a list of fields\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        fields = [\"name\", \"email\", \"ssn\", \"credit_card\", \"phone\", \"address\"]\n    \n        allowed_fields, denied_fields, action, reason = enforcer.enforce_field_access(\n            fields=fields,\n            data_source=\"customers\",\n            user_context=user_context\n        )\n    \n        # Should apply the most restrictive policy (DENY takes precedence over ANONYMIZE)\n>       assert action == PolicyAction.DENY\nE       AssertionError: assert <PolicyAction...: 'anonymize'> == <PolicyAction.DENY: 'deny'>\nE         \nE         - deny\nE         + anonymize\n\ntests/policy_enforcement/test_enforcer.py:214: AssertionError"}, "teardown": {"duration": 0.00011898402590304613, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_data_combination", "lineno": 225, "outcome": "failed", "keywords": ["test_enforce_data_combination", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.158405009657145e-05, "outcome": "passed"}, "call": {"duration": 0.00020706607028841972, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/policy_enforcement/test_enforcer.py", "lineno": 289, "message": "assert False is True"}, "traceback": [{"path": "tests/policy_enforcement/test_enforcer.py", "lineno": 289, "message": "AssertionError"}], "longrepr": "self = <tests.policy_enforcement.test_enforcer.TestPolicyEnforcer object at 0x7f1159ad18b0>\n\n    def test_enforce_data_combination(self):\n        \"\"\"Test enforcing data combination policies.\"\"\"\n        # Create test policies for data combinations\n        test_policies = [\n            # Policy restricting combinations of direct identifiers and sensitive data\n            DataPolicy(\n                id=\"combination_policy\",\n                name=\"Sensitive Combination Restriction\",\n                description=\"Prevents combining identifiers with sensitive data\",\n                policy_type=PolicyType.DATA_COMBINATION,\n                action=PolicyAction.DENY,\n                prohibited_combinations=[\n                    FieldCombination(\n                        categories=[FieldCategory.DIRECT_IDENTIFIER, FieldCategory.HEALTH],\n                        threshold=2\n                    )\n                ]\n            ),\n            # Policy limiting the number of sensitive fields\n            DataPolicy(\n                id=\"sensitive_limit_policy\",\n                name=\"Sensitive Field Limit\",\n                description=\"Limits the number of sensitive fields\",\n                policy_type=PolicyType.DATA_COMBINATION,\n                action=PolicyAction.MINIMIZE,\n                max_sensitive_fields=2,\n                sensitive_fields=[\"ssn\", \"credit_card\", \"health_condition\", \"income\"]\n            )\n        ]\n    \n        policy_set = PolicySet(\n            name=\"Test Policies\",\n            description=\"Test policy set\",\n            policies=test_policies\n        )\n    \n        # Create field category mappings\n        field_categories = {\n            \"name\": [FieldCategory.DIRECT_IDENTIFIER],\n            \"email\": [FieldCategory.DIRECT_IDENTIFIER],\n            \"health_condition\": [FieldCategory.HEALTH, FieldCategory.SENSITIVE],\n            \"treatment\": [FieldCategory.HEALTH]\n        }\n    \n        # Create the enforcer\n        enforcer = PolicyEnforcer(\n            policies=policy_set,\n            field_categories=field_categories\n        )\n    \n        # Test with safe combination of fields\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        is_allowed, action, reason = enforcer.enforce_data_combination(\n            fields=[\"name\", \"email\"],\n            user_context=user_context\n        )\n    \n        # Should be allowed (all within same category)\n>       assert is_allowed is True\nE       assert False is True\n\ntests/policy_enforcement/test_enforcer.py:289: AssertionError"}, "teardown": {"duration": 0.00011912791524082422, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_enforce_data_source_access", "lineno": 316, "outcome": "passed", "keywords": ["test_enforce_data_source_access", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.293400216847658e-05, "outcome": "passed"}, "call": {"duration": 0.00014597305562347174, "outcome": "passed"}, "teardown": {"duration": 7.964903488755226e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_categorize_fields", "lineno": 393, "outcome": "passed", "keywords": ["test_categorize_fields", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.918593473732471e-05, "outcome": "passed"}, "call": {"duration": 0.00045228993985801935, "outcome": "passed"}, "teardown": {"duration": 8.621497545391321e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_add_field_category", "lineno": 459, "outcome": "passed", "keywords": ["test_add_field_category", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.351996075361967e-05, "outcome": "passed"}, "call": {"duration": 0.00010271696373820305, "outcome": "passed"}, "teardown": {"duration": 8.378294296562672e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_add_policy", "lineno": 484, "outcome": "passed", "keywords": ["test_add_policy", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.738103158771992e-05, "outcome": "passed"}, "call": {"duration": 0.00010476296301931143, "outcome": "passed"}, "teardown": {"duration": 7.526192348450422e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_enforcer.py::TestPolicyEnforcer::test_load_policies", "lineno": 504, "outcome": "passed", "keywords": ["test_load_policies", "TestPolicyEnforcer", "test_enforcer.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.910591714084148e-05, "outcome": "passed"}, "call": {"duration": 0.00011804094538092613, "outcome": "passed"}, "teardown": {"duration": 7.823598571121693e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_type_enum", "lineno": 14, "outcome": "passed", "keywords": ["test_policy_type_enum", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00010072602890431881, "outcome": "passed"}, "call": {"duration": 9.364797733724117e-05, "outcome": "passed"}, "teardown": {"duration": 7.683795411139727e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_action_enum", "lineno": 26, "outcome": "passed", "keywords": ["test_policy_action_enum", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.635692600160837e-05, "outcome": "passed"}, "call": {"duration": 8.669903036206961e-05, "outcome": "passed"}, "teardown": {"duration": 7.398601155728102e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_field_category_enum", "lineno": 36, "outcome": "passed", "keywords": ["test_field_category_enum", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.474608719348907e-05, "outcome": "passed"}, "call": {"duration": 8.559203706681728e-05, "outcome": "passed"}, "teardown": {"duration": 7.274292875081301e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_field_combination_validation", "lineno": 52, "outcome": "passed", "keywords": ["test_field_combination_validation", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.263198494911194e-05, "outcome": "passed"}, "call": {"duration": 0.00012645195238292217, "outcome": "passed"}, "teardown": {"duration": 7.776799611747265e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_data_policy_creation", "lineno": 75, "outcome": "passed", "keywords": ["test_data_policy_creation", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.752096280455589e-05, "outcome": "passed"}, "call": {"duration": 0.00012009195052087307, "outcome": "passed"}, "teardown": {"duration": 7.531989831477404e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_data_policy_to_dict", "lineno": 129, "outcome": "passed", "keywords": ["test_data_policy_to_dict", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.608493953943253e-05, "outcome": "passed"}, "call": {"duration": 0.0001329210354015231, "outcome": "passed"}, "teardown": {"duration": 7.571594323962927e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_data_policy_from_dict", "lineno": 155, "outcome": "passed", "keywords": ["test_data_policy_from_dict", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.83370342105627e-05, "outcome": "passed"}, "call": {"duration": 0.00013531395234167576, "outcome": "passed"}, "teardown": {"duration": 7.606693543493748e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_creation", "lineno": 180, "outcome": "passed", "keywords": ["test_policy_set_creation", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.211901877075434e-05, "outcome": "passed"}, "call": {"duration": 0.0001188559690490365, "outcome": "passed"}, "teardown": {"duration": 7.639301475137472e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_to_dict", "lineno": 229, "outcome": "passed", "keywords": ["test_policy_set_to_dict", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.629406172782183e-05, "outcome": "passed"}, "call": {"duration": 0.0001270161010324955, "outcome": "passed"}, "teardown": {"duration": 9.119499009102583e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_from_dict", "lineno": 258, "outcome": "passed", "keywords": ["test_policy_set_from_dict", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.722398731857538e-05, "outcome": "passed"}, "call": {"duration": 0.00010546203702688217, "outcome": "passed"}, "teardown": {"duration": 7.423397619277239e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_add_remove", "lineno": 286, "outcome": "passed", "keywords": ["test_policy_set_add_remove", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.332197856158018e-05, "outcome": "passed"}, "call": {"duration": 0.00013328995555639267, "outcome": "passed"}, "teardown": {"duration": 7.894693408161402e-05, "outcome": "passed"}}, {"nodeid": "tests/policy_enforcement/test_policy.py::TestPolicyDefinitions::test_policy_set_get_by_type", "lineno": 351, "outcome": "passed", "keywords": ["test_policy_set_get_by_type", "TestPolicyDefinitions", "test_policy.py", "policy_enforcement", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.78429675847292e-05, "outcome": "passed"}, "call": {"duration": 0.00011790799908339977, "outcome": "passed"}, "teardown": {"duration": 7.75590306147933e-05, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_initialization", "lineno": 19, "outcome": "passed", "keywords": ["test_initialization", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0002568929921835661, "outcome": "passed"}, "call": {"duration": 0.0006141000194475055, "outcome": "passed"}, "teardown": {"duration": 9.494693949818611e-05, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_simple_query", "lineno": 55, "outcome": "failed", "keywords": ["test_execute_simple_query", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009499290026724339, "outcome": "passed"}, "call": {"duration": 0.0022443600464612246, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_engine.py", "lineno": 79, "message": "AssertionError: assert 'executing' == 'completed'\n  \n  - completed\n  + executing"}, "traceback": [{"path": "tests/query_engine/test_engine.py", "lineno": 79, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_engine.TestPrivacyQueryEngine object at 0x7f11598fcb90>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_execute_simple_query(self, sample_data):\n        \"\"\"Test executing a simple query.\"\"\"\n        # Create engine with sample data\n        engine = PrivacyQueryEngine(data_sources={\n            \"customers\": sample_data[\"customers\"],\n            \"orders\": sample_data[\"orders\"]\n        })\n    \n        # Execute a simple query\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        result = engine.execute_query(\n            query=\"SELECT name, email FROM customers WHERE customer_segment = 'Premium'\",\n            user_context=user_context\n        )\n    \n        # Check the result structure\n        assert \"query_id\" in result\n        assert \"status\" in result\n>       assert result[\"status\"] == QueryStatus.COMPLETED.value\nE       AssertionError: assert 'executing' == 'completed'\nE         \nE         - completed\nE         + executing\n\ntests/query_engine/test_engine.py:79: AssertionError"}, "teardown": {"duration": 0.00013278995174914598, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_join", "lineno": 95, "outcome": "failed", "keywords": ["test_execute_query_with_join", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009499819716438651, "outcome": "passed"}, "call": {"duration": 0.003722788067534566, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_engine.py", "lineno": 122, "message": "AssertionError: assert 'failed' == 'completed'\n  \n  - completed\n  + failed"}, "traceback": [{"path": "tests/query_engine/test_engine.py", "lineno": 122, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_engine.TestPrivacyQueryEngine object at 0x7f11598fcd10>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_execute_query_with_join(self, sample_data):\n        \"\"\"Test executing a query with a JOIN.\"\"\"\n        # Create engine with sample data\n        engine = PrivacyQueryEngine(data_sources={\n            \"customers\": sample_data[\"customers\"],\n            \"orders\": sample_data[\"orders\"]\n        })\n    \n        # Execute a query with a join\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        result = engine.execute_query(\n            query=\"\"\"\n                SELECT c.name, o.product, o.amount\n                FROM customers c\n                JOIN orders o ON c.id = o.customer_id\n                WHERE o.amount > 500\n            \"\"\",\n            user_context=user_context\n        )\n    \n        # Check the result\n>       assert result[\"status\"] == QueryStatus.COMPLETED.value\nE       AssertionError: assert 'failed' == 'completed'\nE         \nE         - completed\nE         + failed\n\ntests/query_engine/test_engine.py:122: AssertionError"}, "teardown": {"duration": 0.0001391620608046651, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_policy_enforcement", "lineno": 129, "outcome": "passed", "keywords": ["test_execute_query_with_policy_enforcement", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0010138460202142596, "outcome": "passed"}, "call": {"duration": 0.0012689579743891954, "outcome": "passed"}, "teardown": {"duration": 0.00010632199700921774, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_minimization", "lineno": 176, "outcome": "passed", "keywords": ["test_execute_query_with_minimization", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009323430713266134, "outcome": "passed"}, "call": {"duration": 0.001979714957997203, "outcome": "passed"}, "teardown": {"duration": 0.00011339609045535326, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_anonymization", "lineno": 212, "outcome": "failed", "keywords": ["test_execute_query_with_anonymization", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009528431110084057, "outcome": "passed"}, "call": {"duration": 0.002995559014379978, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_engine.py", "lineno": 269, "message": "assert 9 == 3"}, "traceback": [{"path": "tests/query_engine/test_engine.py", "lineno": 269, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_engine.TestPrivacyQueryEngine object at 0x7f11598fd2b0>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_execute_query_with_anonymization(self, sample_data):\n        \"\"\"Test executing a query with anonymization.\"\"\"\n        # Mock policy enforcer that suggests anonymization\n        mock_enforcer = Mock(spec=PolicyEnforcer)\n        policy = DataPolicy(\n            id=\"anonymize_pii\",\n            name=\"Anonymize PII\",\n            description=\"Anonymizes PII fields\",\n            policy_type=PolicyType.FIELD_ACCESS,\n            action=PolicyAction.ANONYMIZE\n        )\n        mock_enforcer.enforce_query.return_value = (\n            False, PolicyAction.ANONYMIZE, policy, \"PII should be anonymized\"\n        )\n    \n        # Mock anonymizer\n        mock_anonymizer = Mock(spec=DataAnonymizer)\n    \n        def mock_anonymize_dataframe(df, config):\n            # Create a modified copy with \"ANONYMIZED\" prefixes\n            result = df.copy()\n            for col in df.columns:\n                if col in [\"name\", \"email\", \"phone\", \"ssn\", \"credit_card\"]:\n                    result[col] = result[col].apply(lambda x: f\"ANONYMIZED-{x}\")\n            return result\n    \n        mock_anonymizer.anonymize_dataframe.side_effect = mock_anonymize_dataframe\n        mock_anonymizer._create_anonymization_config = Mock(return_value={\n            \"name\": AnonymizationMethod.PSEUDONYMIZE,\n            \"email\": AnonymizationMethod.MASK,\n            \"phone\": AnonymizationMethod.MASK,\n            \"ssn\": AnonymizationMethod.REDACT,\n            \"credit_card\": AnonymizationMethod.MASK\n        })\n    \n        # Create engine with the mocks\n        engine = PrivacyQueryEngine(\n            data_sources={\"customers\": sample_data[\"customers\"]},\n            policy_enforcer=mock_enforcer,\n            data_anonymizer=mock_anonymizer\n        )\n    \n        # Execute a query that should trigger anonymization\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"researcher\"],\n            \"purpose\": \"analysis\"\n        }\n    \n        result = engine.execute_query(\n            query=\"SELECT name, email, phone FROM customers\",\n            user_context=user_context\n        )\n    \n        # Check that the result was anonymized\n        assert result[\"status\"] == QueryStatus.MODIFIED.value\n>       assert result[\"column_count\"] == 3\nE       assert 9 == 3\n\ntests/query_engine/test_engine.py:269: AssertionError"}, "teardown": {"duration": 0.00013605004642158747, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_execute_query_with_privacy_functions", "lineno": 277, "outcome": "passed", "keywords": ["test_execute_query_with_privacy_functions", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009438120760023594, "outcome": "passed"}, "call": {"duration": 0.0022275139344856143, "outcome": "passed"}, "teardown": {"duration": 0.00010749395005404949, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_query_with_logging", "lineno": 317, "outcome": "failed", "keywords": ["test_query_with_logging", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009287020657211542, "outcome": "passed"}, "call": {"duration": 0.0018466580659151077, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_engine.py", "lineno": 350, "message": "AssertionError: assert {'address', '...in_date', ...} == {'email', 'name'}\n  \n  Extra items in the left set:\n  'address'\n  'id'\n  'join_date'\n  'credit_card'\n  'customer_segment'...\n  \n  ...Full output truncated (3 lines hidden), use '-vv' to show"}, "traceback": [{"path": "tests/query_engine/test_engine.py", "lineno": 350, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_engine.TestPrivacyQueryEngine object at 0x7f1159ad38c0>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_query_with_logging(self, sample_data):\n        \"\"\"Test query execution with access logging.\"\"\"\n        # Mock logger\n        mock_logger = Mock(spec=AccessLogger)\n    \n        # Create engine with the mock logger\n        engine = PrivacyQueryEngine(\n            data_sources={\"customers\": sample_data[\"customers\"]},\n            access_logger=mock_logger\n        )\n    \n        # Execute a query\n        user_context = {\n            \"user_id\": \"user123\",\n            \"roles\": [\"data_privacy_officer\"],\n            \"purpose\": \"compliance_audit\"\n        }\n    \n        result = engine.execute_query(\n            query=\"SELECT name, email FROM customers\",\n            user_context=user_context\n        )\n    \n        # Check that logging occurred\n        assert mock_logger.log_query.called\n    \n        # Verify log entry details\n        call_args = mock_logger.log_query.call_args[1]\n        assert call_args[\"user_id\"] == \"user123\"\n        assert \"SELECT name, email FROM customers\" in call_args[\"query\"]\n        assert call_args[\"data_sources\"] == [\"customers\"]\n        assert call_args[\"purpose\"] == \"compliance_audit\"\n>       assert set(call_args[\"fields_accessed\"]) == {\"name\", \"email\"}\nE       AssertionError: assert {'address', '...in_date', ...} == {'email', 'name'}\nE         \nE         Extra items in the left set:\nE         'address'\nE         'id'\nE         'join_date'\nE         'credit_card'\nE         'customer_segment'...\nE         \nE         ...Full output truncated (3 lines hidden), use '-vv' to show\n\ntests/query_engine/test_engine.py:350: AssertionError"}, "teardown": {"duration": 0.00013340800069272518, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_error_handling", "lineno": 352, "outcome": "passed", "keywords": ["test_error_handling", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.216601029038429e-05, "outcome": "passed"}, "call": {"duration": 0.0007859379984438419, "outcome": "passed"}, "teardown": {"duration": 9.243597742170095e-05, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_add_remove_data_source", "lineno": 384, "outcome": "failed", "keywords": ["test_add_remove_data_source", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.0009383079595863819, "outcome": "passed"}, "call": {"duration": 0.0013890539994463325, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_engine.py", "lineno": 407, "message": "AssertionError: assert 'executing' == 'completed'\n  \n  - completed\n  + executing"}, "traceback": [{"path": "tests/query_engine/test_engine.py", "lineno": 407, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_engine.TestPrivacyQueryEngine object at 0x7f1159ad3470>\nsample_data = {'customers':    id            name  ... customer_segment   join_date\n0   1      John Smith  ...          Premium  202...   GEN-45678        456\n4   5         Migraine  105000  ...    BIO-56789    GEN-56789        567\n\n[5 rows x 8 columns]}\n\n    def test_add_remove_data_source(self, sample_data):\n        \"\"\"Test adding and removing data sources.\"\"\"\n        engine = PrivacyQueryEngine()\n    \n        # Initially should have no data sources\n        assert len(engine.data_sources) == 0\n    \n        # Add a data source\n        engine.add_data_source(\"customers\", sample_data[\"customers\"])\n    \n        # Should now have one data source\n        assert len(engine.data_sources) == 1\n        assert \"customers\" in engine.data_sources\n    \n        # Execute a query with the new data source\n        user_context = {\"user_id\": \"user123\"}\n        result = engine.execute_query(\n            query=\"SELECT name FROM customers\",\n            user_context=user_context\n        )\n    \n        # Query should succeed\n>       assert result[\"status\"] == QueryStatus.COMPLETED.value\nE       AssertionError: assert 'executing' == 'completed'\nE         \nE         - completed\nE         + executing\n\ntests/query_engine/test_engine.py:407: AssertionError"}, "teardown": {"duration": 0.00013332697562873363, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_engine.py::TestPrivacyQueryEngine::test_get_query_history", "lineno": 419, "outcome": "passed", "keywords": ["test_get_query_history", "TestPrivacyQueryEngine", "test_engine.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.457895066589117e-05, "outcome": "passed"}, "call": {"duration": 0.006490393076092005, "outcome": "passed"}, "teardown": {"duration": 0.00010061496868729591, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_initialization", "lineno": 12, "outcome": "passed", "keywords": ["test_initialization", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 0.00010658800601959229, "outcome": "passed"}, "call": {"duration": 9.805196896195412e-05, "outcome": "passed"}, "teardown": {"duration": 7.734692189842463e-05, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_privacy_function_enum", "lineno": 17, "outcome": "passed", "keywords": ["test_privacy_function_enum", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.990305311977863e-05, "outcome": "passed"}, "call": {"duration": 9.928701911121607e-05, "outcome": "passed"}, "teardown": {"duration": 7.562397513538599e-05, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_simple_query", "lineno": 33, "outcome": "failed", "keywords": ["test_parse_simple_query", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.792003452777863e-05, "outcome": "passed"}, "call": {"duration": 0.0007130970479920506, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 45, "message": "assert 0 == 2\n +  where 0 = len([])"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 45, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fe1e0>\n\n    def test_parse_simple_query(self):\n        \"\"\"Test parsing a simple SELECT query.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a simple query\n        query = \"SELECT name, email FROM customers WHERE customer_segment = 'Premium'\"\n        result = parser.parse_query(query)\n    \n        # Check the parsed components\n        assert result[\"query_type\"] == \"SELECT\"\n        assert result[\"tables\"] == [\"customers\"]\n>       assert len(result[\"selected_fields\"]) == 2\nE       assert 0 == 2\nE        +  where 0 = len([])\n\ntests/query_engine/test_parser.py:45: AssertionError"}, "teardown": {"duration": 0.00011777295731008053, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_join", "lineno": 56, "outcome": "failed", "keywords": ["test_parse_query_with_join", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.217206388711929e-05, "outcome": "passed"}, "call": {"duration": 0.00188907899428159, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 71, "message": "AssertionError: assert {'customers'} == {'customers', 'orders'}\n  \n  Extra items in the right set:\n  'orders'\n  Use -v to get more diff"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 71, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fe360>\n\n    def test_parse_query_with_join(self):\n        \"\"\"Test parsing a query with JOIN clause.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a query with a join\n        query = \"\"\"\n            SELECT c.name, c.email, o.product, o.amount\n            FROM customers c\n            JOIN orders o ON c.id = o.customer_id\n            WHERE o.amount > 100\n        \"\"\"\n        result = parser.parse_query(query)\n    \n        # Check the parsed tables and joins\n>       assert set(result[\"tables\"]) == {\"customers\", \"orders\"}\nE       AssertionError: assert {'customers'} == {'customers', 'orders'}\nE         \nE         Extra items in the right set:\nE         'orders'\nE         Use -v to get more diff\n\ntests/query_engine/test_parser.py:71: AssertionError"}, "teardown": {"duration": 0.00012165703810751438, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_privacy_functions", "lineno": 83, "outcome": "failed", "keywords": ["test_parse_query_with_privacy_functions", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.932501077651978e-05, "outcome": "passed"}, "call": {"duration": 0.002032416989095509, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 104, "message": "AssertionError: assert '[<Identifier...F115876F150>]' == 'name'\n  \n  - name\n  + [<Identifier 'name' at 0x7F115876F150>]"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 104, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fe4e0>\n\n    def test_parse_query_with_privacy_functions(self):\n        \"\"\"Test parsing a query with privacy extension functions.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a query with privacy functions\n        query = \"\"\"\n            SELECT\n                ANONYMIZE(name),\n                MASK(email, reveal_first=3),\n                PSEUDONYMIZE(phone, prefix='PHONE')\n            FROM customers\n        \"\"\"\n        result = parser.parse_query(query)\n    \n        # Check the extracted privacy functions\n        assert len(result[\"privacy_functions\"]) == 3\n    \n        # Check the ANONYMIZE function\n        anon_func = next((f for f in result[\"privacy_functions\"] if f[\"function\"] == \"ANONYMIZE\"), None)\n        assert anon_func is not None\n>       assert anon_func[\"field\"] == \"name\"\nE       AssertionError: assert '[<Identifier...F115876F150>]' == 'name'\nE         \nE         - name\nE         + [<Identifier 'name' at 0x7F115876F150>]\n\ntests/query_engine/test_parser.py:104: AssertionError"}, "teardown": {"duration": 0.00011737493332475424, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_various_clauses", "lineno": 123, "outcome": "failed", "keywords": ["test_parse_query_with_various_clauses", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 9.50678950175643e-05, "outcome": "passed"}, "call": {"duration": 0.0029623389709740877, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 144, "message": "assert 0 == 1\n +  where 0 = len([])"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 144, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fe660>\n\n    def test_parse_query_with_various_clauses(self):\n        \"\"\"Test parsing a query with GROUP BY, ORDER BY, and LIMIT clauses.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a complex query\n        query = \"\"\"\n            SELECT\n                customer_segment,\n                COUNT(*) as count,\n                AVG(amount) as avg_amount\n            FROM customers c\n            JOIN orders o ON c.id = o.customer_id\n            WHERE o.amount > 100\n            GROUP BY customer_segment\n            ORDER BY avg_amount DESC\n            LIMIT 10\n        \"\"\"\n        result = parser.parse_query(query)\n    \n        # Check GROUP BY\n>       assert len(result[\"group_by\"]) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\ntests/query_engine/test_parser.py:144: AssertionError"}, "teardown": {"duration": 0.00011671904940158129, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_has_privacy_functions", "lineno": 163, "outcome": "passed", "keywords": ["test_has_privacy_functions", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.737505413591862e-05, "outcome": "passed"}, "call": {"duration": 0.0001248939661309123, "outcome": "passed"}, "teardown": {"duration": 7.724796887487173e-05, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_extract_table_relationships", "lineno": 175, "outcome": "failed", "keywords": ["test_extract_table_relationships", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 7.760990411043167e-05, "outcome": "passed"}, "call": {"duration": 0.0018543690675869584, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 190, "message": "assert 0 == 2\n +  where 0 = len([])"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 190, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fe960>\n\n    def test_extract_table_relationships(self):\n        \"\"\"Test extracting table relationships from JOINs.\"\"\"\n        parser = QueryParser()\n    \n        # Query with multiple joins\n        query = \"\"\"\n            SELECT c.name, o.product, p.payment_method\n            FROM customers c\n            JOIN orders o ON c.id = o.customer_id\n            JOIN payments p ON o.id = p.order_id\n        \"\"\"\n        relationships = parser.extract_table_relationships(query)\n    \n        # Should extract two relationships\n>       assert len(relationships) == 2\nE       assert 0 == 2\nE        +  where 0 = len([])\n\ntests/query_engine/test_parser.py:190: AssertionError"}, "teardown": {"duration": 0.00011674000415951014, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_select_star", "lineno": 193, "outcome": "failed", "keywords": ["test_parse_select_star", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.776492904871702e-05, "outcome": "passed"}, "call": {"duration": 0.00043780007399618626, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 203, "message": "assert 0 == 1\n +  where 0 = len([])"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 203, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598feae0>\n\n    def test_parse_select_star(self):\n        \"\"\"Test parsing a SELECT * query.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a SELECT * query\n        query = \"SELECT * FROM customers\"\n        result = parser.parse_query(query)\n    \n        # Check the selected fields\n>       assert len(result[\"selected_fields\"]) == 1\nE       assert 0 == 1\nE        +  where 0 = len([])\n\ntests/query_engine/test_parser.py:203: AssertionError"}, "teardown": {"duration": 0.00011716398876160383, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_subqueries", "lineno": 205, "outcome": "failed", "keywords": ["test_parse_query_with_subqueries", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.948193863034248e-05, "outcome": "passed"}, "call": {"duration": 0.0020356830209493637, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 226, "message": "AssertionError: assert 'orders' in ['customers']"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 226, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fec60>\n\n    def test_parse_query_with_subqueries(self):\n        \"\"\"Test parsing a query with subqueries.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a query with a subquery\n        query = \"\"\"\n            SELECT c.name, c.email\n            FROM customers c\n            WHERE c.id IN (\n                SELECT customer_id\n                FROM orders\n                WHERE amount > 1000\n            )\n        \"\"\"\n        result = parser.parse_query(query)\n    \n        # Main query tables\n        assert \"customers\" in result[\"tables\"]\n    \n        # Subquery tables should also be detected\n>       assert \"orders\" in result[\"tables\"]\nE       AssertionError: assert 'orders' in ['customers']\n\ntests/query_engine/test_parser.py:226: AssertionError"}, "teardown": {"duration": 0.00011833698954433203, "outcome": "passed"}}, {"nodeid": "tests/query_engine/test_parser.py::TestQueryParser::test_parse_query_with_different_join_types", "lineno": 230, "outcome": "failed", "keywords": ["test_parse_query_with_different_join_types", "TestQueryParser", "test_parser.py", "query_engine", "tests", "query_language_interpreter_data_privacy_officer", ""], "setup": {"duration": 8.825096301734447e-05, "outcome": "passed"}, "call": {"duration": 0.0023167120525613427, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/tests/query_engine/test_parser.py", "lineno": 246, "message": "AssertionError: assert {'customers'} == {'customers',..., 'shipments'}\n  \n  Extra items in the right set:\n  'shipments'\n  'payments'\n  'orders'\n  Use -v to get more diff"}, "traceback": [{"path": "tests/query_engine/test_parser.py", "lineno": 246, "message": "AssertionError"}], "longrepr": "self = <tests.query_engine.test_parser.TestQueryParser object at 0x7f11598fede0>\n\n    def test_parse_query_with_different_join_types(self):\n        \"\"\"Test parsing a query with different types of JOINs.\"\"\"\n        parser = QueryParser()\n    \n        # Parse a query with different join types\n        query = \"\"\"\n            SELECT c.name, o.product, p.payment_method\n            FROM customers c\n            LEFT JOIN orders o ON c.id = o.customer_id\n            INNER JOIN payments p ON o.id = p.order_id\n            RIGHT JOIN shipments s ON o.id = s.order_id\n        \"\"\"\n        result = parser.parse_query(query)\n    \n        # Should extract all tables\n>       assert set(result[\"tables\"]) == {\"customers\", \"orders\", \"payments\", \"shipments\"}\nE       AssertionError: assert {'customers'} == {'customers',..., 'shipments'}\nE         \nE         Extra items in the right set:\nE         'shipments'\nE         'payments'\nE         'orders'\nE         Use -v to get more diff\n\ntests/query_engine/test_parser.py:246: AssertionError"}, "teardown": {"duration": 0.00019516900647431612, "outcome": "passed"}}], "warnings": [{"message": "Pydantic V1 style `@root_validator` validators are deprecated. You should migrate to Pydantic V2 style `@model_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/policy_enforcement/policy.py", "lineno": 60}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/policy_enforcement/policy.py", "lineno": 112}, {"message": "The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/policy_enforcement/policy.py", "lineno": 135}, {"message": "The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "runtest", "filename": "/home/justinchiu_cohere_com/librarybench/projects/query_language_interpreter/query_language_interpreter_data_privacy_officer/privacy_query_interpreter/policy_enforcement/policy.py", "lineno": 135}]}