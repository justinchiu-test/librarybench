{"created": 1752370260.916908, "duration": 9.849913120269775, "exitcode": 1, "root": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art", "environment": {}, "summary": {"passed": 138, "failed": 18, "total": 156, "collected": 156}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": ".", "type": "Dir"}]}, {"nodeid": "pytermgame/animation", "outcome": "passed", "result": []}, {"nodeid": "pytermgame/compression", "outcome": "passed", "result": []}, {"nodeid": "pytermgame/lighting", "outcome": "passed", "result": []}, {"nodeid": "pytermgame/particles", "outcome": "passed", "result": []}, {"nodeid": "pytermgame/rendering", "outcome": "passed", "result": []}, {"nodeid": "pytermgame/sprites", "outcome": "passed", "result": []}, {"nodeid": "pytermgame", "outcome": "passed", "result": [{"nodeid": "pytermgame/animation", "type": "Package"}, {"nodeid": "pytermgame/compression", "type": "Package"}, {"nodeid": "pytermgame/lighting", "type": "Package"}, {"nodeid": "pytermgame/particles", "type": "Package"}, {"nodeid": "pytermgame/rendering", "type": "Package"}, {"nodeid": "pytermgame/sprites", "type": "Package"}]}, {"nodeid": "pytermgame.egg-info", "outcome": "passed", "result": []}, {"nodeid": "tests/test_animation.py::TestFrame", "outcome": "passed", "result": [{"nodeid": "tests/test_animation.py::TestFrame::test_frame_creation", "type": "Function", "lineno": 14}]}, {"nodeid": "tests/test_animation.py::TestAnimation", "outcome": "passed", "result": [{"nodeid": "tests/test_animation.py::TestAnimation::test_animation_creation", "type": "Function", "lineno": 27}, {"nodeid": "tests/test_animation.py::TestAnimation::test_frame_management", "type": "Function", "lineno": 36}, {"nodeid": "tests/test_animation.py::TestAnimation::test_frame_duplication", "type": "Function", "lineno": 55}, {"nodeid": "tests/test_animation.py::TestAnimation::test_frame_movement", "type": "Function", "lineno": 68}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_playback", "type": "Function", "lineno": 83}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_update", "type": "Function", "lineno": 103}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_looping", "type": "Function", "lineno": 120}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_no_loop", "type": "Function", "lineno": 138}, {"nodeid": "tests/test_animation.py::TestAnimation::test_total_duration", "type": "Function", "lineno": 156}]}, {"nodeid": "tests/test_animation.py::TestAnimationSet", "outcome": "passed", "result": [{"nodeid": "tests/test_animation.py::TestAnimationSet::test_animation_set_creation", "type": "Function", "lineno": 171}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_animation_management", "type": "Function", "lineno": 179}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_current_animation", "type": "Function", "lineno": 197}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_animation_control", "type": "Function", "lineno": 217}]}, {"nodeid": "tests/test_animation.py::TestAnimator", "outcome": "passed", "result": [{"nodeid": "tests/test_animation.py::TestAnimator::test_animator_creation", "type": "Function", "lineno": 241}, {"nodeid": "tests/test_animation.py::TestAnimator::test_animation_creation", "type": "Function", "lineno": 249}, {"nodeid": "tests/test_animation.py::TestAnimator::test_frame_management", "type": "Function", "lineno": 260}, {"nodeid": "tests/test_animation.py::TestAnimator::test_frame_navigation", "type": "Function", "lineno": 282}, {"nodeid": "tests/test_animation.py::TestAnimator::test_onion_skinning", "type": "Function", "lineno": 304}, {"nodeid": "tests/test_animation.py::TestAnimator::test_onion_skin_rendering", "type": "Function", "lineno": 325}, {"nodeid": "tests/test_animation.py::TestAnimator::test_onion_skin_settings", "type": "Function", "lineno": 349}, {"nodeid": "tests/test_animation.py::TestAnimator::test_preview_playback", "type": "Function", "lineno": 370}, {"nodeid": "tests/test_animation.py::TestAnimator::test_frame_duration_setting", "type": "Function", "lineno": 391}, {"nodeid": "tests/test_animation.py::TestAnimator::test_export_import", "type": "Function", "lineno": 402}]}, {"nodeid": "tests/test_animation.py", "outcome": "passed", "result": [{"nodeid": "tests/test_animation.py::TestFrame", "type": "Class"}, {"nodeid": "tests/test_animation.py::TestAnimation", "type": "Class"}, {"nodeid": "tests/test_animation.py::TestAnimationSet", "type": "Class"}, {"nodeid": "tests/test_animation.py::TestAnimator", "type": "Class"}]}, {"nodeid": "tests/test_compression.py::TestColorPalette", "outcome": "passed", "result": [{"nodeid": "tests/test_compression.py::TestColorPalette::test_palette_creation", "type": "Function", "lineno": 15}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_color_addition", "type": "Function", "lineno": 22}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_color_retrieval", "type": "Function", "lineno": 41}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_index_lookup", "type": "Function", "lineno": 58}]}, {"nodeid": "tests/test_compression.py::TestCompressedSprite", "outcome": "passed", "result": [{"nodeid": "tests/test_compression.py::TestCompressedSprite::test_compressed_sprite_creation", "type": "Function", "lineno": 76}]}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor", "outcome": "passed", "result": [{"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compressor_creation", "type": "Function", "lineno": 94}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_basic_compression", "type": "Function", "lineno": 102}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compression_decompression", "type": "Function", "lineno": 124}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_empty_sprite_compression", "type": "Function", "lineno": 172}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_run_length_encoding", "type": "Function", "lineno": 193}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_pattern_detection", "type": "Function", "lineno": 209}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_multi_layer_compression", "type": "Function", "lineno": 238}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compression_stats", "type": "Function", "lineno": 267}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_file_operations", "type": "Function", "lineno": 296}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compression_ratio_estimation", "type": "Function", "lineno": 332}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_layer_properties_preservation", "type": "Function", "lineno": 372}]}, {"nodeid": "tests/test_compression.py", "outcome": "passed", "result": [{"nodeid": "tests/test_compression.py::TestColorPalette", "type": "Class"}, {"nodeid": "tests/test_compression.py::TestCompressedSprite", "type": "Class"}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor", "type": "Class"}]}, {"nodeid": "tests/test_integration.py::TestSpriteToAnimation", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestSpriteToAnimation::test_create_animated_sprite", "type": "Function", "lineno": 15}]}, {"nodeid": "tests/test_integration.py::TestRenderingPipeline", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestRenderingPipeline::test_layered_scene_rendering", "type": "Function", "lineno": 51}]}, {"nodeid": "tests/test_integration.py::TestLightingIntegration", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestLightingIntegration::test_lit_scene", "type": "Function", "lineno": 102}]}, {"nodeid": "tests/test_integration.py::TestAnimationWithEffects", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestAnimationWithEffects::test_animated_particle_scene", "type": "Function", "lineno": 153}]}, {"nodeid": "tests/test_integration.py::TestCompressionWorkflow", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestCompressionWorkflow::test_compress_animated_sprite", "type": "Function", "lineno": 207}]}, {"nodeid": "tests/test_integration.py::TestFullGameScene", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestFullGameScene::test_complete_scene", "type": "Function", "lineno": 246}]}, {"nodeid": "tests/test_integration.py::TestPerformance", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestPerformance::test_rendering_performance", "type": "Function", "lineno": 360}, {"nodeid": "tests/test_integration.py::TestPerformance::test_particle_performance", "type": "Function", "lineno": 403}]}, {"nodeid": "tests/test_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/test_integration.py::TestSpriteToAnimation", "type": "Class"}, {"nodeid": "tests/test_integration.py::TestRenderingPipeline", "type": "Class"}, {"nodeid": "tests/test_integration.py::TestLightingIntegration", "type": "Class"}, {"nodeid": "tests/test_integration.py::TestAnimationWithEffects", "type": "Class"}, {"nodeid": "tests/test_integration.py::TestCompressionWorkflow", "type": "Class"}, {"nodeid": "tests/test_integration.py::TestFullGameScene", "type": "Class"}, {"nodeid": "tests/test_integration.py::TestPerformance", "type": "Class"}]}, {"nodeid": "tests/test_lighting.py::TestLightSource", "outcome": "passed", "result": [{"nodeid": "tests/test_lighting.py::TestLightSource::test_light_creation", "type": "Function", "lineno": 16}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_point_light_intensity", "type": "Function", "lineno": 33}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_quadratic_falloff", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_directional_light", "type": "Function", "lineno": 75}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_spot_light", "type": "Function", "lineno": 92}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_ambient_light", "type": "Function", "lineno": 113}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_disabled_light", "type": "Function", "lineno": 129}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_light_color_at_point", "type": "Function", "lineno": 141}]}, {"nodeid": "tests/test_lighting.py::TestLightMap", "outcome": "passed", "result": [{"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_creation", "type": "Function", "lineno": 169}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_operations", "type": "Function", "lineno": 179}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_scaling", "type": "Function", "lineno": 198}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_clear", "type": "Function", "lineno": 211}]}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay", "outcome": "passed", "result": [{"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_time_creation", "type": "Function", "lineno": 235}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_sun_angle", "type": "Function", "lineno": 243}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_ambient_light_cycle", "type": "Function", "lineno": 263}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_color_interpolation", "type": "Function", "lineno": 287}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_time_advancement", "type": "Function", "lineno": 300}]}, {"nodeid": "tests/test_lighting.py::TestOccluderMap", "outcome": "passed", "result": [{"nodeid": "tests/test_lighting.py::TestOccluderMap::test_occluder_creation", "type": "Function", "lineno": 316}, {"nodeid": "tests/test_lighting.py::TestOccluderMap::test_occluder_operations", "type": "Function", "lineno": 328}, {"nodeid": "tests/test_lighting.py::TestOccluderMap::test_occluder_from_layer", "type": "Function", "lineno": 343}]}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor", "outcome": "passed", "result": [{"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_processor_creation", "type": "Function", "lineno": 364}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_light_management", "type": "Function", "lineno": 375}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_basic_lighting_calculation", "type": "Function", "lineno": 391}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_shadow_calculation", "type": "Function", "lineno": 418}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_ambient_occlusion", "type": "Function", "lineno": 444}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_apply_lighting_to_layer", "type": "Function", "lineno": 469}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_torch_light_creation", "type": "Function", "lineno": 503}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_sun_light_creation", "type": "Function", "lineno": 516}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_time_of_day_integration", "type": "Function", "lineno": 528}]}, {"nodeid": "tests/test_lighting.py", "outcome": "passed", "result": [{"nodeid": "tests/test_lighting.py::TestLightSource", "type": "Class"}, {"nodeid": "tests/test_lighting.py::TestLightMap", "type": "Class"}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay", "type": "Class"}, {"nodeid": "tests/test_lighting.py::TestOccluderMap", "type": "Class"}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor", "type": "Class"}]}, {"nodeid": "tests/test_particles.py::TestVector2D", "outcome": "passed", "result": [{"nodeid": "tests/test_particles.py::TestVector2D::test_vector_creation", "type": "Function", "lineno": 16}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_operations", "type": "Function", "lineno": 22}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_magnitude", "type": "Function", "lineno": 42}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_normalize", "type": "Function", "lineno": 47}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_dot_product", "type": "Function", "lineno": 56}]}, {"nodeid": "tests/test_particles.py::TestParticle", "outcome": "passed", "result": [{"nodeid": "tests/test_particles.py::TestParticle::test_particle_creation", "type": "Function", "lineno": 68}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_update", "type": "Function", "lineno": 86}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_lifetime", "type": "Function", "lineno": 106}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_rotation", "type": "Function", "lineno": 131}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_char_for_angle", "type": "Function", "lineno": 142}]}, {"nodeid": "tests/test_particles.py::TestParticleEmitter", "outcome": "passed", "result": [{"nodeid": "tests/test_particles.py::TestParticleEmitter::test_emitter_creation", "type": "Function", "lineno": 160}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_spawn_positions", "type": "Function", "lineno": 173}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_particle_creation", "type": "Function", "lineno": 212}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_continuous_emission", "type": "Function", "lineno": 236}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_burst_emission", "type": "Function", "lineno": 250}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_emitter_disabling", "type": "Function", "lineno": 268}]}, {"nodeid": "tests/test_particles.py::TestParticleEffect", "outcome": "passed", "result": [{"nodeid": "tests/test_particles.py::TestParticleEffect::test_explosion_effect", "type": "Function", "lineno": 285}, {"nodeid": "tests/test_particles.py::TestParticleEffect::test_fire_effect", "type": "Function", "lineno": 299}, {"nodeid": "tests/test_particles.py::TestParticleEffect::test_sparkle_effect", "type": "Function", "lineno": 312}]}, {"nodeid": "tests/test_particles.py::TestParticleSystem", "outcome": "passed", "result": [{"nodeid": "tests/test_particles.py::TestParticleSystem::test_system_creation", "type": "Function", "lineno": 328}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_emitter_management", "type": "Function", "lineno": 337}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_effect_management", "type": "Function", "lineno": 352}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_spawn_burst", "type": "Function", "lineno": 366}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_particle_update", "type": "Function", "lineno": 380}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_particle_lifetime_management", "type": "Function", "lineno": 400}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_collision_bounds", "type": "Function", "lineno": 417}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_max_particles_limit", "type": "Function", "lineno": 436}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_render_to_layer", "type": "Function", "lineno": 452}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_effect_duration", "type": "Function", "lineno": 479}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_convenience_effects", "type": "Function", "lineno": 500}]}, {"nodeid": "tests/test_particles.py", "outcome": "passed", "result": [{"nodeid": "tests/test_particles.py::TestVector2D", "type": "Class"}, {"nodeid": "tests/test_particles.py::TestParticle", "type": "Class"}, {"nodeid": "tests/test_particles.py::TestParticleEmitter", "type": "Class"}, {"nodeid": "tests/test_particles.py::TestParticleEffect", "type": "Class"}, {"nodeid": "tests/test_particles.py::TestParticleSystem", "type": "Class"}]}, {"nodeid": "tests/test_rendering.py::TestRenderLayer", "outcome": "passed", "result": [{"nodeid": "tests/test_rendering.py::TestRenderLayer::test_layer_creation", "type": "Function", "lineno": 13}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_pixel_operations", "type": "Function", "lineno": 24}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_layer_clear", "type": "Function", "lineno": 41}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_layer_properties", "type": "Function", "lineno": 67}]}, {"nodeid": "tests/test_rendering.py::TestViewport", "outcome": "passed", "result": [{"nodeid": "tests/test_rendering.py::TestViewport::test_viewport_creation", "type": "Function", "lineno": 90}, {"nodeid": "tests/test_rendering.py::TestViewport::test_viewport_contains", "type": "Function", "lineno": 99}, {"nodeid": "tests/test_rendering.py::TestViewport::test_coordinate_conversion", "type": "Function", "lineno": 112}]}, {"nodeid": "tests/test_rendering.py::TestRenderer", "outcome": "passed", "result": [{"nodeid": "tests/test_rendering.py::TestRenderer::test_renderer_creation", "type": "Function", "lineno": 130}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_management", "type": "Function", "lineno": 140}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_z_order_management", "type": "Function", "lineno": 164}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_basic_rendering", "type": "Function", "lineno": 181}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_visibility", "type": "Function", "lineno": 207}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_opacity", "type": "Function", "lineno": 221}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_viewport_rendering", "type": "Function", "lineno": 247}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_offset", "type": "Function", "lineno": 263}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_render_to_string", "type": "Function", "lineno": 277}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_blend_modes", "type": "Function", "lineno": 295}]}, {"nodeid": "tests/test_rendering.py::TestEffects", "outcome": "passed", "result": [{"nodeid": "tests/test_rendering.py::TestEffects::test_blur_effect", "type": "Function", "lineno": 323}, {"nodeid": "tests/test_rendering.py::TestEffects::test_glow_effect", "type": "Function", "lineno": 339}, {"nodeid": "tests/test_rendering.py::TestEffects::test_effect_in_renderer", "type": "Function", "lineno": 356}]}, {"nodeid": "tests/test_rendering.py::TestViewportScrolling", "outcome": "passed", "result": [{"nodeid": "tests/test_rendering.py::TestViewportScrolling::test_viewport_scroll", "type": "Function", "lineno": 375}]}, {"nodeid": "tests/test_rendering.py", "outcome": "passed", "result": [{"nodeid": "tests/test_rendering.py::TestRenderLayer", "type": "Class"}, {"nodeid": "tests/test_rendering.py::TestViewport", "type": "Class"}, {"nodeid": "tests/test_rendering.py::TestRenderer", "type": "Class"}, {"nodeid": "tests/test_rendering.py::TestEffects", "type": "Class"}, {"nodeid": "tests/test_rendering.py::TestViewportScrolling", "type": "Class"}]}, {"nodeid": "tests/test_sprites.py::TestColor", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestColor::test_color_creation", "type": "Function", "lineno": 13}, {"nodeid": "tests/test_sprites.py::TestColor::test_color_to_ansi", "type": "Function", "lineno": 21}, {"nodeid": "tests/test_sprites.py::TestColor::test_color_blend", "type": "Function", "lineno": 27}]}, {"nodeid": "tests/test_sprites.py::TestPixel", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestPixel::test_pixel_creation", "type": "Function", "lineno": 41}, {"nodeid": "tests/test_sprites.py::TestPixel::test_pixel_char_validation", "type": "Function", "lineno": 49}]}, {"nodeid": "tests/test_sprites.py::TestLayer", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestLayer::test_layer_creation", "type": "Function", "lineno": 58}, {"nodeid": "tests/test_sprites.py::TestLayer::test_pixel_operations", "type": "Function", "lineno": 68}, {"nodeid": "tests/test_sprites.py::TestLayer::test_layer_clear", "type": "Function", "lineno": 85}, {"nodeid": "tests/test_sprites.py::TestLayer::test_layer_resize", "type": "Function", "lineno": 103}]}, {"nodeid": "tests/test_sprites.py::TestSprite", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestSprite::test_sprite_creation", "type": "Function", "lineno": 130}, {"nodeid": "tests/test_sprites.py::TestSprite::test_layer_management", "type": "Function", "lineno": 139}, {"nodeid": "tests/test_sprites.py::TestSprite::test_layer_ordering", "type": "Function", "lineno": 161}, {"nodeid": "tests/test_sprites.py::TestSprite::test_sprite_composite", "type": "Function", "lineno": 176}]}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_editor_creation", "type": "Function", "lineno": 205}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_tool_selection", "type": "Function", "lineno": 214}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_color_management", "type": "Function", "lineno": 224}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_pixel_drawing", "type": "Function", "lineno": 242}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_drawing_tools", "type": "Function", "lineno": 256}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_fill_tool", "type": "Function", "lineno": 279}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_layer_operations", "type": "Function", "lineno": 296}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_undo_redo", "type": "Function", "lineno": 313}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_sprite_resize", "type": "Function", "lineno": 331}]}, {"nodeid": "tests/test_sprites.py::TestDrawingTools", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestDrawingTools::test_pencil_tool", "type": "Function", "lineno": 352}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_brush_tool", "type": "Function", "lineno": 360}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_line_tool", "type": "Function", "lineno": 369}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_rectangle_tool", "type": "Function", "lineno": 385}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_circle_tool", "type": "Function", "lineno": 406}]}, {"nodeid": "tests/test_sprites.py::TestPalette", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestPalette::test_palette_creation", "type": "Function", "lineno": 425}]}, {"nodeid": "tests/test_sprites.py", "outcome": "passed", "result": [{"nodeid": "tests/test_sprites.py::TestColor", "type": "Class"}, {"nodeid": "tests/test_sprites.py::TestPixel", "type": "Class"}, {"nodeid": "tests/test_sprites.py::TestLayer", "type": "Class"}, {"nodeid": "tests/test_sprites.py::TestSprite", "type": "Class"}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor", "type": "Class"}, {"nodeid": "tests/test_sprites.py::TestDrawingTools", "type": "Class"}, {"nodeid": "tests/test_sprites.py::TestPalette", "type": "Class"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_animation.py", "type": "Module"}, {"nodeid": "tests/test_compression.py", "type": "Module"}, {"nodeid": "tests/test_integration.py", "type": "Module"}, {"nodeid": "tests/test_lighting.py", "type": "Module"}, {"nodeid": "tests/test_particles.py", "type": "Module"}, {"nodeid": "tests/test_rendering.py", "type": "Module"}, {"nodeid": "tests/test_sprites.py", "type": "Module"}]}, {"nodeid": ".", "outcome": "passed", "result": [{"nodeid": "pytermgame", "type": "Package"}, {"nodeid": "pytermgame.egg-info", "type": "Dir"}, {"nodeid": "tests", "type": "Package"}]}], "tests": [{"nodeid": "tests/test_animation.py::TestFrame::test_frame_creation", "lineno": 14, "outcome": "passed", "keywords": ["test_frame_creation", "TestFrame", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00032631680369377136, "outcome": "passed"}, "call": {"duration": 0.00017974432557821274, "outcome": "passed"}, "teardown": {"duration": 0.00010297168046236038, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_creation", "lineno": 27, "outcome": "passed", "keywords": ["test_animation_creation", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.205751121044159e-05, "outcome": "passed"}, "call": {"duration": 0.0001085801050066948, "outcome": "passed"}, "teardown": {"duration": 8.782185614109039e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_frame_management", "lineno": 36, "outcome": "passed", "keywords": ["test_frame_management", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.784832268953323e-05, "outcome": "passed"}, "call": {"duration": 0.00011536944657564163, "outcome": "passed"}, "teardown": {"duration": 8.034706115722656e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_frame_duplication", "lineno": 55, "outcome": "failed", "keywords": ["test_frame_duplication", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.162204176187515e-05, "outcome": "passed"}, "call": {"duration": 0.0003384687006473541, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_animation.py", "lineno": 67, "message": "AssertionError: assert Sprite(name='Original', width=10, height=10, layers=[], metadata={}) != Sprite(name='Original', width=10, height=10, layers=[], metadata={})\n +  where Sprite(name='Original', width=10, height=10, layers=[], metadata={}) = Frame(sprite=Sprite(name='Original', width=10, height=10, layers=[], metadata={}), duration=0.1, metadata={}).sprite\n +  and   Sprite(name='Original', width=10, height=10, layers=[], metadata={}) = Frame(sprite=Sprite(name='Original', width=10, height=10, layers=[], metadata={}), duration=0.1, metadata={}).sprite"}, "traceback": [{"path": "tests/test_animation.py", "lineno": 67, "message": "AssertionError"}], "longrepr": "self = <tests.test_animation.TestAnimation object at 0x7fd3575baf00>\n\n    def test_frame_duplication(self):\n        \"\"\"Test frame duplication\"\"\"\n        animation = Animation(name=\"Test\")\n        sprite = Sprite(name=\"Original\", width=10, height=10)\n    \n        animation.add_frame(sprite)\n        new_frame = animation.duplicate_frame(0)\n    \n        assert new_frame is not None\n        assert len(animation.frames) == 2\n        assert animation.frames[1].sprite.name == \"Original\"\n>       assert animation.frames[1].sprite != animation.frames[0].sprite\nE       AssertionError: assert Sprite(name='Original', width=10, height=10, layers=[], metadata={}) != Sprite(name='Original', width=10, height=10, layers=[], metadata={})\nE        +  where Sprite(name='Original', width=10, height=10, layers=[], metadata={}) = Frame(sprite=Sprite(name='Original', width=10, height=10, layers=[], metadata={}), duration=0.1, metadata={}).sprite\nE        +  and   Sprite(name='Original', width=10, height=10, layers=[], metadata={}) = Frame(sprite=Sprite(name='Original', width=10, height=10, layers=[], metadata={}), duration=0.1, metadata={}).sprite\n\ntests/test_animation.py:67: AssertionError"}, "teardown": {"duration": 0.00012885313481092453, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_frame_movement", "lineno": 68, "outcome": "passed", "keywords": ["test_frame_movement", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.252317249774933e-05, "outcome": "passed"}, "call": {"duration": 0.00014647562056779861, "outcome": "passed"}, "teardown": {"duration": 8.8496133685112e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_playback", "lineno": 83, "outcome": "passed", "keywords": ["test_animation_playback", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.255243301391602e-05, "outcome": "passed"}, "call": {"duration": 0.00012715905904769897, "outcome": "passed"}, "teardown": {"duration": 7.782969623804092e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_update", "lineno": 103, "outcome": "passed", "keywords": ["test_animation_update", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.7003613114357e-05, "outcome": "passed"}, "call": {"duration": 0.0001253793016076088, "outcome": "passed"}, "teardown": {"duration": 7.462874054908752e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_looping", "lineno": 120, "outcome": "passed", "keywords": ["test_animation_looping", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.621159940958023e-05, "outcome": "passed"}, "call": {"duration": 0.0001161620020866394, "outcome": "passed"}, "teardown": {"duration": 8.494872599840164e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_animation_no_loop", "lineno": 138, "outcome": "passed", "keywords": ["test_animation_no_loop", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.32611694931984e-05, "outcome": "passed"}, "call": {"duration": 0.00011353008449077606, "outcome": "passed"}, "teardown": {"duration": 7.736217230558395e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimation::test_total_duration", "lineno": 156, "outcome": "passed", "keywords": ["test_total_duration", "TestAnimation", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.696263492107391e-05, "outcome": "passed"}, "call": {"duration": 0.00010717380791902542, "outcome": "passed"}, "teardown": {"duration": 7.466599345207214e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_animation_set_creation", "lineno": 171, "outcome": "passed", "keywords": ["test_animation_set_creation", "TestAnimationSet", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.557123899459839e-05, "outcome": "passed"}, "call": {"duration": 9.116064757108688e-05, "outcome": "passed"}, "teardown": {"duration": 7.566716521978378e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_animation_management", "lineno": 179, "outcome": "passed", "keywords": ["test_animation_management", "TestAnimationSet", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.760711014270782e-05, "outcome": "passed"}, "call": {"duration": 0.00011360086500644684, "outcome": "passed"}, "teardown": {"duration": 7.594656199216843e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_current_animation", "lineno": 197, "outcome": "passed", "keywords": ["test_current_animation", "TestAnimationSet", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.484201341867447e-05, "outcome": "passed"}, "call": {"duration": 9.804125875234604e-05, "outcome": "passed"}, "teardown": {"duration": 7.255095988512039e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimationSet::test_animation_control", "lineno": 217, "outcome": "passed", "keywords": ["test_animation_control", "TestAnimationSet", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.339008152484894e-05, "outcome": "passed"}, "call": {"duration": 0.00010125525295734406, "outcome": "passed"}, "teardown": {"duration": 7.95247033238411e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_animator_creation", "lineno": 241, "outcome": "passed", "keywords": ["test_animator_creation", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.362011820077896e-05, "outcome": "passed"}, "call": {"duration": 0.00010775495320558548, "outcome": "passed"}, "teardown": {"duration": 8.068419992923737e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_animation_creation", "lineno": 249, "outcome": "passed", "keywords": ["test_animation_creation", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.787253707647324e-05, "outcome": "passed"}, "call": {"duration": 0.00017127208411693573, "outcome": "passed"}, "teardown": {"duration": 7.565319538116455e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_frame_management", "lineno": 260, "outcome": "passed", "keywords": ["test_frame_management", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.610209286212921e-05, "outcome": "passed"}, "call": {"duration": 0.00027561094611883163, "outcome": "passed"}, "teardown": {"duration": 7.956661283969879e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_frame_navigation", "lineno": 282, "outcome": "passed", "keywords": ["test_frame_navigation", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.756108582019806e-05, "outcome": "passed"}, "call": {"duration": 0.0002883654087781906, "outcome": "passed"}, "teardown": {"duration": 8.021388202905655e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_onion_skinning", "lineno": 304, "outcome": "passed", "keywords": ["test_onion_skinning", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.46818259358406e-05, "outcome": "passed"}, "call": {"duration": 0.00036812201142311096, "outcome": "passed"}, "teardown": {"duration": 7.767695933580399e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_onion_skin_rendering", "lineno": 325, "outcome": "passed", "keywords": ["test_onion_skin_rendering", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.413793355226517e-05, "outcome": "passed"}, "call": {"duration": 0.001995583064854145, "outcome": "passed"}, "teardown": {"duration": 9.058322757482529e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_onion_skin_settings", "lineno": 349, "outcome": "passed", "keywords": ["test_onion_skin_settings", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.310936391353607e-05, "outcome": "passed"}, "call": {"duration": 0.00013279356062412262, "outcome": "passed"}, "teardown": {"duration": 7.80206173658371e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_preview_playback", "lineno": 370, "outcome": "passed", "keywords": ["test_preview_playback", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.18539410829544e-05, "outcome": "passed"}, "call": {"duration": 0.000298929400742054, "outcome": "passed"}, "teardown": {"duration": 8.155778050422668e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_frame_duration_setting", "lineno": 391, "outcome": "passed", "keywords": ["test_frame_duration_setting", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.5572170317173e-05, "outcome": "passed"}, "call": {"duration": 0.0001499699428677559, "outcome": "passed"}, "teardown": {"duration": 7.548648864030838e-05, "outcome": "passed"}}, {"nodeid": "tests/test_animation.py::TestAnimator::test_export_import", "lineno": 402, "outcome": "passed", "keywords": ["test_export_import", "TestAnimator", "test_animation.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.026696741580963e-05, "outcome": "passed"}, "call": {"duration": 0.0001726122573018074, "outcome": "passed"}, "teardown": {"duration": 7.690954953432083e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_palette_creation", "lineno": 15, "outcome": "passed", "keywords": ["test_palette_creation", "TestColorPalette", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.441787213087082e-05, "outcome": "passed"}, "call": {"duration": 9.35383141040802e-05, "outcome": "passed"}, "teardown": {"duration": 7.407087832689285e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_color_addition", "lineno": 22, "outcome": "passed", "keywords": ["test_color_addition", "TestColorPalette", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.485505193471909e-05, "outcome": "passed"}, "call": {"duration": 0.0001046694815158844, "outcome": "passed"}, "teardown": {"duration": 7.168948650360107e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_color_retrieval", "lineno": 41, "outcome": "passed", "keywords": ["test_color_retrieval", "TestColorPalette", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.301941514015198e-05, "outcome": "passed"}, "call": {"duration": 0.00010117515921592712, "outcome": "passed"}, "teardown": {"duration": 7.863063365221024e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestColorPalette::test_index_lookup", "lineno": 58, "outcome": "passed", "keywords": ["test_index_lookup", "TestColorPalette", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.25574791431427e-05, "outcome": "passed"}, "call": {"duration": 9.655766189098358e-05, "outcome": "passed"}, "teardown": {"duration": 7.180124521255493e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestCompressedSprite::test_compressed_sprite_creation", "lineno": 76, "outcome": "passed", "keywords": ["test_compressed_sprite_creation", "TestCompressedSprite", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.203686982393265e-05, "outcome": "passed"}, "call": {"duration": 9.758956730365753e-05, "outcome": "passed"}, "teardown": {"duration": 8.022971451282501e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compressor_creation", "lineno": 94, "outcome": "passed", "keywords": ["test_compressor_creation", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.575284689664841e-05, "outcome": "passed"}, "call": {"duration": 8.143391460180283e-05, "outcome": "passed"}, "teardown": {"duration": 7.102638483047485e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_basic_compression", "lineno": 102, "outcome": "passed", "keywords": ["test_basic_compression", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.337890565395355e-05, "outcome": "passed"}, "call": {"duration": 0.006872914731502533, "outcome": "passed"}, "teardown": {"duration": 9.59811732172966e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compression_decompression", "lineno": 124, "outcome": "passed", "keywords": ["test_compression_decompression", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.065214544534683e-05, "outcome": "passed"}, "call": {"duration": 0.21764762327075005, "outcome": "passed"}, "teardown": {"duration": 0.00011230818927288055, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_empty_sprite_compression", "lineno": 172, "outcome": "passed", "keywords": ["test_empty_sprite_compression", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.619949221611023e-05, "outcome": "passed"}, "call": {"duration": 0.651770880445838, "outcome": "passed"}, "teardown": {"duration": 0.00013989489525556564, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_run_length_encoding", "lineno": 193, "outcome": "passed", "keywords": ["test_run_length_encoding", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00010023452341556549, "outcome": "passed"}, "call": {"duration": 0.0004982380196452141, "outcome": "passed"}, "teardown": {"duration": 9.027775377035141e-05, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_pattern_detection", "lineno": 209, "outcome": "failed", "keywords": ["test_pattern_detection", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.218549191951752e-05, "outcome": "passed"}, "call": {"duration": 0.6482817912474275, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_compression.py", "lineno": 237, "message": "AssertionError: assert 0 > 0\n +  where 0 = CompressionStats(original_size=11700, compressed_size=770557, compression_ratio=65.85957264957266, pattern_count=0, unique_chars=2, unique_colors=1).pattern_count\n +    where CompressionStats(original_size=11700, compressed_size=770557, compression_ratio=65.85957264957266, pattern_count=0, unique_chars=2, unique_colors=1) = CompressedSprite(name='Patterns', width=30, height=30, layers=[{'name': 'Pattern Layer', 'visible': True, 'opacity': 1.0, 'blend_mode': 'normal', 'runs': [[('#', 0), 1], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 1], [('*', 0), 1], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 1], [('#', 0), 1], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0...nmw+Ha3kJTlamfumOl7te7HH8+n57GQ+xTHPTLozE+qMr5JElrPkE5wln9ssubTm/K+ZN2t2XqPQHun59Hx6Pvk350WdF30nL9o1WNdR+RxCHjyfns+O59PZ1RjI2dVvs6tdA3aufc+n5/M08ynO0Wbis5nUbMmHZUs+IlvywdhkHHb+18wwa3btC7DfVtgzf9wjPfM7HelArgO5r74mn3teN+ypM+22oD3zBz7SM7/TkdpwcCYTnIkCZxLAguCvIO6bDfnO/6771BLuu9Ky77pLR1XpmT/wkZ75nY50zPh4MeNF33VejNnrSM+8Z77nWTrczDvy7MjzO5HnRcugXpTZ60jPvGe+51k63Mxr49eZ1HUmbC3IWAuS1YI8dTZFLXKIXpvZ7kjPvGe+51k63Mw7x33YHHdiA7Cn8jj4Es0ws+SZP9KRJ555Z8qdKX8nUz4QG3riJZphZskzf6QjTzzz2nx7JtaeSbMLQuyC6LogsJ6NqYscYk/FefAlmmFmyTN/pCNPPPMOyh82KH/IRdF9S7XfzrynI32P+jgX36MeZ/4PHGcitJ/I6ici+olkfj6Qn4/hJ8P3r79wf/2OlWQzrA19zEtP5+J75Hvke5Q+0vn/4+X/l33xWiI6LMuOG3bfI98j36P0kX4YwfEeRqBzvGcu4J7Oxfeox5n3PfI9Wn2k9MkIiQciJJ6DkH/8Qf6hB/lHHSQfcKByvGeWiG6XpSzjvke+R8e6R37GwmGfsZAxvmdWin7bd98j3yPfo0PdIz/w4bAPfND533NV55B17Hvke9TZzPsezThS+vSJxEMnEs+ayD9iIv9gifzjJJIPkVAZXy9SWSJ8j3yPfI8aH+nnWBz2ORbjos49nYuVwvfI98j3qNGRfqjGYR+q8cffv3//8v8B7ilWdQ=='}], palette=ColorPalette(colors=[Color(r=255, g=255, b=255, a=1.0)], indices={'255,255,255,1.0': 0}), metadata={}, compression_stats=CompressionStats(original_size=11700, compressed_size=770557, compression_ratio=65.85957264957266, pattern_count=0, unique_chars=2, unique_colors=1)).compression_stats"}, "traceback": [{"path": "tests/test_compression.py", "lineno": 237, "message": "AssertionError"}], "longrepr": "self = <tests.test_compression.TestSpriteCompressor object at 0x7fd357611e50>\n\n    def test_pattern_detection(self):\n        \"\"\"Test pattern detection in compression\"\"\"\n        sprite = Sprite(name=\"Patterns\", width=30, height=30)\n        layer = sprite.add_layer(\"Pattern Layer\")\n    \n        # Create 3x3 repeated pattern\n        pattern = [\n            ['#', '*', '#'],\n            ['*', '#', '*'],\n            ['#', '*', '#']\n        ]\n    \n        color = Color(r=255, g=255, b=255)\n    \n        for py in range(0, 30, 3):\n            for px in range(0, 30, 3):\n                for dy in range(3):\n                    for dx in range(3):\n                        if py + dy < 30 and px + dx < 30:\n                            char = pattern[dy][dx]\n                            layer.set_pixel(px + dx, py + dy,\n                                          Pixel(char=char, color=color))\n    \n        compressor = SpriteCompressor()\n        compressed = compressor.compress(sprite)\n    \n        # Should detect patterns\n>       assert compressed.compression_stats.pattern_count > 0\nE       AssertionError: assert 0 > 0\nE        +  where 0 = CompressionStats(original_size=11700, compressed_size=770557, compression_ratio=65.85957264957266, pattern_count=0, unique_chars=2, unique_colors=1).pattern_count\nE        +    where CompressionStats(original_size=11700, compressed_size=770557, compression_ratio=65.85957264957266, pattern_count=0, unique_chars=2, unique_colors=1) = CompressedSprite(name='Patterns', width=30, height=30, layers=[{'name': 'Pattern Layer', 'visible': True, 'opacity': 1.0, 'blend_mode': 'normal', 'runs': [[('#', 0), 1], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 1], [('*', 0), 1], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 2], [('#', 0), 1], [('*', 0), 1], [('#', 0), 1], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0), 1], [('#', 0), 2], [('*', 0...nmw+Ha3kJTlamfumOl7te7HH8+n57GQ+xTHPTLozE+qMr5JElrPkE5wln9ssubTm/K+ZN2t2XqPQHun59Hx6Pvk350WdF30nL9o1WNdR+RxCHjyfns+O59PZ1RjI2dVvs6tdA3aufc+n5/M08ynO0Wbis5nUbMmHZUs+IlvywdhkHHb+18wwa3btC7DfVtgzf9wjPfM7HelArgO5r74mn3teN+ypM+22oD3zBz7SM7/TkdpwcCYTnIkCZxLAguCvIO6bDfnO/6771BLuu9Ky77pLR1XpmT/wkZ75nY50zPh4MeNF33VejNnrSM+8Z77nWTrczDvy7MjzO5HnRcugXpTZ60jPvGe+51k63Mxr49eZ1HUmbC3IWAuS1YI8dTZFLXKIXpvZ7kjPvGe+51k63Mw7x33YHHdiA7Cn8jj4Es0ws+SZP9KRJ555Z8qdKX8nUz4QG3riJZphZskzf6QjTzzz2nx7JtaeSbMLQuyC6LogsJ6NqYscYk/FefAlmmFmyTN/pCNPPPMOyh82KH/IRdF9S7XfzrynI32P+jgX36MeZ/4PHGcitJ/I6ici+olkfj6Qn4/hJ8P3r79wf/2OlWQzrA19zEtP5+J75Hvke5Q+0vn/4+X/l33xWiI6LMuOG3bfI98j36P0kX4YwfEeRqBzvGcu4J7Oxfeox5n3PfI9Wn2k9MkIiQciJJ6DkH/8Qf6hB/lHHSQfcKByvGeWiG6XpSzjvke+R8e6R37GwmGfsZAxvmdWin7bd98j3yPfo0PdIz/w4bAPfND533NV55B17Hvke9TZzPsezThS+vSJxEMnEs+ayD9iIv9gifzjJJIPkVAZXy9SWSJ8j3yPfI8aH+nnWBz2ORbjos49nYuVwvfI98j3qNGRfqjGYR+q8cffv3//8v8B7ilWdQ=='}], palette=ColorPalette(colors=[Color(r=255, g=255, b=255, a=1.0)], indices={'255,255,255,1.0': 0}), metadata={}, compression_stats=CompressionStats(original_size=11700, compressed_size=770557, compression_ratio=65.85957264957266, pattern_count=0, unique_chars=2, unique_colors=1)).compression_stats\n\ntests/test_compression.py:237: AssertionError"}, "teardown": {"duration": 0.00016728974878787994, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_multi_layer_compression", "lineno": 238, "outcome": "passed", "keywords": ["test_multi_layer_compression", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00010002218186855316, "outcome": "passed"}, "call": {"duration": 0.2713068285956979, "outcome": "passed"}, "teardown": {"duration": 0.00013219844549894333, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compression_stats", "lineno": 267, "outcome": "passed", "keywords": ["test_compression_stats", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.619724005460739e-05, "outcome": "passed"}, "call": {"duration": 1.1982044652104378, "outcome": "passed"}, "teardown": {"duration": 0.0001323884353041649, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_file_operations", "lineno": 296, "outcome": "passed", "keywords": ["test_file_operations", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00010167993605136871, "outcome": "passed"}, "call": {"duration": 0.29086599685251713, "outcome": "passed"}, "teardown": {"duration": 0.00012884754687547684, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_compression_ratio_estimation", "lineno": 332, "outcome": "failed", "keywords": ["test_compression_ratio_estimation", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.698979556560516e-05, "outcome": "passed"}, "call": {"duration": 0.001058812253177166, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_compression.py", "lineno": 342, "message": "assert 0.1 == 1.0"}, "traceback": [{"path": "tests/test_compression.py", "lineno": 342, "message": "AssertionError"}], "longrepr": "self = <tests.test_compression.TestSpriteCompressor object at 0x7fd357612330>\n\n    def test_compression_ratio_estimation(self):\n        \"\"\"Test compression ratio estimation\"\"\"\n        compressor = SpriteCompressor()\n    \n        # Empty sprite - worst case\n        empty_sprite = Sprite(name=\"Empty\", width=100, height=100)\n        empty_sprite.add_layer(\"Empty\")\n    \n        ratio = compressor.estimate_compression_ratio(empty_sprite)\n>       assert ratio == 1.0  # No compression possible\n        ^^^^^^^^^^^^^^^^^^^\nE       assert 0.1 == 1.0\n\ntests/test_compression.py:342: AssertionError"}, "teardown": {"duration": 0.00014030467718839645, "outcome": "passed"}}, {"nodeid": "tests/test_compression.py::TestSpriteCompressor::test_layer_properties_preservation", "lineno": 372, "outcome": "passed", "keywords": ["test_layer_properties_preservation", "TestSpriteCompressor", "test_compression.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.081698954105377e-05, "outcome": "passed"}, "call": {"duration": 0.07998693734407425, "outcome": "passed"}, "teardown": {"duration": 0.00011112447828054428, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestSpriteToAnimation::test_create_animated_sprite", "lineno": 15, "outcome": "passed", "keywords": ["test_create_animated_sprite", "TestSpriteToAnimation", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.288359433412552e-05, "outcome": "passed"}, "call": {"duration": 0.0026834309101104736, "outcome": "passed"}, "teardown": {"duration": 9.850598871707916e-05, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestRenderingPipeline::test_layered_scene_rendering", "lineno": 51, "outcome": "passed", "keywords": ["test_layered_scene_rendering", "TestRenderingPipeline", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.109638631343842e-05, "outcome": "passed"}, "call": {"duration": 0.005032259970903397, "outcome": "passed"}, "teardown": {"duration": 9.928643703460693e-05, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestLightingIntegration::test_lit_scene", "lineno": 102, "outcome": "failed", "keywords": ["test_lit_scene", "TestLightingIntegration", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.778832852840424e-05, "outcome": "passed"}, "call": {"duration": 0.00924873910844326, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/pytermgame/lighting/models.py", "lineno": 109, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for Color\nr\n  Input should be less than or equal to 255 [type=less_than_equal, input_value=263, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/less_than_equal"}, "traceback": [{"path": "tests/test_integration.py", "lineno": 130, "message": ""}, {"path": "pytermgame/lighting/processor.py", "lineno": 219, "message": "in calculate_lighting"}, {"path": "pytermgame/lighting/models.py", "lineno": 109, "message": "ValidationError"}], "longrepr": "self = <tests.test_integration.TestLightingIntegration object at 0x7fd35765e930>\n\n    def test_lit_scene(self):\n        \"\"\"Test scene with dynamic lighting\"\"\"\n        # Create scene\n        renderer = Renderer(width=40, height=20)\n        lighting = LightingProcessor(width=40, height=20)\n    \n        # Create sprite layer\n        sprite_layer = RenderLayer(name=\"sprites\", width=40, height=20)\n    \n        # Add some objects\n        for y in range(5, 15):\n            for x in range(10, 30):\n                if (x + y) % 3 == 0:\n                    sprite_layer.set_pixel(x, y,\n                        Pixel(char='#', color=Color(r=200, g=200, b=200)))\n    \n        # Update occluders from sprite layer\n        lighting.update_occluders(sprite_layer)\n    \n        # Add lights\n        torch1 = lighting.create_torch_light(Vector2D(x=5.0, y=10.0))\n        torch2 = lighting.create_torch_light(Vector2D(x=35.0, y=10.0))\n    \n        # Set time of day\n        lighting.set_time_of_day(20.0)  # Evening\n    \n        # Calculate lighting\n>       lighting.calculate_lighting()\n\ntests/test_integration.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npytermgame/lighting/processor.py:219: in calculate_lighting\n    light_color = light.get_color_at(point)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = LightSource(name='torch_140545680196544', type=<LightType.POINT: 'point'>, position=Vector2D(x=35.0, y=10.0), color=Co...loff=1.5, direction=Vector2D(x=0.0, y=1.0), cone_angle=45.0, cone_softness=0.1, cast_shadows=True, shadow_softness=0.3)\npoint = Vector2D(x=34.0, y=8.0)\n\n    def get_color_at(self, point: Vector2D) -> Color:\n        \"\"\"Get light color at a point\"\"\"\n        intensity = self.get_intensity_at(point)\n>       return Color(\n            r=int(self.color.r * intensity),\n            g=int(self.color.g * intensity),\n            b=int(self.color.b * intensity),\n            a=self.color.a\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for Color\nE       r\nE         Input should be less than or equal to 255 [type=less_than_equal, input_value=263, input_type=int]\nE           For further information visit https://errors.pydantic.dev/2.11/v/less_than_equal\n\npytermgame/lighting/models.py:109: ValidationError"}, "teardown": {"duration": 0.0001269923523068428, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestAnimationWithEffects::test_animated_particle_scene", "lineno": 153, "outcome": "failed", "keywords": ["test_animated_particle_scene", "TestAnimationWithEffects", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.255204349756241e-05, "outcome": "passed"}, "call": {"duration": 0.0003267154097557068, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/pytermgame/particles/models.py", "lineno": 280, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nemission_rate\n  Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/greater_than"}, "traceback": [{"path": "tests/test_integration.py", "lineno": 170, "message": ""}, {"path": "pytermgame/particles/system.py", "lineno": 224, "message": "in create_explosion"}, {"path": "pytermgame/particles/models.py", "lineno": 280, "message": "ValidationError"}], "longrepr": "self = <tests.test_integration.TestAnimationWithEffects object at 0x7fd35765eb10>\n\n    def test_animated_particle_scene(self):\n        \"\"\"Test animation with triggered particle effects\"\"\"\n        # Create animator\n        animator = Animator()\n        animation = animator.create_animation(\"Explosion\", width=50, height=30)\n    \n        # Create particle system\n        particle_system = ParticleSystem(width=50, height=30)\n    \n        # Create frames\n        for i in range(5):\n            if i > 0:\n                animator.add_frame()\n    \n            # Add explosion effect on frame 2\n            if i == 2:\n>               particle_system.create_explosion(Vector2D(x=25.0, y=15.0))\n\ntests/test_integration.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npytermgame/particles/system.py:224: in create_explosion\n    effect = ParticleEffect.create_explosion(position)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pytermgame.particles.models.ParticleEffect'>\nposition = Vector2D(x=25.0, y=15.0)\n\n    @classmethod\n    def create_explosion(cls, position: Vector2D) -> 'ParticleEffect':\n        \"\"\"Create explosion effect\"\"\"\n>       emitter = ParticleEmitter(\n            name=\"explosion\",\n            position=position,\n            shape=\"circle\",\n            shape_params={\"radius\": 2.0},\n            emission_rate=0,\n            burst_count=50,\n            particle_chars=['*', 'x', '+', '.'],\n            particle_lifetime=(0.3, 0.8),\n            particle_speed=(50.0, 150.0),\n            particle_direction=(0.0, 360.0),\n            start_color=Color(r=255, g=200, b=100),\n            end_color=Color(r=255, g=0, b=0),\n            gravity=Vector2D(x=0, y=50)\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nE       emission_rate\nE         Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\nE           For further information visit https://errors.pydantic.dev/2.11/v/greater_than\n\npytermgame/particles/models.py:280: ValidationError"}, "teardown": {"duration": 0.00012266729027032852, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestCompressionWorkflow::test_compress_animated_sprite", "lineno": 207, "outcome": "passed", "keywords": ["test_compress_animated_sprite", "TestCompressionWorkflow", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.055249392986298e-05, "outcome": "passed"}, "call": {"duration": 3.642326908186078, "outcome": "passed"}, "teardown": {"duration": 0.00016274955123662949, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestFullGameScene::test_complete_scene", "lineno": 246, "outcome": "failed", "keywords": ["test_complete_scene", "TestFullGameScene", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.0001018596813082695, "outcome": "passed"}, "call": {"duration": 0.15685406513512135, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/pytermgame/lighting/models.py", "lineno": 109, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for Color\nr\n  Input should be less than or equal to 255 [type=less_than_equal, input_value=263, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/less_than_equal"}, "traceback": [{"path": "tests/test_integration.py", "lineno": 316, "message": ""}, {"path": "pytermgame/lighting/processor.py", "lineno": 219, "message": "in calculate_lighting"}, {"path": "pytermgame/lighting/models.py", "lineno": 109, "message": "ValidationError"}], "longrepr": "self = <tests.test_integration.TestFullGameScene object at 0x7fd35765dfa0>\n\n    def test_complete_scene(self):\n        \"\"\"Test rendering a complete game scene with all features\"\"\"\n        # Scene dimensions\n        width, height = 80, 40\n    \n        # Initialize systems\n        renderer = Renderer(width=width, height=height)\n        lighting = LightingProcessor(width=width, height=height)\n        particles = ParticleSystem(width=width, height=height)\n    \n        # Create background\n        bg_layer = RenderLayer(name=\"background\", width=width, height=height, z_order=0)\n        bg_color = Color(r=20, g=20, b=40)\n        for y in range(height):\n            for x in range(width):\n                bg_layer.set_pixel(x, y, Pixel(char=' ', color=bg_color))\n    \n        # Create terrain\n        terrain_layer = RenderLayer(name=\"terrain\", width=width, height=height, z_order=10)\n    \n        # Ground\n        for x in range(width):\n            for y in range(30, height):\n                terrain_layer.set_pixel(x, y, Pixel(char='=', color=Color(r=100, g=80, b=60)))\n    \n        # Trees\n        tree_positions = [(10, 25), (30, 27), (50, 26), (70, 25)]\n        for tx, ty in tree_positions:\n            # Trunk\n            for y in range(ty, ty + 5):\n                terrain_layer.set_pixel(tx, y, Pixel(char='|', color=Color(r=101, g=67, b=33)))\n            # Leaves\n            for dy in range(-2, 3):\n                for dx in range(-3, 4):\n                    if abs(dx) + abs(dy) <= 3:\n                        terrain_layer.set_pixel(tx + dx, ty - 3 + dy,\n                            Pixel(char='*', color=Color(r=34, g=139, b=34)))\n    \n        # Update lighting occluders\n        lighting.update_occluders(terrain_layer)\n    \n        # Add character sprite\n        character_layer = RenderLayer(name=\"character\", width=width, height=height, z_order=50)\n        char_x, char_y = 40, 28\n    \n        # Simple character\n        character_layer.set_pixel(char_x, char_y - 2, Pixel(char='o', color=Color(r=255, g=220, b=177)))\n        character_layer.set_pixel(char_x, char_y - 1, Pixel(char='|', color=Color(r=100, g=100, b=200)))\n        character_layer.set_pixel(char_x, char_y, Pixel(char='^', color=Color(r=100, g=100, b=200)))\n    \n        # Add lighting\n        lighting.set_time_of_day(19.0)  # Dusk\n    \n        # Add torches\n        for tx, _ in tree_positions:\n            lighting.create_torch_light(Vector2D(x=float(tx), y=20.0))\n    \n        # Character has a lantern\n        lantern = LightSource(\n            name=\"lantern\",\n            type=LightType.POINT,\n            position=Vector2D(x=float(char_x), y=float(char_y - 1)),\n            color=Color(r=255, g=255, b=200),\n            intensity=0.8,\n            radius=15.0\n        )\n        lighting.add_light(lantern)\n    \n        # Calculate lighting\n>       lighting.calculate_lighting()\n\ntests/test_integration.py:316: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npytermgame/lighting/processor.py:219: in calculate_lighting\n    light_color = light.get_color_at(point)\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = LightSource(name='torch_140545656199344', type=<LightType.POINT: 'point'>, position=Vector2D(x=10.0, y=20.0), color=Co...loff=1.5, direction=Vector2D(x=0.0, y=1.0), cone_angle=45.0, cone_softness=0.1, cast_shadows=True, shadow_softness=0.3)\npoint = Vector2D(x=10.0, y=20.0)\n\n    def get_color_at(self, point: Vector2D) -> Color:\n        \"\"\"Get light color at a point\"\"\"\n        intensity = self.get_intensity_at(point)\n>       return Color(\n            r=int(self.color.r * intensity),\n            g=int(self.color.g * intensity),\n            b=int(self.color.b * intensity),\n            a=self.color.a\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for Color\nE       r\nE         Input should be less than or equal to 255 [type=less_than_equal, input_value=263, input_type=int]\nE           For further information visit https://errors.pydantic.dev/2.11/v/less_than_equal\n\npytermgame/lighting/models.py:109: ValidationError"}, "teardown": {"duration": 0.00014374498277902603, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestPerformance::test_rendering_performance", "lineno": 360, "outcome": "failed", "keywords": ["test_rendering_performance", "TestPerformance", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.760167449712753e-05, "outcome": "passed"}, "call": {"duration": 1.0368018420413136, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_integration.py", "lineno": 402, "message": "assert 21 >= 30"}, "traceback": [{"path": "tests/test_integration.py", "lineno": 402, "message": "AssertionError"}], "longrepr": "self = <tests.test_integration.TestPerformance object at 0x7fd35765dd30>\n\n    def test_rendering_performance(self):\n        \"\"\"Test rendering meets performance requirements\"\"\"\n        renderer = Renderer(width=100, height=50)\n    \n        # Add 30 layers (performance requirement)\n        for i in range(30):\n            layer = RenderLayer(\n                name=f\"layer_{i}\",\n                width=100,\n                height=50,\n                z_order=i,\n                opacity=0.8\n            )\n    \n            # Add some content\n            for _ in range(50):\n                import random\n                x = random.randint(0, 99)\n                y = random.randint(0, 49)\n                layer.set_pixel(x, y, Pixel(\n                    char=random.choice(['#', '*', '.', '+', '-']),\n                    color=Color(\n                        r=random.randint(0, 255),\n                        g=random.randint(0, 255),\n                        b=random.randint(0, 255)\n                    )\n                ))\n    \n            renderer.add_layer(layer)\n    \n        # Time rendering\n        start_time = time.time()\n        frames_rendered = 0\n    \n        while time.time() - start_time < 1.0:\n            renderer.render()\n            frames_rendered += 1\n    \n        fps = frames_rendered\n    \n        # Should achieve at least 30 FPS\n>       assert fps >= 30\nE       assert 21 >= 30\n\ntests/test_integration.py:402: AssertionError"}, "teardown": {"duration": 0.00014279410243034363, "outcome": "passed"}}, {"nodeid": "tests/test_integration.py::TestPerformance::test_particle_performance", "lineno": 403, "outcome": "passed", "keywords": ["test_particle_performance", "TestPerformance", "test_integration.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.206961840391159e-05, "outcome": "passed"}, "call": {"duration": 1.0091023370623589, "outcome": "passed"}, "teardown": {"duration": 0.00024016015231609344, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_light_creation", "lineno": 16, "outcome": "passed", "keywords": ["test_light_creation", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00014282390475273132, "outcome": "passed"}, "call": {"duration": 0.00022147689014673233, "outcome": "passed"}, "teardown": {"duration": 0.00010984018445014954, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_point_light_intensity", "lineno": 33, "outcome": "passed", "keywords": ["test_point_light_intensity", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.694641292095184e-05, "outcome": "passed"}, "call": {"duration": 0.00015950016677379608, "outcome": "passed"}, "teardown": {"duration": 8.862372487783432e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_quadratic_falloff", "lineno": 60, "outcome": "passed", "keywords": ["test_quadratic_falloff", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.12821090221405e-05, "outcome": "passed"}, "call": {"duration": 0.00012344494462013245, "outcome": "passed"}, "teardown": {"duration": 7.966626435518265e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_directional_light", "lineno": 75, "outcome": "passed", "keywords": ["test_directional_light", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.105447679758072e-05, "outcome": "passed"}, "call": {"duration": 0.00012283306568861008, "outcome": "passed"}, "teardown": {"duration": 7.744133472442627e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_spot_light", "lineno": 92, "outcome": "passed", "keywords": ["test_spot_light", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.838476449251175e-05, "outcome": "passed"}, "call": {"duration": 0.00017490703612565994, "outcome": "passed"}, "teardown": {"duration": 8.589215576648712e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_ambient_light", "lineno": 113, "outcome": "passed", "keywords": ["test_ambient_light", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.630325853824615e-05, "outcome": "passed"}, "call": {"duration": 0.00010746344923973083, "outcome": "passed"}, "teardown": {"duration": 8.029397577047348e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_disabled_light", "lineno": 129, "outcome": "passed", "keywords": ["test_disabled_light", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.637310773134232e-05, "outcome": "passed"}, "call": {"duration": 0.00010322686284780502, "outcome": "passed"}, "teardown": {"duration": 7.937289774417877e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightSource::test_light_color_at_point", "lineno": 141, "outcome": "passed", "keywords": ["test_light_color_at_point", "TestLightSource", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.035451173782349e-05, "outcome": "passed"}, "call": {"duration": 0.00013853330165147781, "outcome": "passed"}, "teardown": {"duration": 8.225534111261368e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_creation", "lineno": 169, "outcome": "passed", "keywords": ["test_lightmap_creation", "TestLightMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.618125528097153e-05, "outcome": "passed"}, "call": {"duration": 0.0038508493453264236, "outcome": "passed"}, "teardown": {"duration": 0.00010142847895622253, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_operations", "lineno": 179, "outcome": "passed", "keywords": ["test_lightmap_operations", "TestLightMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.61678272485733e-05, "outcome": "passed"}, "call": {"duration": 0.015405146405100822, "outcome": "passed"}, "teardown": {"duration": 0.00011289678514003754, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_scaling", "lineno": 198, "outcome": "passed", "keywords": ["test_lightmap_scaling", "TestLightMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.769426494836807e-05, "outcome": "passed"}, "call": {"duration": 0.0009978963062167168, "outcome": "passed"}, "teardown": {"duration": 9.078904986381531e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightMap::test_lightmap_clear", "lineno": 211, "outcome": "passed", "keywords": ["test_lightmap_clear", "TestLightMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.98618420958519e-05, "outcome": "passed"}, "call": {"duration": 0.0005469797179102898, "outcome": "passed"}, "teardown": {"duration": 9.015761315822601e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_time_creation", "lineno": 235, "outcome": "passed", "keywords": ["test_time_creation", "TestTimeOfDay", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.315499871969223e-05, "outcome": "passed"}, "call": {"duration": 0.00012134760618209839, "outcome": "passed"}, "teardown": {"duration": 8.162204176187515e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_sun_angle", "lineno": 243, "outcome": "passed", "keywords": ["test_sun_angle", "TestTimeOfDay", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.860548794269562e-05, "outcome": "passed"}, "call": {"duration": 0.00014414452016353607, "outcome": "passed"}, "teardown": {"duration": 7.773656398057938e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_ambient_light_cycle", "lineno": 263, "outcome": "passed", "keywords": ["test_ambient_light_cycle", "TestTimeOfDay", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.98739492893219e-05, "outcome": "passed"}, "call": {"duration": 0.00013228971511125565, "outcome": "passed"}, "teardown": {"duration": 7.511675357818604e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_color_interpolation", "lineno": 287, "outcome": "passed", "keywords": ["test_color_interpolation", "TestTimeOfDay", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.313396781682968e-05, "outcome": "passed"}, "call": {"duration": 0.00011167209595441818, "outcome": "passed"}, "teardown": {"duration": 8.049234747886658e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestTimeOfDay::test_time_advancement", "lineno": 300, "outcome": "passed", "keywords": ["test_time_advancement", "TestTimeOfDay", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.824413478374481e-05, "outcome": "passed"}, "call": {"duration": 0.00010592211037874222, "outcome": "passed"}, "teardown": {"duration": 7.675867527723312e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestOccluderMap::test_occluder_creation", "lineno": 316, "outcome": "passed", "keywords": ["test_occluder_creation", "TestOccluderMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.853657007217407e-05, "outcome": "passed"}, "call": {"duration": 0.0006412835791707039, "outcome": "passed"}, "teardown": {"duration": 7.515214383602142e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestOccluderMap::test_occluder_operations", "lineno": 328, "outcome": "passed", "keywords": ["test_occluder_operations", "TestOccluderMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.489044219255447e-05, "outcome": "passed"}, "call": {"duration": 0.00010269042104482651, "outcome": "passed"}, "teardown": {"duration": 8.362531661987305e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestOccluderMap::test_occluder_from_layer", "lineno": 343, "outcome": "passed", "keywords": ["test_occluder_from_layer", "TestOccluderMap", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.440987974405289e-05, "outcome": "passed"}, "call": {"duration": 0.00019216258078813553, "outcome": "passed"}, "teardown": {"duration": 8.700136095285416e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_processor_creation", "lineno": 364, "outcome": "passed", "keywords": ["test_processor_creation", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.292309939861298e-05, "outcome": "passed"}, "call": {"duration": 0.0037116240710020065, "outcome": "passed"}, "teardown": {"duration": 8.573103696107864e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_light_management", "lineno": 375, "outcome": "passed", "keywords": ["test_light_management", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.697528392076492e-05, "outcome": "passed"}, "call": {"duration": 0.00370694138109684, "outcome": "passed"}, "teardown": {"duration": 9.57464799284935e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_basic_lighting_calculation", "lineno": 391, "outcome": "failed", "keywords": ["test_basic_lighting_calculation", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.95433297753334e-05, "outcome": "passed"}, "call": {"duration": 0.0028461432084441185, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_lighting.py", "lineno": 417, "message": "assert 255 < 255\n +  where 255 = Color(r=255, g=255, b=255, a=1.0).r\n +  and   255 = Color(r=255, g=255, b=255, a=1.0).r"}, "traceback": [{"path": "tests/test_lighting.py", "lineno": 417, "message": "AssertionError"}], "longrepr": "self = <tests.test_lighting.TestLightingProcessor object at 0x7fd357679880>\n\n    def test_basic_lighting_calculation(self):\n        \"\"\"Test basic lighting without shadows\"\"\"\n        processor = LightingProcessor(width=20, height=20)\n        processor.shadow_rays = 4  # Reduce for faster test\n    \n        # Add point light\n        light = LightSource(\n            name=\"test\",\n            type=LightType.POINT,\n            position=Vector2D(x=10.0, y=10.0),\n            intensity=1.0,\n            radius=10.0,\n            cast_shadows=False\n        )\n        processor.add_light(light)\n    \n        # Calculate\n        processor.calculate_lighting()\n    \n        # Check center is bright\n        center_light = processor.get_light_at_position(10, 10)\n        assert center_light.r > 200\n    \n        # Check falloff\n        edge_light = processor.get_light_at_position(15, 10)\n>       assert edge_light.r < center_light.r\nE       assert 255 < 255\nE        +  where 255 = Color(r=255, g=255, b=255, a=1.0).r\nE        +  and   255 = Color(r=255, g=255, b=255, a=1.0).r\n\ntests/test_lighting.py:417: AssertionError"}, "teardown": {"duration": 0.0001271190121769905, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_shadow_calculation", "lineno": 418, "outcome": "passed", "keywords": ["test_shadow_calculation", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.051430970430374e-05, "outcome": "passed"}, "call": {"duration": 0.009924408048391342, "outcome": "passed"}, "teardown": {"duration": 9.869225323200226e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_ambient_occlusion", "lineno": 444, "outcome": "passed", "keywords": ["test_ambient_occlusion", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.503347635269165e-05, "outcome": "passed"}, "call": {"duration": 0.0014658579602837563, "outcome": "passed"}, "teardown": {"duration": 8.519552648067474e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_apply_lighting_to_layer", "lineno": 469, "outcome": "failed", "keywords": ["test_apply_lighting_to_layer", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.052680641412735e-05, "outcome": "passed"}, "call": {"duration": 0.0055572036653757095, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_lighting.py", "lineno": 502, "message": "AssertionError: assert 255 < 255\n +  where 255 = Color(r=255, g=255, b=255, a=1.0).r\n +    where Color(r=255, g=255, b=255, a=1.0) = Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=None).color\n +  and   255 = Color(r=255, g=255, b=255, a=1.0).r\n +    where Color(r=255, g=255, b=255, a=1.0) = Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=None).color"}, "traceback": [{"path": "tests/test_lighting.py", "lineno": 502, "message": "AssertionError"}], "longrepr": "self = <tests.test_lighting.TestLightingProcessor object at 0x7fd357679d00>\n\n    def test_apply_lighting_to_layer(self):\n        \"\"\"Test applying lighting to render layer\"\"\"\n        processor = LightingProcessor(width=20, height=20)\n    \n        # Add light\n        light = LightSource(\n            name=\"test\",\n            type=LightType.POINT,\n            position=Vector2D(x=10.0, y=10.0),\n            color=Color(r=255, g=255, b=255),\n            intensity=1.0,\n            radius=15.0\n        )\n        processor.add_light(light)\n        processor.calculate_lighting()\n    \n        # Create layer with white pixels\n        layer = RenderLayer(name=\"test\", width=20, height=20)\n        layer.set_pixel(10, 10, Pixel(char='#', color=Color(r=255, g=255, b=255)))\n        layer.set_pixel(15, 10, Pixel(char='#', color=Color(r=255, g=255, b=255)))\n    \n        # Apply lighting\n        lit_layer = processor.apply_lighting_to_layer(layer)\n    \n        # Center pixel should be bright\n        center = lit_layer.get_pixel(10, 10)\n        assert center is not None\n        assert center.color.r > 200\n    \n        # Edge pixel should be dimmer\n        edge = lit_layer.get_pixel(15, 10)\n        assert edge is not None\n>       assert edge.color.r < center.color.r\nE       AssertionError: assert 255 < 255\nE        +  where 255 = Color(r=255, g=255, b=255, a=1.0).r\nE        +    where Color(r=255, g=255, b=255, a=1.0) = Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=None).color\nE        +  and   255 = Color(r=255, g=255, b=255, a=1.0).r\nE        +    where Color(r=255, g=255, b=255, a=1.0) = Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=None).color\n\ntests/test_lighting.py:502: AssertionError"}, "teardown": {"duration": 0.00012514647096395493, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_torch_light_creation", "lineno": 503, "outcome": "passed", "keywords": ["test_torch_light_creation", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.09995287656784e-05, "outcome": "passed"}, "call": {"duration": 0.018856060691177845, "outcome": "passed"}, "teardown": {"duration": 0.0001012338325381279, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_sun_light_creation", "lineno": 516, "outcome": "passed", "keywords": ["test_sun_light_creation", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00010308995842933655, "outcome": "passed"}, "call": {"duration": 0.001074676401913166, "outcome": "passed"}, "teardown": {"duration": 9.078718721866608e-05, "outcome": "passed"}}, {"nodeid": "tests/test_lighting.py::TestLightingProcessor::test_time_of_day_integration", "lineno": 528, "outcome": "passed", "keywords": ["test_time_of_day_integration", "TestLightingProcessor", "test_lighting.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.07344913482666e-05, "outcome": "passed"}, "call": {"duration": 0.004002134315669537, "outcome": "passed"}, "teardown": {"duration": 8.721090853214264e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_creation", "lineno": 16, "outcome": "passed", "keywords": ["test_vector_creation", "TestVector2D", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.00006091594696e-05, "outcome": "passed"}, "call": {"duration": 9.045004844665527e-05, "outcome": "passed"}, "teardown": {"duration": 7.349532097578049e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_operations", "lineno": 22, "outcome": "passed", "keywords": ["test_vector_operations", "TestVector2D", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.441453635692596e-05, "outcome": "passed"}, "call": {"duration": 9.496510028839111e-05, "outcome": "passed"}, "teardown": {"duration": 7.350742816925049e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_magnitude", "lineno": 42, "outcome": "passed", "keywords": ["test_vector_magnitude", "TestVector2D", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.594563066959381e-05, "outcome": "passed"}, "call": {"duration": 8.890219032764435e-05, "outcome": "passed"}, "teardown": {"duration": 7.409974932670593e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_normalize", "lineno": 47, "outcome": "passed", "keywords": ["test_vector_normalize", "TestVector2D", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.511954754590988e-05, "outcome": "passed"}, "call": {"duration": 9.22083854675293e-05, "outcome": "passed"}, "teardown": {"duration": 7.193628698587418e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestVector2D::test_vector_dot_product", "lineno": 56, "outcome": "passed", "keywords": ["test_vector_dot_product", "TestVector2D", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.682014256715775e-05, "outcome": "passed"}, "call": {"duration": 8.759275078773499e-05, "outcome": "passed"}, "teardown": {"duration": 7.282383739948273e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_creation", "lineno": 68, "outcome": "passed", "keywords": ["test_particle_creation", "TestParticle", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.446669042110443e-05, "outcome": "passed"}, "call": {"duration": 0.0001044226810336113, "outcome": "passed"}, "teardown": {"duration": 7.296539843082428e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_update", "lineno": 86, "outcome": "failed", "keywords": ["test_particle_update", "TestParticle", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.170252501964569e-05, "outcome": "passed"}, "call": {"duration": 0.0002599162980914116, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_particles.py", "lineno": 101, "message": "AssertionError: assert 0.1 == 0.0\n +  where 0.1 = Vector2D(x=1.0, y=0.1).y\n +    where Vector2D(x=1.0, y=0.1) = Particle(position=Vector2D(x=1.0, y=0.1), velocity=Vector2D(x=10.0, y=1.0), acceleration=Vector2D(x=0.0, y=10.0), char='*', color=Color(r=255, g=255, b=255, a=1.0), life=0.9999885559082031, lifetime=1.0, size=1.0, rotation=0.0, angular_velocity=0.0, created_at=1752370260.785294).position"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 101, "message": "AssertionError"}], "longrepr": "self = <tests.test_particles.TestParticle object at 0x7fd35767b290>\n\n    def test_particle_update(self):\n        \"\"\"Test particle physics update\"\"\"\n        particle = Particle(\n            position=Vector2D(x=0.0, y=0.0),\n            velocity=Vector2D(x=10.0, y=0.0),\n            acceleration=Vector2D(x=0.0, y=10.0),  # Gravity\n            lifetime=1.0\n        )\n    \n        # Update for 0.1 seconds\n        particle.update(0.1)\n    \n        # Position should change based on velocity\n        assert particle.position.x == 1.0  # 10 * 0.1\n>       assert particle.position.y == 0.0  # No initial y velocity\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: assert 0.1 == 0.0\nE        +  where 0.1 = Vector2D(x=1.0, y=0.1).y\nE        +    where Vector2D(x=1.0, y=0.1) = Particle(position=Vector2D(x=1.0, y=0.1), velocity=Vector2D(x=10.0, y=1.0), acceleration=Vector2D(x=0.0, y=10.0), char='*', color=Color(r=255, g=255, b=255, a=1.0), life=0.9999885559082031, lifetime=1.0, size=1.0, rotation=0.0, angular_velocity=0.0, created_at=1752370260.785294).position\n\ntests/test_particles.py:101: AssertionError"}, "teardown": {"duration": 0.00012081488966941833, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_lifetime", "lineno": 106, "outcome": "failed", "keywords": ["test_particle_lifetime", "TestParticle", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.508989751338959e-05, "outcome": "passed"}, "call": {"duration": 0.0002600867301225662, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_particles.py", "lineno": 122, "message": "AssertionError: assert 0.49997806549072266 == 0.5\n +  where 0.49997806549072266 = Particle(position=Vector2D(x=0.0, y=0.0), velocity=Vector2D(x=0.0, y=0.0), acceleration=Vector2D(x=0.0, y=0.0), char='*', color=Color(r=255, g=255, b=255, a=1.0), life=0.49997806549072266, lifetime=1.0, size=1.0, rotation=0.0, angular_velocity=0.0, created_at=1752370260.291643).life"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 122, "message": "AssertionError"}], "longrepr": "self = <tests.test_particles.TestParticle object at 0x7fd35767b410>\n\n    def test_particle_lifetime(self):\n        \"\"\"Test particle life tracking\"\"\"\n        particle = Particle(\n            position=Vector2D(),\n            lifetime=1.0\n        )\n    \n        # Initially alive\n        assert particle.is_alive() is True\n        assert particle.life == 1.0\n    \n        # Simulate aging\n        particle.created_at = time.time() - 0.5\n        particle.update(0.0)\n    \n>       assert particle.life == 0.5\nE       AssertionError: assert 0.49997806549072266 == 0.5\nE        +  where 0.49997806549072266 = Particle(position=Vector2D(x=0.0, y=0.0), velocity=Vector2D(x=0.0, y=0.0), acceleration=Vector2D(x=0.0, y=0.0), char='*', color=Color(r=255, g=255, b=255, a=1.0), life=0.49997806549072266, lifetime=1.0, size=1.0, rotation=0.0, angular_velocity=0.0, created_at=1752370260.291643).life\n\ntests/test_particles.py:122: AssertionError"}, "teardown": {"duration": 0.00012055877596139908, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_rotation", "lineno": 131, "outcome": "passed", "keywords": ["test_particle_rotation", "TestParticle", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.061209857463837e-05, "outcome": "passed"}, "call": {"duration": 0.00013094209134578705, "outcome": "passed"}, "teardown": {"duration": 8.242670446634293e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticle::test_particle_char_for_angle", "lineno": 142, "outcome": "passed", "keywords": ["test_particle_char_for_angle", "TestParticle", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.081458508968353e-05, "outcome": "passed"}, "call": {"duration": 0.0001156860962510109, "outcome": "passed"}, "teardown": {"duration": 7.683970034122467e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_emitter_creation", "lineno": 160, "outcome": "passed", "keywords": ["test_emitter_creation", "TestParticleEmitter", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.977057248353958e-05, "outcome": "passed"}, "call": {"duration": 0.0001056622713804245, "outcome": "passed"}, "teardown": {"duration": 7.29365274310112e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_spawn_positions", "lineno": 173, "outcome": "passed", "keywords": ["test_spawn_positions", "TestParticleEmitter", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.418729364871979e-05, "outcome": "passed"}, "call": {"duration": 0.00019501801580190659, "outcome": "passed"}, "teardown": {"duration": 7.670372724533081e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_particle_creation", "lineno": 212, "outcome": "passed", "keywords": ["test_particle_creation", "TestParticleEmitter", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.489882409572601e-05, "outcome": "passed"}, "call": {"duration": 0.00014285091310739517, "outcome": "passed"}, "teardown": {"duration": 8.008815348148346e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_continuous_emission", "lineno": 236, "outcome": "passed", "keywords": ["test_continuous_emission", "TestParticleEmitter", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.53253698348999e-05, "outcome": "passed"}, "call": {"duration": 0.00019617285579442978, "outcome": "passed"}, "teardown": {"duration": 7.714424282312393e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_burst_emission", "lineno": 250, "outcome": "failed", "keywords": ["test_burst_emission", "TestParticleEmitter", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.362756878137589e-05, "outcome": "passed"}, "call": {"duration": 0.0001244228333234787, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_particles.py", "lineno": 253, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nemission_rate\n  Input should be greater than 0 [type=greater_than, input_value=0.0, input_type=float]\n    For further information visit https://errors.pydantic.dev/2.11/v/greater_than"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 253, "message": "ValidationError"}], "longrepr": "self = <tests.test_particles.TestParticleEmitter object at 0x7fd35767bf80>\n\n    def test_burst_emission(self):\n        \"\"\"Test burst particle emission\"\"\"\n>       emitter = ParticleEmitter(\n            name=\"test\",\n            position=Vector2D(),\n            emission_rate=0.0\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nE       emission_rate\nE         Input should be greater than 0 [type=greater_than, input_value=0.0, input_type=float]\nE           For further information visit https://errors.pydantic.dev/2.11/v/greater_than\n\ntests/test_particles.py:253: ValidationError"}, "teardown": {"duration": 0.00012682657688856125, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEmitter::test_emitter_disabling", "lineno": 268, "outcome": "passed", "keywords": ["test_emitter_disabling", "TestParticleEmitter", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.948240429162979e-05, "outcome": "passed"}, "call": {"duration": 0.0001278398558497429, "outcome": "passed"}, "teardown": {"duration": 7.990188896656036e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEffect::test_explosion_effect", "lineno": 285, "outcome": "failed", "keywords": ["test_explosion_effect", "TestParticleEffect", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.964856922626495e-05, "outcome": "passed"}, "call": {"duration": 0.0001450721174478531, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/pytermgame/particles/models.py", "lineno": 280, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nemission_rate\n  Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/greater_than"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 289, "message": ""}, {"path": "pytermgame/particles/models.py", "lineno": 280, "message": "ValidationError"}], "longrepr": "self = <tests.test_particles.TestParticleEffect object at 0x7fd35768c5c0>\n\n    def test_explosion_effect(self):\n        \"\"\"Test explosion effect creation\"\"\"\n        pos = Vector2D(x=50.0, y=50.0)\n>       effect = ParticleEffect.create_explosion(pos)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_particles.py:289: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pytermgame.particles.models.ParticleEffect'>\nposition = Vector2D(x=50.0, y=50.0)\n\n    @classmethod\n    def create_explosion(cls, position: Vector2D) -> 'ParticleEffect':\n        \"\"\"Create explosion effect\"\"\"\n>       emitter = ParticleEmitter(\n            name=\"explosion\",\n            position=position,\n            shape=\"circle\",\n            shape_params={\"radius\": 2.0},\n            emission_rate=0,\n            burst_count=50,\n            particle_chars=['*', 'x', '+', '.'],\n            particle_lifetime=(0.3, 0.8),\n            particle_speed=(50.0, 150.0),\n            particle_direction=(0.0, 360.0),\n            start_color=Color(r=255, g=200, b=100),\n            end_color=Color(r=255, g=0, b=0),\n            gravity=Vector2D(x=0, y=50)\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nE       emission_rate\nE         Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\nE           For further information visit https://errors.pydantic.dev/2.11/v/greater_than\n\npytermgame/particles/models.py:280: ValidationError"}, "teardown": {"duration": 0.00012047309428453445, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEffect::test_fire_effect", "lineno": 299, "outcome": "passed", "keywords": ["test_fire_effect", "TestParticleEffect", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.889567106962204e-05, "outcome": "passed"}, "call": {"duration": 0.00013766437768936157, "outcome": "passed"}, "teardown": {"duration": 7.918570190668106e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleEffect::test_sparkle_effect", "lineno": 312, "outcome": "passed", "keywords": ["test_sparkle_effect", "TestParticleEffect", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.767230272293091e-05, "outcome": "passed"}, "call": {"duration": 0.00011920277029275894, "outcome": "passed"}, "teardown": {"duration": 7.671397179365158e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_system_creation", "lineno": 328, "outcome": "passed", "keywords": ["test_system_creation", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.88634642958641e-05, "outcome": "passed"}, "call": {"duration": 9.755417704582214e-05, "outcome": "passed"}, "teardown": {"duration": 7.632002234458923e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_emitter_management", "lineno": 337, "outcome": "passed", "keywords": ["test_emitter_management", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.572490721940994e-05, "outcome": "passed"}, "call": {"duration": 0.00011055264621973038, "outcome": "passed"}, "teardown": {"duration": 7.281452417373657e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_effect_management", "lineno": 352, "outcome": "failed", "keywords": ["test_effect_management", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.480382919311523e-05, "outcome": "passed"}, "call": {"duration": 0.00012990273535251617, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/pytermgame/particles/models.py", "lineno": 280, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nemission_rate\n  Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/greater_than"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 357, "message": ""}, {"path": "pytermgame/particles/models.py", "lineno": 280, "message": "ValidationError"}], "longrepr": "self = <tests.test_particles.TestParticleSystem object at 0x7fd35767b200>\n\n    def test_effect_management(self):\n        \"\"\"Test adding/removing effects\"\"\"\n        system = ParticleSystem(width=100, height=100)\n    \n>       effect = ParticleEffect.create_explosion(Vector2D(x=50.0, y=50.0))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_particles.py:357: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pytermgame.particles.models.ParticleEffect'>\nposition = Vector2D(x=50.0, y=50.0)\n\n    @classmethod\n    def create_explosion(cls, position: Vector2D) -> 'ParticleEffect':\n        \"\"\"Create explosion effect\"\"\"\n>       emitter = ParticleEmitter(\n            name=\"explosion\",\n            position=position,\n            shape=\"circle\",\n            shape_params={\"radius\": 2.0},\n            emission_rate=0,\n            burst_count=50,\n            particle_chars=['*', 'x', '+', '.'],\n            particle_lifetime=(0.3, 0.8),\n            particle_speed=(50.0, 150.0),\n            particle_direction=(0.0, 360.0),\n            start_color=Color(r=255, g=200, b=100),\n            end_color=Color(r=255, g=0, b=0),\n            gravity=Vector2D(x=0, y=50)\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nE       emission_rate\nE         Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\nE           For further information visit https://errors.pydantic.dev/2.11/v/greater_than\n\npytermgame/particles/models.py:280: ValidationError"}, "teardown": {"duration": 0.00012075714766979218, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_spawn_burst", "lineno": 366, "outcome": "passed", "keywords": ["test_spawn_burst", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00015067867934703827, "outcome": "passed"}, "call": {"duration": 0.0003954824060201645, "outcome": "passed"}, "teardown": {"duration": 0.00012654811143875122, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_particle_update", "lineno": 380, "outcome": "passed", "keywords": ["test_particle_update", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.336229413747787e-05, "outcome": "passed"}, "call": {"duration": 0.00020859669893980026, "outcome": "passed"}, "teardown": {"duration": 7.998477667570114e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_particle_lifetime_management", "lineno": 400, "outcome": "passed", "keywords": ["test_particle_lifetime_management", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.64261931180954e-05, "outcome": "passed"}, "call": {"duration": 0.00013297796249389648, "outcome": "passed"}, "teardown": {"duration": 7.633026689291e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_collision_bounds", "lineno": 417, "outcome": "passed", "keywords": ["test_collision_bounds", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.423851639032364e-05, "outcome": "passed"}, "call": {"duration": 0.00016724690794944763, "outcome": "passed"}, "teardown": {"duration": 7.555261254310608e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_max_particles_limit", "lineno": 436, "outcome": "passed", "keywords": ["test_max_particles_limit", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.067209273576736e-05, "outcome": "passed"}, "call": {"duration": 0.0016874345019459724, "outcome": "passed"}, "teardown": {"duration": 0.00010577309876680374, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_render_to_layer", "lineno": 452, "outcome": "passed", "keywords": ["test_render_to_layer", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.200295269489288e-05, "outcome": "passed"}, "call": {"duration": 0.000327112153172493, "outcome": "passed"}, "teardown": {"duration": 8.162017911672592e-05, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_effect_duration", "lineno": 479, "outcome": "failed", "keywords": ["test_effect_duration", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.473638445138931e-05, "outcome": "passed"}, "call": {"duration": 0.0001230323687195778, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/.venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 991, "message": "AttributeError: 'ParticleSystem' object has no attribute '_effect_start_times'. Did you mean: 'effect_start_times'?"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 495, "message": ""}, {"path": ".venv/lib/python3.12/site-packages/pydantic/main.py", "lineno": 991, "message": "AttributeError"}], "longrepr": "self = <tests.test_particles.TestParticleSystem object at 0x7fd35768ce30>\n\n    def test_effect_duration(self):\n        \"\"\"Test timed effect removal\"\"\"\n        system = ParticleSystem(width=100, height=100)\n    \n        # Add effect with duration\n        effect = ParticleEffect(\n            name=\"timed\",\n            emitters=[],\n            duration=0.5\n        )\n    \n        system.add_effect(effect)\n        assert \"timed\" in system.effects\n    \n        # Simulate time passing\n>       system._effect_start_times[\"timed\"] = time.time() - 1.0\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_particles.py:495: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = ParticleSystem(width=100, height=100, particles=[], emitters={}, effects={'timed': ParticleEffect(name='timed', emitte...llision=False, collision_bounds=None, last_update=1752370260.8356836, effect_start_times={'timed': 1752370260.8356915})\nitem = '_effect_start_times'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'ParticleSystem' object has no attribute '_effect_start_times'. Did you mean: 'effect_start_times'?\n\n.venv/lib/python3.12/site-packages/pydantic/main.py:991: AttributeError"}, "teardown": {"duration": 0.00012305565178394318, "outcome": "passed"}}, {"nodeid": "tests/test_particles.py::TestParticleSystem::test_convenience_effects", "lineno": 500, "outcome": "failed", "keywords": ["test_convenience_effects", "TestParticleSystem", "test_particles.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.040720760822296e-05, "outcome": "passed"}, "call": {"duration": 0.00015450920909643173, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/pytermgame/particles/models.py", "lineno": 280, "message": "pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nemission_rate\n  Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.11/v/greater_than"}, "traceback": [{"path": "tests/test_particles.py", "lineno": 508, "message": ""}, {"path": "pytermgame/particles/system.py", "lineno": 224, "message": "in create_explosion"}, {"path": "pytermgame/particles/models.py", "lineno": 280, "message": "ValidationError"}], "longrepr": "self = <tests.test_particles.TestParticleSystem object at 0x7fd35768cfb0>\n\n    def test_convenience_effects(self):\n        \"\"\"Test convenience effect creation methods\"\"\"\n        system = ParticleSystem(width=100, height=100)\n    \n        pos = Vector2D(x=50.0, y=50.0)\n    \n        # Explosion\n>       system.create_explosion(pos)\n\ntests/test_particles.py:508: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npytermgame/particles/system.py:224: in create_explosion\n    effect = ParticleEffect.create_explosion(position)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'pytermgame.particles.models.ParticleEffect'>\nposition = Vector2D(x=50.0, y=50.0)\n\n    @classmethod\n    def create_explosion(cls, position: Vector2D) -> 'ParticleEffect':\n        \"\"\"Create explosion effect\"\"\"\n>       emitter = ParticleEmitter(\n            name=\"explosion\",\n            position=position,\n            shape=\"circle\",\n            shape_params={\"radius\": 2.0},\n            emission_rate=0,\n            burst_count=50,\n            particle_chars=['*', 'x', '+', '.'],\n            particle_lifetime=(0.3, 0.8),\n            particle_speed=(50.0, 150.0),\n            particle_direction=(0.0, 360.0),\n            start_color=Color(r=255, g=200, b=100),\n            end_color=Color(r=255, g=0, b=0),\n            gravity=Vector2D(x=0, y=50)\n        )\nE       pydantic_core._pydantic_core.ValidationError: 1 validation error for ParticleEmitter\nE       emission_rate\nE         Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\nE           For further information visit https://errors.pydantic.dev/2.11/v/greater_than\n\npytermgame/particles/models.py:280: ValidationError"}, "teardown": {"duration": 0.00012461375445127487, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_layer_creation", "lineno": 13, "outcome": "passed", "keywords": ["test_layer_creation", "TestRenderLayer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.0001035444438457489, "outcome": "passed"}, "call": {"duration": 0.00012199487537145615, "outcome": "passed"}, "teardown": {"duration": 7.835961878299713e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_pixel_operations", "lineno": 24, "outcome": "passed", "keywords": ["test_pixel_operations", "TestRenderLayer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.89538025856018e-05, "outcome": "passed"}, "call": {"duration": 0.0001185564324259758, "outcome": "passed"}, "teardown": {"duration": 8.032377809286118e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_layer_clear", "lineno": 41, "outcome": "passed", "keywords": ["test_layer_clear", "TestRenderLayer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.677171379327774e-05, "outcome": "passed"}, "call": {"duration": 0.00020241737365722656, "outcome": "passed"}, "teardown": {"duration": 7.663015276193619e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderLayer::test_layer_properties", "lineno": 67, "outcome": "passed", "keywords": ["test_layer_properties", "TestRenderLayer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.293373346328735e-05, "outcome": "passed"}, "call": {"duration": 0.00010282732546329498, "outcome": "passed"}, "teardown": {"duration": 7.300358265638351e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestViewport::test_viewport_creation", "lineno": 90, "outcome": "passed", "keywords": ["test_viewport_creation", "TestViewport", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.185712456703186e-05, "outcome": "passed"}, "call": {"duration": 8.938461542129517e-05, "outcome": "passed"}, "teardown": {"duration": 7.222220301628113e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestViewport::test_viewport_contains", "lineno": 99, "outcome": "passed", "keywords": ["test_viewport_contains", "TestViewport", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.369369268417358e-05, "outcome": "passed"}, "call": {"duration": 9.366776794195175e-05, "outcome": "passed"}, "teardown": {"duration": 6.977468729019165e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestViewport::test_coordinate_conversion", "lineno": 112, "outcome": "passed", "keywords": ["test_coordinate_conversion", "TestViewport", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.019937038421631e-05, "outcome": "passed"}, "call": {"duration": 8.615851402282715e-05, "outcome": "passed"}, "teardown": {"duration": 8.139573037624359e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_renderer_creation", "lineno": 130, "outcome": "passed", "keywords": ["test_renderer_creation", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.107295095920563e-05, "outcome": "passed"}, "call": {"duration": 9.415578097105026e-05, "outcome": "passed"}, "teardown": {"duration": 8.714012801647186e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_management", "lineno": 140, "outcome": "passed", "keywords": ["test_layer_management", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.11558386683464e-05, "outcome": "passed"}, "call": {"duration": 0.0001935148611664772, "outcome": "passed"}, "teardown": {"duration": 8.051469922065735e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_z_order_management", "lineno": 164, "outcome": "passed", "keywords": ["test_z_order_management", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.507111877202988e-05, "outcome": "passed"}, "call": {"duration": 0.0002261567860841751, "outcome": "passed"}, "teardown": {"duration": 7.452443242073059e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_basic_rendering", "lineno": 181, "outcome": "passed", "keywords": ["test_basic_rendering", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.181335240602493e-05, "outcome": "passed"}, "call": {"duration": 0.00018036086112260818, "outcome": "passed"}, "teardown": {"duration": 7.482804358005524e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_visibility", "lineno": 207, "outcome": "passed", "keywords": ["test_layer_visibility", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.210113108158112e-05, "outcome": "passed"}, "call": {"duration": 0.00012100674211978912, "outcome": "passed"}, "teardown": {"duration": 7.369089871644974e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_opacity", "lineno": 221, "outcome": "passed", "keywords": ["test_layer_opacity", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.406715303659439e-05, "outcome": "passed"}, "call": {"duration": 0.00020356010645627975, "outcome": "passed"}, "teardown": {"duration": 7.313024252653122e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_viewport_rendering", "lineno": 247, "outcome": "passed", "keywords": ["test_viewport_rendering", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.010584861040115e-05, "outcome": "passed"}, "call": {"duration": 0.00023104529827833176, "outcome": "passed"}, "teardown": {"duration": 7.787905633449554e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_layer_offset", "lineno": 263, "outcome": "passed", "keywords": ["test_layer_offset", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.482524961233139e-05, "outcome": "passed"}, "call": {"duration": 0.00015791784971952438, "outcome": "passed"}, "teardown": {"duration": 7.770676165819168e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_render_to_string", "lineno": 277, "outcome": "passed", "keywords": ["test_render_to_string", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.935147732496262e-05, "outcome": "passed"}, "call": {"duration": 0.0001789294183254242, "outcome": "passed"}, "teardown": {"duration": 7.57100060582161e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestRenderer::test_blend_modes", "lineno": 295, "outcome": "passed", "keywords": ["test_blend_modes", "TestRenderer", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.228180766105652e-05, "outcome": "passed"}, "call": {"duration": 0.00020148232579231262, "outcome": "passed"}, "teardown": {"duration": 8.711032569408417e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestEffects::test_blur_effect", "lineno": 323, "outcome": "passed", "keywords": ["test_blur_effect", "TestEffects", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.665716111660004e-05, "outcome": "passed"}, "call": {"duration": 0.0002115471288561821, "outcome": "passed"}, "teardown": {"duration": 7.423292845487595e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestEffects::test_glow_effect", "lineno": 339, "outcome": "passed", "keywords": ["test_glow_effect", "TestEffects", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.236748933792114e-05, "outcome": "passed"}, "call": {"duration": 0.00018308870494365692, "outcome": "passed"}, "teardown": {"duration": 7.601454854011536e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestEffects::test_effect_in_renderer", "lineno": 356, "outcome": "passed", "keywords": ["test_effect_in_renderer", "TestEffects", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.350090891122818e-05, "outcome": "passed"}, "call": {"duration": 0.000255790539085865, "outcome": "passed"}, "teardown": {"duration": 8.102599531412125e-05, "outcome": "passed"}}, {"nodeid": "tests/test_rendering.py::TestViewportScrolling::test_viewport_scroll", "lineno": 375, "outcome": "passed", "keywords": ["test_viewport_scroll", "TestViewportScrolling", "test_rendering.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.812771946191788e-05, "outcome": "passed"}, "call": {"duration": 0.00010383129119873047, "outcome": "passed"}, "teardown": {"duration": 7.503386586904526e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestColor::test_color_creation", "lineno": 13, "outcome": "passed", "keywords": ["test_color_creation", "TestColor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.989536970853806e-05, "outcome": "passed"}, "call": {"duration": 8.745118975639343e-05, "outcome": "passed"}, "teardown": {"duration": 7.983017712831497e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestColor::test_color_to_ansi", "lineno": 21, "outcome": "passed", "keywords": ["test_color_to_ansi", "TestColor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.256865501403809e-05, "outcome": "passed"}, "call": {"duration": 8.79243016242981e-05, "outcome": "passed"}, "teardown": {"duration": 7.06324353814125e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestColor::test_color_blend", "lineno": 27, "outcome": "passed", "keywords": ["test_color_blend", "TestColor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.757358253002167e-05, "outcome": "passed"}, "call": {"duration": 9.207893162965775e-05, "outcome": "passed"}, "teardown": {"duration": 7.790420204401016e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestPixel::test_pixel_creation", "lineno": 41, "outcome": "passed", "keywords": ["test_pixel_creation", "TestPixel", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.131695747375488e-05, "outcome": "passed"}, "call": {"duration": 9.080860763788223e-05, "outcome": "passed"}, "teardown": {"duration": 7.414538413286209e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestPixel::test_pixel_char_validation", "lineno": 49, "outcome": "passed", "keywords": ["test_pixel_char_validation", "TestPixel", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.436610758304596e-05, "outcome": "passed"}, "call": {"duration": 0.000121300108730793, "outcome": "passed"}, "teardown": {"duration": 8.135195821523666e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestLayer::test_layer_creation", "lineno": 58, "outcome": "passed", "keywords": ["test_layer_creation", "TestLayer", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.54697248339653e-05, "outcome": "passed"}, "call": {"duration": 0.0001012217253446579, "outcome": "passed"}, "teardown": {"duration": 7.109623402357101e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestLayer::test_pixel_operations", "lineno": 68, "outcome": "passed", "keywords": ["test_pixel_operations", "TestLayer", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.206946611404419e-05, "outcome": "passed"}, "call": {"duration": 0.00010340102016925812, "outcome": "passed"}, "teardown": {"duration": 7.852260023355484e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestLayer::test_layer_clear", "lineno": 85, "outcome": "passed", "keywords": ["test_layer_clear", "TestLayer", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.321871817111969e-05, "outcome": "passed"}, "call": {"duration": 0.00011029094457626343, "outcome": "passed"}, "teardown": {"duration": 9.149499237537384e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestLayer::test_layer_resize", "lineno": 103, "outcome": "passed", "keywords": ["test_layer_resize", "TestLayer", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.541663944721222e-05, "outcome": "passed"}, "call": {"duration": 0.00023481529206037521, "outcome": "passed"}, "teardown": {"duration": 0.00010070949792861938, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSprite::test_sprite_creation", "lineno": 130, "outcome": "passed", "keywords": ["test_sprite_creation", "TestSprite", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00013576075434684753, "outcome": "passed"}, "call": {"duration": 0.00013527926057577133, "outcome": "passed"}, "teardown": {"duration": 0.00013120844960212708, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSprite::test_layer_management", "lineno": 139, "outcome": "passed", "keywords": ["test_layer_management", "TestSprite", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 0.00010569952428340912, "outcome": "passed"}, "call": {"duration": 0.00012611225247383118, "outcome": "passed"}, "teardown": {"duration": 7.484108209609985e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSprite::test_layer_ordering", "lineno": 161, "outcome": "passed", "keywords": ["test_layer_ordering", "TestSprite", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.502175867557526e-05, "outcome": "passed"}, "call": {"duration": 0.00012450199574232101, "outcome": "passed"}, "teardown": {"duration": 7.362384349107742e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSprite::test_sprite_composite", "lineno": 176, "outcome": "failed", "keywords": ["test_sprite_composite", "TestSprite", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.286109030246735e-05, "outcome": "passed"}, "call": {"duration": 0.0003439830616116524, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_sprites.py", "lineno": 200, "message": "AssertionError: assert '.' == '#'\n  \n  - #\n  + ."}, "traceback": [{"path": "tests/test_sprites.py", "lineno": 200, "message": "AssertionError"}], "longrepr": "self = <tests.test_sprites.TestSprite object at 0x7fd3574e1eb0>\n\n    def test_sprite_composite(self):\n        \"\"\"Test layer compositing\"\"\"\n        sprite = Sprite(name=\"Test\", width=3, height=3)\n    \n        # Add two layers\n        layer1 = sprite.add_layer(\"Background\")\n        layer2 = sprite.add_layer(\"Foreground\")\n    \n        # Set pixels\n        bg_pixel = Pixel(char='.', color=Color(r=100, g=100, b=100))\n        fg_pixel = Pixel(char='#', color=Color(r=255, g=0, b=0))\n    \n        layer1.set_pixel(1, 1, bg_pixel)\n        layer2.set_pixel(1, 1, fg_pixel)\n        layer2.opacity = 0.5\n    \n        # Composite\n        result = sprite.composite()\n    \n        # Check result\n        composite_pixel = result[1][1]\n        assert composite_pixel is not None\n        # Foreground should be visible due to higher opacity threshold\n>       assert composite_pixel.char == '#'\nE       AssertionError: assert '.' == '#'\nE         \nE         - #\nE         + .\n\ntests/test_sprites.py:200: AssertionError"}, "teardown": {"duration": 0.00012181047350168228, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_editor_creation", "lineno": 205, "outcome": "passed", "keywords": ["test_editor_creation", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 9.038485586643219e-05, "outcome": "passed"}, "call": {"duration": 0.0007000099867582321, "outcome": "passed"}, "teardown": {"duration": 8.178222924470901e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_tool_selection", "lineno": 214, "outcome": "passed", "keywords": ["test_tool_selection", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.662363350391388e-05, "outcome": "passed"}, "call": {"duration": 0.0006857924163341522, "outcome": "passed"}, "teardown": {"duration": 7.745716720819473e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_color_management", "lineno": 224, "outcome": "passed", "keywords": ["test_color_management", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.599685341119766e-05, "outcome": "passed"}, "call": {"duration": 0.0007561873644590378, "outcome": "passed"}, "teardown": {"duration": 8.536316454410553e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_pixel_drawing", "lineno": 242, "outcome": "passed", "keywords": ["test_pixel_drawing", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.805787026882172e-05, "outcome": "passed"}, "call": {"duration": 0.0007336018607020378, "outcome": "passed"}, "teardown": {"duration": 8.13482329249382e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_drawing_tools", "lineno": 256, "outcome": "passed", "keywords": ["test_drawing_tools", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.589999586343765e-05, "outcome": "passed"}, "call": {"duration": 0.000919116660952568, "outcome": "passed"}, "teardown": {"duration": 8.649099618196487e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_fill_tool", "lineno": 279, "outcome": "passed", "keywords": ["test_fill_tool", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.016731590032578e-05, "outcome": "passed"}, "call": {"duration": 0.0009483890607953072, "outcome": "passed"}, "teardown": {"duration": 8.152704685926437e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_layer_operations", "lineno": 296, "outcome": "passed", "keywords": ["test_layer_operations", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.884670048952103e-05, "outcome": "passed"}, "call": {"duration": 0.0007951045408844948, "outcome": "passed"}, "teardown": {"duration": 8.121039718389511e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_undo_redo", "lineno": 313, "outcome": "failed", "keywords": ["test_undo_redo", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.76173546910286e-05, "outcome": "passed"}, "call": {"duration": 0.0010173721238970757, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/tests/test_sprites.py", "lineno": 322, "message": "AssertionError: assert 0 > 0\n +  where 0 = len([])\n +    where [] = EditorState(sprite=Sprite(name='New Sprite', width=32, height=32, layers=[Layer(name='Background', width=32, height=32, pixels=[[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=N...e=True, opacity=1.0, blend_mode='normal')], metadata={}), active_layer=0, active_tool='pencil', primary_color=Color(r=255, g=255, b=255, a=1.0), secondary_color=Color(r=0, g=0, b=0, a=1.0), mode=<EditMode.DRAW: 'draw'>, palette=Palette(name='Default', colors=[Color(r=0, g=0, b=0, a=1.0), Color(r=0, g=0, b=128, a=1.0), Color(r=0, g=0, b=255, a=1.0), Color(r=0, g=128, b=0, a=1.0), Color(r=0, g=128, b=128, a=1.0), Color(r=0, g=128, b=255, a=1.0), Color(r=0, g=255, b=0, a=1.0), Color(r=0, g=255, b=128, a=1.0), Color(r=0, g=255, b=255, a=1.0), Color(r=128, g=0, b=0, a=1.0), Color(r=128, g=0, b=128, a=1.0), Color(r=128, g=0, b=255, a=1.0), Color(r=128, g=128, b=0, a=1.0), Color(r=128, g=128, b=128, a=1.0), Color(r=128, g=128, b=255, a=1.0), Color(r=128, g=255, b=0, a=1.0), Color(r=128, g=255, b=128, a=1.0), Color(r=128, g=255, b=255, a=1.0), Color(r=255, g=0, b=0, a=1.0), Color(r=255, g=0, b=128, a=1.0), Color(r=255, g=0, b=255, a=1.0), Color(r=255, g=128, b=0, a=1.0), Color(r=255, g=128, b=128, a=1.0), Color(r=255, g=128, b=255, a=1.0), Color(r=255, g=255, b=0, a=1.0), Color(r=255, g=255, b=128, a=1.0), Color(r=255, g=255, b=255, a=1.0)]), history=[], history_index=-1, max_history=100).history\n +      where EditorState(sprite=Sprite(name='New Sprite', width=32, height=32, layers=[Layer(name='Background', width=32, height=32, pixels=[[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=N...e=True, opacity=1.0, blend_mode='normal')], metadata={}), active_layer=0, active_tool='pencil', primary_color=Color(r=255, g=255, b=255, a=1.0), secondary_color=Color(r=0, g=0, b=0, a=1.0), mode=<EditMode.DRAW: 'draw'>, palette=Palette(name='Default', colors=[Color(r=0, g=0, b=0, a=1.0), Color(r=0, g=0, b=128, a=1.0), Color(r=0, g=0, b=255, a=1.0), Color(r=0, g=128, b=0, a=1.0), Color(r=0, g=128, b=128, a=1.0), Color(r=0, g=128, b=255, a=1.0), Color(r=0, g=255, b=0, a=1.0), Color(r=0, g=255, b=128, a=1.0), Color(r=0, g=255, b=255, a=1.0), Color(r=128, g=0, b=0, a=1.0), Color(r=128, g=0, b=128, a=1.0), Color(r=128, g=0, b=255, a=1.0), Color(r=128, g=128, b=0, a=1.0), Color(r=128, g=128, b=128, a=1.0), Color(r=128, g=128, b=255, a=1.0), Color(r=128, g=255, b=0, a=1.0), Color(r=128, g=255, b=128, a=1.0), Color(r=128, g=255, b=255, a=1.0), Color(r=255, g=0, b=0, a=1.0), Color(r=255, g=0, b=128, a=1.0), Color(r=255, g=0, b=255, a=1.0), Color(r=255, g=128, b=0, a=1.0), Color(r=255, g=128, b=128, a=1.0), Color(r=255, g=128, b=255, a=1.0), Color(r=255, g=255, b=0, a=1.0), Color(r=255, g=255, b=128, a=1.0), Color(r=255, g=255, b=255, a=1.0)]), history=[], history_index=-1, max_history=100) = <pytermgame.sprites.editor.SpriteEditor object at 0x7fd3575aa5a0>.state"}, "traceback": [{"path": "tests/test_sprites.py", "lineno": 322, "message": "AssertionError"}], "longrepr": "self = <tests.test_sprites.TestSpriteEditor object at 0x7fd35765ea80>\n\n    def test_undo_redo(self):\n        \"\"\"Test undo/redo functionality\"\"\"\n        editor = SpriteEditor()\n    \n        # Draw something\n        editor.draw_pixel(5, 5)\n    \n        # Record history\n>       assert len(editor.state.history) > 0\nE       AssertionError: assert 0 > 0\nE        +  where 0 = len([])\nE        +    where [] = EditorState(sprite=Sprite(name='New Sprite', width=32, height=32, layers=[Layer(name='Background', width=32, height=32, pixels=[[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=N...e=True, opacity=1.0, blend_mode='normal')], metadata={}), active_layer=0, active_tool='pencil', primary_color=Color(r=255, g=255, b=255, a=1.0), secondary_color=Color(r=0, g=0, b=0, a=1.0), mode=<EditMode.DRAW: 'draw'>, palette=Palette(name='Default', colors=[Color(r=0, g=0, b=0, a=1.0), Color(r=0, g=0, b=128, a=1.0), Color(r=0, g=0, b=255, a=1.0), Color(r=0, g=128, b=0, a=1.0), Color(r=0, g=128, b=128, a=1.0), Color(r=0, g=128, b=255, a=1.0), Color(r=0, g=255, b=0, a=1.0), Color(r=0, g=255, b=128, a=1.0), Color(r=0, g=255, b=255, a=1.0), Color(r=128, g=0, b=0, a=1.0), Color(r=128, g=0, b=128, a=1.0), Color(r=128, g=0, b=255, a=1.0), Color(r=128, g=128, b=0, a=1.0), Color(r=128, g=128, b=128, a=1.0), Color(r=128, g=128, b=255, a=1.0), Color(r=128, g=255, b=0, a=1.0), Color(r=128, g=255, b=128, a=1.0), Color(r=128, g=255, b=255, a=1.0), Color(r=255, g=0, b=0, a=1.0), Color(r=255, g=0, b=128, a=1.0), Color(r=255, g=0, b=255, a=1.0), Color(r=255, g=128, b=0, a=1.0), Color(r=255, g=128, b=128, a=1.0), Color(r=255, g=128, b=255, a=1.0), Color(r=255, g=255, b=0, a=1.0), Color(r=255, g=255, b=128, a=1.0), Color(r=255, g=255, b=255, a=1.0)]), history=[], history_index=-1, max_history=100).history\nE        +      where EditorState(sprite=Sprite(name='New Sprite', width=32, height=32, layers=[Layer(name='Background', width=32, height=32, pixels=[[None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], [None, None, None, None, None, Pixel(char='#', color=Color(r=255, g=255, b=255, a=1.0), background=N...e=True, opacity=1.0, blend_mode='normal')], metadata={}), active_layer=0, active_tool='pencil', primary_color=Color(r=255, g=255, b=255, a=1.0), secondary_color=Color(r=0, g=0, b=0, a=1.0), mode=<EditMode.DRAW: 'draw'>, palette=Palette(name='Default', colors=[Color(r=0, g=0, b=0, a=1.0), Color(r=0, g=0, b=128, a=1.0), Color(r=0, g=0, b=255, a=1.0), Color(r=0, g=128, b=0, a=1.0), Color(r=0, g=128, b=128, a=1.0), Color(r=0, g=128, b=255, a=1.0), Color(r=0, g=255, b=0, a=1.0), Color(r=0, g=255, b=128, a=1.0), Color(r=0, g=255, b=255, a=1.0), Color(r=128, g=0, b=0, a=1.0), Color(r=128, g=0, b=128, a=1.0), Color(r=128, g=0, b=255, a=1.0), Color(r=128, g=128, b=0, a=1.0), Color(r=128, g=128, b=128, a=1.0), Color(r=128, g=128, b=255, a=1.0), Color(r=128, g=255, b=0, a=1.0), Color(r=128, g=255, b=128, a=1.0), Color(r=128, g=255, b=255, a=1.0), Color(r=255, g=0, b=0, a=1.0), Color(r=255, g=0, b=128, a=1.0), Color(r=255, g=0, b=255, a=1.0), Color(r=255, g=128, b=0, a=1.0), Color(r=255, g=128, b=128, a=1.0), Color(r=255, g=128, b=255, a=1.0), Color(r=255, g=255, b=0, a=1.0), Color(r=255, g=255, b=128, a=1.0), Color(r=255, g=255, b=255, a=1.0)]), history=[], history_index=-1, max_history=100) = <pytermgame.sprites.editor.SpriteEditor object at 0x7fd3575aa5a0>.state\n\ntests/test_sprites.py:322: AssertionError"}, "teardown": {"duration": 0.00012020394206047058, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestSpriteEditor::test_sprite_resize", "lineno": 331, "outcome": "passed", "keywords": ["test_sprite_resize", "TestSpriteEditor", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 8.951593190431595e-05, "outcome": "passed"}, "call": {"duration": 0.0009136712178587914, "outcome": "passed"}, "teardown": {"duration": 8.86525958776474e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_pencil_tool", "lineno": 352, "outcome": "passed", "keywords": ["test_pencil_tool", "TestDrawingTools", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.878057658672333e-05, "outcome": "passed"}, "call": {"duration": 8.57766717672348e-05, "outcome": "passed"}, "teardown": {"duration": 7.30026513338089e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_brush_tool", "lineno": 360, "outcome": "passed", "keywords": ["test_brush_tool", "TestDrawingTools", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.276702672243118e-05, "outcome": "passed"}, "call": {"duration": 9.741727262735367e-05, "outcome": "passed"}, "teardown": {"duration": 7.412303239107132e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_line_tool", "lineno": 369, "outcome": "passed", "keywords": ["test_line_tool", "TestDrawingTools", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.41882249712944e-05, "outcome": "passed"}, "call": {"duration": 9.393133223056793e-05, "outcome": "passed"}, "teardown": {"duration": 7.13719055056572e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_rectangle_tool", "lineno": 385, "outcome": "passed", "keywords": ["test_rectangle_tool", "TestDrawingTools", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.365085184574127e-05, "outcome": "passed"}, "call": {"duration": 9.885523468255997e-05, "outcome": "passed"}, "teardown": {"duration": 7.314514368772507e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestDrawingTools::test_circle_tool", "lineno": 406, "outcome": "passed", "keywords": ["test_circle_tool", "TestDrawingTools", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.3213130235672e-05, "outcome": "passed"}, "call": {"duration": 0.00011760927736759186, "outcome": "passed"}, "teardown": {"duration": 7.332302629947662e-05, "outcome": "passed"}}, {"nodeid": "tests/test_sprites.py::TestPalette::test_palette_creation", "lineno": 425, "outcome": "passed", "keywords": ["test_palette_creation", "TestPalette", "test_sprites.py", "tests", "terminal_game_engine_ascii_art", ""], "setup": {"duration": 7.291045039892197e-05, "outcome": "passed"}, "call": {"duration": 0.00011327676475048065, "outcome": "passed"}, "teardown": {"duration": 8.197501301765442e-05, "outcome": "passed"}}], "warnings": [{"message": "Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/librarybench/projects/terminal_game_engine/terminal_game_engine_ascii_art/.venv/lib/python3.12/site-packages/pydantic/_internal/_config.py", "lineno": 323}]}