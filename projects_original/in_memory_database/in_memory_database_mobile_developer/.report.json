{"created": 1746949802.02669, "duration": 1.957646131515503, "exitcode": 1, "root": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer", "environment": {}, "summary": {"failed": 23, "passed": 133, "total": 156, "collected": 156}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/integration/test_sync_workflow.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_sync_workflow.py::test_basic_sync_workflow", "type": "Function", "lineno": 23}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_changes_on_both_sides", "type": "Function", "lineno": 60}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_last_write_wins", "type": "Function", "lineno": 102}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_server_wins", "type": "Function", "lineno": 151}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_field_merge", "type": "Function", "lineno": 200}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_delete_conflict", "type": "Function", "lineno": 253}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_network_interruption", "type": "Function", "lineno": 297}, {"nodeid": "tests/integration/test_sync_workflow.py::test_differential_sync_efficiency", "type": "Function", "lineno": 349}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_status_reporting", "type": "Function", "lineno": 407}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_sync_workflow.py", "type": "Module"}]}, {"nodeid": "tests/performance/test_conflict_resolution.py", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_conflict_resolution.py::test_conflict_resolution_performance[10]", "type": "Function", "lineno": 73}, {"nodeid": "tests/performance/test_conflict_resolution.py::test_conflict_resolution_performance[50]", "type": "Function", "lineno": 73}]}, {"nodeid": "tests/performance/test_performance.py", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.PLUGGED_IN]", "type": "Function", "lineno": 118}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_NORMAL]", "type": "Function", "lineno": 118}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_LOW]", "type": "Function", "lineno": 118}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_CRITICAL]", "type": "Function", "lineno": 118}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.NONE]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.LOW]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.MEDIUM]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.HIGH]", "type": "Function", "lineno": 185}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-10]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-100]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-1000]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-10]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-100]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-1000]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-10]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-100]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-1000]", "type": "Function", "lineno": 277}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[10-1000]", "type": "Function", "lineno": 349}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[100-1000]", "type": "Function", "lineno": 349}]}, {"nodeid": "tests/performance", "outcome": "passed", "result": [{"nodeid": "tests/performance/test_conflict_resolution.py", "type": "Module"}, {"nodeid": "tests/performance/test_performance.py", "type": "Module"}]}, {"nodeid": "tests/unit/test_change_tracker.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_change_tracker.py::test_change_tracker_creation", "type": "Function", "lineno": 10}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_change", "type": "Function", "lineno": 18}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_multiple_changes", "type": "Function", "lineno": 47}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_changes_different_tables", "type": "Function", "lineno": 79}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since", "type": "Function", "lineno": 113}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since_with_client_exclusion", "type": "Function", "lineno": 154}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_latest_change_id", "type": "Function", "lineno": 195}, {"nodeid": "tests/unit/test_change_tracker.py::test_serialize_deserialize_changes", "type": "Function", "lineno": 225}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_to_dict", "type": "Function", "lineno": 272}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_from_dict", "type": "Function", "lineno": 300}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_creation", "type": "Function", "lineno": 328}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_increment", "type": "Function", "lineno": 335}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_update", "type": "Function", "lineno": 351}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_dominates", "type": "Function", "lineno": 368}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_dominates", "type": "Function", "lineno": 383}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_concurrent", "type": "Function", "lineno": 396}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_concurrent", "type": "Function", "lineno": 411}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_to_dict", "type": "Function", "lineno": 426}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_from_dict", "type": "Function", "lineno": 438}]}, {"nodeid": "tests/unit/test_compression.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_compression.py::test_int_compressor", "type": "Function", "lineno": 17}, {"nodeid": "tests/unit/test_compression.py::test_float_compressor", "type": "Function", "lineno": 47}, {"nodeid": "tests/unit/test_compression.py::test_text_compressor", "type": "Function", "lineno": 77}, {"nodeid": "tests/unit/test_compression.py::test_binary_compressor", "type": "Function", "lineno": 112}, {"nodeid": "tests/unit/test_compression.py::test_datetime_compressor", "type": "Function", "lineno": 144}, {"nodeid": "tests/unit/test_compression.py::test_boolean_compressor", "type": "Function", "lineno": 169}, {"nodeid": "tests/unit/test_compression.py::test_none_compressor", "type": "Function", "lineno": 194}, {"nodeid": "tests/unit/test_compression.py::test_list_compressor", "type": "Function", "lineno": 214}, {"nodeid": "tests/unit/test_compression.py::test_dict_compressor", "type": "Function", "lineno": 252}, {"nodeid": "tests/unit/test_compression.py::test_compressor_factory", "type": "Function", "lineno": 288}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor", "type": "Function", "lineno": 325}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_changes", "type": "Function", "lineno": 366}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_set_compression_level", "type": "Function", "lineno": 415}, {"nodeid": "tests/unit/test_compression.py::test_compression_efficiency", "type": "Function", "lineno": 440}]}, {"nodeid": "tests/unit/test_conflict_resolution.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_creation", "type": "Function", "lineno": 16}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_to_dict", "type": "Function", "lineno": 38}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_from_dict", "type": "Function", "lineno": 65}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_creation", "type": "Function", "lineno": 92}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_log_conflict", "type": "Function", "lineno": 99}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_table", "type": "Function", "lineno": 123}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_record", "type": "Function", "lineno": 161}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_client", "type": "Function", "lineno": 199}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_export_import", "type": "Function", "lineno": 237}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_last_write_wins_resolver", "type": "Function", "lineno": 276}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_server_wins_resolver", "type": "Function", "lineno": 302}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_client_wins_resolver", "type": "Function", "lineno": 328}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_merge_fields_resolver", "type": "Function", "lineno": 354}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_custom_merge_resolver", "type": "Function", "lineno": 386}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_creation", "type": "Function", "lineno": 449}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_register_resolver", "type": "Function", "lineno": 459}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_set_default_resolver", "type": "Function", "lineno": 469}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_conflict", "type": "Function", "lineno": 479}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_with_specific_resolver", "type": "Function", "lineno": 512}]}, {"nodeid": "tests/unit/test_database.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_database.py::test_database_creation", "type": "Function", "lineno": 11}, {"nodeid": "tests/unit/test_database.py::test_insert_record", "type": "Function", "lineno": 20}, {"nodeid": "tests/unit/test_database.py::test_insert_duplicate_primary_key", "type": "Function", "lineno": 43}, {"nodeid": "tests/unit/test_database.py::test_update_record", "type": "Function", "lineno": 57}, {"nodeid": "tests/unit/test_database.py::test_update_nonexistent_record", "type": "Function", "lineno": 80}, {"nodeid": "tests/unit/test_database.py::test_delete_record", "type": "Function", "lineno": 94}, {"nodeid": "tests/unit/test_database.py::test_delete_nonexistent_record", "type": "Function", "lineno": 106}, {"nodeid": "tests/unit/test_database.py::test_get_record", "type": "Function", "lineno": 113}, {"nodeid": "tests/unit/test_database.py::test_get_nonexistent_record", "type": "Function", "lineno": 124}, {"nodeid": "tests/unit/test_database.py::test_query_records", "type": "Function", "lineno": 133}, {"nodeid": "tests/unit/test_database.py::test_query_with_limit", "type": "Function", "lineno": 144}, {"nodeid": "tests/unit/test_database.py::test_query_no_results", "type": "Function", "lineno": 154}, {"nodeid": "tests/unit/test_database.py::test_transaction_commit", "type": "Function", "lineno": 163}, {"nodeid": "tests/unit/test_database.py::test_transaction_rollback", "type": "Function", "lineno": 186}, {"nodeid": "tests/unit/test_database.py::test_transaction_explicit_rollback", "type": "Function", "lineno": 210}, {"nodeid": "tests/unit/test_database.py::test_change_log", "type": "Function", "lineno": 232}]}, {"nodeid": "tests/unit/test_power_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_power_manager.py::test_power_mode_from_battery_level", "type": "Function", "lineno": 40}, {"nodeid": "tests/unit/test_power_manager.py::test_power_profile_creation", "type": "Function", "lineno": 62}, {"nodeid": "tests/unit/test_power_manager.py::test_power_profile_get_default_profile", "type": "Function", "lineno": 79}, {"nodeid": "tests/unit/test_power_manager.py::test_deferred_operation_creation", "type": "Function", "lineno": 105}, {"nodeid": "tests/unit/test_power_manager.py::test_deferred_operation_execute", "type": "Function", "lineno": 127}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_creation", "type": "Function", "lineno": 163}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_set_power_mode", "type": "Function", "lineno": 176}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_set_custom_profile", "type": "Function", "lineno": 191}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_update_battery_status", "type": "Function", "lineno": 215}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_should_defer_operation", "type": "Function", "lineno": 235}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_enqueue_operation", "type": "Function", "lineno": 254}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_worker", "type": "Function", "lineno": 275}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_should_execute_now", "type": "Function", "lineno": 302}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_creation", "type": "Function", "lineno": 345}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_method_proxy", "type": "Function", "lineno": 363}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_deferred_operation", "type": "Function", "lineno": 382}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_sync_timer", "type": "Function", "lineno": 409}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_force_sync", "type": "Function", "lineno": 450}]}, {"nodeid": "tests/unit/test_schema_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_creation", "type": "Function", "lineno": 86}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_to_from_dict", "type": "Function", "lineno": 100}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_creation", "type": "Function", "lineno": 129}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_to_from_dict", "type": "Function", "lineno": 154}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_creation", "type": "Function", "lineno": 185}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_to_from_dict", "type": "Function", "lineno": 224}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_creation", "type": "Function", "lineno": 264}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_to_from_dict", "type": "Function", "lineno": 309}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_creation", "type": "Function", "lineno": 363}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_schema", "type": "Function", "lineno": 372}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_migration_plan", "type": "Function", "lineno": 395}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_can_migrate", "type": "Function", "lineno": 422}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_find_migration_path", "type": "Function", "lineno": 465}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_creation", "type": "Function", "lineno": 501}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_create_migration_plan", "type": "Function", "lineno": 509}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_schema_changes", "type": "Function", "lineno": 554}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_column_changes", "type": "Function", "lineno": 583}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_apply_migration", "type": "Function", "lineno": 607}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_creation", "type": "Function", "lineno": 658}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_client_upgrade_plan", "type": "Function", "lineno": 668}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_schema_compatibility", "type": "Function", "lineno": 710}]}, {"nodeid": "tests/unit/test_sync_protocol.py", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_no_loss", "type": "Function", "lineno": 17}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_with_loss", "type": "Function", "lineno": 25}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_with_latency", "type": "Function", "lineno": 33}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_creation", "type": "Function", "lineno": 48}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_update_table_change_id", "type": "Function", "lineno": 58}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_get_table_change_id", "type": "Function", "lineno": 75}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_update_version_vector", "type": "Function", "lineno": 87}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_get_version_vector", "type": "Function", "lineno": 114}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_mark_sync_complete", "type": "Function", "lineno": 131}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_request_from_dict", "type": "Function", "lineno": 147}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_request_to_dict", "type": "Function", "lineno": 183}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_response_from_dict", "type": "Function", "lineno": 209}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_response_to_dict", "type": "Function", "lineno": 247}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_creation", "type": "Function", "lineno": 275}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_get_or_create_client_state", "type": "Function", "lineno": 289}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_process_sync_request", "type": "Function", "lineno": 308}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_create_sync_request", "type": "Function", "lineno": 344}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_process_sync_response", "type": "Function", "lineno": 366}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_with_changes", "type": "Function", "lineno": 416}]}, {"nodeid": "tests/unit", "outcome": "passed", "result": [{"nodeid": "tests/unit/test_change_tracker.py", "type": "Module"}, {"nodeid": "tests/unit/test_compression.py", "type": "Module"}, {"nodeid": "tests/unit/test_conflict_resolution.py", "type": "Module"}, {"nodeid": "tests/unit/test_database.py", "type": "Module"}, {"nodeid": "tests/unit/test_power_manager.py", "type": "Module"}, {"nodeid": "tests/unit/test_schema_manager.py", "type": "Module"}, {"nodeid": "tests/unit/test_sync_protocol.py", "type": "Module"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/integration", "type": "Package"}, {"nodeid": "tests/performance", "type": "Package"}, {"nodeid": "tests/unit", "type": "Package"}]}], "tests": [{"nodeid": "tests/integration/test_sync_workflow.py::test_basic_sync_workflow", "lineno": 23, "outcome": "failed", "keywords": ["test_basic_sync_workflow", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00044904183596372604, "outcome": "passed"}, "call": {"duration": 0.0008737500756978989, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/integration/test_sync_workflow.py", "lineno": 50, "message": "assert None is not None"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 50, "message": "AssertionError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has 1 changes for table users\n  Change 1: insert on (4,), new data: {'id': 4, 'username': 'dave', 'email': 'dave@example.com', 'created_at': 1746949800.1000261, 'active': True}\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {'users': 1}\nProcessing sync request from client: test_client\nProcessing 1 changes for table: users\nNo conflicts detected in table: users\nSending 2 server changes to client\nProcessing 2 server changes for table: users\nApplied server change: update on (3,)\nApplied server change: update on (4,)\nUpdated client version vector for table users\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101f1ee30>, <syncdb.client.SyncServer object at 0x101f410c0>)\n\n    def test_basic_sync_workflow(connected_client_server):\n        \"\"\"Test the basic sync workflow between client and server.\"\"\"\n        client, server = connected_client_server\n    \n        # Add data on the server\n        server.insert(\"users\", {\n            \"id\": 3,\n            \"username\": \"charlie\",\n            \"email\": \"charlie@example.com\"\n        })\n    \n        # Add data on the client\n        client.insert(\"users\", {\n            \"id\": 4,\n            \"username\": \"dave\",\n            \"email\": \"dave@example.com\"\n        })\n    \n        # Sync from server to client and client to server\n        result = client.sync()\n    \n        # Check that the sync was successful\n        assert result is True\n    \n        # Check that the client received the server's data\n        client_user3 = client.get(\"users\", [3])\n>       assert client_user3 is not None\nE       assert None is not None\n\ntests/integration/test_sync_workflow.py:50: AssertionError"}, "teardown": {"duration": 0.00021833321079611778, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_changes_on_both_sides", "lineno": 60, "outcome": "failed", "keywords": ["test_sync_with_changes_on_both_sides", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00025012483820319176, "outcome": "passed"}, "call": {"duration": 0.00032395776361227036, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 69, "message": "ValueError: Record with primary key (5,) does not exist"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 83, "message": ""}, {"path": "syncdb/client.py", "lineno": 244, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 329, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 69, "message": "ValueError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101f93ca0>, <syncdb.client.SyncServer object at 0x101f92020>)\n\n    def test_sync_with_changes_on_both_sides(connected_client_server):\n        \"\"\"Test sync with changes on both client and server.\"\"\"\n        client, server = connected_client_server\n    \n        # Add initial data on the server\n        server.insert(\"users\", {\n            \"id\": 5,\n            \"username\": \"shared_user\",\n            \"email\": \"shared@example.com\"\n        })\n    \n        # Sync to get initial data to client\n        client.sync()\n    \n        # Make changes on the server\n        server.update(\"users\", {\n            \"id\": 5,\n            \"username\": \"shared_user_updated_server\",\n            \"email\": \"shared@example.com\"\n        })\n    \n        # Make different changes on the client\n>       client.update(\"users\", {\n            \"id\": 5,\n            \"username\": \"shared_user\",  # Not changing this\n            \"email\": \"shared_updated@example.com\"  # Changing this\n        })\n\ntests/integration/test_sync_workflow.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:244: in update\n    updated_record = self.database.update(table_name, record, client_id=self.client_id)\nsyncdb/db/database.py:329: in update\n    return table.update(record, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101f93460>\nrecord = {'email': 'shared_updated@example.com', 'id': 5, 'username': 'shared_user'}\nclient_id = 'test_client'\n\n    def update(self, record: Dict[str, Any], client_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"\n        Update an existing record in the table.\n        Returns the updated record.\n        \"\"\"\n        self._validate_record(record)\n        pk_tuple = self._get_primary_key_tuple(record)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (5,) does not exist\n\nsyncdb/db/database.py:69: ValueError"}, "teardown": {"duration": 0.00017266720533370972, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_last_write_wins", "lineno": 102, "outcome": "failed", "keywords": ["test_sync_with_conflict_last_write_wins", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00023529166355729103, "outcome": "passed"}, "call": {"duration": 0.0003200001083314419, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 69, "message": "ValueError: Record with primary key (6,) does not exist"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 128, "message": ""}, {"path": "syncdb/client.py", "lineno": 244, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 329, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 69, "message": "ValueError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101f43760>, <syncdb.client.SyncServer object at 0x101f42b30>)\n\n    def test_sync_with_conflict_last_write_wins(connected_client_server):\n        \"\"\"Test sync with a conflict using last-write-wins strategy.\"\"\"\n        client, server = connected_client_server\n    \n        # Register the conflict resolver\n        client.set_default_conflict_resolver(LastWriteWinsResolver())\n        server.set_default_conflict_resolver(LastWriteWinsResolver())\n    \n        # Add initial data on the server\n        server.insert(\"users\", {\n            \"id\": 6,\n            \"username\": \"conflict_user\",\n            \"email\": \"conflict@example.com\"\n        })\n    \n        # Sync to get initial data to client\n        client.sync()\n    \n        # Update the same record on both sides with different values\n        server.update(\"users\", {\n            \"id\": 6,\n            \"username\": \"conflict_server\",\n            \"email\": \"conflict_server@example.com\"\n        })\n    \n>       client.update(\"users\", {\n            \"id\": 6,\n            \"username\": \"conflict_client\",\n            \"email\": \"conflict_client@example.com\"\n        })\n\ntests/integration/test_sync_workflow.py:128: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:244: in update\n    updated_record = self.database.update(table_name, record, client_id=self.client_id)\nsyncdb/db/database.py:329: in update\n    return table.update(record, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101f42d70>\nrecord = {'email': 'conflict_client@example.com', 'id': 6, 'username': 'conflict_client'}\nclient_id = 'test_client'\n\n    def update(self, record: Dict[str, Any], client_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"\n        Update an existing record in the table.\n        Returns the updated record.\n        \"\"\"\n        self._validate_record(record)\n        pk_tuple = self._get_primary_key_tuple(record)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (6,) does not exist\n\nsyncdb/db/database.py:69: ValueError"}, "teardown": {"duration": 0.00022179214283823967, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_server_wins", "lineno": 151, "outcome": "failed", "keywords": ["test_sync_with_conflict_server_wins", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00026729097589850426, "outcome": "passed"}, "call": {"duration": 0.000338125042617321, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 69, "message": "ValueError: Record with primary key (7,) does not exist"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 177, "message": ""}, {"path": "syncdb/client.py", "lineno": 244, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 329, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 69, "message": "ValueError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101faec20>, <syncdb.client.SyncServer object at 0x101fad7e0>)\n\n    def test_sync_with_conflict_server_wins(connected_client_server):\n        \"\"\"Test sync with a conflict using server-wins strategy.\"\"\"\n        client, server = connected_client_server\n    \n        # Register the conflict resolver\n        client.set_default_conflict_resolver(ServerWinsResolver())\n        server.set_default_conflict_resolver(ServerWinsResolver())\n    \n        # Add initial data on the server\n        server.insert(\"users\", {\n            \"id\": 7,\n            \"username\": \"server_wins_user\",\n            \"email\": \"server_wins@example.com\"\n        })\n    \n        # Sync to get initial data to client\n        client.sync()\n    \n        # Update the same record on both sides with different values\n        server.update(\"users\", {\n            \"id\": 7,\n            \"username\": \"server_value\",\n            \"email\": \"server_value@example.com\"\n        })\n    \n>       client.update(\"users\", {\n            \"id\": 7,\n            \"username\": \"client_value\",\n            \"email\": \"client_value@example.com\"\n        })\n\ntests/integration/test_sync_workflow.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:244: in update\n    updated_record = self.database.update(table_name, record, client_id=self.client_id)\nsyncdb/db/database.py:329: in update\n    return table.update(record, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101fae200>\nrecord = {'email': 'client_value@example.com', 'id': 7, 'username': 'client_value'}\nclient_id = 'test_client'\n\n    def update(self, record: Dict[str, Any], client_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"\n        Update an existing record in the table.\n        Returns the updated record.\n        \"\"\"\n        self._validate_record(record)\n        pk_tuple = self._get_primary_key_tuple(record)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (7,) does not exist\n\nsyncdb/db/database.py:69: ValueError"}, "teardown": {"duration": 0.00021220790222287178, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_conflict_field_merge", "lineno": 200, "outcome": "failed", "keywords": ["test_sync_with_conflict_field_merge", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00027720769867300987, "outcome": "passed"}, "call": {"duration": 0.0004380829632282257, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 69, "message": "ValueError: Record with primary key (8,) does not exist"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 230, "message": ""}, {"path": "syncdb/client.py", "lineno": 244, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 329, "message": "in update"}, {"path": "syncdb/db/database.py", "lineno": 69, "message": "ValueError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101f1ed70>, <syncdb.client.SyncServer object at 0x101baa080>)\n\n    def test_sync_with_conflict_field_merge(connected_client_server):\n        \"\"\"Test sync with a conflict using field merge strategy.\"\"\"\n        client, server = connected_client_server\n    \n        # Create a field merger that takes username from client and email from server\n        field_priorities = {\n            \"users\": [\"username\"]  # Prioritize username from client\n        }\n    \n        client.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n        server.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n    \n        # Add initial data on the server\n        server.insert(\"users\", {\n            \"id\": 8,\n            \"username\": \"merge_user\",\n            \"email\": \"merge@example.com\"\n        })\n    \n        # Sync to get initial data to client\n        client.sync()\n    \n        # Update the same record on both sides with different values\n        server.update(\"users\", {\n            \"id\": 8,\n            \"username\": \"server_username\",\n            \"email\": \"server_email@example.com\"\n        })\n    \n>       client.update(\"users\", {\n            \"id\": 8,\n            \"username\": \"client_username\",\n            \"email\": \"client_email@example.com\"\n        })\n\ntests/integration/test_sync_workflow.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:244: in update\n    updated_record = self.database.update(table_name, record, client_id=self.client_id)\nsyncdb/db/database.py:329: in update\n    return table.update(record, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101baa170>\nrecord = {'email': 'client_email@example.com', 'id': 8, 'username': 'client_username'}\nclient_id = 'test_client'\n\n    def update(self, record: Dict[str, Any], client_id: Optional[str] = None) -> Dict[str, Any]:\n        \"\"\"\n        Update an existing record in the table.\n        Returns the updated record.\n        \"\"\"\n        self._validate_record(record)\n        pk_tuple = self._get_primary_key_tuple(record)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (8,) does not exist\n\nsyncdb/db/database.py:69: ValueError"}, "teardown": {"duration": 0.00022037513554096222, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_delete_conflict", "lineno": 253, "outcome": "failed", "keywords": ["test_sync_with_delete_conflict", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00033337483182549477, "outcome": "passed"}, "call": {"duration": 0.0004040827043354511, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/db/database.py", "lineno": 90, "message": "ValueError: Record with primary key (9,) does not exist"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 280, "message": ""}, {"path": "syncdb/client.py", "lineno": 289, "message": "in delete"}, {"path": "syncdb/db/database.py", "lineno": 346, "message": "in delete"}, {"path": "syncdb/db/database.py", "lineno": 90, "message": "ValueError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101f9efb0>, <syncdb.client.SyncServer object at 0x101f9eb00>)\n\n    def test_sync_with_delete_conflict(connected_client_server):\n        \"\"\"Test sync with a conflict involving deletion.\"\"\"\n        client, server = connected_client_server\n    \n        # Use client-wins resolver to ensure the delete takes precedence\n        client.set_default_conflict_resolver(ClientWinsResolver())\n        server.set_default_conflict_resolver(ClientWinsResolver())\n    \n        # Add initial data on the server\n        server.insert(\"users\", {\n            \"id\": 9,\n            \"username\": \"delete_user\",\n            \"email\": \"delete@example.com\"\n        })\n    \n        # Sync to get initial data to client\n        client.sync()\n    \n        # Update on the server\n        server.update(\"users\", {\n            \"id\": 9,\n            \"username\": \"updated_delete_user\",\n            \"email\": \"delete@example.com\"\n        })\n    \n        # Delete on the client\n>       client.delete(\"users\", [9])\n\ntests/integration/test_sync_workflow.py:280: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/client.py:289: in delete\n    self.database.delete(table_name, primary_key_values, client_id=self.client_id)\nsyncdb/db/database.py:346: in delete\n    table.delete(primary_key_values, client_id)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <syncdb.db.database.Table object at 0x101f9e830>\nprimary_key_values = [9], client_id = 'test_client'\n\n    def delete(self, primary_key_values: List[Any], client_id: Optional[str] = None) -> None:\n        \"\"\"Delete a record from the table by its primary key values.\"\"\"\n        pk_tuple = tuple(primary_key_values)\n    \n        if pk_tuple not in self.records:\n>           raise ValueError(f\"Record with primary key {pk_tuple} does not exist\")\nE           ValueError: Record with primary key (9,) does not exist\n\nsyncdb/db/database.py:90: ValueError"}, "teardown": {"duration": 0.00022016698494553566, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_with_network_interruption", "lineno": 297, "outcome": "failed", "keywords": ["test_sync_with_network_interruption", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.000273791141808033, "outcome": "passed"}, "call": {"duration": 0.000660208985209465, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/integration/test_sync_workflow.py", "lineno": 342, "message": "assert None is not None"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 342, "message": "AssertionError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has 1 changes for table users\n  Change 1: insert on (11,), new data: {'id': 11, 'username': 'network_client', 'email': 'network_client@example.com', 'created_at': 1746949800.168542, 'active': True}\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {'users': 1}\nStarting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has 1 changes for table users\n  Change 1: insert on (11,), new data: {'id': 11, 'username': 'network_client', 'email': 'network_client@example.com', 'created_at': 1746949800.168542, 'active': True}\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {'users': 1}\nProcessing sync request from client: test_client\nProcessing 1 changes for table: users\nNo conflicts detected in table: users\nSending 2 server changes to client\nProcessing 2 server changes for table: users\nApplied server change: update on (10,)\nApplied server change: update on (11,)\nUpdated client version vector for table users\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x101fa3b80>, <syncdb.client.SyncServer object at 0x101fa0250>)\n\n    def test_sync_with_network_interruption(connected_client_server):\n        \"\"\"Test sync with network interruption.\"\"\"\n        client, server = connected_client_server\n    \n        # Add data on the server\n        server.insert(\"users\", {\n            \"id\": 10,\n            \"username\": \"network_user\",\n            \"email\": \"network@example.com\"\n        })\n    \n        # Add data on the client\n        client.insert(\"users\", {\n            \"id\": 11,\n            \"username\": \"network_client\",\n            \"email\": \"network_client@example.com\"\n        })\n    \n        # Modify the network to simulate packet loss\n        poor_network = NetworkSimulator(packet_loss_percent=100.0)  # 100% packet loss\n        original_network = client.sync_engine.network\n        client.sync_engine.network = poor_network\n    \n        # Try to sync - should fail due to network issues\n        result = client.sync()\n        assert result is False\n    \n        # Check that the client didn't get the server's data\n        client_user10 = client.get(\"users\", [10])\n        assert client_user10 is None\n    \n        # Check that the server didn't get the client's data\n        server_user11 = server.get(\"users\", [11])\n        assert server_user11 is None\n    \n        # Restore the network\n        client.sync_engine.network = original_network\n    \n        # Try to sync again - should succeed\n        result = client.sync()\n        assert result is True\n    \n        # Check that the sync completed successfully\n        client_user10 = client.get(\"users\", [10])\n>       assert client_user10 is not None\nE       assert None is not None\n\ntests/integration/test_sync_workflow.py:342: AssertionError"}, "teardown": {"duration": 0.00021408265456557274, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_differential_sync_efficiency", "lineno": 349, "outcome": "failed", "keywords": ["test_differential_sync_efficiency", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002782498486340046, "outcome": "passed"}, "call": {"duration": 0.0006323750130832195, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/integration/test_sync_workflow.py", "lineno": 400, "message": "AssertionError: Differential sync not efficient: 1.825\nassert 1.825 < 0.2"}, "traceback": [{"path": "tests/integration/test_sync_workflow.py", "lineno": 400, "message": "AssertionError"}], "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\nStarting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n", "longrepr": "connected_client_server = (<syncdb.client.SyncClient object at 0x1020a44c0>, <syncdb.client.SyncServer object at 0x1020a72e0>)\n\n    def test_differential_sync_efficiency(connected_client_server):\n        \"\"\"Test the efficiency of differential sync.\"\"\"\n        client, server = connected_client_server\n    \n        # Add some initial data on the server\n        for i in range(20):\n            server.insert(\"tasks\", {\n                \"id\": i,\n                \"user_id\": 1,\n                \"title\": f\"Task {i}\",\n                \"description\": \"Initial description\",\n                \"due_date\": time.time() + 86400,  # Tomorrow\n                \"completed\": False\n            })\n    \n        # First sync to transfer all data\n        client.sync()\n    \n        # Modify just one record on the server\n        server.update(\"tasks\", {\n            \"id\": 5,\n            \"title\": \"Modified Task 5\",\n            \"description\": \"Modified description\"\n        })\n    \n        # Set up tracking for data transfer size\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"full_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if \"tasks\" in data:\n                # This is a differential sync\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        # Calculate the size of a full transfer\n        all_tasks = [client.get(\"tasks\", [i]) for i in range(20)]\n        transfer_data[\"full_size\"] = len(str(all_tasks).encode('utf-8'))\n    \n        # Patch the send method to track transfer size\n        client.sync_engine.network.send = tracking_send\n    \n        # Sync again to transfer just the changes\n        client.sync()\n    \n        # Check that the sync was efficient\n        ratio = transfer_data[\"incremental_size\"] / transfer_data[\"full_size\"]\n    \n        # The incremental sync should be much smaller than the full data\n>       assert ratio < 0.2, f\"Differential sync not efficient: {ratio}\"\nE       AssertionError: Differential sync not efficient: 1.825\nE       assert 1.825 < 0.2\n\ntests/integration/test_sync_workflow.py:400: AssertionError"}, "teardown": {"duration": 0.00020962487906217575, "outcome": "passed"}}, {"nodeid": "tests/integration/test_sync_workflow.py::test_sync_status_reporting", "lineno": 407, "outcome": "passed", "keywords": ["test_sync_status_reporting", "test_sync_workflow.py", "integration", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002766251564025879, "outcome": "passed"}, "call": {"duration": 0.0003137923777103424, "outcome": "passed", "stdout": "Starting sync for client: test_client\nTables to sync: ['users', 'tasks', 'notes']\nClient has no changes for table users\nClient has no changes for table tasks\nClient has no changes for table notes\nSync request: Client ID: test_client\n  Client changes: {}\nProcessing sync request from client: test_client\nSync completed successfully\n"}, "teardown": {"duration": 0.000208249781280756, "outcome": "passed"}}, {"nodeid": "tests/performance/test_conflict_resolution.py::test_conflict_resolution_performance[10]", "lineno": 73, "outcome": "passed", "keywords": ["test_conflict_resolution_performance[10]", "parametrize", "pytestmark", "10", "test_conflict_resolution.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002850419841706753, "outcome": "passed"}, "call": {"duration": 0.0025265412405133247, "outcome": "passed", "stdout": "Starting sync for client: conflict_test_client\nTables to sync: ['users']\nClient has 20 changes for table users\n  Change 1: insert on (0,), new data: {'id': 0, 'username': 'original_user_0', 'email': 'original_0@example.com', 'description': 'Original description 0', 'created_at': 1746949800.1770382, 'active': True}\n  Change 2: insert on (1,), new data: {'id': 1, 'username': 'original_user_1', 'email': 'original_1@example.com', 'description': 'Original description 1', 'created_at': 1746949800.177047, 'active': True}\n  Change 3: insert on (2,), new data: {'id': 2, 'username': 'original_user_2', 'email': 'original_2@example.com', 'description': 'Original description 2', 'created_at': 1746949800.177055, 'active': True}\nSync request: Client ID: conflict_test_client\n  Client changes: {'users': 20}\nProcessing sync request from client: conflict_test_client\nProcessing 20 changes for table: users\nDetected 20 conflicts in table: users\n  Conflict 1: Primary key: (0,)\n    Resolution: {'id': 0, 'username': 'original_user_0', 'email': 'original_0@example.com', 'description': 'Server description 0'}\n  Conflict 2: Primary key: (1,)\n    Resolution: {'id': 1, 'username': 'original_user_1', 'email': 'original_1@example.com', 'description': 'Server description 1'}\n  Conflict 3: Primary key: (2,)\n    Resolution: {'id': 2, 'username': 'original_user_2', 'email': 'original_2@example.com', 'description': 'Server description 2'}\n  Conflict 4: Primary key: (3,)\n    Resolution: {'id': 3, 'username': 'original_user_3', 'email': 'original_3@example.com', 'description': 'Server description 3'}\n  Conflict 5: Primary key: (4,)\n    Resolution: {'id': 4, 'username': 'original_user_4', 'email': 'original_4@example.com', 'description': 'Server description 4'}\nApplied conflict resolution for (0,) in users\nApplied conflict resolution for (1,) in users\nApplied conflict resolution for (2,) in users\nApplied conflict resolution for (3,) in users\nApplied conflict resolution for (4,) in users\nApplied conflict resolution for (5,) in users\nApplied conflict resolution for (6,) in users\nApplied conflict resolution for (7,) in users\nApplied conflict resolution for (8,) in users\nApplied conflict resolution for (9,) in users\nApplied conflict resolution for (0,) in users\nApplied conflict resolution for (1,) in users\nApplied conflict resolution for (2,) in users\nApplied conflict resolution for (3,) in users\nApplied conflict resolution for (4,) in users\nApplied conflict resolution for (5,) in users\nApplied conflict resolution for (6,) in users\nApplied conflict resolution for (7,) in users\nApplied conflict resolution for (8,) in users\nApplied conflict resolution for (9,) in users\nSending 10 server changes to client\nProcessing 10 server changes for table: users\nApplied server change: update on (0,)\nApplied server change: update on (1,)\nApplied server change: update on (2,)\nApplied server change: update on (3,)\nApplied server change: update on (4,)\nApplied server change: update on (5,)\nApplied server change: update on (6,)\nApplied server change: update on (7,)\nApplied server change: update on (8,)\nApplied server change: update on (9,)\nUpdated client version vector for table users\nSync completed successfully\n"}, "teardown": {"duration": 0.00020204205065965652, "outcome": "passed"}}, {"nodeid": "tests/performance/test_conflict_resolution.py::test_conflict_resolution_performance[50]", "lineno": 73, "outcome": "passed", "keywords": ["test_conflict_resolution_performance[50]", "parametrize", "pytestmark", "50", "test_conflict_resolution.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00025124987587332726, "outcome": "passed"}, "call": {"duration": 0.010344916954636574, "outcome": "passed", "stdout": "Starting sync for client: conflict_test_client\nTables to sync: ['users']\nClient has 100 changes for table users\n  Change 1: insert on (0,), new data: {'id': 0, 'username': 'original_user_0', 'email': 'original_0@example.com', 'description': 'Original description 0', 'created_at': 1746949800.180425, 'active': True}\n  Change 2: insert on (1,), new data: {'id': 1, 'username': 'original_user_1', 'email': 'original_1@example.com', 'description': 'Original description 1', 'created_at': 1746949800.1804328, 'active': True}\n  Change 3: insert on (2,), new data: {'id': 2, 'username': 'original_user_2', 'email': 'original_2@example.com', 'description': 'Original description 2', 'created_at': 1746949800.18044, 'active': True}\nSync request: Client ID: conflict_test_client\n  Client changes: {'users': 100}\nProcessing sync request from client: conflict_test_client\nProcessing 100 changes for table: users\nDetected 100 conflicts in table: users\n  Conflict 1: Primary key: (0,)\n    Resolution: {'id': 0, 'username': 'original_user_0', 'email': 'original_0@example.com', 'description': 'Server description 0'}\n  Conflict 2: Primary key: (1,)\n    Resolution: {'id': 1, 'username': 'original_user_1', 'email': 'original_1@example.com', 'description': 'Server description 1'}\n  Conflict 3: Primary key: (2,)\n    Resolution: {'id': 2, 'username': 'original_user_2', 'email': 'original_2@example.com', 'description': 'Server description 2'}\n  Conflict 4: Primary key: (3,)\n    Resolution: {'id': 3, 'username': 'original_user_3', 'email': 'original_3@example.com', 'description': 'Server description 3'}\n  Conflict 5: Primary key: (4,)\n    Resolution: {'id': 4, 'username': 'original_user_4', 'email': 'original_4@example.com', 'description': 'Server description 4'}\nApplied conflict resolution for (0,) in users\nApplied conflict resolution for (1,) in users\nApplied conflict resolution for (2,) in users\nApplied conflict resolution for (3,) in users\nApplied conflict resolution for (4,) in users\nApplied conflict resolution for (5,) in users\nApplied conflict resolution for (6,) in users\nApplied conflict resolution for (7,) in users\nApplied conflict resolution for (8,) in users\nApplied conflict resolution for (9,) in users\nApplied conflict resolution for (10,) in users\nApplied conflict resolution for (11,) in users\nApplied conflict resolution for (12,) in users\nApplied conflict resolution for (13,) in users\nApplied conflict resolution for (14,) in users\nApplied conflict resolution for (15,) in users\nApplied conflict resolution for (16,) in users\nApplied conflict resolution for (17,) in users\nApplied conflict resolution for (18,) in users\nApplied conflict resolution for (19,) in users\nApplied conflict resolution for (20,) in users\nApplied conflict resolution for (21,) in users\nApplied conflict resolution for (22,) in users\nApplied conflict resolution for (23,) in users\nApplied conflict resolution for (24,) in users\nApplied conflict resolution for (25,) in users\nApplied conflict resolution for (26,) in users\nApplied conflict resolution for (27,) in users\nApplied conflict resolution for (28,) in users\nApplied conflict resolution for (29,) in users\nApplied conflict resolution for (30,) in users\nApplied conflict resolution for (31,) in users\nApplied conflict resolution for (32,) in users\nApplied conflict resolution for (33,) in users\nApplied conflict resolution for (34,) in users\nApplied conflict resolution for (35,) in users\nApplied conflict resolution for (36,) in users\nApplied conflict resolution for (37,) in users\nApplied conflict resolution for (38,) in users\nApplied conflict resolution for (39,) in users\nApplied conflict resolution for (40,) in users\nApplied conflict resolution for (41,) in users\nApplied conflict resolution for (42,) in users\nApplied conflict resolution for (43,) in users\nApplied conflict resolution for (44,) in users\nApplied conflict resolution for (45,) in users\nApplied conflict resolution for (46,) in users\nApplied conflict resolution for (47,) in users\nApplied conflict resolution for (48,) in users\nApplied conflict resolution for (49,) in users\nApplied conflict resolution for (0,) in users\nApplied conflict resolution for (1,) in users\nApplied conflict resolution for (2,) in users\nApplied conflict resolution for (3,) in users\nApplied conflict resolution for (4,) in users\nApplied conflict resolution for (5,) in users\nApplied conflict resolution for (6,) in users\nApplied conflict resolution for (7,) in users\nApplied conflict resolution for (8,) in users\nApplied conflict resolution for (9,) in users\nApplied conflict resolution for (10,) in users\nApplied conflict resolution for (11,) in users\nApplied conflict resolution for (12,) in users\nApplied conflict resolution for (13,) in users\nApplied conflict resolution for (14,) in users\nApplied conflict resolution for (15,) in users\nApplied conflict resolution for (16,) in users\nApplied conflict resolution for (17,) in users\nApplied conflict resolution for (18,) in users\nApplied conflict resolution for (19,) in users\nApplied conflict resolution for (20,) in users\nApplied conflict resolution for (21,) in users\nApplied conflict resolution for (22,) in users\nApplied conflict resolution for (23,) in users\nApplied conflict resolution for (24,) in users\nApplied conflict resolution for (25,) in users\nApplied conflict resolution for (26,) in users\nApplied conflict resolution for (27,) in users\nApplied conflict resolution for (28,) in users\nApplied conflict resolution for (29,) in users\nApplied conflict resolution for (30,) in users\nApplied conflict resolution for (31,) in users\nApplied conflict resolution for (32,) in users\nApplied conflict resolution for (33,) in users\nApplied conflict resolution for (34,) in users\nApplied conflict resolution for (35,) in users\nApplied conflict resolution for (36,) in users\nApplied conflict resolution for (37,) in users\nApplied conflict resolution for (38,) in users\nApplied conflict resolution for (39,) in users\nApplied conflict resolution for (40,) in users\nApplied conflict resolution for (41,) in users\nApplied conflict resolution for (42,) in users\nApplied conflict resolution for (43,) in users\nApplied conflict resolution for (44,) in users\nApplied conflict resolution for (45,) in users\nApplied conflict resolution for (46,) in users\nApplied conflict resolution for (47,) in users\nApplied conflict resolution for (48,) in users\nApplied conflict resolution for (49,) in users\nSending 50 server changes to client\nProcessing 50 server changes for table: users\nApplied server change: update on (0,)\nApplied server change: update on (1,)\nApplied server change: update on (2,)\nApplied server change: update on (3,)\nApplied server change: update on (4,)\nApplied server change: update on (5,)\nApplied server change: update on (6,)\nApplied server change: update on (7,)\nApplied server change: update on (8,)\nApplied server change: update on (9,)\nApplied server change: update on (10,)\nApplied server change: update on (11,)\nApplied server change: update on (12,)\nApplied server change: update on (13,)\nApplied server change: update on (14,)\nApplied server change: update on (15,)\nApplied server change: update on (16,)\nApplied server change: update on (17,)\nApplied server change: update on (18,)\nApplied server change: update on (19,)\nApplied server change: update on (20,)\nApplied server change: update on (21,)\nApplied server change: update on (22,)\nApplied server change: update on (23,)\nApplied server change: update on (24,)\nApplied server change: update on (25,)\nApplied server change: update on (26,)\nApplied server change: update on (27,)\nApplied server change: update on (28,)\nApplied server change: update on (29,)\nApplied server change: update on (30,)\nApplied server change: update on (31,)\nApplied server change: update on (32,)\nApplied server change: update on (33,)\nApplied server change: update on (34,)\nApplied server change: update on (35,)\nApplied server change: update on (36,)\nApplied server change: update on (37,)\nApplied server change: update on (38,)\nApplied server change: update on (39,)\nApplied server change: update on (40,)\nApplied server change: update on (41,)\nApplied server change: update on (42,)\nApplied server change: update on (43,)\nApplied server change: update on (44,)\nApplied server change: update on (45,)\nApplied server change: update on (46,)\nApplied server change: update on (47,)\nApplied server change: update on (48,)\nApplied server change: update on (49,)\nUpdated client version vector for table users\nSync completed successfully\n"}, "teardown": {"duration": 0.00018916605040431023, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.PLUGGED_IN]", "lineno": 118, "outcome": "passed", "keywords": ["test_battery_mode_performance[PowerMode.PLUGGED_IN]", "parametrize", "pytestmark", "PowerMode.PLUGGED_IN", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00022741686552762985, "outcome": "passed"}, "call": {"duration": 0.0040675001218914986, "outcome": "passed"}, "teardown": {"duration": 0.00018066586926579475, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_NORMAL]", "lineno": 118, "outcome": "passed", "keywords": ["test_battery_mode_performance[PowerMode.BATTERY_NORMAL]", "parametrize", "pytestmark", "PowerMode.BATTERY_NORMAL", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001887497492134571, "outcome": "passed"}, "call": {"duration": 0.007989624980837107, "outcome": "passed"}, "teardown": {"duration": 0.00018650013953447342, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_LOW]", "lineno": 118, "outcome": "failed", "keywords": ["test_battery_mode_performance[PowerMode.BATTERY_LOW]", "parametrize", "pytestmark", "PowerMode.BATTERY_LOW", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019920803606510162, "outcome": "passed"}, "call": {"duration": 0.0040510413236916065, "outcome": "failed", "crash": {"path": "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py", "lineno": 236, "message": "TypeError: '<' not supported between instances of 'DeferredOperation' and 'DeferredOperation'"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 152, "message": ""}, {"path": "syncdb/power/power_manager.py", "lineno": 411, "message": "in wrapped_method"}, {"path": "syncdb/power/power_manager.py", "lineno": 266, "message": "in enqueue_operation"}, {"path": "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py", "lineno": 150, "message": "in put"}, {"path": "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py", "lineno": 236, "message": "TypeError"}], "longrepr": "mode = <PowerMode.BATTERY_LOW: 3>\n\n    @pytest.mark.parametrize(\"mode\", [\n        PowerMode.PLUGGED_IN,\n        PowerMode.BATTERY_NORMAL,\n        PowerMode.BATTERY_LOW,\n        PowerMode.BATTERY_CRITICAL\n    ])\n    def test_battery_mode_performance(mode):\n        \"\"\"Test the performance impact of different battery modes.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(100, 500)\n    \n        # Create a power manager\n        manager = PowerManager(mode)\n    \n        # Create a battery-aware client\n        battery_client = BatteryAwareClient(client, manager)\n    \n        # Define a workload of operations\n        operations = [\n            (\"insert\", {\"id\": 1000, \"username\": \"perf_test\", \"email\": \"perf@example.com\"}),\n            (\"update\", {\"id\": 1000, \"username\": \"perf_test_updated\", \"email\": \"perf@example.com\"}),\n            (\"query\", {\"user_id\": 1}),\n            (\"get\", [1000]),\n            (\"delete\", [1000])\n        ]\n    \n        # Time the execution of the workload\n        start_time = time.time()\n    \n        for op_type, params in operations:\n            if op_type == \"insert\":\n                battery_client.insert(\"users\", params)\n            elif op_type == \"update\":\n>               battery_client.update(\"users\", params)\n\ntests/performance/test_performance.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/power/power_manager.py:411: in wrapped_method\n    self.power_manager.enqueue_operation(name, priority, *args, **kwargs)\nsyncdb/power/power_manager.py:266: in enqueue_operation\n    self.operation_queue.put((priority.value, operation))\n/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py:150: in put\n    self._put(item)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <queue.PriorityQueue object at 0x10209b9a0>\nitem = (3, DeferredOperation(operation_type='update', priority=<OperationPriority.MEDIUM: 3>, creation_time=1746949800.208367, args=('users', {'id': 1000, 'username': 'perf_test_updated', 'email': 'perf@example.com'}), kwargs={}, callback=None))\n\n    def _put(self, item):\n>       heappush(self.queue, item)\nE       TypeError: '<' not supported between instances of 'DeferredOperation' and 'DeferredOperation'\n\n/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py:236: TypeError"}, "teardown": {"duration": 0.00018149986863136292, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_CRITICAL]", "lineno": 118, "outcome": "failed", "keywords": ["test_battery_mode_performance[PowerMode.BATTERY_CRITICAL]", "parametrize", "pytestmark", "PowerMode.BATTERY_CRITICAL", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015999982133507729, "outcome": "passed"}, "call": {"duration": 0.004000083077698946, "outcome": "failed", "crash": {"path": "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py", "lineno": 236, "message": "TypeError: '<' not supported between instances of 'DeferredOperation' and 'DeferredOperation'"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 152, "message": ""}, {"path": "syncdb/power/power_manager.py", "lineno": 411, "message": "in wrapped_method"}, {"path": "syncdb/power/power_manager.py", "lineno": 266, "message": "in enqueue_operation"}, {"path": "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py", "lineno": 150, "message": "in put"}, {"path": "/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py", "lineno": 236, "message": "TypeError"}], "longrepr": "mode = <PowerMode.BATTERY_CRITICAL: 4>\n\n    @pytest.mark.parametrize(\"mode\", [\n        PowerMode.PLUGGED_IN,\n        PowerMode.BATTERY_NORMAL,\n        PowerMode.BATTERY_LOW,\n        PowerMode.BATTERY_CRITICAL\n    ])\n    def test_battery_mode_performance(mode):\n        \"\"\"Test the performance impact of different battery modes.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(100, 500)\n    \n        # Create a power manager\n        manager = PowerManager(mode)\n    \n        # Create a battery-aware client\n        battery_client = BatteryAwareClient(client, manager)\n    \n        # Define a workload of operations\n        operations = [\n            (\"insert\", {\"id\": 1000, \"username\": \"perf_test\", \"email\": \"perf@example.com\"}),\n            (\"update\", {\"id\": 1000, \"username\": \"perf_test_updated\", \"email\": \"perf@example.com\"}),\n            (\"query\", {\"user_id\": 1}),\n            (\"get\", [1000]),\n            (\"delete\", [1000])\n        ]\n    \n        # Time the execution of the workload\n        start_time = time.time()\n    \n        for op_type, params in operations:\n            if op_type == \"insert\":\n                battery_client.insert(\"users\", params)\n            elif op_type == \"update\":\n>               battery_client.update(\"users\", params)\n\ntests/performance/test_performance.py:152: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/power/power_manager.py:411: in wrapped_method\n    self.power_manager.enqueue_operation(name, priority, *args, **kwargs)\nsyncdb/power/power_manager.py:266: in enqueue_operation\n    self.operation_queue.put((priority.value, operation))\n/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py:150: in put\n    self._put(item)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <queue.PriorityQueue object at 0x101f928f0>\nitem = (3, DeferredOperation(operation_type='update', priority=<OperationPriority.MEDIUM: 3>, creation_time=1746949800.222313, args=('users', {'id': 1000, 'username': 'perf_test_updated', 'email': 'perf@example.com'}), kwargs={}, callback=None))\n\n    def _put(self, item):\n>       heappush(self.queue, item)\nE       TypeError: '<' not supported between instances of 'DeferredOperation' and 'DeferredOperation'\n\n/opt/homebrew/Caskroom/miniforge/base/lib/python3.10/queue.py:236: TypeError"}, "teardown": {"duration": 0.00022895913571119308, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.NONE]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.NONE]", "parametrize", "pytestmark", "CompressionLevel.NONE", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00022554118186235428, "outcome": "passed"}, "call": {"duration": 0.0023327921517193317, "outcome": "passed"}, "teardown": {"duration": 0.00022904202342033386, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.LOW]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.LOW]", "parametrize", "pytestmark", "CompressionLevel.LOW", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002528340555727482, "outcome": "passed"}, "call": {"duration": 0.002286083996295929, "outcome": "passed"}, "teardown": {"duration": 0.00024199998006224632, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.MEDIUM]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.MEDIUM]", "parametrize", "pytestmark", "CompressionLevel.MEDIUM", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002376250922679901, "outcome": "passed"}, "call": {"duration": 0.0023494581691920757, "outcome": "passed"}, "teardown": {"duration": 0.00018750037997961044, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_compression_performance[CompressionLevel.HIGH]", "lineno": 185, "outcome": "passed", "keywords": ["test_compression_performance[CompressionLevel.HIGH]", "parametrize", "pytestmark", "CompressionLevel.HIGH", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019616587087512016, "outcome": "passed"}, "call": {"duration": 0.00234550004824996, "outcome": "passed"}, "teardown": {"duration": 0.00018370896577835083, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-10]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[1-10]", "parametrize", "pytestmark", "1-10", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00021416740491986275, "outcome": "passed"}, "call": {"duration": 0.0008899173699319363, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError: Incremental sync not efficient: 0.6736842105263158\nassert 0.6736842105263158 < ((1 / 100) * 2)"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 10, change_percent = 1\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n>       assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\nE       AssertionError: Incremental sync not efficient: 0.6736842105263158\nE       assert 0.6736842105263158 < ((1 / 100) * 2)\n\ntests/performance/test_performance.py:326: AssertionError"}, "teardown": {"duration": 0.00020333286374807358, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-100]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[1-100]", "parametrize", "pytestmark", "1-100", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002199173904955387, "outcome": "passed"}, "call": {"duration": 0.004289541393518448, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError: Incremental sync not efficient: 0.6736842105263158\nassert 0.6736842105263158 < ((1 / 100) * 2)"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 100, change_percent = 1\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n>       assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\nE       AssertionError: Incremental sync not efficient: 0.6736842105263158\nE       assert 0.6736842105263158 < ((1 / 100) * 2)\n\ntests/performance/test_performance.py:326: AssertionError"}, "teardown": {"duration": 0.00021029077470302582, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[1-1000]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[1-1000]", "parametrize", "pytestmark", "1-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001977500505745411, "outcome": "passed"}, "call": {"duration": 0.04008345818147063, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError: Incremental sync not efficient: 0.6736842105263158\nassert 0.6736842105263158 < ((1 / 100) * 2)"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 1000, change_percent = 1\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n>       assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\nE       AssertionError: Incremental sync not efficient: 0.6736842105263158\nE       assert 0.6736842105263158 < ((1 / 100) * 2)\n\ntests/performance/test_performance.py:326: AssertionError"}, "teardown": {"duration": 0.0002532079815864563, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-10]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[10-10]", "parametrize", "pytestmark", "10-10", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00023974990472197533, "outcome": "passed"}, "call": {"duration": 0.0009484156034886837, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError: Incremental sync not efficient: 0.6736842105263158\nassert 0.6736842105263158 < ((10 / 100) * 2)"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 10, change_percent = 10\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n>       assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\nE       AssertionError: Incremental sync not efficient: 0.6736842105263158\nE       assert 0.6736842105263158 < ((10 / 100) * 2)\n\ntests/performance/test_performance.py:326: AssertionError"}, "teardown": {"duration": 0.0002194172702729702, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-100]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[10-100]", "parametrize", "pytestmark", "10-100", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00023808330297470093, "outcome": "passed"}, "call": {"duration": 0.004432582762092352, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError: Incremental sync not efficient: 0.6736842105263158\nassert 0.6736842105263158 < ((10 / 100) * 2)"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 100, change_percent = 10\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n>       assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\nE       AssertionError: Incremental sync not efficient: 0.6736842105263158\nE       assert 0.6736842105263158 < ((10 / 100) * 2)\n\ntests/performance/test_performance.py:326: AssertionError"}, "teardown": {"duration": 0.00020633358508348465, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[10-1000]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[10-1000]", "parametrize", "pytestmark", "10-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00024204235523939133, "outcome": "passed"}, "call": {"duration": 0.03984283283352852, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError: Incremental sync not efficient: 0.6736842105263158\nassert 0.6736842105263158 < ((10 / 100) * 2)"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 326, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 1000, change_percent = 10\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n>       assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\nE       AssertionError: Incremental sync not efficient: 0.6736842105263158\nE       assert 0.6736842105263158 < ((10 / 100) * 2)\n\ntests/performance/test_performance.py:326: AssertionError"}, "teardown": {"duration": 0.0001998748630285263, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-10]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[50-10]", "parametrize", "pytestmark", "50-10", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002116248942911625, "outcome": "passed"}, "call": {"duration": 0.0009400839917361736, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 327, "message": "AssertionError: Incremental sync not faster: 0.822429906542056\nassert 0.822429906542056 < 0.5"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 327, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 10, change_percent = 50\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n        assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\n>       assert time_ratio < 0.5, f\"Incremental sync not faster: {time_ratio}\"\nE       AssertionError: Incremental sync not faster: 0.822429906542056\nE       assert 0.822429906542056 < 0.5\n\ntests/performance/test_performance.py:327: AssertionError"}, "teardown": {"duration": 0.00020554102957248688, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-100]", "lineno": 277, "outcome": "passed", "keywords": ["test_sync_performance[50-100]", "parametrize", "pytestmark", "50-100", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00021383259445428848, "outcome": "passed"}, "call": {"duration": 0.008744916878640652, "outcome": "passed", "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n"}, "teardown": {"duration": 0.00020424975082278252, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_sync_performance[50-1000]", "lineno": 277, "outcome": "failed", "keywords": ["test_sync_performance[50-1000]", "parametrize", "pytestmark", "50-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00020925002172589302, "outcome": "passed"}, "call": {"duration": 0.04734333325177431, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 327, "message": "AssertionError: Incremental sync not faster: 0.8568181818181818\nassert 0.8568181818181818 < 0.5"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 327, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 1000, change_percent = 50\n\n    @pytest.mark.parametrize(\"record_count\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"change_percent\", [1, 10, 50])\n    def test_sync_performance(record_count, change_percent):\n        \"\"\"Test sync performance with different data volumes and change percentages.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 500)\n    \n        # Track transfer sizes\n        original_send = client.sync_engine.network.send\n        transfer_data = {\"initial_size\": 0, \"incremental_size\": 0}\n    \n        def tracking_send(data):\n            # Track the size of the transfer\n            if transfer_data[\"initial_size\"] == 0:\n                transfer_data[\"initial_size\"] = len(data.encode('utf-8'))\n            else:\n                transfer_data[\"incremental_size\"] = len(data.encode('utf-8'))\n            return original_send(data)\n    \n        client.sync_engine.network.send = tracking_send\n    \n        # Initial sync to get baseline data\n        start_time = time.time()\n        client.sync()\n        initial_sync_time = time.time() - start_time\n    \n        # Calculate how many records to change\n        records_to_change = max(1, int(record_count * change_percent / 100))\n    \n        # Make changes to some records on the server\n        for i in range(records_to_change):\n            record_id = random.randint(0, record_count - 1)\n            server.update(\"users\", {\n                \"id\": record_id,\n                \"username\": f\"updated_{record_id}\",\n                \"description\": generate_random_string(200)\n            })\n    \n        # Sync again and measure the time\n        start_time = time.time()\n        client.sync()\n        incremental_sync_time = time.time() - start_time\n    \n        # Calculate the ratio of incremental to full sync\n        size_ratio = transfer_data[\"incremental_size\"] / transfer_data[\"initial_size\"]\n        time_ratio = incremental_sync_time / initial_sync_time\n    \n        # Check that incremental sync is more efficient\n        assert size_ratio < change_percent / 100 * 2, f\"Incremental sync not efficient: {size_ratio}\"\n>       assert time_ratio < 0.5, f\"Incremental sync not faster: {time_ratio}\"\nE       AssertionError: Incremental sync not faster: 0.8568181818181818\nE       assert 0.8568181818181818 < 0.5\n\ntests/performance/test_performance.py:327: AssertionError"}, "teardown": {"duration": 0.00015812506899237633, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[10-1000]", "lineno": 349, "outcome": "failed", "keywords": ["test_conflict_resolution_performance[10-1000]", "parametrize", "pytestmark", "10-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00017062481492757797, "outcome": "passed"}, "call": {"duration": 0.018895916175097227, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 401, "message": "AssertionError: Record 0 missing on client\nassert None is not None"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 401, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 1000, conflict_count = 10\n\n    @pytest.mark.parametrize(\"record_count\", [1000])\n    @pytest.mark.parametrize(\"conflict_count\", [10, 100])\n    def test_conflict_resolution_performance(record_count, conflict_count):\n        \"\"\"Test the performance of conflict resolution with different conflict volumes.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 100)\n    \n        # Set up conflict resolvers\n        field_priorities = {\n            \"users\": [\"username\", \"email\"]  # Prioritize these fields from client\n        }\n        client.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n        server.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n    \n        # Initial sync to get baseline data\n        client.sync()\n    \n        # Generate a specific set of record IDs for conflict testing\n        # We'll create these records explicitly to ensure they exist\n        conflict_record_ids = list(range(conflict_count))\n    \n        # Ensure the test records exist on both client and server\n        for record_id in conflict_record_ids:\n            try:\n                # Check if record exists\n                existing = server.get(\"users\", [record_id])\n                if existing is None:\n                    # Create the record on the server if it doesn't exist\n                    server.insert(\"users\", {\n                        \"id\": record_id,\n                        \"username\": f\"original_user_{record_id}\",\n                        \"email\": f\"original_{record_id}@example.com\",\n                        \"description\": f\"Original description {record_id}\"\n                    })\n            except Exception as e:\n                # If there's an error (like record not existing), create it\n                server.insert(\"users\", {\n                    \"id\": record_id,\n                    \"username\": f\"original_user_{record_id}\",\n                    \"email\": f\"original_{record_id}@example.com\",\n                    \"description\": f\"Original description {record_id}\"\n                })\n    \n        # Sync to ensure client has all the test records\n        client.sync()\n    \n        # Verify all test records exist on both sides\n        for record_id in conflict_record_ids:\n            server_record = server.get(\"users\", [record_id])\n            client_record = client.get(\"users\", [record_id])\n            assert server_record is not None, f\"Record {record_id} missing on server\"\n>           assert client_record is not None, f\"Record {record_id} missing on client\"\nE           AssertionError: Record 0 missing on client\nE           assert None is not None\n\ntests/performance/test_performance.py:401: AssertionError"}, "teardown": {"duration": 0.0001871245913207531, "outcome": "passed"}}, {"nodeid": "tests/performance/test_performance.py::test_conflict_resolution_performance[100-1000]", "lineno": 349, "outcome": "failed", "keywords": ["test_conflict_resolution_performance[100-1000]", "parametrize", "pytestmark", "100-1000", "test_performance.py", "performance", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00021108286455273628, "outcome": "passed"}, "call": {"duration": 0.019421708304435015, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/performance/test_performance.py", "lineno": 401, "message": "AssertionError: Record 0 missing on client\nassert None is not None"}, "traceback": [{"path": "tests/performance/test_performance.py", "lineno": 401, "message": "AssertionError"}], "stdout": "Starting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\nStarting sync for client: perf_test_client\nTables to sync: ['users', 'data']\nClient has no changes for table users\nClient has no changes for table data\nSync request: Client ID: perf_test_client\n  Client changes: {}\nProcessing sync request from client: perf_test_client\nSync completed successfully\n", "longrepr": "record_count = 1000, conflict_count = 100\n\n    @pytest.mark.parametrize(\"record_count\", [1000])\n    @pytest.mark.parametrize(\"conflict_count\", [10, 100])\n    def test_conflict_resolution_performance(record_count, conflict_count):\n        \"\"\"Test the performance of conflict resolution with different conflict volumes.\"\"\"\n        # Create a client and server\n        client, server = create_test_client_server(record_count, 100)\n    \n        # Set up conflict resolvers\n        field_priorities = {\n            \"users\": [\"username\", \"email\"]  # Prioritize these fields from client\n        }\n        client.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n        server.register_conflict_resolver(\"users\", MergeFieldsResolver(field_priorities))\n    \n        # Initial sync to get baseline data\n        client.sync()\n    \n        # Generate a specific set of record IDs for conflict testing\n        # We'll create these records explicitly to ensure they exist\n        conflict_record_ids = list(range(conflict_count))\n    \n        # Ensure the test records exist on both client and server\n        for record_id in conflict_record_ids:\n            try:\n                # Check if record exists\n                existing = server.get(\"users\", [record_id])\n                if existing is None:\n                    # Create the record on the server if it doesn't exist\n                    server.insert(\"users\", {\n                        \"id\": record_id,\n                        \"username\": f\"original_user_{record_id}\",\n                        \"email\": f\"original_{record_id}@example.com\",\n                        \"description\": f\"Original description {record_id}\"\n                    })\n            except Exception as e:\n                # If there's an error (like record not existing), create it\n                server.insert(\"users\", {\n                    \"id\": record_id,\n                    \"username\": f\"original_user_{record_id}\",\n                    \"email\": f\"original_{record_id}@example.com\",\n                    \"description\": f\"Original description {record_id}\"\n                })\n    \n        # Sync to ensure client has all the test records\n        client.sync()\n    \n        # Verify all test records exist on both sides\n        for record_id in conflict_record_ids:\n            server_record = server.get(\"users\", [record_id])\n            client_record = client.get(\"users\", [record_id])\n            assert server_record is not None, f\"Record {record_id} missing on server\"\n>           assert client_record is not None, f\"Record {record_id} missing on client\"\nE           AssertionError: Record 0 missing on client\nE           assert None is not None\n\ntests/performance/test_performance.py:401: AssertionError"}, "teardown": {"duration": 0.00019970815628767014, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_tracker_creation", "lineno": 10, "outcome": "passed", "keywords": ["test_change_tracker_creation", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00032175006344914436, "outcome": "passed"}, "call": {"duration": 0.00023183319717645645, "outcome": "passed"}, "teardown": {"duration": 0.0001655416563153267, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_change", "lineno": 18, "outcome": "passed", "keywords": ["test_record_change", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00016666576266288757, "outcome": "passed"}, "call": {"duration": 0.0001749587245285511, "outcome": "passed"}, "teardown": {"duration": 0.00020862463861703873, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_multiple_changes", "lineno": 47, "outcome": "passed", "keywords": ["test_record_multiple_changes", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002620830200612545, "outcome": "passed"}, "call": {"duration": 0.00022087479010224342, "outcome": "passed"}, "teardown": {"duration": 0.00025191623717546463, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_record_changes_different_tables", "lineno": 79, "outcome": "passed", "keywords": ["test_record_changes_different_tables", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002198326401412487, "outcome": "passed"}, "call": {"duration": 0.00023354170843958855, "outcome": "passed"}, "teardown": {"duration": 0.00019195908680558205, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since", "lineno": 113, "outcome": "passed", "keywords": ["test_get_changes_since", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00016691721975803375, "outcome": "passed"}, "call": {"duration": 0.00021441560238599777, "outcome": "passed"}, "teardown": {"duration": 0.00019800011068582535, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_changes_since_with_client_exclusion", "lineno": 154, "outcome": "passed", "keywords": ["test_get_changes_since_with_client_exclusion", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002027922309935093, "outcome": "passed"}, "call": {"duration": 0.00020587490871548653, "outcome": "passed"}, "teardown": {"duration": 0.00021245796233415604, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_get_latest_change_id", "lineno": 195, "outcome": "passed", "keywords": ["test_get_latest_change_id", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015458324924111366, "outcome": "passed"}, "call": {"duration": 0.00015308288857340813, "outcome": "passed"}, "teardown": {"duration": 0.00013900035992264748, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_serialize_deserialize_changes", "lineno": 225, "outcome": "passed", "keywords": ["test_serialize_deserialize_changes", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013970909640192986, "outcome": "passed"}, "call": {"duration": 0.00017862487584352493, "outcome": "passed"}, "teardown": {"duration": 0.00014145905151963234, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_to_dict", "lineno": 272, "outcome": "passed", "keywords": ["test_change_record_to_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014312518760561943, "outcome": "passed"}, "call": {"duration": 0.00013108272105455399, "outcome": "passed"}, "teardown": {"duration": 0.00014266697689890862, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_change_record_from_dict", "lineno": 300, "outcome": "passed", "keywords": ["test_change_record_from_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014150002971291542, "outcome": "passed"}, "call": {"duration": 0.00013862503692507744, "outcome": "passed"}, "teardown": {"duration": 0.00015674997121095657, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_creation", "lineno": 328, "outcome": "passed", "keywords": ["test_version_vector_creation", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.000187666155397892, "outcome": "passed"}, "call": {"duration": 0.00020075030624866486, "outcome": "passed"}, "teardown": {"duration": 0.00020504184067249298, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_increment", "lineno": 335, "outcome": "passed", "keywords": ["test_version_vector_increment", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018174992874264717, "outcome": "passed"}, "call": {"duration": 0.00018833298236131668, "outcome": "passed"}, "teardown": {"duration": 0.00016762502491474152, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_update", "lineno": 351, "outcome": "passed", "keywords": ["test_version_vector_update", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001899166963994503, "outcome": "passed"}, "call": {"duration": 0.00020695896819233894, "outcome": "passed"}, "teardown": {"duration": 0.0001489589922130108, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_dominates", "lineno": 368, "outcome": "passed", "keywords": ["test_version_vector_dominates", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015150010585784912, "outcome": "passed"}, "call": {"duration": 0.00019429204985499382, "outcome": "passed"}, "teardown": {"duration": 0.00017533311620354652, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_dominates", "lineno": 383, "outcome": "passed", "keywords": ["test_version_vector_not_dominates", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00016916729509830475, "outcome": "passed"}, "call": {"duration": 0.00015304237604141235, "outcome": "passed"}, "teardown": {"duration": 0.00014287512749433517, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_concurrent", "lineno": 396, "outcome": "passed", "keywords": ["test_version_vector_concurrent", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014362530782818794, "outcome": "passed"}, "call": {"duration": 0.00015170825645327568, "outcome": "passed"}, "teardown": {"duration": 0.00014566676691174507, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_not_concurrent", "lineno": 411, "outcome": "passed", "keywords": ["test_version_vector_not_concurrent", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00017583416774868965, "outcome": "passed"}, "call": {"duration": 0.00014916621148586273, "outcome": "passed"}, "teardown": {"duration": 0.00016012508422136307, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_to_dict", "lineno": 426, "outcome": "passed", "keywords": ["test_version_vector_to_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014566676691174507, "outcome": "passed"}, "call": {"duration": 0.00015054130926728249, "outcome": "passed"}, "teardown": {"duration": 0.00014187488704919815, "outcome": "passed"}}, {"nodeid": "tests/unit/test_change_tracker.py::test_version_vector_from_dict", "lineno": 438, "outcome": "passed", "keywords": ["test_version_vector_from_dict", "test_change_tracker.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00016929162666201591, "outcome": "passed"}, "call": {"duration": 0.00016529066488146782, "outcome": "passed"}, "teardown": {"duration": 0.00017845770344138145, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_int_compressor", "lineno": 17, "outcome": "passed", "keywords": ["test_int_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015391595661640167, "outcome": "passed"}, "call": {"duration": 0.00014295801520347595, "outcome": "passed"}, "teardown": {"duration": 0.00012283306568861008, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_float_compressor", "lineno": 47, "outcome": "passed", "keywords": ["test_float_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014404207468032837, "outcome": "passed"}, "call": {"duration": 0.00014258315786719322, "outcome": "passed"}, "teardown": {"duration": 0.00013529183343052864, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_text_compressor", "lineno": 77, "outcome": "passed", "keywords": ["test_text_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014541717246174812, "outcome": "passed"}, "call": {"duration": 0.00016637519001960754, "outcome": "passed"}, "teardown": {"duration": 0.00013591721653938293, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_binary_compressor", "lineno": 112, "outcome": "passed", "keywords": ["test_binary_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013583386316895485, "outcome": "passed"}, "call": {"duration": 0.00014808401465415955, "outcome": "passed"}, "teardown": {"duration": 0.00014195917174220085, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_datetime_compressor", "lineno": 144, "outcome": "passed", "keywords": ["test_datetime_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014025019481778145, "outcome": "passed"}, "call": {"duration": 0.00016145780682563782, "outcome": "passed"}, "teardown": {"duration": 0.00013866694644093513, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_boolean_compressor", "lineno": 169, "outcome": "passed", "keywords": ["test_boolean_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014283321797847748, "outcome": "passed"}, "call": {"duration": 0.00014683324843645096, "outcome": "passed"}, "teardown": {"duration": 0.00014254217967391014, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_none_compressor", "lineno": 194, "outcome": "passed", "keywords": ["test_none_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013795774430036545, "outcome": "passed"}, "call": {"duration": 0.00014283321797847748, "outcome": "passed"}, "teardown": {"duration": 0.0001377919688820839, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_list_compressor", "lineno": 214, "outcome": "passed", "keywords": ["test_list_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013800011947751045, "outcome": "passed"}, "call": {"duration": 0.00014804210513830185, "outcome": "passed"}, "teardown": {"duration": 0.00012425007298588753, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_dict_compressor", "lineno": 252, "outcome": "passed", "keywords": ["test_dict_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013100029900670052, "outcome": "passed"}, "call": {"duration": 0.000212082639336586, "outcome": "passed"}, "teardown": {"duration": 0.00012904172763228416, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_compressor_factory", "lineno": 288, "outcome": "passed", "keywords": ["test_compressor_factory", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013862503692507744, "outcome": "passed"}, "call": {"duration": 0.00014458317309617996, "outcome": "passed"}, "teardown": {"duration": 0.00013062497600913048, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor", "lineno": 325, "outcome": "passed", "keywords": ["test_payload_compressor", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014737481251358986, "outcome": "passed"}, "call": {"duration": 0.00019458401948213577, "outcome": "passed"}, "teardown": {"duration": 0.00014933384954929352, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_changes", "lineno": 366, "outcome": "passed", "keywords": ["test_payload_compressor_changes", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001366245560348034, "outcome": "passed"}, "call": {"duration": 0.00018954183906316757, "outcome": "passed"}, "teardown": {"duration": 0.00011858297511935234, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_payload_compressor_set_compression_level", "lineno": 415, "outcome": "passed", "keywords": ["test_payload_compressor_set_compression_level", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013687508180737495, "outcome": "passed"}, "call": {"duration": 0.00018070824444293976, "outcome": "passed"}, "teardown": {"duration": 0.00015400024130940437, "outcome": "passed"}}, {"nodeid": "tests/unit/test_compression.py::test_compression_efficiency", "lineno": 440, "outcome": "passed", "keywords": ["test_compression_efficiency", "test_compression.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013841688632965088, "outcome": "passed"}, "call": {"duration": 0.0002425829879939556, "outcome": "passed"}, "teardown": {"duration": 0.0001227082684636116, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_creation", "lineno": 16, "outcome": "passed", "keywords": ["test_conflict_metadata_creation", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014474987983703613, "outcome": "passed"}, "call": {"duration": 0.0001300000585615635, "outcome": "passed"}, "teardown": {"duration": 0.0001437920145690441, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_to_dict", "lineno": 38, "outcome": "passed", "keywords": ["test_conflict_metadata_to_dict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015074992552399635, "outcome": "passed"}, "call": {"duration": 0.00013683270663022995, "outcome": "passed"}, "teardown": {"duration": 0.00012929178774356842, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_metadata_from_dict", "lineno": 65, "outcome": "passed", "keywords": ["test_conflict_metadata_from_dict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013975007459521294, "outcome": "passed"}, "call": {"duration": 0.00014516711235046387, "outcome": "passed"}, "teardown": {"duration": 0.00011949986219406128, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_creation", "lineno": 92, "outcome": "passed", "keywords": ["test_conflict_audit_log_creation", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001343749463558197, "outcome": "passed"}, "call": {"duration": 0.00013516703620553017, "outcome": "passed"}, "teardown": {"duration": 0.00012641679495573044, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_log_conflict", "lineno": 99, "outcome": "passed", "keywords": ["test_conflict_audit_log_log_conflict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013983296230435371, "outcome": "passed"}, "call": {"duration": 0.0001492910087108612, "outcome": "passed"}, "teardown": {"duration": 0.0001327916979789734, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_table", "lineno": 123, "outcome": "passed", "keywords": ["test_conflict_audit_log_get_conflicts_for_table", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015695812180638313, "outcome": "passed"}, "call": {"duration": 0.0001449999399483204, "outcome": "passed"}, "teardown": {"duration": 0.00015158392488956451, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_record", "lineno": 161, "outcome": "passed", "keywords": ["test_conflict_audit_log_get_conflicts_for_record", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001254999078810215, "outcome": "passed"}, "call": {"duration": 0.00014312472194433212, "outcome": "passed"}, "teardown": {"duration": 0.00010900013148784637, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_get_conflicts_for_client", "lineno": 199, "outcome": "passed", "keywords": ["test_conflict_audit_log_get_conflicts_for_client", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011804187670350075, "outcome": "passed"}, "call": {"duration": 0.00011570937931537628, "outcome": "passed"}, "teardown": {"duration": 0.00011487491428852081, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_audit_log_export_import", "lineno": 237, "outcome": "passed", "keywords": ["test_conflict_audit_log_export_import", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010795798152685165, "outcome": "passed"}, "call": {"duration": 0.00015691714361310005, "outcome": "passed"}, "teardown": {"duration": 0.00011220807209610939, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_last_write_wins_resolver", "lineno": 276, "outcome": "passed", "keywords": ["test_last_write_wins_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011879205703735352, "outcome": "passed"}, "call": {"duration": 0.00012458395212888718, "outcome": "passed"}, "teardown": {"duration": 0.00012583378702402115, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_server_wins_resolver", "lineno": 302, "outcome": "passed", "keywords": ["test_server_wins_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00016499962657690048, "outcome": "passed"}, "call": {"duration": 0.00015650037676095963, "outcome": "passed"}, "teardown": {"duration": 0.00011712498962879181, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_client_wins_resolver", "lineno": 328, "outcome": "passed", "keywords": ["test_client_wins_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001177079975605011, "outcome": "passed"}, "call": {"duration": 0.0001227082684636116, "outcome": "passed"}, "teardown": {"duration": 0.00011516734957695007, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_merge_fields_resolver", "lineno": 354, "outcome": "passed", "keywords": ["test_merge_fields_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010458286851644516, "outcome": "passed"}, "call": {"duration": 0.00011833338066935539, "outcome": "passed"}, "teardown": {"duration": 0.0001254999078810215, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_custom_merge_resolver", "lineno": 386, "outcome": "passed", "keywords": ["test_custom_merge_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010899966582655907, "outcome": "passed"}, "call": {"duration": 0.00011595804244279861, "outcome": "passed"}, "teardown": {"duration": 0.00010454189032316208, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_creation", "lineno": 449, "outcome": "passed", "keywords": ["test_conflict_manager_creation", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015166588127613068, "outcome": "passed"}, "call": {"duration": 0.00013899989426136017, "outcome": "passed"}, "teardown": {"duration": 0.00010558310896158218, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_register_resolver", "lineno": 459, "outcome": "passed", "keywords": ["test_conflict_manager_register_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012425007298588753, "outcome": "passed"}, "call": {"duration": 8.733384311199188e-05, "outcome": "passed"}, "teardown": {"duration": 9.816698729991913e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_set_default_resolver", "lineno": 469, "outcome": "passed", "keywords": ["test_conflict_manager_set_default_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001477082259953022, "outcome": "passed"}, "call": {"duration": 0.00010729208588600159, "outcome": "passed"}, "teardown": {"duration": 0.00010270904749631882, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_conflict", "lineno": 479, "outcome": "passed", "keywords": ["test_conflict_manager_resolve_conflict", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00014979112893342972, "outcome": "passed"}, "call": {"duration": 0.00010745925828814507, "outcome": "passed"}, "teardown": {"duration": 0.00011737504974007607, "outcome": "passed"}}, {"nodeid": "tests/unit/test_conflict_resolution.py::test_conflict_manager_resolve_with_specific_resolver", "lineno": 512, "outcome": "passed", "keywords": ["test_conflict_manager_resolve_with_specific_resolver", "test_conflict_resolution.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001304158940911293, "outcome": "passed"}, "call": {"duration": 9.82913188636303e-05, "outcome": "passed"}, "teardown": {"duration": 0.00010066712275147438, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_database_creation", "lineno": 11, "outcome": "passed", "keywords": ["test_database_creation", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012570898979902267, "outcome": "passed"}, "call": {"duration": 0.0001237909309566021, "outcome": "passed"}, "teardown": {"duration": 9.295810014009476e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_insert_record", "lineno": 20, "outcome": "passed", "keywords": ["test_insert_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015962496399879456, "outcome": "passed"}, "call": {"duration": 0.00010108388960361481, "outcome": "passed"}, "teardown": {"duration": 8.691707625985146e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_insert_duplicate_primary_key", "lineno": 43, "outcome": "passed", "keywords": ["test_insert_duplicate_primary_key", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015187496319413185, "outcome": "passed"}, "call": {"duration": 0.00013679172843694687, "outcome": "passed"}, "teardown": {"duration": 0.00010529113933444023, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_update_record", "lineno": 57, "outcome": "passed", "keywords": ["test_update_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.000164874829351902, "outcome": "passed"}, "call": {"duration": 0.00011370796710252762, "outcome": "passed"}, "teardown": {"duration": 0.00011024996638298035, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_update_nonexistent_record", "lineno": 80, "outcome": "passed", "keywords": ["test_update_nonexistent_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00015816697850823402, "outcome": "passed"}, "call": {"duration": 0.00010187504813075066, "outcome": "passed"}, "teardown": {"duration": 9.408360347151756e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_delete_record", "lineno": 94, "outcome": "passed", "keywords": ["test_delete_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001677917316555977, "outcome": "passed"}, "call": {"duration": 0.0001032077707350254, "outcome": "passed"}, "teardown": {"duration": 9.449990466237068e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_delete_nonexistent_record", "lineno": 106, "outcome": "passed", "keywords": ["test_delete_nonexistent_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001633339561522007, "outcome": "passed"}, "call": {"duration": 9.212503209710121e-05, "outcome": "passed"}, "teardown": {"duration": 9.1583002358675e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_get_record", "lineno": 113, "outcome": "passed", "keywords": ["test_get_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019695796072483063, "outcome": "passed"}, "call": {"duration": 8.808402344584465e-05, "outcome": "passed"}, "teardown": {"duration": 8.858414366841316e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_get_nonexistent_record", "lineno": 124, "outcome": "passed", "keywords": ["test_get_nonexistent_record", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001632501371204853, "outcome": "passed"}, "call": {"duration": 9.44170169532299e-05, "outcome": "passed"}, "teardown": {"duration": 9.454227983951569e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_query_records", "lineno": 133, "outcome": "passed", "keywords": ["test_query_records", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001565827988088131, "outcome": "passed"}, "call": {"duration": 9.591598063707352e-05, "outcome": "passed"}, "teardown": {"duration": 9.10409726202488e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_query_with_limit", "lineno": 144, "outcome": "passed", "keywords": ["test_query_with_limit", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00022141588851809502, "outcome": "passed"}, "call": {"duration": 0.00012954138219356537, "outcome": "passed"}, "teardown": {"duration": 0.00014291703701019287, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_query_no_results", "lineno": 154, "outcome": "passed", "keywords": ["test_query_no_results", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00020391680300235748, "outcome": "passed"}, "call": {"duration": 0.0001244167797267437, "outcome": "passed"}, "teardown": {"duration": 0.00013954192399978638, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_transaction_commit", "lineno": 163, "outcome": "passed", "keywords": ["test_transaction_commit", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00018970808014273643, "outcome": "passed"}, "call": {"duration": 0.00016129203140735626, "outcome": "passed"}, "teardown": {"duration": 0.00012229196727275848, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_transaction_rollback", "lineno": 186, "outcome": "passed", "keywords": ["test_transaction_rollback", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00019333278760313988, "outcome": "passed"}, "call": {"duration": 0.00019091740250587463, "outcome": "passed"}, "teardown": {"duration": 0.00012008287012577057, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_transaction_explicit_rollback", "lineno": 210, "outcome": "passed", "keywords": ["test_transaction_explicit_rollback", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00020408397540450096, "outcome": "passed"}, "call": {"duration": 0.00013137515634298325, "outcome": "passed"}, "teardown": {"duration": 0.0001160833053290844, "outcome": "passed"}}, {"nodeid": "tests/unit/test_database.py::test_change_log", "lineno": 232, "outcome": "passed", "keywords": ["test_change_log", "test_database.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001882920041680336, "outcome": "passed"}, "call": {"duration": 0.00012916605919599533, "outcome": "passed"}, "teardown": {"duration": 0.00012474972754716873, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_mode_from_battery_level", "lineno": 40, "outcome": "passed", "keywords": ["test_power_mode_from_battery_level", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012149987742304802, "outcome": "passed"}, "call": {"duration": 0.00011916691437363625, "outcome": "passed"}, "teardown": {"duration": 0.00011599995195865631, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_profile_creation", "lineno": 62, "outcome": "passed", "keywords": ["test_power_profile_creation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00012358417734503746, "outcome": "passed"}, "call": {"duration": 0.0001250840723514557, "outcome": "passed"}, "teardown": {"duration": 0.00011462485417723656, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_profile_get_default_profile", "lineno": 79, "outcome": "passed", "keywords": ["test_power_profile_get_default_profile", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00011133309453725815, "outcome": "passed"}, "call": {"duration": 0.00012266682460904121, "outcome": "passed"}, "teardown": {"duration": 0.00010816613212227821, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_deferred_operation_creation", "lineno": 105, "outcome": "passed", "keywords": ["test_deferred_operation_creation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001172088086605072, "outcome": "passed"}, "call": {"duration": 0.00011987471953034401, "outcome": "passed"}, "teardown": {"duration": 0.00010862480849027634, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_deferred_operation_execute", "lineno": 127, "outcome": "passed", "keywords": ["test_deferred_operation_execute", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00013195909559726715, "outcome": "passed"}, "call": {"duration": 0.00012749992311000824, "outcome": "passed"}, "teardown": {"duration": 0.00013166572898626328, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_creation", "lineno": 163, "outcome": "passed", "keywords": ["test_power_manager_creation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001199580729007721, "outcome": "passed"}, "call": {"duration": 0.00015379209071397781, "outcome": "passed"}, "teardown": {"duration": 0.00010391697287559509, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_set_power_mode", "lineno": 176, "outcome": "passed", "keywords": ["test_power_manager_set_power_mode", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010220799595117569, "outcome": "passed"}, "call": {"duration": 0.0001216251403093338, "outcome": "passed"}, "teardown": {"duration": 0.00010562501847743988, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_set_custom_profile", "lineno": 191, "outcome": "passed", "keywords": ["test_power_manager_set_custom_profile", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010524969547986984, "outcome": "passed"}, "call": {"duration": 0.00012345798313617706, "outcome": "passed"}, "teardown": {"duration": 0.00010591698810458183, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_update_battery_status", "lineno": 215, "outcome": "passed", "keywords": ["test_power_manager_update_battery_status", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010624993592500687, "outcome": "passed"}, "call": {"duration": 0.00012237485498189926, "outcome": "passed"}, "teardown": {"duration": 9.287474676966667e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_should_defer_operation", "lineno": 235, "outcome": "passed", "keywords": ["test_power_manager_should_defer_operation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 8.070934563875198e-05, "outcome": "passed"}, "call": {"duration": 0.00010587507858872414, "outcome": "passed"}, "teardown": {"duration": 7.908279076218605e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_enqueue_operation", "lineno": 254, "outcome": "passed", "keywords": ["test_power_manager_enqueue_operation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 7.966719567775726e-05, "outcome": "passed"}, "call": {"duration": 9.795790538191795e-05, "outcome": "passed"}, "teardown": {"duration": 8.012494072318077e-05, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_worker", "lineno": 275, "outcome": "passed", "keywords": ["test_power_manager_worker", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00010579219087958336, "outcome": "passed"}, "call": {"duration": 1.0074036661535501, "outcome": "passed"}, "teardown": {"duration": 0.0014516673982143402, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_power_manager_should_execute_now", "lineno": 302, "outcome": "passed", "keywords": ["test_power_manager_should_execute_now", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0010264590382575989, "outcome": "passed"}, "call": {"duration": 0.0012642499059438705, "outcome": "passed"}, "teardown": {"duration": 0.0008405409753322601, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_creation", "lineno": 345, "outcome": "passed", "keywords": ["test_battery_aware_client_creation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0008258749730885029, "outcome": "passed"}, "call": {"duration": 0.0009337081573903561, "outcome": "passed"}, "teardown": {"duration": 0.0010034171864390373, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_method_proxy", "lineno": 363, "outcome": "passed", "keywords": ["test_battery_aware_client_method_proxy", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0009244997054338455, "outcome": "passed"}, "call": {"duration": 0.0008979588747024536, "outcome": "passed"}, "teardown": {"duration": 0.0007482497021555901, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_deferred_operation", "lineno": 382, "outcome": "passed", "keywords": ["test_battery_aware_client_deferred_operation", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0007916660979390144, "outcome": "passed"}, "call": {"duration": 0.0011365828104317188, "outcome": "passed"}, "teardown": {"duration": 0.0007429998368024826, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_sync_timer", "lineno": 409, "outcome": "passed", "keywords": ["test_battery_aware_client_sync_timer", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0007799998857080936, "outcome": "passed"}, "call": {"duration": 0.2557116667740047, "outcome": "passed"}, "teardown": {"duration": 0.0012893341481685638, "outcome": "passed"}}, {"nodeid": "tests/unit/test_power_manager.py::test_battery_aware_client_force_sync", "lineno": 450, "outcome": "passed", "keywords": ["test_battery_aware_client_force_sync", "test_power_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0010768752545118332, "outcome": "passed"}, "call": {"duration": 0.001275333110243082, "outcome": "passed"}, "teardown": {"duration": 0.0010524159297347069, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_creation", "lineno": 86, "outcome": "passed", "keywords": ["test_schema_migration_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0010382919572293758, "outcome": "passed"}, "call": {"duration": 0.0009562922641634941, "outcome": "passed"}, "teardown": {"duration": 0.0008844579569995403, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migration_to_from_dict", "lineno": 100, "outcome": "passed", "keywords": ["test_schema_migration_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0009480840526521206, "outcome": "passed"}, "call": {"duration": 0.0012852908112108707, "outcome": "passed"}, "teardown": {"duration": 0.00045737484470009804, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_creation", "lineno": 129, "outcome": "passed", "keywords": ["test_column_change_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00038083409890532494, "outcome": "passed"}, "call": {"duration": 0.0007195840589702129, "outcome": "passed"}, "teardown": {"duration": 0.0005441657267510891, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_column_change_to_from_dict", "lineno": 154, "outcome": "passed", "keywords": ["test_column_change_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.000555042177438736, "outcome": "passed"}, "call": {"duration": 0.0007030419073998928, "outcome": "passed"}, "teardown": {"duration": 0.0005855001509189606, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_creation", "lineno": 185, "outcome": "passed", "keywords": ["test_table_change_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0005954168736934662, "outcome": "passed"}, "call": {"duration": 0.0006308336742222309, "outcome": "passed"}, "teardown": {"duration": 0.0005502081476151943, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_table_change_to_from_dict", "lineno": 224, "outcome": "passed", "keywords": ["test_table_change_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0005177091807126999, "outcome": "passed"}, "call": {"duration": 0.0005584591999650002, "outcome": "passed"}, "teardown": {"duration": 0.0007439996115863323, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_creation", "lineno": 264, "outcome": "passed", "keywords": ["test_migration_plan_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0007662912830710411, "outcome": "passed"}, "call": {"duration": 0.0006672092713415623, "outcome": "passed"}, "teardown": {"duration": 0.0004951250739395618, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_migration_plan_to_from_dict", "lineno": 309, "outcome": "passed", "keywords": ["test_migration_plan_to_from_dict", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0004923329688608646, "outcome": "passed"}, "call": {"duration": 0.00044741714373230934, "outcome": "passed"}, "teardown": {"duration": 0.00035308441147208214, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_creation", "lineno": 363, "outcome": "passed", "keywords": ["test_schema_version_manager_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003661252558231354, "outcome": "passed"}, "call": {"duration": 0.00038229115307331085, "outcome": "passed"}, "teardown": {"duration": 0.00036845915019512177, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_schema", "lineno": 372, "outcome": "passed", "keywords": ["test_schema_version_manager_register_schema", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00037112459540367126, "outcome": "passed"}, "call": {"duration": 0.0005439580418169498, "outcome": "passed"}, "teardown": {"duration": 0.00037908321246504784, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_register_migration_plan", "lineno": 395, "outcome": "passed", "keywords": ["test_schema_version_manager_register_migration_plan", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003654998727142811, "outcome": "passed"}, "call": {"duration": 0.00035970890894532204, "outcome": "passed"}, "teardown": {"duration": 0.00032112468034029007, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_can_migrate", "lineno": 422, "outcome": "passed", "keywords": ["test_schema_version_manager_can_migrate", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003608330152928829, "outcome": "passed"}, "call": {"duration": 0.0003925831988453865, "outcome": "passed"}, "teardown": {"duration": 0.0004119998775422573, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_version_manager_find_migration_path", "lineno": 465, "outcome": "passed", "keywords": ["test_schema_version_manager_find_migration_path", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003820420242846012, "outcome": "passed"}, "call": {"duration": 0.0002827080897986889, "outcome": "passed"}, "teardown": {"duration": 0.00029120780527591705, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_creation", "lineno": 501, "outcome": "passed", "keywords": ["test_schema_migrator_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002699578180909157, "outcome": "passed"}, "call": {"duration": 0.00027295760810375214, "outcome": "passed"}, "teardown": {"duration": 0.0002922923304140568, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_create_migration_plan", "lineno": 509, "outcome": "passed", "keywords": ["test_schema_migrator_create_migration_plan", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00030791712924838066, "outcome": "passed"}, "call": {"duration": 0.00038733426481485367, "outcome": "passed"}, "teardown": {"duration": 0.0002835826016962528, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_schema_changes", "lineno": 554, "outcome": "passed", "keywords": ["test_schema_migrator_analyze_schema_changes", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002855421043932438, "outcome": "passed"}, "call": {"duration": 0.00035687489435076714, "outcome": "passed"}, "teardown": {"duration": 0.0002903747372329235, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_analyze_column_changes", "lineno": 583, "outcome": "passed", "keywords": ["test_schema_migrator_analyze_column_changes", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003099581226706505, "outcome": "passed"}, "call": {"duration": 0.0003259158693253994, "outcome": "passed"}, "teardown": {"duration": 0.00026250025257468224, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_migrator_apply_migration", "lineno": 607, "outcome": "passed", "keywords": ["test_schema_migrator_apply_migration", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003070412203669548, "outcome": "passed"}, "call": {"duration": 0.0005045831203460693, "outcome": "passed"}, "teardown": {"duration": 0.00028804223984479904, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_creation", "lineno": 658, "outcome": "passed", "keywords": ["test_schema_synchronizer_creation", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00027233362197875977, "outcome": "passed"}, "call": {"duration": 0.00028129108250141144, "outcome": "passed"}, "teardown": {"duration": 0.00025899987667798996, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_client_upgrade_plan", "lineno": 668, "outcome": "passed", "keywords": ["test_schema_synchronizer_get_client_upgrade_plan", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00029054097831249237, "outcome": "passed"}, "call": {"duration": 0.00033733295276761055, "outcome": "passed"}, "teardown": {"duration": 0.0002455422654747963, "outcome": "passed"}}, {"nodeid": "tests/unit/test_schema_manager.py::test_schema_synchronizer_get_schema_compatibility", "lineno": 710, "outcome": "passed", "keywords": ["test_schema_synchronizer_get_schema_compatibility", "test_schema_manager.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00025962525978684425, "outcome": "passed"}, "call": {"duration": 0.0003581661731004715, "outcome": "passed"}, "teardown": {"duration": 0.00029733404517173767, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_no_loss", "lineno": 17, "outcome": "passed", "keywords": ["test_network_simulator_no_loss", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0002766670659184456, "outcome": "passed"}, "call": {"duration": 0.0002747499383985996, "outcome": "passed"}, "teardown": {"duration": 0.0002509579062461853, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_with_loss", "lineno": 25, "outcome": "passed", "keywords": ["test_network_simulator_with_loss", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.000262207817286253, "outcome": "passed"}, "call": {"duration": 0.00026458268985152245, "outcome": "passed"}, "teardown": {"duration": 0.00023745791986584663, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_network_simulator_with_latency", "lineno": 33, "outcome": "passed", "keywords": ["test_network_simulator_with_latency", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00021137483417987823, "outcome": "passed"}, "call": {"duration": 0.10656662471592426, "outcome": "passed"}, "teardown": {"duration": 0.0013192077167332172, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_creation", "lineno": 48, "outcome": "passed", "keywords": ["test_sync_state_creation", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0014594579115509987, "outcome": "passed"}, "call": {"duration": 0.0012662499211728573, "outcome": "passed"}, "teardown": {"duration": 0.0010568327270448208, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_update_table_change_id", "lineno": 58, "outcome": "passed", "keywords": ["test_sync_state_update_table_change_id", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0011054580099880695, "outcome": "passed"}, "call": {"duration": 0.0011283750645816326, "outcome": "passed"}, "teardown": {"duration": 0.0013209590688347816, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_get_table_change_id", "lineno": 75, "outcome": "passed", "keywords": ["test_sync_state_get_table_change_id", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.001191041897982359, "outcome": "passed"}, "call": {"duration": 0.001009833998978138, "outcome": "passed"}, "teardown": {"duration": 0.0007927920669317245, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_update_version_vector", "lineno": 87, "outcome": "passed", "keywords": ["test_sync_state_update_version_vector", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0007837922312319279, "outcome": "passed"}, "call": {"duration": 0.0008897497318685055, "outcome": "passed"}, "teardown": {"duration": 0.0008172090165317059, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_get_version_vector", "lineno": 114, "outcome": "passed", "keywords": ["test_sync_state_get_version_vector", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.001099207904189825, "outcome": "passed"}, "call": {"duration": 0.0008274158462882042, "outcome": "passed"}, "teardown": {"duration": 0.0006369170732796192, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_state_mark_sync_complete", "lineno": 131, "outcome": "passed", "keywords": ["test_sync_state_mark_sync_complete", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0007592500187456608, "outcome": "passed"}, "call": {"duration": 0.0006178342737257481, "outcome": "passed"}, "teardown": {"duration": 0.0006080842576920986, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_request_from_dict", "lineno": 147, "outcome": "failed", "keywords": ["test_sync_request_from_dict", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0005754590965807438, "outcome": "passed"}, "call": {"duration": 0.0007825419306755066, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/sync/change_tracker.py", "lineno": 46, "message": "KeyError: 'old_data'"}, "traceback": [{"path": "tests/unit/test_sync_protocol.py", "lineno": 173, "message": ""}, {"path": "syncdb/sync/sync_protocol.py", "lineno": 75, "message": "in from_dict"}, {"path": "syncdb/sync/change_tracker.py", "lineno": 46, "message": "KeyError"}], "longrepr": "def test_sync_request_from_dict():\n        \"\"\"Test creating a sync request from a dictionary.\"\"\"\n        request_dict = {\n            \"client_id\": \"client1\",\n            \"table_change_ids\": {\"users\": 5, \"tasks\": 3},\n            \"client_changes\": {\n                \"users\": [\n                    {\n                        \"id\": 0,\n                        \"table_name\": \"users\",\n                        \"primary_key\": [1],\n                        \"operation\": \"insert\",\n                        \"timestamp\": 123456789.0,\n                        \"client_id\": \"client1\",\n                        \"old_record\": None,\n                        \"new_record\": {\"id\": 1, \"name\": \"Alice\"}\n                    }\n                ]\n            },\n            \"version_vectors\": {\n                \"users\": {\"client1\": 1},\n                \"tasks\": {\"client1\": 1}\n            }\n        }\n    \n>       request = SyncRequest.from_dict(request_dict)\n\ntests/unit/test_sync_protocol.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/sync/sync_protocol.py:75: in from_dict\n    client_changes[table].append(ChangeRecord.from_dict(c))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'syncdb.sync.change_tracker.ChangeRecord'>\ndata = {'client_id': 'client1', 'id': 0, 'new_record': {'id': 1, 'name': 'Alice'}, 'old_record': None, ...}\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> 'ChangeRecord':\n        \"\"\"Create a ChangeRecord from a dictionary.\"\"\"\n        return cls(\n            id=data[\"id\"],\n            table_name=data[\"table_name\"],\n            primary_key=tuple(data[\"primary_key\"]),\n            operation=data[\"operation\"],\n            timestamp=data[\"timestamp\"],\n            client_id=data[\"client_id\"],\n>           old_data=data[\"old_data\"],\n            new_data=data[\"new_data\"]\n        )\nE       KeyError: 'old_data'\n\nsyncdb/sync/change_tracker.py:46: KeyError"}, "teardown": {"duration": 0.0003509167581796646, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_request_to_dict", "lineno": 183, "outcome": "passed", "keywords": ["test_sync_request_to_dict", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00026529235765337944, "outcome": "passed"}, "call": {"duration": 0.0002360837534070015, "outcome": "passed"}, "teardown": {"duration": 0.00018225004896521568, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_response_from_dict", "lineno": 209, "outcome": "failed", "keywords": ["test_sync_response_from_dict", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0001987079158425331, "outcome": "passed"}, "call": {"duration": 0.00018733413890004158, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/syncdb/sync/change_tracker.py", "lineno": 46, "message": "KeyError: 'old_data'"}, "traceback": [{"path": "tests/unit/test_sync_protocol.py", "lineno": 236, "message": ""}, {"path": "syncdb/sync/sync_protocol.py", "lineno": 120, "message": "in from_dict"}, {"path": "syncdb/sync/change_tracker.py", "lineno": 46, "message": "KeyError"}], "longrepr": "def test_sync_response_from_dict():\n        \"\"\"Test creating a sync response from a dictionary.\"\"\"\n        response_dict = {\n            \"server_changes\": {\n                \"users\": [\n                    {\n                        \"id\": 0,\n                        \"table_name\": \"users\",\n                        \"primary_key\": [1],\n                        \"operation\": \"insert\",\n                        \"timestamp\": 123456789.0,\n                        \"client_id\": \"server\",\n                        \"old_record\": None,\n                        \"new_record\": {\"id\": 1, \"name\": \"Alice\"}\n                    }\n                ]\n            },\n            \"conflicts\": {},\n            \"success\": True,\n            \"current_change_ids\": {\"users\": 0, \"tasks\": 0},\n            \"version_vectors\": {\n                \"users\": {\"server\": 1},\n                \"tasks\": {\"server\": 0}\n            }\n        }\n    \n>       response = SyncResponse.from_dict(response_dict)\n\ntests/unit/test_sync_protocol.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsyncdb/sync/sync_protocol.py:120: in from_dict\n    server_changes[table].append(ChangeRecord.from_dict(c))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ncls = <class 'syncdb.sync.change_tracker.ChangeRecord'>\ndata = {'client_id': 'server', 'id': 0, 'new_record': {'id': 1, 'name': 'Alice'}, 'old_record': None, ...}\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -> 'ChangeRecord':\n        \"\"\"Create a ChangeRecord from a dictionary.\"\"\"\n        return cls(\n            id=data[\"id\"],\n            table_name=data[\"table_name\"],\n            primary_key=tuple(data[\"primary_key\"]),\n            operation=data[\"operation\"],\n            timestamp=data[\"timestamp\"],\n            client_id=data[\"client_id\"],\n>           old_data=data[\"old_data\"],\n            new_data=data[\"new_data\"]\n        )\nE       KeyError: 'old_data'\n\nsyncdb/sync/change_tracker.py:46: KeyError"}, "teardown": {"duration": 0.00025787483900785446, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_response_to_dict", "lineno": 247, "outcome": "passed", "keywords": ["test_sync_response_to_dict", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00017120828852057457, "outcome": "passed"}, "call": {"duration": 0.00018129218369722366, "outcome": "passed"}, "teardown": {"duration": 0.0002286657691001892, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_creation", "lineno": 275, "outcome": "passed", "keywords": ["test_sync_engine_creation", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003893338143825531, "outcome": "passed"}, "call": {"duration": 0.0002227500081062317, "outcome": "passed"}, "teardown": {"duration": 0.00024129170924425125, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_get_or_create_client_state", "lineno": 289, "outcome": "passed", "keywords": ["test_sync_engine_get_or_create_client_state", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00017954222857952118, "outcome": "passed"}, "call": {"duration": 0.00019225012511014938, "outcome": "passed"}, "teardown": {"duration": 0.0001731659285724163, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_process_sync_request", "lineno": 308, "outcome": "failed", "keywords": ["test_sync_engine_process_sync_request", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00034895818680524826, "outcome": "passed"}, "call": {"duration": 0.00041791703552007675, "outcome": "failed", "crash": {"path": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/tests/unit/test_sync_protocol.py", "lineno": 335, "message": "AssertionError: assert 'users' in {}\n +  where {} = SyncResponse(server_changes={}, conflicts={}, success=True, error_message=None, current_change_ids={}, version_vectors={}).server_changes"}, "traceback": [{"path": "tests/unit/test_sync_protocol.py", "lineno": 335, "message": "AssertionError"}], "stdout": "Processing sync request from client: client1\n", "longrepr": "sync_engine = <syncdb.sync.sync_protocol.SyncEngine object at 0x1020bbe80>\n\n    def test_sync_engine_process_sync_request(sync_engine):\n        \"\"\"Test processing a sync request.\"\"\"\n        # Create a sync request\n        request = SyncRequest(\n            client_id=\"client1\",\n            table_change_ids={\"users\": -1, \"tasks\": -1, \"notes\": -1},\n            client_changes={},\n            version_vectors={\n                \"users\": {\"client1\": 0},\n                \"tasks\": {\"client1\": 0},\n                \"notes\": {\"client1\": 0}\n            }\n        )\n    \n        # Convert to JSON\n        request_json = json.dumps(request.to_dict())\n    \n        # Process the request\n        response_json = sync_engine.process_sync_request(request_json)\n    \n        # Parse the response\n        response_dict = json.loads(response_json)\n        response = SyncResponse.from_dict(response_dict)\n    \n        # Check the response\n        assert response.success is True\n>       assert \"users\" in response.server_changes\nE       AssertionError: assert 'users' in {}\nE        +  where {} = SyncResponse(server_changes={}, conflicts={}, success=True, error_message=None, current_change_ids={}, version_vectors={}).server_changes\n\ntests/unit/test_sync_protocol.py:335: AssertionError"}, "teardown": {"duration": 0.0002382081001996994, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_create_sync_request", "lineno": 344, "outcome": "passed", "keywords": ["test_sync_engine_create_sync_request", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00035187508910894394, "outcome": "passed"}, "call": {"duration": 0.0003032083623111248, "outcome": "passed"}, "teardown": {"duration": 0.0002449578605592251, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_process_sync_response", "lineno": 366, "outcome": "passed", "keywords": ["test_sync_engine_process_sync_response", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.00035420898348093033, "outcome": "passed"}, "call": {"duration": 0.00029404181987047195, "outcome": "passed", "stdout": "Processing 1 server changes for table: users\nApplied server change: insert on (3,)\nUpdated client change ID for table users to 0\nUpdated client version vector for table users\n"}, "teardown": {"duration": 0.00019450020045042038, "outcome": "passed"}}, {"nodeid": "tests/unit/test_sync_protocol.py::test_sync_engine_with_changes", "lineno": 416, "outcome": "passed", "keywords": ["test_sync_engine_with_changes", "test_sync_protocol.py", "unit", "tests", "in_memory_database_mobile_developer", ""], "setup": {"duration": 0.0003277501091361046, "outcome": "passed"}, "call": {"duration": 0.0002698749303817749, "outcome": "passed", "stdout": "Processing sync request from client: client1\n"}, "teardown": {"duration": 0.0002614161930978298, "outcome": "passed"}}], "warnings": [{"message": "Expected None, but tests/performance/test_conflict_resolution.py::test_conflict_resolution_performance[10] returned {'conflict_count': 10, 'sync_time': 0.0017552375793457031, 'conflicts_resolved': 10, 'success': True}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_conflict_resolution.py::test_conflict_resolution_performance[50] returned {'conflict_count': 50, 'sync_time': 0.0074880123138427734, 'conflicts_resolved': 50, 'success': True}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.PLUGGED_IN] returned 3.695487976074219e-05, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_battery_mode_performance[PowerMode.BATTERY_NORMAL] returned 6.389617919921875e-05, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.NONE] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 12038, 'compression_ratio': 0.9993358791300017, 'compression_time': 8.106231689453125e-06, 'decompression_time': 1.4066696166992188e-05}, {'record_type': 2, 'json_size': 4918, 'compressed_size': 3888, 'compression_ratio': 0.7905652704351362, 'compression_time': 0.0005438327789306641, 'decompression_time': 0.0005271434783935547}, {'record_type': 3, 'json_size': 5452, 'compressed_size': 2052, 'compression_ratio': 0.3763756419662509, 'compression_time': 0.00022602081298828125, 'decompression_time': 0.0003058910369873047}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.LOW] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 133, 'compression_ratio': 0.011041009463722398, 'compression_time': 1.7881393432617188e-05, 'decompression_time': 1.621246337890625e-05}, {'record_type': 2, 'json_size': 4918, 'compressed_size': 3893, 'compression_ratio': 0.7915819438796259, 'compression_time': 0.0005381107330322266, 'decompression_time': 0.0004837512969970703}, {'record_type': 3, 'json_size': 5457, 'compressed_size': 2060, 'compression_ratio': 0.37749679310976725, 'compression_time': 0.00022602081298828125, 'decompression_time': 0.0003039836883544922}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.MEDIUM] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 96, 'compression_ratio': 0.007969450439980076, 'compression_time': 4.315376281738281e-05, 'decompression_time': 1.5020370483398438e-05}, {'record_type': 2, 'json_size': 4926, 'compressed_size': 3902, 'compression_ratio': 0.7921234267153877, 'compression_time': 0.0005388259887695312, 'decompression_time': 0.0005021095275878906}, {'record_type': 3, 'json_size': 5447, 'compressed_size': 2060, 'compression_ratio': 0.37818982926381495, 'compression_time': 0.00022602081298828125, 'decompression_time': 0.00030493736267089844}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_compression_performance[CompressionLevel.HIGH] returned [{'record_type': 1, 'json_size': 12046, 'compressed_size': 96, 'compression_ratio': 0.007969450439980076, 'compression_time': 4.1961669921875e-05, 'decompression_time': 1.5020370483398438e-05}, {'record_type': 2, 'json_size': 4899, 'compressed_size': 3891, 'compression_ratio': 0.7942437232088181, 'compression_time': 0.0005421638488769531, 'decompression_time': 0.0004858970642089844}, {'record_type': 3, 'json_size': 5452, 'compressed_size': 2060, 'compression_ratio': 0.37784299339691857, 'compression_time': 0.00023508071899414062, 'decompression_time': 0.0003368854522705078}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}, {"message": "Expected None, but tests/performance/test_performance.py::test_sync_performance[50-100] returned {'record_count': 100, 'change_percent': 50, 'initial_sync_time': 0.003654956817626953, 'incremental_sync_time': 9.012222290039062e-05, 'initial_size': 190, 'incremental_size': 128, 'size_ratio': 0.6736842105263158, 'time_ratio': 0.024657534246575342}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/Users/justinchiu/code/librarybench/projects/in_memory_database/in_memory_database_mobile_developer/.venv/lib/python3.10/site-packages/_pytest/python.py", "lineno": 163}]}