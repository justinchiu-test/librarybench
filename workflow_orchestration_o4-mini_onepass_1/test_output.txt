============================= test session starts ==============================
platform darwin -- Python 3.13.2, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/celine/Research/librarybench
configfile: pyproject.toml
plugins: anyio-4.9.0, json-report-1.5.0, metadata-3.1.1
collected 15 items

tests.py .........F.....                                                 [100%]

=================================== FAILURES ===================================
______________________________ test_task_timeout _______________________________

    def test_task_timeout():
        """Test task timeout functionality."""
    
        def slow_task():
            time.sleep(0.5)
            return "slow result"
    
        task = Task(name="timeout_task", func=slow_task, timeout=0.1)
    
        workflow = Workflow()
        workflow.add_task(task)
    
        with pytest.raises(TaskFailedError, match="timed out"):
>           workflow.run()

tests.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <workflow.Workflow object at 0x10274cd10>

    def run(self):
        self.validate()
        wf_start = datetime.datetime.now()
        status = "success"
        # Results map
        results = {}
        # scheduling waves
        remaining = set(self.tasks.keys())
        # propagate pre-existing successes into results
        for name, task in self.tasks.items():
            if task.state == TaskState.SUCCESS:
                results[name] = task.result
        try:
            while remaining:
                # check for dependency failures
                for name in list(remaining):
                    task = self.tasks[name]
                    # if any dep failed, mark failure
                    if any(self.tasks[d].state == TaskState.FAILURE for d in task.dependencies):
                        task.state = TaskState.FAILURE
                        task.error = TaskFailedError(f"Task {name} failed due to dependency failure")
                        remaining.remove(name)
                # find ready tasks
                ready = []
                for name in remaining:
                    task = self.tasks[name]
                    if task.state == TaskState.PENDING and all(self.tasks[d].state == TaskState.SUCCESS for d in task.dependencies):
                        ready.append(task)
                if not ready:
                    break
                # execute in parallel
                with ThreadPoolExecutor(max_workers=len(ready)) as executor:
                    futures = {executor.submit(self._run_task, task): task for task in ready}
                    for future in as_completed(futures):
                        task = futures[future]
                        # collect result
                        if task.state == TaskState.SUCCESS:
                            results[task.name] = task.result
                # remove done
                for task in ready:
                    if task.state in (TaskState.SUCCESS, TaskState.FAILURE):
                        remaining.discard(task.name)
            # after loop, check failures
            for task in self.tasks.values():
                if task.state == TaskState.FAILURE:
                    status = "failure"
>                   raise TaskFailedError(f"Task {task.name} failed")
E                   workflow.TaskFailedError: Task timeout_task failed

workflow.py:208: TaskFailedError

During handling of the above exception, another exception occurred:

    def test_task_timeout():
        """Test task timeout functionality."""
    
        def slow_task():
            time.sleep(0.5)
            return "slow result"
    
        task = Task(name="timeout_task", func=slow_task, timeout=0.1)
    
        workflow = Workflow()
        workflow.add_task(task)
    
>       with pytest.raises(TaskFailedError, match="timed out"):
E       AssertionError: Regex pattern did not match.
E        Regex: 'timed out'
E        Input: 'Task timeout_task failed'

tests.py:257: AssertionError
--------------------------------- JSON report ----------------------------------
report saved to: report.json
=========================== short test summary info ============================
FAILED tests.py::test_task_timeout - AssertionError: Regex pattern did not ma...
========================= 1 failed, 14 passed in 0.86s =========================
